#include "protocligs.h"
CProtoCliGS::CProtoCliGS()
{
    m_vecMsgList.clear() ;
	memset(m_EncodeFuncArray, 0, sizeof(m_EncodeFuncArray));
	memset(m_DecodeFuncArray, 0, sizeof(m_DecodeFuncArray));
	m_iMaxPkgSize = 0;
	Init();
}

CProtoCliGS * CProtoCliGS::Instance()
{
   static CProtoCliGS oInst;
   return &oInst;
}

CProtoCliGS::~CProtoCliGS()
{
}

INT32 CProtoCliGS::Encode(INT32 iMsgID, void *pHost, CHAR *pNet, INT32 iNetSize)
{
	m_oData.Prepare(pNet, iNetSize, 1, 3, 2);

	EnFuncCProtoCliGS pfnEncode = FindEncodeFunc(iMsgID);
	if(NULL == pfnEncode)
		return -1;

	return (*pfnEncode)(pHost, &m_oData);
}

INT32 CProtoCliGS::Decode(INT32 iMsgID, CHAR *pNet,INT32 iNetSize, void *pHost, INT32 iHostSize)
{
	m_oData.Prepare(pNet, iNetSize, 1, 3, 2);
	if(iHostSize < m_iMaxPkgSize)
		return -1;

	DeFuncCProtoCliGS pfnDecode = FindDecodeFunc(iMsgID);
	if(NULL == pfnDecode)
		return -1;

	return (*pfnDecode)(pHost, &m_oData);
}

EnFuncCProtoCliGS CProtoCliGS::FindEncodeFunc(INT32 iMsgID)
{
	if(iMsgID - PROTOCLIGS_MSGID_OFFSET >= PROTOCLIGS_MSGID_RANGE)
		return NULL;
	return m_EncodeFuncArray[iMsgID - PROTOCLIGS_MSGID_OFFSET];
}

DeFuncCProtoCliGS CProtoCliGS::FindDecodeFunc(INT32 iMsgID)
{
	if(iMsgID - PROTOCLIGS_MSGID_OFFSET >= PROTOCLIGS_MSGID_RANGE)
		return NULL;
	return m_DecodeFuncArray[iMsgID - PROTOCLIGS_MSGID_OFFSET];
}

BOOL CProtoCliGS::Init()
{
	memset(m_EncodeFuncArray, 0, sizeof(m_EncodeFuncArray));
	memset(m_DecodeFuncArray, 0, sizeof(m_DecodeFuncArray));

	m_EncodeFuncArray[CLIGS_ENTERGS_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ENTERGS_REQ;
	m_DecodeFuncArray[CLIGS_ENTERGS_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ENTERGS_REQ;
	m_vecMsgList.push_back(CLIGS_ENTERGS_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ENTERGS_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ENTERGS_REQ);

	m_EncodeFuncArray[CLIGS_ENTERGS_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ENTERGS_ACK;
	m_DecodeFuncArray[CLIGS_ENTERGS_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ENTERGS_ACK;
	m_vecMsgList.push_back(CLIGS_ENTERGS_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ENTERGS_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ENTERGS_ACK);

	m_EncodeFuncArray[CLIGS_GET_HERO_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_HERO_INFO_REQ;
	m_DecodeFuncArray[CLIGS_GET_HERO_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_HERO_INFO_REQ;
	m_vecMsgList.push_back(CLIGS_GET_HERO_INFO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_HERO_INFO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_HERO_INFO_REQ);

	m_EncodeFuncArray[CLIGS_GET_HERO_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_HERO_INFO_ACK;
	m_DecodeFuncArray[CLIGS_GET_HERO_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_HERO_INFO_ACK;
	m_vecMsgList.push_back(CLIGS_GET_HERO_INFO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_HERO_INFO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_HERO_INFO_ACK);

	m_EncodeFuncArray[CLIGS_ENTER_HOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ENTER_HOME_REQ;
	m_DecodeFuncArray[CLIGS_ENTER_HOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ENTER_HOME_REQ;
	m_vecMsgList.push_back(CLIGS_ENTER_HOME_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ENTER_HOME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ENTER_HOME_REQ);

	m_EncodeFuncArray[CLIGS_ENTER_HOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ENTER_HOME_ACK;
	m_DecodeFuncArray[CLIGS_ENTER_HOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ENTER_HOME_ACK;
	m_vecMsgList.push_back(CLIGS_ENTER_HOME_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ENTER_HOME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ENTER_HOME_ACK);

	m_EncodeFuncArray[CLIGS_ENTER_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ENTER_INSTANCE_REQ;
	m_DecodeFuncArray[CLIGS_ENTER_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ENTER_INSTANCE_REQ;
	m_vecMsgList.push_back(CLIGS_ENTER_INSTANCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ENTER_INSTANCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ENTER_INSTANCE_REQ);

	m_EncodeFuncArray[CLIGS_ENTER_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ENTER_INSTANCE_ACK;
	m_DecodeFuncArray[CLIGS_ENTER_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ENTER_INSTANCE_ACK;
	m_vecMsgList.push_back(CLIGS_ENTER_INSTANCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ENTER_INSTANCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ENTER_INSTANCE_ACK);

	m_EncodeFuncArray[CLIGS_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BATTLE_REQ;
	m_DecodeFuncArray[CLIGS_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_BATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BATTLE_REQ);

	m_EncodeFuncArray[CLIGS_BATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BATTLE_ACK;
	m_DecodeFuncArray[CLIGS_BATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BATTLE_ACK;
	m_vecMsgList.push_back(CLIGS_BATTLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BATTLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BATTLE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK);

	m_EncodeFuncArray[CLIGS_EXIT_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXIT_INSTANCE_REQ;
	m_DecodeFuncArray[CLIGS_EXIT_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXIT_INSTANCE_REQ;
	m_vecMsgList.push_back(CLIGS_EXIT_INSTANCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EXIT_INSTANCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXIT_INSTANCE_REQ);

	m_EncodeFuncArray[CLIGS_EXIT_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXIT_INSTANCE_ACK;
	m_DecodeFuncArray[CLIGS_EXIT_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXIT_INSTANCE_ACK;
	m_vecMsgList.push_back(CLIGS_EXIT_INSTANCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EXIT_INSTANCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXIT_INSTANCE_ACK);

	m_EncodeFuncArray[CLIGS_GET_SCENE_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_SCENE_INSTANCE_REQ;
	m_DecodeFuncArray[CLIGS_GET_SCENE_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_SCENE_INSTANCE_REQ;
	m_vecMsgList.push_back(CLIGS_GET_SCENE_INSTANCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_SCENE_INSTANCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_SCENE_INSTANCE_REQ);

	m_EncodeFuncArray[CLIGS_GET_SCENE_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_SCENE_INSTANCE_ACK;
	m_DecodeFuncArray[CLIGS_GET_SCENE_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_SCENE_INSTANCE_ACK;
	m_vecMsgList.push_back(CLIGS_GET_SCENE_INSTANCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_SCENE_INSTANCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_SCENE_INSTANCE_ACK);

	m_EncodeFuncArray[CLIGS_EQUIP_STRENGTHEN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_STRENGTHEN_REQ;
	m_DecodeFuncArray[CLIGS_EQUIP_STRENGTHEN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_STRENGTHEN_REQ;
	m_vecMsgList.push_back(CLIGS_EQUIP_STRENGTHEN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_STRENGTHEN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_STRENGTHEN_REQ);

	m_EncodeFuncArray[CLIGS_EQUIP_STRENGTHEN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_STRENGTHEN_ACK;
	m_DecodeFuncArray[CLIGS_EQUIP_STRENGTHEN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_STRENGTHEN_ACK;
	m_vecMsgList.push_back(CLIGS_EQUIP_STRENGTHEN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_STRENGTHEN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_STRENGTHEN_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_SMITHY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SMITHY_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_SMITHY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SMITHY_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_SMITHY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SMITHY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SMITHY_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_SMITHY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SMITHY_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_SMITHY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SMITHY_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_SMITHY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SMITHY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SMITHY_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_RECRUIT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RECRUIT_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_RECRUIT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RECRUIT_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_RECRUIT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RECRUIT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RECRUIT_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_RECRUIT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RECRUIT_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_RECRUIT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RECRUIT_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_RECRUIT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RECRUIT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RECRUIT_ACK);

	m_EncodeFuncArray[CLIGS_RECRUIT_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECRUIT_HERO_REQ;
	m_DecodeFuncArray[CLIGS_RECRUIT_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECRUIT_HERO_REQ;
	m_vecMsgList.push_back(CLIGS_RECRUIT_HERO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECRUIT_HERO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECRUIT_HERO_REQ);

	m_EncodeFuncArray[CLIGS_RECRUIT_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECRUIT_HERO_ACK;
	m_DecodeFuncArray[CLIGS_RECRUIT_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECRUIT_HERO_ACK;
	m_vecMsgList.push_back(CLIGS_RECRUIT_HERO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECRUIT_HERO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECRUIT_HERO_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_BAG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BAG_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_BAG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BAG_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_BAG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BAG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BAG_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_BAG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BAG_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_BAG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BAG_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_BAG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BAG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BAG_ACK);

	m_EncodeFuncArray[CLIGS_RECV_TASK_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_TASK_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_TASK_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_TASK_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_TASK_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_TASK_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_TASK_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_TASK_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_TASK_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_TASK_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_TASK_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_TASK_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_TASK_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_TASK_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_RACE_BUILD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RACE_BUILD_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_RACE_BUILD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RACE_BUILD_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_RACE_BUILD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RACE_BUILD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RACE_BUILD_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_RACE_BUILD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RACE_BUILD_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_RACE_BUILD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RACE_BUILD_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_RACE_BUILD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RACE_BUILD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RACE_BUILD_ACK);

	m_EncodeFuncArray[CLIGS_CHALLENGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHALLENGE_REQ;
	m_DecodeFuncArray[CLIGS_CHALLENGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHALLENGE_REQ;
	m_vecMsgList.push_back(CLIGS_CHALLENGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CHALLENGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHALLENGE_REQ);

	m_EncodeFuncArray[CLIGS_CHALLENGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHALLENGE_ACK;
	m_DecodeFuncArray[CLIGS_CHALLENGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHALLENGE_ACK;
	m_vecMsgList.push_back(CLIGS_CHALLENGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CHALLENGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHALLENGE_ACK);

	m_EncodeFuncArray[CLIGS_RECV_RANK_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_RANK_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_RANK_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_RANK_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_RANK_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_RANK_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_RANK_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_RANK_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_RANK_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_RANK_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_RANK_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_RANK_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_RANK_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_RANK_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_SHOP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SHOP_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_SHOP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SHOP_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_SHOP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SHOP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SHOP_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_SHOP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SHOP_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_SHOP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SHOP_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_SHOP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SHOP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SHOP_ACK);

	m_EncodeFuncArray[CLIGS_BUY_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_ITEM_REQ;
	m_DecodeFuncArray[CLIGS_BUY_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_ITEM_REQ;
	m_vecMsgList.push_back(CLIGS_BUY_ITEM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BUY_ITEM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_ITEM_REQ);

	m_EncodeFuncArray[CLIGS_BUY_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_ITEM_ACK;
	m_DecodeFuncArray[CLIGS_BUY_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_ITEM_ACK;
	m_vecMsgList.push_back(CLIGS_BUY_ITEM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BUY_ITEM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_ITEM_ACK);

	m_EncodeFuncArray[CLIGS_SELL_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SELL_ITEM_REQ;
	m_DecodeFuncArray[CLIGS_SELL_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SELL_ITEM_REQ;
	m_vecMsgList.push_back(CLIGS_SELL_ITEM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SELL_ITEM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SELL_ITEM_REQ);

	m_EncodeFuncArray[CLIGS_SELL_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SELL_ITEM_ACK;
	m_DecodeFuncArray[CLIGS_SELL_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SELL_ITEM_ACK;
	m_vecMsgList.push_back(CLIGS_SELL_ITEM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SELL_ITEM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SELL_ITEM_ACK);

	m_EncodeFuncArray[CLIGS_DISBAND_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DISBAND_HERO_REQ;
	m_DecodeFuncArray[CLIGS_DISBAND_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DISBAND_HERO_REQ;
	m_vecMsgList.push_back(CLIGS_DISBAND_HERO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DISBAND_HERO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DISBAND_HERO_REQ);

	m_EncodeFuncArray[CLIGS_DISBAND_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DISBAND_HERO_ACK;
	m_DecodeFuncArray[CLIGS_DISBAND_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DISBAND_HERO_ACK;
	m_vecMsgList.push_back(CLIGS_DISBAND_HERO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DISBAND_HERO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DISBAND_HERO_ACK);

	m_EncodeFuncArray[CLIGS_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_REQ;
	m_DecodeFuncArray[CLIGS_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_REQ;
	m_vecMsgList.push_back(CLIGS_EQUIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_REQ);

	m_EncodeFuncArray[CLIGS_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_ACK;
	m_DecodeFuncArray[CLIGS_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_ACK;
	m_vecMsgList.push_back(CLIGS_EQUIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_ACK);

	m_EncodeFuncArray[CLIGS_REGISTER_USERNAME_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REGISTER_USERNAME_NTF;
	m_DecodeFuncArray[CLIGS_REGISTER_USERNAME_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REGISTER_USERNAME_NTF;
	m_vecMsgList.push_back(CLIGS_REGISTER_USERNAME_NTF);
	if( (INT32)sizeof(PKT_CLIGS_REGISTER_USERNAME_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REGISTER_USERNAME_NTF);

	m_EncodeFuncArray[CLIGS_EMBATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EMBATTLE_REQ;
	m_DecodeFuncArray[CLIGS_EMBATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EMBATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_EMBATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EMBATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EMBATTLE_REQ);

	m_EncodeFuncArray[CLIGS_EMBATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EMBATTLE_ACK;
	m_DecodeFuncArray[CLIGS_EMBATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EMBATTLE_ACK;
	m_vecMsgList.push_back(CLIGS_EMBATTLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EMBATTLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EMBATTLE_ACK);

	m_EncodeFuncArray[CLIGS_CLR_PLAYER_DATA_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_PLAYER_DATA_REQ;
	m_DecodeFuncArray[CLIGS_CLR_PLAYER_DATA_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_PLAYER_DATA_REQ;
	m_vecMsgList.push_back(CLIGS_CLR_PLAYER_DATA_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLR_PLAYER_DATA_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_PLAYER_DATA_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_EMBATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EMBATTLE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_EMBATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EMBATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_EMBATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EMBATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EMBATTLE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_EMBATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EMBATTLE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_EMBATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EMBATTLE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_EMBATTLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EMBATTLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EMBATTLE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_ITEM_MAKER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_ITEM_MAKER_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_ITEM_MAKER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_ITEM_MAKER_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_ITEM_MAKER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_ITEM_MAKER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_ITEM_MAKER_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_ITEM_MAKER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_ITEM_MAKER_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_ITEM_MAKER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_ITEM_MAKER_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_ITEM_MAKER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_ITEM_MAKER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_ITEM_MAKER_ACK);

	m_EncodeFuncArray[CLIGS_MAKE_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MAKE_ITEM_REQ;
	m_DecodeFuncArray[CLIGS_MAKE_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MAKE_ITEM_REQ;
	m_vecMsgList.push_back(CLIGS_MAKE_ITEM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_MAKE_ITEM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MAKE_ITEM_REQ);

	m_EncodeFuncArray[CLIGS_MAKE_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MAKE_ITEM_ACK;
	m_DecodeFuncArray[CLIGS_MAKE_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MAKE_ITEM_ACK;
	m_vecMsgList.push_back(CLIGS_MAKE_ITEM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_MAKE_ITEM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MAKE_ITEM_ACK);

	m_EncodeFuncArray[CLIGS_GET_HERO_DRUG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_HERO_DRUG_REQ;
	m_DecodeFuncArray[CLIGS_GET_HERO_DRUG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_HERO_DRUG_REQ;
	m_vecMsgList.push_back(CLIGS_GET_HERO_DRUG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_HERO_DRUG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_HERO_DRUG_REQ);

	m_EncodeFuncArray[CLIGS_GET_HERO_DRUG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_HERO_DRUG_ACK;
	m_DecodeFuncArray[CLIGS_GET_HERO_DRUG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_HERO_DRUG_ACK;
	m_vecMsgList.push_back(CLIGS_GET_HERO_DRUG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_HERO_DRUG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_HERO_DRUG_ACK);

	m_EncodeFuncArray[CLIGS_ONHOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ONHOOK_REQ;
	m_DecodeFuncArray[CLIGS_ONHOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ONHOOK_REQ;
	m_vecMsgList.push_back(CLIGS_ONHOOK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ONHOOK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ONHOOK_REQ);

	m_EncodeFuncArray[CLIGS_ONHOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ONHOOK_ACK;
	m_DecodeFuncArray[CLIGS_ONHOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ONHOOK_ACK;
	m_vecMsgList.push_back(CLIGS_ONHOOK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ONHOOK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ONHOOK_ACK);

	m_EncodeFuncArray[CLIGS_RECV_ONLINE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_ONLINE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_ONLINE_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_ONLINE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_ONLINE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_ONLINE_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_INCREASE_BAG_SIZE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_INCREASE_BAG_SIZE_REQ;
	m_DecodeFuncArray[CLIGS_INCREASE_BAG_SIZE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_INCREASE_BAG_SIZE_REQ;
	m_vecMsgList.push_back(CLIGS_INCREASE_BAG_SIZE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_INCREASE_BAG_SIZE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_INCREASE_BAG_SIZE_REQ);

	m_EncodeFuncArray[CLIGS_INCREASE_BAG_SIZE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_INCREASE_BAG_SIZE_ACK;
	m_DecodeFuncArray[CLIGS_INCREASE_BAG_SIZE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_INCREASE_BAG_SIZE_ACK;
	m_vecMsgList.push_back(CLIGS_INCREASE_BAG_SIZE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_INCREASE_BAG_SIZE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_INCREASE_BAG_SIZE_ACK);

	m_EncodeFuncArray[CLIGS_CLR_CHALLENGE_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_CHALLENGE_CD_REQ;
	m_DecodeFuncArray[CLIGS_CLR_CHALLENGE_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_CHALLENGE_CD_REQ;
	m_vecMsgList.push_back(CLIGS_CLR_CHALLENGE_CD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLR_CHALLENGE_CD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_CHALLENGE_CD_REQ);

	m_EncodeFuncArray[CLIGS_CLR_CHALLENGE_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_CHALLENGE_CD_ACK;
	m_DecodeFuncArray[CLIGS_CLR_CHALLENGE_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_CHALLENGE_CD_ACK;
	m_vecMsgList.push_back(CLIGS_CLR_CHALLENGE_CD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLR_CHALLENGE_CD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_CHALLENGE_CD_ACK);

	m_EncodeFuncArray[CLIGS_SYNC_TIME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SYNC_TIME_REQ;
	m_DecodeFuncArray[CLIGS_SYNC_TIME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SYNC_TIME_REQ;
	m_vecMsgList.push_back(CLIGS_SYNC_TIME_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SYNC_TIME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SYNC_TIME_REQ);

	m_EncodeFuncArray[CLIGS_SYNC_TIME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SYNC_TIME_ACK;
	m_DecodeFuncArray[CLIGS_SYNC_TIME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SYNC_TIME_ACK;
	m_vecMsgList.push_back(CLIGS_SYNC_TIME_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SYNC_TIME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SYNC_TIME_ACK);

	m_EncodeFuncArray[CLILS_REGISTER_DSPNAME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_REGISTER_DSPNAME_REQ;
	m_DecodeFuncArray[CLILS_REGISTER_DSPNAME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_REGISTER_DSPNAME_REQ;
	m_vecMsgList.push_back(CLILS_REGISTER_DSPNAME_REQ);
	if( (INT32)sizeof(PKT_CLILS_REGISTER_DSPNAME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_REGISTER_DSPNAME_REQ);

	m_EncodeFuncArray[CLILS_REGISTER_DSPNAME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_REGISTER_DSPNAME_ACK;
	m_DecodeFuncArray[CLILS_REGISTER_DSPNAME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_REGISTER_DSPNAME_ACK;
	m_vecMsgList.push_back(CLILS_REGISTER_DSPNAME_ACK);
	if( (INT32)sizeof(PKT_CLILS_REGISTER_DSPNAME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_REGISTER_DSPNAME_ACK);

	m_EncodeFuncArray[CLILS_USE_GOODS_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_USE_GOODS_REQ;
	m_DecodeFuncArray[CLILS_USE_GOODS_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_USE_GOODS_REQ;
	m_vecMsgList.push_back(CLILS_USE_GOODS_REQ);
	if( (INT32)sizeof(PKT_CLILS_USE_GOODS_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_USE_GOODS_REQ);

	m_EncodeFuncArray[CLILS_USE_GOODS_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_USE_GOODS_ACK;
	m_DecodeFuncArray[CLILS_USE_GOODS_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_USE_GOODS_ACK;
	m_vecMsgList.push_back(CLILS_USE_GOODS_ACK);
	if( (INT32)sizeof(PKT_CLILS_USE_GOODS_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_USE_GOODS_ACK);

	m_EncodeFuncArray[CLILS_OPEN_LOGIN_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLILS_OPEN_LOGIN_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLILS_OPEN_LOGIN_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLILS_OPEN_LOGIN_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLILS_OPEN_LOGIN_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLILS_OPEN_LOGIN_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ;
	m_DecodeFuncArray[CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ;
	m_vecMsgList.push_back(CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ);
	if( (INT32)sizeof(PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ);

	m_EncodeFuncArray[CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK;
	m_DecodeFuncArray[CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK;
	m_vecMsgList.push_back(CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK);
	if( (INT32)sizeof(PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK);

	m_EncodeFuncArray[CLILS_RATE_LOGIN_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLILS_RATE_LOGIN_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLILS_RATE_LOGIN_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLILS_RATE_LOGIN_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLILS_RATE_LOGIN_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLILS_RATE_LOGIN_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_GET_RANK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_RANK_REQ;
	m_DecodeFuncArray[CLIGS_GET_RANK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_RANK_REQ;
	m_vecMsgList.push_back(CLIGS_GET_RANK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_RANK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_RANK_REQ);

	m_EncodeFuncArray[CLIGS_GET_RANK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_RANK_ACK;
	m_DecodeFuncArray[CLIGS_GET_RANK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_RANK_ACK;
	m_vecMsgList.push_back(CLIGS_GET_RANK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_RANK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_RANK_ACK);

	m_EncodeFuncArray[CLIGS_GET_RACE_BATTLELOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_RACE_BATTLELOG_REQ;
	m_DecodeFuncArray[CLIGS_GET_RACE_BATTLELOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_RACE_BATTLELOG_REQ;
	m_vecMsgList.push_back(CLIGS_GET_RACE_BATTLELOG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_RACE_BATTLELOG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_RACE_BATTLELOG_REQ);

	m_EncodeFuncArray[CLIGS_GET_RACE_BATTLELOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_RACE_BATTLELOG_ACK;
	m_DecodeFuncArray[CLIGS_GET_RACE_BATTLELOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_RACE_BATTLELOG_ACK;
	m_vecMsgList.push_back(CLIGS_GET_RACE_BATTLELOG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_RACE_BATTLELOG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_RACE_BATTLELOG_ACK);

	m_EncodeFuncArray[CLIGS_ACCEPT_TASK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACCEPT_TASK_REQ;
	m_DecodeFuncArray[CLIGS_ACCEPT_TASK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACCEPT_TASK_REQ;
	m_vecMsgList.push_back(CLIGS_ACCEPT_TASK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ACCEPT_TASK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACCEPT_TASK_REQ);

	m_EncodeFuncArray[CLIGS_ACCEPT_TASK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACCEPT_TASK_ACK;
	m_DecodeFuncArray[CLIGS_ACCEPT_TASK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACCEPT_TASK_ACK;
	m_vecMsgList.push_back(CLIGS_ACCEPT_TASK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ACCEPT_TASK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACCEPT_TASK_ACK);

	m_EncodeFuncArray[CLIGS_GIVEUP_TASK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GIVEUP_TASK_REQ;
	m_DecodeFuncArray[CLIGS_GIVEUP_TASK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GIVEUP_TASK_REQ;
	m_vecMsgList.push_back(CLIGS_GIVEUP_TASK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GIVEUP_TASK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GIVEUP_TASK_REQ);

	m_EncodeFuncArray[CLIGS_GIVEUP_TASK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GIVEUP_TASK_ACK;
	m_DecodeFuncArray[CLIGS_GIVEUP_TASK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GIVEUP_TASK_ACK;
	m_vecMsgList.push_back(CLIGS_GIVEUP_TASK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GIVEUP_TASK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GIVEUP_TASK_ACK);

	m_EncodeFuncArray[CLIGS_PLUNDER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLUNDER_REQ;
	m_DecodeFuncArray[CLIGS_PLUNDER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLUNDER_REQ;
	m_vecMsgList.push_back(CLIGS_PLUNDER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PLUNDER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLUNDER_REQ);

	m_EncodeFuncArray[CLIGS_PLUNDER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLUNDER_ACK;
	m_DecodeFuncArray[CLIGS_PLUNDER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLUNDER_ACK;
	m_vecMsgList.push_back(CLIGS_PLUNDER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PLUNDER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLUNDER_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_CAPTURE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CAPTURE_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_CAPTURE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CAPTURE_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_CAPTURE_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CAPTURE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CAPTURE_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_CAPTURE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CAPTURE_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_CAPTURE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CAPTURE_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_CAPTURE_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CAPTURE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CAPTURE_TAB_ACK);

	m_EncodeFuncArray[CLIGS_COLLECT_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COLLECT_INCOME_REQ;
	m_DecodeFuncArray[CLIGS_COLLECT_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COLLECT_INCOME_REQ;
	m_vecMsgList.push_back(CLIGS_COLLECT_INCOME_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COLLECT_INCOME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COLLECT_INCOME_REQ);

	m_EncodeFuncArray[CLIGS_COLLECT_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COLLECT_INCOME_ACK;
	m_DecodeFuncArray[CLIGS_COLLECT_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COLLECT_INCOME_ACK;
	m_vecMsgList.push_back(CLIGS_COLLECT_INCOME_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COLLECT_INCOME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COLLECT_INCOME_ACK);

	m_EncodeFuncArray[CLIGS_BLEED_CAPTURE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BLEED_CAPTURE_REQ;
	m_DecodeFuncArray[CLIGS_BLEED_CAPTURE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BLEED_CAPTURE_REQ;
	m_vecMsgList.push_back(CLIGS_BLEED_CAPTURE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BLEED_CAPTURE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BLEED_CAPTURE_REQ);

	m_EncodeFuncArray[CLIGS_BLEED_CAPTURE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BLEED_CAPTURE_ACK;
	m_DecodeFuncArray[CLIGS_BLEED_CAPTURE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BLEED_CAPTURE_ACK;
	m_vecMsgList.push_back(CLIGS_BLEED_CAPTURE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BLEED_CAPTURE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BLEED_CAPTURE_ACK);

	m_EncodeFuncArray[CLIGS_DEL_ENEMY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DEL_ENEMY_REQ;
	m_DecodeFuncArray[CLIGS_DEL_ENEMY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DEL_ENEMY_REQ;
	m_vecMsgList.push_back(CLIGS_DEL_ENEMY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DEL_ENEMY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DEL_ENEMY_REQ);

	m_EncodeFuncArray[CLIGS_DEL_ENEMY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DEL_ENEMY_ACK;
	m_DecodeFuncArray[CLIGS_DEL_ENEMY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DEL_ENEMY_ACK;
	m_vecMsgList.push_back(CLIGS_DEL_ENEMY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DEL_ENEMY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DEL_ENEMY_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_ENEMY_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_ENEMY_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_ENEMY_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_ENEMY_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_ENEMY_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_ENEMY_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_ENEMY_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_ENEMY_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_ENEMY_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_ENEMY_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_ENEMY_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_ENEMY_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_ENEMY_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_ENEMY_TAB_ACK);

	m_EncodeFuncArray[CLIGS_PLUNDER_BATTLELOG_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLUNDER_BATTLELOG_NTF;
	m_DecodeFuncArray[CLIGS_PLUNDER_BATTLELOG_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLUNDER_BATTLELOG_NTF;
	m_vecMsgList.push_back(CLIGS_PLUNDER_BATTLELOG_NTF);
	if( (INT32)sizeof(PKT_CLIGS_PLUNDER_BATTLELOG_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLUNDER_BATTLELOG_NTF);

	m_EncodeFuncArray[CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK);

	m_EncodeFuncArray[CLIGS_FREE_CAPTURE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FREE_CAPTURE_REQ;
	m_DecodeFuncArray[CLIGS_FREE_CAPTURE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FREE_CAPTURE_REQ;
	m_vecMsgList.push_back(CLIGS_FREE_CAPTURE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_FREE_CAPTURE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FREE_CAPTURE_REQ);

	m_EncodeFuncArray[CLIGS_FREE_CAPTURE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FREE_CAPTURE_ACK;
	m_DecodeFuncArray[CLIGS_FREE_CAPTURE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FREE_CAPTURE_ACK;
	m_vecMsgList.push_back(CLIGS_FREE_CAPTURE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_FREE_CAPTURE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FREE_CAPTURE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_MONEY_TREE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_MONEY_TREE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_MONEY_TREE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_MONEY_TREE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_MONEY_TREE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_MONEY_TREE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_MONEY_TREE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_MONEY_TREE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_MONEY_TREE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_MONEY_TREE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_MONEY_TREE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_MONEY_TREE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_MONEY_TREE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_MONEY_TREE_ACK);

	m_EncodeFuncArray[CLIGS_ROCK_MONEY_TREE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ROCK_MONEY_TREE_REQ;
	m_DecodeFuncArray[CLIGS_ROCK_MONEY_TREE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ROCK_MONEY_TREE_REQ;
	m_vecMsgList.push_back(CLIGS_ROCK_MONEY_TREE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ROCK_MONEY_TREE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ROCK_MONEY_TREE_REQ);

	m_EncodeFuncArray[CLIGS_ROCK_MONEY_TREE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ROCK_MONEY_TREE_ACK;
	m_DecodeFuncArray[CLIGS_ROCK_MONEY_TREE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ROCK_MONEY_TREE_ACK;
	m_vecMsgList.push_back(CLIGS_ROCK_MONEY_TREE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ROCK_MONEY_TREE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ROCK_MONEY_TREE_ACK);

	m_EncodeFuncArray[CLIGS_GET_PLUNDER_BATTLELOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ;
	m_DecodeFuncArray[CLIGS_GET_PLUNDER_BATTLELOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ;
	m_vecMsgList.push_back(CLIGS_GET_PLUNDER_BATTLELOG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ);

	m_EncodeFuncArray[CLIGS_GET_PLUNDER_BATTLELOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK;
	m_DecodeFuncArray[CLIGS_GET_PLUNDER_BATTLELOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK;
	m_vecMsgList.push_back(CLIGS_GET_PLUNDER_BATTLELOG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GODWEAPON_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GODWEAPON_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GODWEAPON_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GODWEAPON_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GODWEAPON_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GODWEAPON_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GODWEAPON_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GODWEAPON_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GODWEAPON_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GODWEAPON_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GODWEAPON_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GODWEAPON_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GODWEAPON_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GODWEAPON_ACK);

	m_EncodeFuncArray[CLIGS_UPGRADE_GODWEAPON_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_GODWEAPON_REQ;
	m_DecodeFuncArray[CLIGS_UPGRADE_GODWEAPON_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_GODWEAPON_REQ;
	m_vecMsgList.push_back(CLIGS_UPGRADE_GODWEAPON_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_GODWEAPON_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_GODWEAPON_REQ);

	m_EncodeFuncArray[CLIGS_UPGRADE_GODWEAPON_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_GODWEAPON_ACK;
	m_DecodeFuncArray[CLIGS_UPGRADE_GODWEAPON_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_GODWEAPON_ACK;
	m_vecMsgList.push_back(CLIGS_UPGRADE_GODWEAPON_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_GODWEAPON_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_GODWEAPON_ACK);

	m_EncodeFuncArray[CLIGS_FREE_GODWEAPON_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FREE_GODWEAPON_REQ;
	m_DecodeFuncArray[CLIGS_FREE_GODWEAPON_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FREE_GODWEAPON_REQ;
	m_vecMsgList.push_back(CLIGS_FREE_GODWEAPON_REQ);
	if( (INT32)sizeof(PKT_CLIGS_FREE_GODWEAPON_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FREE_GODWEAPON_REQ);

	m_EncodeFuncArray[CLIGS_FREE_GODWEAPON_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FREE_GODWEAPON_ACK;
	m_DecodeFuncArray[CLIGS_FREE_GODWEAPON_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FREE_GODWEAPON_ACK;
	m_vecMsgList.push_back(CLIGS_FREE_GODWEAPON_ACK);
	if( (INT32)sizeof(PKT_CLIGS_FREE_GODWEAPON_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FREE_GODWEAPON_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_AWAKEN_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_AWAKEN_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_ACK);

	m_EncodeFuncArray[CLIGS_AWAKEN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AWAKEN_REQ;
	m_DecodeFuncArray[CLIGS_AWAKEN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AWAKEN_REQ;
	m_vecMsgList.push_back(CLIGS_AWAKEN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_AWAKEN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AWAKEN_REQ);

	m_EncodeFuncArray[CLIGS_AWAKEN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AWAKEN_ACK;
	m_DecodeFuncArray[CLIGS_AWAKEN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AWAKEN_ACK;
	m_vecMsgList.push_back(CLIGS_AWAKEN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_AWAKEN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AWAKEN_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_DRESS_STUDY_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_DRESS_STUDY_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK);

	m_EncodeFuncArray[CLIGS_DRESS_STUDY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRESS_STUDY_REQ;
	m_DecodeFuncArray[CLIGS_DRESS_STUDY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRESS_STUDY_REQ;
	m_vecMsgList.push_back(CLIGS_DRESS_STUDY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_REQ);

	m_EncodeFuncArray[CLIGS_DRESS_STUDY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRESS_STUDY_ACK;
	m_DecodeFuncArray[CLIGS_DRESS_STUDY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRESS_STUDY_ACK;
	m_vecMsgList.push_back(CLIGS_DRESS_STUDY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_ACK);

	m_EncodeFuncArray[CLIGS_STUDY_TO_EXP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_TO_EXP_REQ;
	m_DecodeFuncArray[CLIGS_STUDY_TO_EXP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_TO_EXP_REQ;
	m_vecMsgList.push_back(CLIGS_STUDY_TO_EXP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_REQ);

	m_EncodeFuncArray[CLIGS_STUDY_TO_EXP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_TO_EXP_ACK;
	m_DecodeFuncArray[CLIGS_STUDY_TO_EXP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_TO_EXP_ACK;
	m_vecMsgList.push_back(CLIGS_STUDY_TO_EXP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_ACK);

	m_EncodeFuncArray[CLIGS_STUDY_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_UPGRADE_REQ;
	m_DecodeFuncArray[CLIGS_STUDY_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_UPGRADE_REQ;
	m_vecMsgList.push_back(CLIGS_STUDY_UPGRADE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_REQ);

	m_EncodeFuncArray[CLIGS_STUDY_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_UPGRADE_ACK;
	m_DecodeFuncArray[CLIGS_STUDY_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_UPGRADE_ACK;
	m_vecMsgList.push_back(CLIGS_STUDY_UPGRADE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_ACK);

	m_EncodeFuncArray[CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ;
	m_DecodeFuncArray[CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ;
	m_vecMsgList.push_back(CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ);
	if( (INT32)sizeof(PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ);

	m_EncodeFuncArray[CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK;
	m_DecodeFuncArray[CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK;
	m_vecMsgList.push_back(CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK);
	if( (INT32)sizeof(PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK);

	m_EncodeFuncArray[CLIGS_RACE_BATTLELOG_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RACE_BATTLELOG_NTF;
	m_DecodeFuncArray[CLIGS_RACE_BATTLELOG_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RACE_BATTLELOG_NTF;
	m_vecMsgList.push_back(CLIGS_RACE_BATTLELOG_NTF);
	if( (INT32)sizeof(PKT_CLIGS_RACE_BATTLELOG_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RACE_BATTLELOG_NTF);

	m_EncodeFuncArray[CLIGS_VISIT_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_VISIT_HERO_REQ;
	m_DecodeFuncArray[CLIGS_VISIT_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_VISIT_HERO_REQ;
	m_vecMsgList.push_back(CLIGS_VISIT_HERO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_VISIT_HERO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_VISIT_HERO_REQ);

	m_EncodeFuncArray[CLIGS_VISIT_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_VISIT_HERO_ACK;
	m_DecodeFuncArray[CLIGS_VISIT_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_VISIT_HERO_ACK;
	m_vecMsgList.push_back(CLIGS_VISIT_HERO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_VISIT_HERO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_VISIT_HERO_ACK);

	m_EncodeFuncArray[CLIGS_BUY_PHYSTRENGTH_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_PHYSTRENGTH_REQ;
	m_DecodeFuncArray[CLIGS_BUY_PHYSTRENGTH_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_PHYSTRENGTH_REQ;
	m_vecMsgList.push_back(CLIGS_BUY_PHYSTRENGTH_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BUY_PHYSTRENGTH_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_PHYSTRENGTH_REQ);

	m_EncodeFuncArray[CLIGS_BUY_PHYSTRENGTH_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_PHYSTRENGTH_ACK;
	m_DecodeFuncArray[CLIGS_BUY_PHYSTRENGTH_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_PHYSTRENGTH_ACK;
	m_vecMsgList.push_back(CLIGS_BUY_PHYSTRENGTH_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BUY_PHYSTRENGTH_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_PHYSTRENGTH_ACK);

	m_EncodeFuncArray[CLIGS_CLR_PLUNDER_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_PLUNDER_CD_REQ;
	m_DecodeFuncArray[CLIGS_CLR_PLUNDER_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_PLUNDER_CD_REQ;
	m_vecMsgList.push_back(CLIGS_CLR_PLUNDER_CD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLR_PLUNDER_CD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_PLUNDER_CD_REQ);

	m_EncodeFuncArray[CLIGS_CLR_PLUNDER_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_PLUNDER_CD_ACK;
	m_DecodeFuncArray[CLIGS_CLR_PLUNDER_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_PLUNDER_CD_ACK;
	m_vecMsgList.push_back(CLIGS_CLR_PLUNDER_CD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLR_PLUNDER_CD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_PLUNDER_CD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_MAINTOWN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_MAINTOWN_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_MAINTOWN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_MAINTOWN_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_MAINTOWN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_MAINTOWN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_MAINTOWN_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_MAINTOWN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_MAINTOWN_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_MAINTOWN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_MAINTOWN_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_MAINTOWN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_MAINTOWN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_MAINTOWN_ACK);

	m_EncodeFuncArray[CLIGS_RECV_MAINTOWN_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_MAINTOWN_INCOME_REQ;
	m_DecodeFuncArray[CLIGS_RECV_MAINTOWN_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_MAINTOWN_INCOME_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_MAINTOWN_INCOME_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_MAINTOWN_INCOME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_MAINTOWN_INCOME_REQ);

	m_EncodeFuncArray[CLIGS_RECV_MAINTOWN_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_MAINTOWN_INCOME_ACK;
	m_DecodeFuncArray[CLIGS_RECV_MAINTOWN_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_MAINTOWN_INCOME_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_MAINTOWN_INCOME_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_MAINTOWN_INCOME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_MAINTOWN_INCOME_ACK);

	m_EncodeFuncArray[CLIGS_LEVY_MAINTOWN_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ;
	m_DecodeFuncArray[CLIGS_LEVY_MAINTOWN_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ;
	m_vecMsgList.push_back(CLIGS_LEVY_MAINTOWN_INCOME_REQ);
	if( (INT32)sizeof(PKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ);

	m_EncodeFuncArray[CLIGS_LEVY_MAINTOWN_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK;
	m_DecodeFuncArray[CLIGS_LEVY_MAINTOWN_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK;
	m_vecMsgList.push_back(CLIGS_LEVY_MAINTOWN_INCOME_ACK);
	if( (INT32)sizeof(PKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK);

	m_EncodeFuncArray[CLIGS_SET_WORK_TYPE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SET_WORK_TYPE_REQ;
	m_DecodeFuncArray[CLIGS_SET_WORK_TYPE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SET_WORK_TYPE_REQ;
	m_vecMsgList.push_back(CLIGS_SET_WORK_TYPE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SET_WORK_TYPE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SET_WORK_TYPE_REQ);

	m_EncodeFuncArray[CLIGS_SET_WORK_TYPE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SET_WORK_TYPE_ACK;
	m_DecodeFuncArray[CLIGS_SET_WORK_TYPE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SET_WORK_TYPE_ACK;
	m_vecMsgList.push_back(CLIGS_SET_WORK_TYPE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SET_WORK_TYPE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SET_WORK_TYPE_ACK);

	m_EncodeFuncArray[CLIGS_DRIVE_AWAY_OWNER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRIVE_AWAY_OWNER_REQ;
	m_DecodeFuncArray[CLIGS_DRIVE_AWAY_OWNER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRIVE_AWAY_OWNER_REQ;
	m_vecMsgList.push_back(CLIGS_DRIVE_AWAY_OWNER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DRIVE_AWAY_OWNER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRIVE_AWAY_OWNER_REQ);

	m_EncodeFuncArray[CLIGS_DRIVE_AWAY_OWNER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRIVE_AWAY_OWNER_ACK;
	m_DecodeFuncArray[CLIGS_DRIVE_AWAY_OWNER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRIVE_AWAY_OWNER_ACK;
	m_vecMsgList.push_back(CLIGS_DRIVE_AWAY_OWNER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DRIVE_AWAY_OWNER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRIVE_AWAY_OWNER_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_DRUG_USE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DRUG_USE_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_DRUG_USE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DRUG_USE_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_DRUG_USE_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DRUG_USE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DRUG_USE_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_DRUG_USE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DRUG_USE_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_DRUG_USE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DRUG_USE_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_DRUG_USE_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DRUG_USE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DRUG_USE_TAB_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_HERO_DRUG_USE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_HERO_DRUG_USE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_HERO_DRUG_USE_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_HERO_DRUG_USE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_HERO_DRUG_USE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_HERO_DRUG_USE_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_ACK);

	m_EncodeFuncArray[CLIGS_CLR_USE_DRUG_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_USE_DRUG_CD_REQ;
	m_DecodeFuncArray[CLIGS_CLR_USE_DRUG_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_USE_DRUG_CD_REQ;
	m_vecMsgList.push_back(CLIGS_CLR_USE_DRUG_CD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLR_USE_DRUG_CD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_USE_DRUG_CD_REQ);

	m_EncodeFuncArray[CLIGS_CLR_USE_DRUG_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_USE_DRUG_CD_ACK;
	m_DecodeFuncArray[CLIGS_CLR_USE_DRUG_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_USE_DRUG_CD_ACK;
	m_vecMsgList.push_back(CLIGS_CLR_USE_DRUG_CD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLR_USE_DRUG_CD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_USE_DRUG_CD_ACK);

	m_EncodeFuncArray[CLIGS_USE_DRUG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_USE_DRUG_REQ;
	m_DecodeFuncArray[CLIGS_USE_DRUG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_USE_DRUG_REQ;
	m_vecMsgList.push_back(CLIGS_USE_DRUG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_USE_DRUG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_USE_DRUG_REQ);

	m_EncodeFuncArray[CLIGS_USE_DRUG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_USE_DRUG_ACK;
	m_DecodeFuncArray[CLIGS_USE_DRUG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_USE_DRUG_ACK;
	m_vecMsgList.push_back(CLIGS_USE_DRUG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_USE_DRUG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_USE_DRUG_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_UPGRADE_DRUG_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_UPGRADE_DRUG_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_UPGRADE_DRUG_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_UPGRADE_DRUG_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_UPGRADE_DRUG_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_UPGRADE_DRUG_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_ACK);

	m_EncodeFuncArray[CLIGS_UPGRADE_DRUG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_DRUG_REQ;
	m_DecodeFuncArray[CLIGS_UPGRADE_DRUG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_DRUG_REQ;
	m_vecMsgList.push_back(CLIGS_UPGRADE_DRUG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_DRUG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_DRUG_REQ);

	m_EncodeFuncArray[CLIGS_UPGRADE_DRUG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_DRUG_ACK;
	m_DecodeFuncArray[CLIGS_UPGRADE_DRUG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_DRUG_ACK;
	m_vecMsgList.push_back(CLIGS_UPGRADE_DRUG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_DRUG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_DRUG_ACK);

	m_EncodeFuncArray[CLIGS_COMPOSE_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COMPOSE_EQUIP_REQ;
	m_DecodeFuncArray[CLIGS_COMPOSE_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COMPOSE_EQUIP_REQ;
	m_vecMsgList.push_back(CLIGS_COMPOSE_EQUIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COMPOSE_EQUIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COMPOSE_EQUIP_REQ);

	m_EncodeFuncArray[CLIGS_COMPOSE_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COMPOSE_EQUIP_ACK;
	m_DecodeFuncArray[CLIGS_COMPOSE_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COMPOSE_EQUIP_ACK;
	m_vecMsgList.push_back(CLIGS_COMPOSE_EQUIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COMPOSE_EQUIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COMPOSE_EQUIP_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_PHYSTRENGTH_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PHYSTRENGTH_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_PHYSTRENGTH_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PHYSTRENGTH_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_PHYSTRENGTH_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PHYSTRENGTH_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PHYSTRENGTH_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_PHYSTRENGTH_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PHYSTRENGTH_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_PHYSTRENGTH_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PHYSTRENGTH_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_PHYSTRENGTH_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PHYSTRENGTH_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PHYSTRENGTH_ACK);

	m_EncodeFuncArray[CLIGS_RECV_LEFT_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_LEFT_INCOME_REQ;
	m_DecodeFuncArray[CLIGS_RECV_LEFT_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_LEFT_INCOME_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_LEFT_INCOME_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_LEFT_INCOME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_LEFT_INCOME_REQ);

	m_EncodeFuncArray[CLIGS_RECV_LEFT_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_LEFT_INCOME_ACK;
	m_DecodeFuncArray[CLIGS_RECV_LEFT_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_LEFT_INCOME_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_LEFT_INCOME_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_LEFT_INCOME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_LEFT_INCOME_ACK);

	m_EncodeFuncArray[CLIGS_SMITHY_BUY_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SMITHY_BUY_EQUIP_REQ;
	m_DecodeFuncArray[CLIGS_SMITHY_BUY_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SMITHY_BUY_EQUIP_REQ;
	m_vecMsgList.push_back(CLIGS_SMITHY_BUY_EQUIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SMITHY_BUY_EQUIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SMITHY_BUY_EQUIP_REQ);

	m_EncodeFuncArray[CLIGS_SMITHY_BUY_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SMITHY_BUY_EQUIP_ACK;
	m_DecodeFuncArray[CLIGS_SMITHY_BUY_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SMITHY_BUY_EQUIP_ACK;
	m_vecMsgList.push_back(CLIGS_SMITHY_BUY_EQUIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SMITHY_BUY_EQUIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SMITHY_BUY_EQUIP_ACK);

	m_EncodeFuncArray[CLIGS_CLR_STRENGTHEN_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_STRENGTHEN_CD_REQ;
	m_DecodeFuncArray[CLIGS_CLR_STRENGTHEN_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_STRENGTHEN_CD_REQ;
	m_vecMsgList.push_back(CLIGS_CLR_STRENGTHEN_CD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLR_STRENGTHEN_CD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_STRENGTHEN_CD_REQ);

	m_EncodeFuncArray[CLIGS_CLR_STRENGTHEN_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_STRENGTHEN_CD_ACK;
	m_DecodeFuncArray[CLIGS_CLR_STRENGTHEN_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_STRENGTHEN_CD_ACK;
	m_vecMsgList.push_back(CLIGS_CLR_STRENGTHEN_CD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLR_STRENGTHEN_CD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_STRENGTHEN_CD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CROP_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CROP_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_CROP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CROP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CROP_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CROP_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CROP_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_CROP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CROP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CROP_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_CROP_FIELD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CROP_FIELD_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_CROP_FIELD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CROP_FIELD_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_CROP_FIELD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CROP_FIELD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CROP_FIELD_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_CROP_FIELD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CROP_FIELD_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_CROP_FIELD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CROP_FIELD_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_CROP_FIELD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CROP_FIELD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CROP_FIELD_ACK);

	m_EncodeFuncArray[CLIGS_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CROP_REQ;
	m_DecodeFuncArray[CLIGS_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CROP_REQ;
	m_vecMsgList.push_back(CLIGS_CROP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CROP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CROP_REQ);

	m_EncodeFuncArray[CLIGS_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CROP_ACK;
	m_DecodeFuncArray[CLIGS_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CROP_ACK;
	m_vecMsgList.push_back(CLIGS_CROP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CROP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CROP_ACK);

	m_EncodeFuncArray[CLIGS_GAIN_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GAIN_CROP_REQ;
	m_DecodeFuncArray[CLIGS_GAIN_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GAIN_CROP_REQ;
	m_vecMsgList.push_back(CLIGS_GAIN_CROP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GAIN_CROP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GAIN_CROP_REQ);

	m_EncodeFuncArray[CLIGS_GAIN_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GAIN_CROP_ACK;
	m_DecodeFuncArray[CLIGS_GAIN_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GAIN_CROP_ACK;
	m_vecMsgList.push_back(CLIGS_GAIN_CROP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GAIN_CROP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GAIN_CROP_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_SCIENCE_BUILD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SCIENCE_BUILD_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_SCIENCE_BUILD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SCIENCE_BUILD_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_SCIENCE_BUILD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SCIENCE_BUILD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SCIENCE_BUILD_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_SCIENCE_BUILD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SCIENCE_BUILD_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_SCIENCE_BUILD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SCIENCE_BUILD_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_SCIENCE_BUILD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SCIENCE_BUILD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SCIENCE_BUILD_ACK);

	m_EncodeFuncArray[CLIGS_UPDATE_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPDATE_SCIENCE_REQ;
	m_DecodeFuncArray[CLIGS_UPDATE_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPDATE_SCIENCE_REQ;
	m_vecMsgList.push_back(CLIGS_UPDATE_SCIENCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPDATE_SCIENCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPDATE_SCIENCE_REQ);

	m_EncodeFuncArray[CLIGS_UPDATE_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPDATE_SCIENCE_ACK;
	m_DecodeFuncArray[CLIGS_UPDATE_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPDATE_SCIENCE_ACK;
	m_vecMsgList.push_back(CLIGS_UPDATE_SCIENCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPDATE_SCIENCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPDATE_SCIENCE_ACK);

	m_EncodeFuncArray[CLIGS_CLR_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_CROP_REQ;
	m_DecodeFuncArray[CLIGS_CLR_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_CROP_REQ;
	m_vecMsgList.push_back(CLIGS_CLR_CROP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLR_CROP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_CROP_REQ);

	m_EncodeFuncArray[CLIGS_CLR_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_CROP_ACK;
	m_DecodeFuncArray[CLIGS_CLR_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_CROP_ACK;
	m_vecMsgList.push_back(CLIGS_CLR_CROP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLR_CROP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_CROP_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_EXPERIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EXPERIENCE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_EXPERIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EXPERIENCE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_EXPERIENCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_EXPERIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EXPERIENCE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_EXPERIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EXPERIENCE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_EXPERIENCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_ACK);

	m_EncodeFuncArray[CLIGS_USER_EXPERIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_USER_EXPERIENCE_REQ;
	m_DecodeFuncArray[CLIGS_USER_EXPERIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_USER_EXPERIENCE_REQ;
	m_vecMsgList.push_back(CLIGS_USER_EXPERIENCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_USER_EXPERIENCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_USER_EXPERIENCE_REQ);

	m_EncodeFuncArray[CLIGS_USER_EXPERIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_USER_EXPERIENCE_ACK;
	m_DecodeFuncArray[CLIGS_USER_EXPERIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_USER_EXPERIENCE_ACK;
	m_vecMsgList.push_back(CLIGS_USER_EXPERIENCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_USER_EXPERIENCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_USER_EXPERIENCE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_MELT_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_MELT_EQUIP_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_MELT_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_MELT_EQUIP_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_MELT_EQUIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_MELT_EQUIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_MELT_EQUIP_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_MELT_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_MELT_EQUIP_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_MELT_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_MELT_EQUIP_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_MELT_EQUIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_MELT_EQUIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_MELT_EQUIP_ACK);

	m_EncodeFuncArray[CLIGS_MELT_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MELT_EQUIP_REQ;
	m_DecodeFuncArray[CLIGS_MELT_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MELT_EQUIP_REQ;
	m_vecMsgList.push_back(CLIGS_MELT_EQUIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_MELT_EQUIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MELT_EQUIP_REQ);

	m_EncodeFuncArray[CLIGS_MELT_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MELT_EQUIP_ACK;
	m_DecodeFuncArray[CLIGS_MELT_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MELT_EQUIP_ACK;
	m_vecMsgList.push_back(CLIGS_MELT_EQUIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_MELT_EQUIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MELT_EQUIP_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK);

	m_EncodeFuncArray[CLIGS_UPDATE_ATTR_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPDATE_ATTR_REQ;
	m_DecodeFuncArray[CLIGS_UPDATE_ATTR_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPDATE_ATTR_REQ;
	m_vecMsgList.push_back(CLIGS_UPDATE_ATTR_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPDATE_ATTR_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPDATE_ATTR_REQ);

	m_EncodeFuncArray[CLIGS_UPDATE_ATTR_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPDATE_ATTR_ACK;
	m_DecodeFuncArray[CLIGS_UPDATE_ATTR_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPDATE_ATTR_ACK;
	m_vecMsgList.push_back(CLIGS_UPDATE_ATTR_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPDATE_ATTR_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPDATE_ATTR_ACK);

	m_EncodeFuncArray[CLIGS_COMPOSE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COMPOSE_REQ;
	m_DecodeFuncArray[CLIGS_COMPOSE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COMPOSE_REQ;
	m_vecMsgList.push_back(CLIGS_COMPOSE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COMPOSE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COMPOSE_REQ);

	m_EncodeFuncArray[CLIGS_COMPOSE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COMPOSE_ACK;
	m_DecodeFuncArray[CLIGS_COMPOSE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COMPOSE_ACK;
	m_vecMsgList.push_back(CLIGS_COMPOSE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COMPOSE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COMPOSE_ACK);

	m_EncodeFuncArray[CLIGS_REFRESH_ELITE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REFRESH_ELITE_REQ;
	m_DecodeFuncArray[CLIGS_REFRESH_ELITE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REFRESH_ELITE_REQ;
	m_vecMsgList.push_back(CLIGS_REFRESH_ELITE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_REFRESH_ELITE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REFRESH_ELITE_REQ);

	m_EncodeFuncArray[CLIGS_REFRESH_ELITE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REFRESH_ELITE_ACK;
	m_DecodeFuncArray[CLIGS_REFRESH_ELITE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REFRESH_ELITE_ACK;
	m_vecMsgList.push_back(CLIGS_REFRESH_ELITE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_REFRESH_ELITE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REFRESH_ELITE_ACK);

	m_EncodeFuncArray[CLIGS_ONHOOK_ELITE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ONHOOK_ELITE_REQ;
	m_DecodeFuncArray[CLIGS_ONHOOK_ELITE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ONHOOK_ELITE_REQ;
	m_vecMsgList.push_back(CLIGS_ONHOOK_ELITE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ONHOOK_ELITE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ONHOOK_ELITE_REQ);

	m_EncodeFuncArray[CLIGS_ONHOOK_ELITE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ONHOOK_ELITE_ACK;
	m_DecodeFuncArray[CLIGS_ONHOOK_ELITE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ONHOOK_ELITE_ACK;
	m_vecMsgList.push_back(CLIGS_ONHOOK_ELITE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ONHOOK_ELITE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ONHOOK_ELITE_ACK);

	m_EncodeFuncArray[CLIGS_GET_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ITEM_REQ;
	m_DecodeFuncArray[CLIGS_GET_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ITEM_REQ;
	m_vecMsgList.push_back(CLIGS_GET_ITEM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_ITEM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ITEM_REQ);

	m_EncodeFuncArray[CLIGS_GET_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ITEM_ACK;
	m_DecodeFuncArray[CLIGS_GET_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ITEM_ACK;
	m_vecMsgList.push_back(CLIGS_GET_ITEM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_ITEM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ITEM_ACK);

	m_EncodeFuncArray[CLIGS_GET_ORDER_ID_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ORDER_ID_REQ;
	m_DecodeFuncArray[CLIGS_GET_ORDER_ID_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ORDER_ID_REQ;
	m_vecMsgList.push_back(CLIGS_GET_ORDER_ID_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_ORDER_ID_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ORDER_ID_REQ);

	m_EncodeFuncArray[CLIGS_GET_ORDER_ID_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ORDER_ID_ACK;
	m_DecodeFuncArray[CLIGS_GET_ORDER_ID_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ORDER_ID_ACK;
	m_vecMsgList.push_back(CLIGS_GET_ORDER_ID_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_ORDER_ID_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ORDER_ID_ACK);

	m_EncodeFuncArray[CLIGS_EXCHANGE_RESULT - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXCHANGE_RESULT;
	m_DecodeFuncArray[CLIGS_EXCHANGE_RESULT - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXCHANGE_RESULT;
	m_vecMsgList.push_back(CLIGS_EXCHANGE_RESULT);
	if( (INT32)sizeof(PKT_CLIGS_EXCHANGE_RESULT) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXCHANGE_RESULT);

	m_EncodeFuncArray[CLIGS_SEED_COMPOSE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEED_COMPOSE_REQ;
	m_DecodeFuncArray[CLIGS_SEED_COMPOSE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEED_COMPOSE_REQ;
	m_vecMsgList.push_back(CLIGS_SEED_COMPOSE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SEED_COMPOSE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEED_COMPOSE_REQ);

	m_EncodeFuncArray[CLIGS_SEED_COMPOSE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEED_COMPOSE_ACK;
	m_DecodeFuncArray[CLIGS_SEED_COMPOSE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEED_COMPOSE_ACK;
	m_vecMsgList.push_back(CLIGS_SEED_COMPOSE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SEED_COMPOSE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEED_COMPOSE_ACK);

	m_EncodeFuncArray[CLIGS_CHAT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHAT_REQ;
	m_DecodeFuncArray[CLIGS_CHAT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHAT_REQ;
	m_vecMsgList.push_back(CLIGS_CHAT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CHAT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHAT_REQ);

	m_EncodeFuncArray[CLIGS_CHAT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHAT_ACK;
	m_DecodeFuncArray[CLIGS_CHAT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHAT_ACK;
	m_vecMsgList.push_back(CLIGS_CHAT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CHAT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHAT_ACK);

	m_EncodeFuncArray[CLIGS_CHAT_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHAT_NTF;
	m_DecodeFuncArray[CLIGS_CHAT_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHAT_NTF;
	m_vecMsgList.push_back(CLIGS_CHAT_NTF);
	if( (INT32)sizeof(PKT_CLIGS_CHAT_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHAT_NTF);

	m_EncodeFuncArray[CLIGS_CROSS_DAY_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CROSS_DAY_NTF;
	m_DecodeFuncArray[CLIGS_CROSS_DAY_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CROSS_DAY_NTF;
	m_vecMsgList.push_back(CLIGS_CROSS_DAY_NTF);
	if( (INT32)sizeof(PKT_CLIGS_CROSS_DAY_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CROSS_DAY_NTF);

	m_EncodeFuncArray[CLIGS_OPNE_ACTIVITY_CENTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ;
	m_DecodeFuncArray[CLIGS_OPNE_ACTIVITY_CENTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ;
	m_vecMsgList.push_back(CLIGS_OPNE_ACTIVITY_CENTER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ);

	m_EncodeFuncArray[CLIGS_OPNE_ACTIVITY_CENTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK;
	m_DecodeFuncArray[CLIGS_OPNE_ACTIVITY_CENTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK;
	m_vecMsgList.push_back(CLIGS_OPNE_ACTIVITY_CENTER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK);

	m_EncodeFuncArray[CLIGS_OPNE_EAT_BREAD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPNE_EAT_BREAD_REQ;
	m_DecodeFuncArray[CLIGS_OPNE_EAT_BREAD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPNE_EAT_BREAD_REQ;
	m_vecMsgList.push_back(CLIGS_OPNE_EAT_BREAD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPNE_EAT_BREAD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPNE_EAT_BREAD_REQ);

	m_EncodeFuncArray[CLIGS_OPNE_EAT_BREAD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPNE_EAT_BREAD_ACK;
	m_DecodeFuncArray[CLIGS_OPNE_EAT_BREAD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPNE_EAT_BREAD_ACK;
	m_vecMsgList.push_back(CLIGS_OPNE_EAT_BREAD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPNE_EAT_BREAD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPNE_EAT_BREAD_ACK);

	m_EncodeFuncArray[CLIGS_OBTAIN_PHYSTRENGTHEN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ;
	m_DecodeFuncArray[CLIGS_OBTAIN_PHYSTRENGTHEN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ;
	m_vecMsgList.push_back(CLIGS_OBTAIN_PHYSTRENGTHEN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ);

	m_EncodeFuncArray[CLIGS_OBTAIN_PHYSTRENGTHEN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK;
	m_DecodeFuncArray[CLIGS_OBTAIN_PHYSTRENGTHEN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK;
	m_vecMsgList.push_back(CLIGS_OBTAIN_PHYSTRENGTHEN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK);

	m_EncodeFuncArray[CLIGS_LEAVE_EAT_BREAD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEAVE_EAT_BREAD_REQ;
	m_DecodeFuncArray[CLIGS_LEAVE_EAT_BREAD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEAVE_EAT_BREAD_REQ;
	m_vecMsgList.push_back(CLIGS_LEAVE_EAT_BREAD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_LEAVE_EAT_BREAD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEAVE_EAT_BREAD_REQ);

	m_EncodeFuncArray[CLIGS_LEAVE_EAT_BREAD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEAVE_EAT_BREAD_ACK;
	m_DecodeFuncArray[CLIGS_LEAVE_EAT_BREAD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEAVE_EAT_BREAD_ACK;
	m_vecMsgList.push_back(CLIGS_LEAVE_EAT_BREAD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_LEAVE_EAT_BREAD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEAVE_EAT_BREAD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_PAOSHANG_BUILD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_PAOSHANG_BUILD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_PAOSHANG_BUILD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_PAOSHANG_BUILD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_PAOSHANG_BUILD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_PAOSHANG_BUILD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_YABIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_YABIAO_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_YABIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_YABIAO_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_YABIAO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_YABIAO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_YABIAO_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_YABIAO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_YABIAO_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_YABIAO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_YABIAO_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_YABIAO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_YABIAO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_YABIAO_ACK);

	m_EncodeFuncArray[CLIGS_FLUSH_BIAO_QUALITY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FLUSH_BIAO_QUALITY_REQ;
	m_DecodeFuncArray[CLIGS_FLUSH_BIAO_QUALITY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FLUSH_BIAO_QUALITY_REQ;
	m_vecMsgList.push_back(CLIGS_FLUSH_BIAO_QUALITY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_FLUSH_BIAO_QUALITY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FLUSH_BIAO_QUALITY_REQ);

	m_EncodeFuncArray[CLIGS_FLUSH_BIAO_QUALITY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FLUSH_BIAO_QUALITY_ACK;
	m_DecodeFuncArray[CLIGS_FLUSH_BIAO_QUALITY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FLUSH_BIAO_QUALITY_ACK;
	m_vecMsgList.push_back(CLIGS_FLUSH_BIAO_QUALITY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_FLUSH_BIAO_QUALITY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FLUSH_BIAO_QUALITY_ACK);

	m_EncodeFuncArray[CLIGS_CLIMB_TOWER_RESET_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLIMB_TOWER_RESET_REQ;
	m_DecodeFuncArray[CLIGS_CLIMB_TOWER_RESET_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLIMB_TOWER_RESET_REQ;
	m_vecMsgList.push_back(CLIGS_CLIMB_TOWER_RESET_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_RESET_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_RESET_REQ);

	m_EncodeFuncArray[CLIGS_CLIMB_TOWER_RESET_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLIMB_TOWER_RESET_ACK;
	m_DecodeFuncArray[CLIGS_CLIMB_TOWER_RESET_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLIMB_TOWER_RESET_ACK;
	m_vecMsgList.push_back(CLIGS_CLIMB_TOWER_RESET_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_RESET_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_RESET_ACK);

	m_EncodeFuncArray[CLIGS_CLIMB_TOWER_ONHOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ;
	m_DecodeFuncArray[CLIGS_CLIMB_TOWER_ONHOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ;
	m_vecMsgList.push_back(CLIGS_CLIMB_TOWER_ONHOOK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ);

	m_EncodeFuncArray[CLIGS_CLIMB_TOWER_ONHOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK;
	m_DecodeFuncArray[CLIGS_CLIMB_TOWER_ONHOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK;
	m_vecMsgList.push_back(CLIGS_CLIMB_TOWER_ONHOOK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK);

	m_EncodeFuncArray[CLIGS_BEGIN_YABIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BEGIN_YABIAO_REQ;
	m_DecodeFuncArray[CLIGS_BEGIN_YABIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BEGIN_YABIAO_REQ;
	m_vecMsgList.push_back(CLIGS_BEGIN_YABIAO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BEGIN_YABIAO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BEGIN_YABIAO_REQ);

	m_EncodeFuncArray[CLIGS_BEGIN_YABIAO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BEGIN_YABIAO_ACK;
	m_DecodeFuncArray[CLIGS_BEGIN_YABIAO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BEGIN_YABIAO_ACK;
	m_vecMsgList.push_back(CLIGS_BEGIN_YABIAO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BEGIN_YABIAO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BEGIN_YABIAO_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_JIEBIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_JIEBIAO_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_JIEBIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_JIEBIAO_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_JIEBIAO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_JIEBIAO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_JIEBIAO_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_JIEBIAO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_JIEBIAO_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_JIEBIAO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_JIEBIAO_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_JIEBIAO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_JIEBIAO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_JIEBIAO_ACK);

	m_EncodeFuncArray[CLIGS_BEGIN_JIEBIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BEGIN_JIEBIAO_REQ;
	m_DecodeFuncArray[CLIGS_BEGIN_JIEBIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BEGIN_JIEBIAO_REQ;
	m_vecMsgList.push_back(CLIGS_BEGIN_JIEBIAO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BEGIN_JIEBIAO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BEGIN_JIEBIAO_REQ);

	m_EncodeFuncArray[CLIGS_BEGIN_JIEBIAO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BEGIN_JIEBIAO_ACK;
	m_DecodeFuncArray[CLIGS_BEGIN_JIEBIAO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BEGIN_JIEBIAO_ACK;
	m_vecMsgList.push_back(CLIGS_BEGIN_JIEBIAO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BEGIN_JIEBIAO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BEGIN_JIEBIAO_ACK);

	m_EncodeFuncArray[CLIGS_BE_JIEBIAO_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BE_JIEBIAO_NTF;
	m_DecodeFuncArray[CLIGS_BE_JIEBIAO_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BE_JIEBIAO_NTF;
	m_vecMsgList.push_back(CLIGS_BE_JIEBIAO_NTF);
	if( (INT32)sizeof(PKT_CLIGS_BE_JIEBIAO_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BE_JIEBIAO_NTF);

	m_EncodeFuncArray[CLIGS_QUERY_BATTLE_RECORD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUERY_BATTLE_RECORD_REQ;
	m_DecodeFuncArray[CLIGS_QUERY_BATTLE_RECORD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUERY_BATTLE_RECORD_REQ;
	m_vecMsgList.push_back(CLIGS_QUERY_BATTLE_RECORD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_QUERY_BATTLE_RECORD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUERY_BATTLE_RECORD_REQ);

	m_EncodeFuncArray[CLIGS_QUERY_BATTLE_RECORD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK;
	m_DecodeFuncArray[CLIGS_QUERY_BATTLE_RECORD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK;
	m_vecMsgList.push_back(CLIGS_QUERY_BATTLE_RECORD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_QUERY_BATTLE_RECORD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUERY_BATTLE_RECORD_ACK);

	m_EncodeFuncArray[CLIGS_QUERY_YABIAO_BATTLELOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ;
	m_DecodeFuncArray[CLIGS_QUERY_YABIAO_BATTLELOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ;
	m_vecMsgList.push_back(CLIGS_QUERY_YABIAO_BATTLELOG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ);

	m_EncodeFuncArray[CLIGS_QUERY_YABIAO_BATTLELOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK;
	m_DecodeFuncArray[CLIGS_QUERY_YABIAO_BATTLELOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK;
	m_vecMsgList.push_back(CLIGS_QUERY_YABIAO_BATTLELOG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK);

	m_EncodeFuncArray[CLIGS_QUERY_YABIAO_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_QUERY_YABIAO_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_QUERY_YABIAO_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_QUERY_YABIAO_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_QUERY_YABIAO_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_QUERY_YABIAO_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_UPGRADE_JINGJIE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_JINGJIE_REQ;
	m_DecodeFuncArray[CLIGS_UPGRADE_JINGJIE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_JINGJIE_REQ;
	m_vecMsgList.push_back(CLIGS_UPGRADE_JINGJIE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_JINGJIE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_JINGJIE_REQ);

	m_EncodeFuncArray[CLIGS_UPGRADE_JINGJIE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_JINGJIE_ACK;
	m_DecodeFuncArray[CLIGS_UPGRADE_JINGJIE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_JINGJIE_ACK;
	m_vecMsgList.push_back(CLIGS_UPGRADE_JINGJIE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_JINGJIE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_JINGJIE_ACK);

	m_EncodeFuncArray[CLIGS_GEN_GAS_BALL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GEN_GAS_BALL_REQ;
	m_DecodeFuncArray[CLIGS_GEN_GAS_BALL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GEN_GAS_BALL_REQ;
	m_vecMsgList.push_back(CLIGS_GEN_GAS_BALL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GEN_GAS_BALL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GEN_GAS_BALL_REQ);

	m_EncodeFuncArray[CLIGS_GEN_GAS_BALL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GEN_GAS_BALL_ACK;
	m_DecodeFuncArray[CLIGS_GEN_GAS_BALL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GEN_GAS_BALL_ACK;
	m_vecMsgList.push_back(CLIGS_GEN_GAS_BALL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GEN_GAS_BALL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GEN_GAS_BALL_ACK);

	m_EncodeFuncArray[CLIGS_UP_GAS_BALL_LEVEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UP_GAS_BALL_LEVEL_REQ;
	m_DecodeFuncArray[CLIGS_UP_GAS_BALL_LEVEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UP_GAS_BALL_LEVEL_REQ;
	m_vecMsgList.push_back(CLIGS_UP_GAS_BALL_LEVEL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UP_GAS_BALL_LEVEL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UP_GAS_BALL_LEVEL_REQ);

	m_EncodeFuncArray[CLIGS_UP_GAS_BALL_LEVEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UP_GAS_BALL_LEVEL_ACK;
	m_DecodeFuncArray[CLIGS_UP_GAS_BALL_LEVEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UP_GAS_BALL_LEVEL_ACK;
	m_vecMsgList.push_back(CLIGS_UP_GAS_BALL_LEVEL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UP_GAS_BALL_LEVEL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UP_GAS_BALL_LEVEL_ACK);

	m_EncodeFuncArray[CLIGS_COLLECT_GAS_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COLLECT_GAS_REQ;
	m_DecodeFuncArray[CLIGS_COLLECT_GAS_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COLLECT_GAS_REQ;
	m_vecMsgList.push_back(CLIGS_COLLECT_GAS_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COLLECT_GAS_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COLLECT_GAS_REQ);

	m_EncodeFuncArray[CLIGS_COLLECT_GAS_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COLLECT_GAS_ACK;
	m_DecodeFuncArray[CLIGS_COLLECT_GAS_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COLLECT_GAS_ACK;
	m_vecMsgList.push_back(CLIGS_COLLECT_GAS_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COLLECT_GAS_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COLLECT_GAS_ACK);

	m_EncodeFuncArray[CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ;
	m_DecodeFuncArray[CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ;
	m_vecMsgList.push_back(CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ);

	m_EncodeFuncArray[CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK;
	m_DecodeFuncArray[CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK;
	m_vecMsgList.push_back(CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK);

	m_EncodeFuncArray[CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ;
	m_DecodeFuncArray[CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ;
	m_vecMsgList.push_back(CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ);

	m_EncodeFuncArray[CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK;
	m_DecodeFuncArray[CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK;
	m_vecMsgList.push_back(CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_JINGJIE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_JINGJIE_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_JINGJIE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_JINGJIE_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_JINGJIE_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_JINGJIE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_JINGJIE_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_JINGJIE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_JINGJIE_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_JINGJIE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_JINGJIE_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_JINGJIE_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_JINGJIE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_JINGJIE_TAB_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GEN_GAS_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GEN_GAS_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GEN_GAS_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GEN_GAS_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GEN_GAS_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GEN_GAS_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GEN_GAS_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GEN_GAS_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GEN_GAS_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GEN_GAS_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GEN_GAS_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GEN_GAS_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GEN_GAS_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GEN_GAS_TAB_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_SKILL_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SKILL_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_SKILL_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SKILL_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_SKILL_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SKILL_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SKILL_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_SKILL_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SKILL_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_SKILL_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SKILL_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_SKILL_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SKILL_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SKILL_TAB_ACK);

	m_EncodeFuncArray[CLIGS_CLEAR_JIEBIAO_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLEAR_JIEBIAO_CD_REQ;
	m_DecodeFuncArray[CLIGS_CLEAR_JIEBIAO_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLEAR_JIEBIAO_CD_REQ;
	m_vecMsgList.push_back(CLIGS_CLEAR_JIEBIAO_CD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLEAR_JIEBIAO_CD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLEAR_JIEBIAO_CD_REQ);

	m_EncodeFuncArray[CLIGS_CLEAR_JIEBIAO_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLEAR_JIEBIAO_CD_ACK;
	m_DecodeFuncArray[CLIGS_CLEAR_JIEBIAO_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLEAR_JIEBIAO_CD_ACK;
	m_vecMsgList.push_back(CLIGS_CLEAR_JIEBIAO_CD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLEAR_JIEBIAO_CD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLEAR_JIEBIAO_CD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_VIP_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_VIP_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_VIP_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_VIP_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_VIP_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_VIP_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_VIP_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_VIP_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_VIP_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_VIP_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_VIP_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_VIP_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_VIP_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_VIP_TAB_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_CLIMB_TOWER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CLIMB_TOWER_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_CLIMB_TOWER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CLIMB_TOWER_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_CLIMB_TOWER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CLIMB_TOWER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CLIMB_TOWER_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_CLIMB_TOWER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CLIMB_TOWER_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_CLIMB_TOWER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CLIMB_TOWER_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_CLIMB_TOWER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CLIMB_TOWER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CLIMB_TOWER_ACK);

	m_EncodeFuncArray[CLIGS_BUY_CLIMB_TOWER_RESET_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ;
	m_DecodeFuncArray[CLIGS_BUY_CLIMB_TOWER_RESET_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ;
	m_vecMsgList.push_back(CLIGS_BUY_CLIMB_TOWER_RESET_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ);

	m_EncodeFuncArray[CLIGS_BUY_CLIMB_TOWER_RESET_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK;
	m_DecodeFuncArray[CLIGS_BUY_CLIMB_TOWER_RESET_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK;
	m_vecMsgList.push_back(CLIGS_BUY_CLIMB_TOWER_RESET_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_XIANGQIAN_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_XIANGQIAN_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_XIANGQIAN_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_XIANGQIAN_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_XIANGQIAN_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_XIANGQIAN_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK);

	m_EncodeFuncArray[CLIGS_XIANGQIAN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_XIANGQIAN_REQ;
	m_DecodeFuncArray[CLIGS_XIANGQIAN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_XIANGQIAN_REQ;
	m_vecMsgList.push_back(CLIGS_XIANGQIAN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_XIANGQIAN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_XIANGQIAN_REQ);

	m_EncodeFuncArray[CLIGS_XIANGQIAN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_XIANGQIAN_ACK;
	m_DecodeFuncArray[CLIGS_XIANGQIAN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_XIANGQIAN_ACK;
	m_vecMsgList.push_back(CLIGS_XIANGQIAN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_XIANGQIAN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_XIANGQIAN_ACK);

	m_EncodeFuncArray[CLIGS_CHECK_APPSTORE_ORDER_ID_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ;
	m_DecodeFuncArray[CLIGS_CHECK_APPSTORE_ORDER_ID_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ;
	m_vecMsgList.push_back(CLIGS_CHECK_APPSTORE_ORDER_ID_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ);

	m_EncodeFuncArray[CLIGS_CHECK_APPSTORE_ORDER_ID_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK;
	m_DecodeFuncArray[CLIGS_CHECK_APPSTORE_ORDER_ID_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK;
	m_vecMsgList.push_back(CLIGS_CHECK_APPSTORE_ORDER_ID_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK);

	m_EncodeFuncArray[CLIGS_REMOVE_XIANGQIAN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REMOVE_XIANGQIAN_REQ;
	m_DecodeFuncArray[CLIGS_REMOVE_XIANGQIAN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REMOVE_XIANGQIAN_REQ;
	m_vecMsgList.push_back(CLIGS_REMOVE_XIANGQIAN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_REMOVE_XIANGQIAN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REMOVE_XIANGQIAN_REQ);

	m_EncodeFuncArray[CLIGS_REMOVE_XIANGQIAN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REMOVE_XIANGQIAN_ACK;
	m_DecodeFuncArray[CLIGS_REMOVE_XIANGQIAN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REMOVE_XIANGQIAN_ACK;
	m_vecMsgList.push_back(CLIGS_REMOVE_XIANGQIAN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_REMOVE_XIANGQIAN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REMOVE_XIANGQIAN_ACK);

	m_EncodeFuncArray[CLIGS_RESET_ELITE_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RESET_ELITE_INSTANCE_REQ;
	m_DecodeFuncArray[CLIGS_RESET_ELITE_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RESET_ELITE_INSTANCE_REQ;
	m_vecMsgList.push_back(CLIGS_RESET_ELITE_INSTANCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RESET_ELITE_INSTANCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RESET_ELITE_INSTANCE_REQ);

	m_EncodeFuncArray[CLIGS_RESET_ELITE_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RESET_ELITE_INSTANCE_ACK;
	m_DecodeFuncArray[CLIGS_RESET_ELITE_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RESET_ELITE_INSTANCE_ACK;
	m_vecMsgList.push_back(CLIGS_RESET_ELITE_INSTANCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RESET_ELITE_INSTANCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RESET_ELITE_INSTANCE_ACK);

	m_EncodeFuncArray[CLIGS_ELITE_INSTANCE_ON_HOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ;
	m_DecodeFuncArray[CLIGS_ELITE_INSTANCE_ON_HOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ;
	m_vecMsgList.push_back(CLIGS_ELITE_INSTANCE_ON_HOOK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ);

	m_EncodeFuncArray[CLIGS_ELITE_INSTANCE_ON_HOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK;
	m_DecodeFuncArray[CLIGS_ELITE_INSTANCE_ON_HOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK;
	m_vecMsgList.push_back(CLIGS_ELITE_INSTANCE_ON_HOOK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK);

	m_EncodeFuncArray[CLIGS_GET_ELITE_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ELITE_INSTANCE_REQ;
	m_DecodeFuncArray[CLIGS_GET_ELITE_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ELITE_INSTANCE_REQ;
	m_vecMsgList.push_back(CLIGS_GET_ELITE_INSTANCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_ELITE_INSTANCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ELITE_INSTANCE_REQ);

	m_EncodeFuncArray[CLIGS_GET_ELITE_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ELITE_INSTANCE_ACK;
	m_DecodeFuncArray[CLIGS_GET_ELITE_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ELITE_INSTANCE_ACK;
	m_vecMsgList.push_back(CLIGS_GET_ELITE_INSTANCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_ELITE_INSTANCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ELITE_INSTANCE_ACK);

	m_EncodeFuncArray[CLIGS_QUICK_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUICK_EQUIP_REQ;
	m_DecodeFuncArray[CLIGS_QUICK_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUICK_EQUIP_REQ;
	m_vecMsgList.push_back(CLIGS_QUICK_EQUIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_QUICK_EQUIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUICK_EQUIP_REQ);

	m_EncodeFuncArray[CLIGS_QUICK_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUICK_EQUIP_ACK;
	m_DecodeFuncArray[CLIGS_QUICK_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUICK_EQUIP_ACK;
	m_vecMsgList.push_back(CLIGS_QUICK_EQUIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_QUICK_EQUIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUICK_EQUIP_ACK);

	m_EncodeFuncArray[CLIGS_GET_ACTIVITY_PROMPT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ACTIVITY_PROMPT_REQ;
	m_DecodeFuncArray[CLIGS_GET_ACTIVITY_PROMPT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ACTIVITY_PROMPT_REQ;
	m_vecMsgList.push_back(CLIGS_GET_ACTIVITY_PROMPT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_PROMPT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_PROMPT_REQ);

	m_EncodeFuncArray[CLIGS_GET_ACTIVITY_PROMPT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ACTIVITY_PROMPT_ACK;
	m_DecodeFuncArray[CLIGS_GET_ACTIVITY_PROMPT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ACTIVITY_PROMPT_ACK;
	m_vecMsgList.push_back(CLIGS_GET_ACTIVITY_PROMPT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_PROMPT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_PROMPT_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_CHAT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CHAT_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_CHAT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CHAT_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_CHAT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CHAT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CHAT_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_CHAT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CHAT_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_CHAT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CHAT_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_CHAT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CHAT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CHAT_ACK);

	m_EncodeFuncArray[CLIGS_BLUE_TO_PURPLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BLUE_TO_PURPLE_REQ;
	m_DecodeFuncArray[CLIGS_BLUE_TO_PURPLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BLUE_TO_PURPLE_REQ;
	m_vecMsgList.push_back(CLIGS_BLUE_TO_PURPLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BLUE_TO_PURPLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BLUE_TO_PURPLE_REQ);

	m_EncodeFuncArray[CLIGS_BLUE_TO_PURPLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BLUE_TO_PURPLE_ACK;
	m_DecodeFuncArray[CLIGS_BLUE_TO_PURPLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BLUE_TO_PURPLE_ACK;
	m_vecMsgList.push_back(CLIGS_BLUE_TO_PURPLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BLUE_TO_PURPLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BLUE_TO_PURPLE_ACK);

	m_EncodeFuncArray[CLIGS_PKBATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PKBATTLE_REQ;
	m_DecodeFuncArray[CLIGS_PKBATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PKBATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_PKBATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PKBATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PKBATTLE_REQ);

	m_EncodeFuncArray[CLIGS_PKBATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PKBATTLE_ACK;
	m_DecodeFuncArray[CLIGS_PKBATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PKBATTLE_ACK;
	m_vecMsgList.push_back(CLIGS_PKBATTLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PKBATTLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PKBATTLE_ACK);

	m_EncodeFuncArray[CLIGS_RESOURCES_PROMPT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RESOURCES_PROMPT_REQ;
	m_DecodeFuncArray[CLIGS_RESOURCES_PROMPT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RESOURCES_PROMPT_REQ;
	m_vecMsgList.push_back(CLIGS_RESOURCES_PROMPT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RESOURCES_PROMPT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RESOURCES_PROMPT_REQ);

	m_EncodeFuncArray[CLIGS_RESOURCES_PROMPT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RESOURCES_PROMPT_ACK;
	m_DecodeFuncArray[CLIGS_RESOURCES_PROMPT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RESOURCES_PROMPT_ACK;
	m_vecMsgList.push_back(CLIGS_RESOURCES_PROMPT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RESOURCES_PROMPT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RESOURCES_PROMPT_ACK);

	m_EncodeFuncArray[ENTER_BOSSB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_ENTER_BOSSB_REQ;
	m_DecodeFuncArray[ENTER_BOSSB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_ENTER_BOSSB_REQ;
	m_vecMsgList.push_back(ENTER_BOSSB_REQ);
	if( (INT32)sizeof(PKT_ENTER_BOSSB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_ENTER_BOSSB_REQ);

	m_EncodeFuncArray[ENTER_BOSSB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_ENTER_BOSSB_ACK;
	m_DecodeFuncArray[ENTER_BOSSB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_ENTER_BOSSB_ACK;
	m_vecMsgList.push_back(ENTER_BOSSB_ACK);
	if( (INT32)sizeof(PKT_ENTER_BOSSB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_ENTER_BOSSB_ACK);

	m_EncodeFuncArray[LEAVE_BOSSB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_LEAVE_BOSSB_REQ;
	m_DecodeFuncArray[LEAVE_BOSSB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_LEAVE_BOSSB_REQ;
	m_vecMsgList.push_back(LEAVE_BOSSB_REQ);
	if( (INT32)sizeof(PKT_LEAVE_BOSSB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_LEAVE_BOSSB_REQ);

	m_EncodeFuncArray[LEAVE_BOSSB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_LEAVE_BOSSB_ACK;
	m_DecodeFuncArray[LEAVE_BOSSB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_LEAVE_BOSSB_ACK;
	m_vecMsgList.push_back(LEAVE_BOSSB_ACK);
	if( (INT32)sizeof(PKT_LEAVE_BOSSB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_LEAVE_BOSSB_ACK);

	m_EncodeFuncArray[BOSSB_MOVE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_MOVE_REQ;
	m_DecodeFuncArray[BOSSB_MOVE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_MOVE_REQ;
	m_vecMsgList.push_back(BOSSB_MOVE_REQ);
	if( (INT32)sizeof(PKT_BOSSB_MOVE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_MOVE_REQ);

	m_EncodeFuncArray[BOSSB_MOVE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_MOVE_ACK;
	m_DecodeFuncArray[BOSSB_MOVE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_MOVE_ACK;
	m_vecMsgList.push_back(BOSSB_MOVE_ACK);
	if( (INT32)sizeof(PKT_BOSSB_MOVE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_MOVE_ACK);

	m_EncodeFuncArray[BOSSB_HURT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_HURT_REQ;
	m_DecodeFuncArray[BOSSB_HURT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_HURT_REQ;
	m_vecMsgList.push_back(BOSSB_HURT_REQ);
	if( (INT32)sizeof(PKT_BOSSB_HURT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_HURT_REQ);

	m_EncodeFuncArray[BOSSB_HURT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_HURT_ACK;
	m_DecodeFuncArray[BOSSB_HURT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_HURT_ACK;
	m_vecMsgList.push_back(BOSSB_HURT_ACK);
	if( (INT32)sizeof(PKT_BOSSB_HURT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_HURT_ACK);

	m_EncodeFuncArray[BOSSB_POS_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_POS_NTF;
	m_DecodeFuncArray[BOSSB_POS_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_POS_NTF;
	m_vecMsgList.push_back(BOSSB_POS_NTF);
	if( (INT32)sizeof(PKT_BOSSB_POS_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_POS_NTF);

	m_EncodeFuncArray[BOSSB_PLAYER_HRUT_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_PLAYER_HRUT_NTF;
	m_DecodeFuncArray[BOSSB_PLAYER_HRUT_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_PLAYER_HRUT_NTF;
	m_vecMsgList.push_back(BOSSB_PLAYER_HRUT_NTF);
	if( (INT32)sizeof(PKT_BOSSB_PLAYER_HRUT_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_PLAYER_HRUT_NTF);

	m_EncodeFuncArray[BOSSB_OVER_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_OVER_NTF;
	m_DecodeFuncArray[BOSSB_OVER_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_OVER_NTF;
	m_vecMsgList.push_back(BOSSB_OVER_NTF);
	if( (INT32)sizeof(PKT_BOSSB_OVER_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_OVER_NTF);

	m_EncodeFuncArray[OPEN_INSPIRE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_OPEN_INSPIRE_TAB_REQ;
	m_DecodeFuncArray[OPEN_INSPIRE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_OPEN_INSPIRE_TAB_REQ;
	m_vecMsgList.push_back(OPEN_INSPIRE_TAB_REQ);
	if( (INT32)sizeof(PKT_OPEN_INSPIRE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_OPEN_INSPIRE_TAB_REQ);

	m_EncodeFuncArray[OPEN_INSPIRE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_OPEN_INSPIRE_TAB_ACK;
	m_DecodeFuncArray[OPEN_INSPIRE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_OPEN_INSPIRE_TAB_ACK;
	m_vecMsgList.push_back(OPEN_INSPIRE_TAB_ACK);
	if( (INT32)sizeof(PKT_OPEN_INSPIRE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_OPEN_INSPIRE_TAB_ACK);

	m_EncodeFuncArray[INSPIRE_POWER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_INSPIRE_POWER_REQ;
	m_DecodeFuncArray[INSPIRE_POWER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_INSPIRE_POWER_REQ;
	m_vecMsgList.push_back(INSPIRE_POWER_REQ);
	if( (INT32)sizeof(PKT_INSPIRE_POWER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_INSPIRE_POWER_REQ);

	m_EncodeFuncArray[INSPIRE_POWER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_INSPIRE_POWER_ACK;
	m_DecodeFuncArray[INSPIRE_POWER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_INSPIRE_POWER_ACK;
	m_vecMsgList.push_back(INSPIRE_POWER_ACK);
	if( (INT32)sizeof(PKT_INSPIRE_POWER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_INSPIRE_POWER_ACK);

	m_EncodeFuncArray[BOSSB_RELIVE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_RELIVE_REQ;
	m_DecodeFuncArray[BOSSB_RELIVE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_RELIVE_REQ;
	m_vecMsgList.push_back(BOSSB_RELIVE_REQ);
	if( (INT32)sizeof(PKT_BOSSB_RELIVE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_RELIVE_REQ);

	m_EncodeFuncArray[BOSSB_RELIVE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_RELIVE_ACK;
	m_DecodeFuncArray[BOSSB_RELIVE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_RELIVE_ACK;
	m_vecMsgList.push_back(BOSSB_RELIVE_ACK);
	if( (INT32)sizeof(PKT_BOSSB_RELIVE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_RELIVE_ACK);

	m_EncodeFuncArray[BOSSB_GET_LAST_BOSSB_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_GET_LAST_BOSSB_INFO_REQ;
	m_DecodeFuncArray[BOSSB_GET_LAST_BOSSB_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_GET_LAST_BOSSB_INFO_REQ;
	m_vecMsgList.push_back(BOSSB_GET_LAST_BOSSB_INFO_REQ);
	if( (INT32)sizeof(PKT_BOSSB_GET_LAST_BOSSB_INFO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_GET_LAST_BOSSB_INFO_REQ);

	m_EncodeFuncArray[BOSSB_GET_LAST_BOSSB_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_GET_LAST_BOSSB_INFO_ACK;
	m_DecodeFuncArray[BOSSB_GET_LAST_BOSSB_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_GET_LAST_BOSSB_INFO_ACK;
	m_vecMsgList.push_back(BOSSB_GET_LAST_BOSSB_INFO_ACK);
	if( (INT32)sizeof(PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK);

	m_EncodeFuncArray[CLILS_OPEN_RECHARGE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLILS_OPEN_RECHARGE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLILS_OPEN_RECHARGE_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLILS_OPEN_RECHARGE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLILS_OPEN_RECHARGE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLILS_OPEN_RECHARGE_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_RECV_RECHARGE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_RECHARGE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_RECHARGE_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_RECHARGE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_RECHARGE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_RECHARGE_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLILS_OPEN_SCORE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLILS_OPEN_SCORE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLILS_OPEN_SCORE_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLILS_OPEN_SCORE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLILS_OPEN_SCORE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLILS_OPEN_SCORE_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_RECV_SCORE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_SCORE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_SCORE_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_SCORE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_SCORE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_SCORE_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_GET_RANDOM_DSPNAME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_RANDOM_DSPNAME_REQ;
	m_DecodeFuncArray[CLIGS_GET_RANDOM_DSPNAME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_RANDOM_DSPNAME_REQ;
	m_vecMsgList.push_back(CLIGS_GET_RANDOM_DSPNAME_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_RANDOM_DSPNAME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_RANDOM_DSPNAME_REQ);

	m_EncodeFuncArray[CLIGS_GET_RANDOM_DSPNAME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_RANDOM_DSPNAME_ACK;
	m_DecodeFuncArray[CLIGS_GET_RANDOM_DSPNAME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_RANDOM_DSPNAME_ACK;
	m_vecMsgList.push_back(CLIGS_GET_RANDOM_DSPNAME_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_RANDOM_DSPNAME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_RANDOM_DSPNAME_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK);

	m_EncodeFuncArray[CLIGS_EXPERIENCE_TRANSFER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXPERIENCE_TRANSFER_REQ;
	m_DecodeFuncArray[CLIGS_EXPERIENCE_TRANSFER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXPERIENCE_TRANSFER_REQ;
	m_vecMsgList.push_back(CLIGS_EXPERIENCE_TRANSFER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EXPERIENCE_TRANSFER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXPERIENCE_TRANSFER_REQ);

	m_EncodeFuncArray[CLIGS_EXPERIENCE_TRANSFER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXPERIENCE_TRANSFER_ACK;
	m_DecodeFuncArray[CLIGS_EXPERIENCE_TRANSFER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXPERIENCE_TRANSFER_ACK;
	m_vecMsgList.push_back(CLIGS_EXPERIENCE_TRANSFER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EXPERIENCE_TRANSFER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXPERIENCE_TRANSFER_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_RDCHALLENGE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_RDCHALLENGE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_RDCHALLENGE_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_RDCHALLENGE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_RDCHALLENGE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_RDCHALLENGE_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK);

	m_EncodeFuncArray[CLIGS_RDCHALLENGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RDCHALLENGE_REQ;
	m_DecodeFuncArray[CLIGS_RDCHALLENGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RDCHALLENGE_REQ;
	m_vecMsgList.push_back(CLIGS_RDCHALLENGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RDCHALLENGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RDCHALLENGE_REQ);

	m_EncodeFuncArray[CLIGS_RDCHALLENGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RDCHALLENGE_ACK;
	m_DecodeFuncArray[CLIGS_RDCHALLENGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RDCHALLENGE_ACK;
	m_vecMsgList.push_back(CLIGS_RDCHALLENGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RDCHALLENGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RDCHALLENGE_ACK);

	m_EncodeFuncArray[CLIGS_CLR_RDCHALLENGE_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_RDCHALLENGE_CD_REQ;
	m_DecodeFuncArray[CLIGS_CLR_RDCHALLENGE_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_RDCHALLENGE_CD_REQ;
	m_vecMsgList.push_back(CLIGS_CLR_RDCHALLENGE_CD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLR_RDCHALLENGE_CD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_RDCHALLENGE_CD_REQ);

	m_EncodeFuncArray[CLIGS_CLR_RDCHALLENGE_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_RDCHALLENGE_CD_ACK;
	m_DecodeFuncArray[CLIGS_CLR_RDCHALLENGE_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_RDCHALLENGE_CD_ACK;
	m_vecMsgList.push_back(CLIGS_CLR_RDCHALLENGE_CD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLR_RDCHALLENGE_CD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_RDCHALLENGE_CD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_WORSHIP_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_WORSHIP_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_WORSHIP_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_WORSHIP_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_WORSHIP_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_WORSHIP_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_WORSHIP_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_WORSHIP_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_WORSHIP_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_WORSHIP_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_WORSHIP_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_WORSHIP_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_WORSHIP_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_WORSHIP_TAB_ACK);

	m_EncodeFuncArray[CLIGS_WORSHIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_WORSHIP_REQ;
	m_DecodeFuncArray[CLIGS_WORSHIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_WORSHIP_REQ;
	m_vecMsgList.push_back(CLIGS_WORSHIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_WORSHIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_WORSHIP_REQ);

	m_EncodeFuncArray[CLIGS_WORSHIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_WORSHIP_ACK;
	m_DecodeFuncArray[CLIGS_WORSHIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_WORSHIP_ACK;
	m_vecMsgList.push_back(CLIGS_WORSHIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_WORSHIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_WORSHIP_ACK);

	m_EncodeFuncArray[CLIGS_RECV_RATING_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_RATING_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_RATING_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_RATING_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_RATING_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_RATING_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_RATING_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_RATING_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_RATING_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_RATING_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_RATING_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_RATING_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_RATING_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_RATING_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_ACTIVITY_NOTIFY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACTIVITY_NOTIFY_REQ;
	m_DecodeFuncArray[CLIGS_ACTIVITY_NOTIFY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACTIVITY_NOTIFY_REQ;
	m_vecMsgList.push_back(CLIGS_ACTIVITY_NOTIFY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ACTIVITY_NOTIFY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACTIVITY_NOTIFY_REQ);

	m_EncodeFuncArray[CLIGS_ACTIVITY_NOTIFY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACTIVITY_NOTIFY_ACK;
	m_DecodeFuncArray[CLIGS_ACTIVITY_NOTIFY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACTIVITY_NOTIFY_ACK;
	m_vecMsgList.push_back(CLIGS_ACTIVITY_NOTIFY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ACTIVITY_NOTIFY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACTIVITY_NOTIFY_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_DOGFECES_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DOGFECES_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_DOGFECES_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DOGFECES_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_DOGFECES_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DOGFECES_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DOGFECES_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_DOGFECES_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DOGFECES_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_DOGFECES_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DOGFECES_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_DOGFECES_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DOGFECES_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DOGFECES_ACK);

	m_EncodeFuncArray[CLIGS_GET_ACTIVITY_CENTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ACTIVITY_CENTER_REQ;
	m_DecodeFuncArray[CLIGS_GET_ACTIVITY_CENTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ACTIVITY_CENTER_REQ;
	m_vecMsgList.push_back(CLIGS_GET_ACTIVITY_CENTER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_CENTER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_CENTER_REQ);

	m_EncodeFuncArray[CLIGS_GET_ACTIVITY_CENTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ACTIVITY_CENTER_ACK;
	m_DecodeFuncArray[CLIGS_GET_ACTIVITY_CENTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ACTIVITY_CENTER_ACK;
	m_vecMsgList.push_back(CLIGS_GET_ACTIVITY_CENTER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_CENTER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_CENTER_ACK);

	m_EncodeFuncArray[BOSSB_INFO_SYNC_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_INFO_SYNC_NTF;
	m_DecodeFuncArray[BOSSB_INFO_SYNC_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_INFO_SYNC_NTF;
	m_vecMsgList.push_back(BOSSB_INFO_SYNC_NTF);
	if( (INT32)sizeof(PKT_BOSSB_INFO_SYNC_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_INFO_SYNC_NTF);

	m_EncodeFuncArray[CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ;
	m_DecodeFuncArray[CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ;
	m_vecMsgList.push_back(CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ);

	m_EncodeFuncArray[CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK;
	m_DecodeFuncArray[CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK;
	m_vecMsgList.push_back(CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK);

	m_EncodeFuncArray[CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GEM_MAKER_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GEM_MAKER_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GEM_MAKER_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GEM_MAKER_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GEM_MAKER_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GEM_MAKER_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK);

	m_EncodeFuncArray[CLIGS_EXCHANGE_STUDY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXCHANGE_STUDY_REQ;
	m_DecodeFuncArray[CLIGS_EXCHANGE_STUDY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXCHANGE_STUDY_REQ;
	m_vecMsgList.push_back(CLIGS_EXCHANGE_STUDY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EXCHANGE_STUDY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXCHANGE_STUDY_REQ);

	m_EncodeFuncArray[CLIGS_EXCHANGE_STUDY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXCHANGE_STUDY_ACK;
	m_DecodeFuncArray[CLIGS_EXCHANGE_STUDY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXCHANGE_STUDY_ACK;
	m_vecMsgList.push_back(CLIGS_EXCHANGE_STUDY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EXCHANGE_STUDY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXCHANGE_STUDY_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK);

	m_EncodeFuncArray[CLIGS_EQUIP_COMPOSE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_COMPOSE_REQ;
	m_DecodeFuncArray[CLIGS_EQUIP_COMPOSE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_COMPOSE_REQ;
	m_vecMsgList.push_back(CLIGS_EQUIP_COMPOSE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_COMPOSE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_COMPOSE_REQ);

	m_EncodeFuncArray[CLIGS_EQUIP_COMPOSE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_COMPOSE_ACK;
	m_DecodeFuncArray[CLIGS_EQUIP_COMPOSE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_COMPOSE_ACK;
	m_vecMsgList.push_back(CLIGS_EQUIP_COMPOSE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_COMPOSE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_COMPOSE_ACK);

	m_EncodeFuncArray[CLIGS_RECV_COMPOSE_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_COMPOSE_EQUIP_REQ;
	m_DecodeFuncArray[CLIGS_RECV_COMPOSE_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_COMPOSE_EQUIP_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_COMPOSE_EQUIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_COMPOSE_EQUIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_COMPOSE_EQUIP_REQ);

	m_EncodeFuncArray[CLIGS_RECV_COMPOSE_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_COMPOSE_EQUIP_ACK;
	m_DecodeFuncArray[CLIGS_RECV_COMPOSE_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_COMPOSE_EQUIP_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_COMPOSE_EQUIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_COMPOSE_EQUIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_COMPOSE_EQUIP_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_APPLY_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_APPLY_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_APPLY_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_APPLY_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_APPLY_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_APPLY_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_APPLY_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_APPLY_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_APPLY_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_APPLY_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_APPLY_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_APPLY_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_APPLY_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_APPLY_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_CANCEL_APPLY_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CANCEL_APPLY_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_CANCEL_APPLY_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CANCEL_APPLY_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_CANCEL_APPLY_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CANCEL_APPLY_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CANCEL_APPLY_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_CANCEL_APPLY_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CANCEL_APPLY_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_CANCEL_APPLY_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CANCEL_APPLY_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_CANCEL_APPLY_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CANCEL_APPLY_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CANCEL_APPLY_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_CREATE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CREATE_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_CREATE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CREATE_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_CREATE_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CREATE_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CREATE_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_CREATE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CREATE_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_CREATE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CREATE_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_CREATE_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CREATE_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CREATE_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_SEARCH_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEARCH_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_SEARCH_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEARCH_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_SEARCH_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SEARCH_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEARCH_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_SEARCH_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEARCH_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_SEARCH_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEARCH_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_SEARCH_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SEARCH_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEARCH_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_OWNER_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_OWNER_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_OWNER_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_OWNER_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_OWNER_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_OWNER_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_OWNER_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_OWNER_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_OWNER_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_OWNER_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_OWNER_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_OWNER_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_OWNER_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_OWNER_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_CONTRIBUTION_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CONTRIBUTION_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_CONTRIBUTION_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CONTRIBUTION_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_CONTRIBUTION_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CONTRIBUTION_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CONTRIBUTION_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_CONTRIBUTION_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CONTRIBUTION_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_CONTRIBUTION_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CONTRIBUTION_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_CONTRIBUTION_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CONTRIBUTION_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CONTRIBUTION_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_CONTRIBUTION_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CONTRIBUTION_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_CONTRIBUTION_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CONTRIBUTION_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_CONTRIBUTION_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CONTRIBUTION_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CONTRIBUTION_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_CONTRIBUTION_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CONTRIBUTION_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_CONTRIBUTION_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CONTRIBUTION_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_CONTRIBUTION_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CONTRIBUTION_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CONTRIBUTION_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_KICKED_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_KICKED_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_KICKED_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_KICKED_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_KICKED_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_KICKED_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_KICKED_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_KICKED_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_KICKED_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_KICKED_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_KICKED_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_KICKED_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_KICKED_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_KICKED_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_JOB_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JOB_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_JOB_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JOB_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_JOB_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_JOB_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JOB_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_JOB_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JOB_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_JOB_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JOB_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_JOB_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_JOB_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JOB_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_SET_NOTICE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SET_NOTICE_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_SET_NOTICE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SET_NOTICE_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_SET_NOTICE_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SET_NOTICE_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SET_NOTICE_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_SET_NOTICE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SET_NOTICE_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_SET_NOTICE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SET_NOTICE_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_SET_NOTICE_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SET_NOTICE_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SET_NOTICE_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_DISSOLVE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DISSOLVE_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_DISSOLVE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DISSOLVE_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_DISSOLVE_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DISSOLVE_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DISSOLVE_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_DISSOLVE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DISSOLVE_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_DISSOLVE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DISSOLVE_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_DISSOLVE_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DISSOLVE_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DISSOLVE_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_AUDIT_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AUDIT_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_AUDIT_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AUDIT_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_AUDIT_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_AUDIT_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AUDIT_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_AUDIT_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AUDIT_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_AUDIT_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AUDIT_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_AUDIT_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_AUDIT_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AUDIT_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_APPLY_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_APPLY_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_APPLY_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_APPLY_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_APPLY_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_APPLY_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_APPLY_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_APPLY_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_APPLY_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_APPLY_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_APPLY_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_APPLY_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_APPLY_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_APPLY_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_RANK_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RANK_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_RANK_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RANK_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_RANK_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RANK_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RANK_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_RANK_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RANK_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_RANK_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RANK_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_RANK_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RANK_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RANK_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_AUDIT_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AUDIT_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_AUDIT_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AUDIT_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_AUDIT_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AUDIT_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AUDIT_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_AUDIT_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AUDIT_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_AUDIT_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AUDIT_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_AUDIT_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AUDIT_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AUDIT_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_LOG_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_LOG_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_LOG_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_LOG_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_LOG_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_LOG_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_LOG_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_LOG_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_LOG_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_LOG_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_LOG_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_LOG_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_LOG_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_LOG_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GATHER_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GATHER_SCIENCE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GATHER_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GATHER_SCIENCE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GATHER_SCIENCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GATHER_SCIENCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GATHER_SCIENCE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GATHER_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GATHER_SCIENCE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GATHER_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GATHER_SCIENCE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GATHER_SCIENCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GATHER_SCIENCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GATHER_SCIENCE_ACK);

	m_EncodeFuncArray[CLIGS_GATHER_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GATHER_SCIENCE_REQ;
	m_DecodeFuncArray[CLIGS_GATHER_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GATHER_SCIENCE_REQ;
	m_vecMsgList.push_back(CLIGS_GATHER_SCIENCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GATHER_SCIENCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GATHER_SCIENCE_REQ);

	m_EncodeFuncArray[CLIGS_GATHER_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GATHER_SCIENCE_ACK;
	m_DecodeFuncArray[CLIGS_GATHER_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GATHER_SCIENCE_ACK;
	m_vecMsgList.push_back(CLIGS_GATHER_SCIENCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GATHER_SCIENCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GATHER_SCIENCE_ACK);

	m_EncodeFuncArray[CLIGS_MELT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MELT_REQ;
	m_DecodeFuncArray[CLIGS_MELT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MELT_REQ;
	m_vecMsgList.push_back(CLIGS_MELT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_MELT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MELT_REQ);

	m_EncodeFuncArray[CLIGS_MELT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MELT_ACK;
	m_DecodeFuncArray[CLIGS_MELT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MELT_ACK;
	m_vecMsgList.push_back(CLIGS_MELT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_MELT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MELT_ACK);

	m_EncodeFuncArray[CLIGS_NOTICE_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_NOTICE_NTF;
	m_DecodeFuncArray[CLIGS_NOTICE_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_NOTICE_NTF;
	m_vecMsgList.push_back(CLIGS_NOTICE_NTF);
	if( (INT32)sizeof(PKT_CLIGS_NOTICE_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_NOTICE_NTF);

	m_EncodeFuncArray[CLIGS_ACTIVITY_ENC_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACTIVITY_ENC_NTF;
	m_DecodeFuncArray[CLIGS_ACTIVITY_ENC_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACTIVITY_ENC_NTF;
	m_vecMsgList.push_back(CLIGS_ACTIVITY_ENC_NTF);
	if( (INT32)sizeof(PKT_CLIGS_ACTIVITY_ENC_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACTIVITY_ENC_NTF);

	m_EncodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ2;
	m_DecodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ2;
	m_vecMsgList.push_back(CLIGS_OPEN_AWAKEN_TAB_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_REQ2);

	m_EncodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK2;
	m_DecodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK2;
	m_vecMsgList.push_back(CLIGS_OPEN_AWAKEN_TAB_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_ACK2);

	m_EncodeFuncArray[CLIGS_AWAKEN_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AWAKEN_REQ2;
	m_DecodeFuncArray[CLIGS_AWAKEN_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AWAKEN_REQ2;
	m_vecMsgList.push_back(CLIGS_AWAKEN_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_AWAKEN_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AWAKEN_REQ2);

	m_EncodeFuncArray[CLIGS_AWAKEN_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AWAKEN_ACK2;
	m_DecodeFuncArray[CLIGS_AWAKEN_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AWAKEN_ACK2;
	m_vecMsgList.push_back(CLIGS_AWAKEN_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_AWAKEN_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AWAKEN_ACK2);

	m_EncodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2;
	m_DecodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2;
	m_vecMsgList.push_back(CLIGS_OPEN_DRESS_STUDY_TAB_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2);

	m_EncodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2;
	m_DecodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2;
	m_vecMsgList.push_back(CLIGS_OPEN_DRESS_STUDY_TAB_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2);

	m_EncodeFuncArray[CLIGS_DRESS_STUDY_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRESS_STUDY_REQ2;
	m_DecodeFuncArray[CLIGS_DRESS_STUDY_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRESS_STUDY_REQ2;
	m_vecMsgList.push_back(CLIGS_DRESS_STUDY_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_REQ2);

	m_EncodeFuncArray[CLIGS_DRESS_STUDY_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRESS_STUDY_ACK2;
	m_DecodeFuncArray[CLIGS_DRESS_STUDY_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRESS_STUDY_ACK2;
	m_vecMsgList.push_back(CLIGS_DRESS_STUDY_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_ACK2);

	m_EncodeFuncArray[CLIGS_STUDY_TO_EXP_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_TO_EXP_REQ2;
	m_DecodeFuncArray[CLIGS_STUDY_TO_EXP_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_TO_EXP_REQ2;
	m_vecMsgList.push_back(CLIGS_STUDY_TO_EXP_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_REQ2);

	m_EncodeFuncArray[CLIGS_STUDY_TO_EXP_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_TO_EXP_ACK2;
	m_DecodeFuncArray[CLIGS_STUDY_TO_EXP_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_TO_EXP_ACK2;
	m_vecMsgList.push_back(CLIGS_STUDY_TO_EXP_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_ACK2);

	m_EncodeFuncArray[CLIGS_STUDY_UPGRADE_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_UPGRADE_REQ2;
	m_DecodeFuncArray[CLIGS_STUDY_UPGRADE_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_UPGRADE_REQ2;
	m_vecMsgList.push_back(CLIGS_STUDY_UPGRADE_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_REQ2);

	m_EncodeFuncArray[CLIGS_STUDY_UPGRADE_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_UPGRADE_ACK2;
	m_DecodeFuncArray[CLIGS_STUDY_UPGRADE_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_UPGRADE_ACK2;
	m_vecMsgList.push_back(CLIGS_STUDY_UPGRADE_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_ACK2);

	m_EncodeFuncArray[CLIGS_OPEN_BLUE_PAVILION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BLUE_PAVILION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_BLUE_PAVILION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BLUE_PAVILION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_BLUE_PAVILION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BLUE_PAVILION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BLUE_PAVILION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_BLUE_PAVILION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BLUE_PAVILION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_BLUE_PAVILION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BLUE_PAVILION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_BLUE_PAVILION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BLUE_PAVILION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BLUE_PAVILION_ACK);

	m_EncodeFuncArray[CLIGS_BEGBLUE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BEGBLUE_REQ;
	m_DecodeFuncArray[CLIGS_BEGBLUE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BEGBLUE_REQ;
	m_vecMsgList.push_back(CLIGS_BEGBLUE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BEGBLUE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BEGBLUE_REQ);

	m_EncodeFuncArray[CLIGS_BEGBLUE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BEGBLUE_ACK;
	m_DecodeFuncArray[CLIGS_BEGBLUE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BEGBLUE_ACK;
	m_vecMsgList.push_back(CLIGS_BEGBLUE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BEGBLUE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BEGBLUE_ACK);

	m_EncodeFuncArray[CLIGS_IMPROVELUCK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_IMPROVELUCK_REQ;
	m_DecodeFuncArray[CLIGS_IMPROVELUCK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_IMPROVELUCK_REQ;
	m_vecMsgList.push_back(CLIGS_IMPROVELUCK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_IMPROVELUCK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_IMPROVELUCK_REQ);

	m_EncodeFuncArray[CLIGS_IMPROVELUCK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_IMPROVELUCK_ACK;
	m_DecodeFuncArray[CLIGS_IMPROVELUCK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_IMPROVELUCK_ACK;
	m_vecMsgList.push_back(CLIGS_IMPROVELUCK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_IMPROVELUCK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_IMPROVELUCK_ACK);

	m_EncodeFuncArray[CLIGS_COMFIRM_BEGBLUE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COMFIRM_BEGBLUE_REQ;
	m_DecodeFuncArray[CLIGS_COMFIRM_BEGBLUE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COMFIRM_BEGBLUE_REQ;
	m_vecMsgList.push_back(CLIGS_COMFIRM_BEGBLUE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COMFIRM_BEGBLUE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COMFIRM_BEGBLUE_REQ);

	m_EncodeFuncArray[CLIGS_COMFIRM_BEGBLUE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COMFIRM_BEGBLUE_ACK;
	m_DecodeFuncArray[CLIGS_COMFIRM_BEGBLUE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COMFIRM_BEGBLUE_ACK;
	m_vecMsgList.push_back(CLIGS_COMFIRM_BEGBLUE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COMFIRM_BEGBLUE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COMFIRM_BEGBLUE_ACK);

	return true;
}

INT32 EncodeDT_POWER_CHANGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_POWER_CHANGE_DATA *pstIn = (DT_POWER_CHANGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwOldPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurPower))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_POWER_CHANGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_POWER_CHANGE_DATA *pstOut = (DT_POWER_CHANGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwOldPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurPower))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_BUFF_DATA(void *pHost, CNetData* poNetData)
{
	DT_SKILL_BUFF_DATA *pstIn = (DT_SKILL_BUFF_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuffKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBuffRound))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTriggerRate))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEffectParam))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_BUFF_DATA(void *pHost, CNetData* poNetData)
{
	DT_SKILL_BUFF_DATA *pstOut = (DT_SKILL_BUFF_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuffKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBuffRound))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTriggerRate))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEffectParam))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_ACTION_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_ACTION_DATA_CLI *pstIn = (DT_SKILL_ACTION_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wActionID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wActionLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEffectHurtRate))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExtHurtValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurExp))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeExp))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_ACTION_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_ACTION_DATA_CLI *pstOut = (DT_SKILL_ACTION_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wActionID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wActionLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEffectHurtRate))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExtHurtValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurExp))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeExp))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_EFFECT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_EFFECT_DATA_CLI *pstIn = (DT_SKILL_EFFECT_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEffectID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOnceEffectKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOnceEffectParam))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBuffNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_BUFF_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBuffNum)
			break;
		if(-1 == EncodeDT_SKILL_BUFF_DATA(&pstIn->astBuffInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wUnlockLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_EFFECT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_EFFECT_DATA_CLI *pstOut = (DT_SKILL_EFFECT_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEffectID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOnceEffectKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOnceEffectParam))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBuffNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_BUFF_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBuffNum)
			break;
		if(-1 == DecodeDT_SKILL_BUFF_DATA(&pstOut->astBuffInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wUnlockLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EFFECT_RECOMMEND_CLI(void *pHost, CNetData* poNetData)
{
	DT_EFFECT_RECOMMEND_CLI *pstIn = (DT_EFFECT_RECOMMEND_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRecommendEffectKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecommendHeroRangKind))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecommendHeroRangBuff))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EFFECT_RECOMMEND_CLI(void *pHost, CNetData* poNetData)
{
	DT_EFFECT_RECOMMEND_CLI *pstOut = (DT_EFFECT_RECOMMEND_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRecommendEffectKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecommendHeroRangKind))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecommendHeroRangBuff))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_EFFECT_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_SKILL_EFFECT_DATA_CLI2 *pstIn = (DT_SKILL_EFFECT_DATA_CLI2*)pHost;

	if(-1 == EncodeDT_SKILL_EFFECT_DATA_CLI(&pstIn->stEffectInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < 2; i++)
	{
		if(-1 == EncodeDT_EFFECT_RECOMMEND_CLI(&pstIn->astRecommendInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_EFFECT_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_SKILL_EFFECT_DATA_CLI2 *pstOut = (DT_SKILL_EFFECT_DATA_CLI2*)pHost;

	if(-1 == DecodeDT_SKILL_EFFECT_DATA_CLI(&pstOut->stEffectInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < 2; i++)
		{
			if(-1 == DecodeDT_EFFECT_RECOMMEND_CLI(&pstOut->astRecommendInfo[i], poNetData))
				return -1;
		}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ATTACK_RANG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ATTACK_RANG_DATA_CLI *pstIn = (DT_ATTACK_RANG_DATA_CLI*)pHost;

	if(-1 == EncodeDT_ATTACK_RANG_DATA(&pstIn->stRangInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUnlockLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAttackRangHurtRate))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ATTACK_RANG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ATTACK_RANG_DATA_CLI *pstOut = (DT_ATTACK_RANG_DATA_CLI*)pHost;

	if(-1 == DecodeDT_ATTACK_RANG_DATA(&pstOut->stRangInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUnlockLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAttackRangHurtRate))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_DATA_CLI *pstIn = (DT_SKILL_DATA_CLI*)pHost;

	if(-1 == EncodeDT_SKILL_ACTION_DATA_CLI(&pstIn->stActionInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_SKILL_EFFECT_DATA_CLI(&pstIn->stEffectInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ATTACK_RANG_DATA_CLI(&pstIn->stRangInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_DATA_CLI *pstOut = (DT_SKILL_DATA_CLI*)pHost;

	if(-1 == DecodeDT_SKILL_ACTION_DATA_CLI(&pstOut->stActionInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_SKILL_EFFECT_DATA_CLI(&pstOut->stEffectInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ATTACK_RANG_DATA_CLI(&pstOut->stRangInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_BASE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_BASE_DATA_CLI *pstIn = (DT_HERO_BASE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCareerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCoach))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPos))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFormationIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTalent))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeExperience))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecuitedFlag))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttribute, poNetData))
		return -1;

	if(-1 == EncodeDT_HIDE_BATTLE_ATTRIBUTE(&pstIn->stHideBattleAttribute, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGodweaponQuality))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGodweaponLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxAbsorbNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAbsorbNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ABSORB_NUM; i++)
	{
		if(i >= (INT32)pstIn->byAbsorbNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awKindIDLst[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byColor))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAbsorbKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_BASE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_BASE_DATA_CLI *pstOut = (DT_HERO_BASE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCareerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCoach))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPos))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFormationIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTalent))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeExperience))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecuitedFlag))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttribute, poNetData))
		return -1;

	if(-1 == DecodeDT_HIDE_BATTLE_ATTRIBUTE(&pstOut->stHideBattleAttribute, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGodweaponQuality))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGodweaponLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxAbsorbNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAbsorbNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ABSORB_NUM; i++)
	{
		if(i >= (INT32)pstOut->byAbsorbNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awKindIDLst[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byColor))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAbsorbKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_DATA_STRENGTHEN_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_STRENGTHEN_CLI *pstIn = (DT_EQUIP_DATA_STRENGTHEN_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanStrengthenFlag))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStrengthenCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStrengthenGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStrengthenRate))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stNextBattleAttribute, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_DATA_STRENGTHEN_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_STRENGTHEN_CLI *pstOut = (DT_EQUIP_DATA_STRENGTHEN_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanStrengthenFlag))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStrengthenCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStrengthenGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStrengthenRate))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stNextBattleAttribute, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_XIANGQIAN_DES(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_XIANGQIAN_DES *pstIn = (DT_EQUIP_XIANGQIAN_DES*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszAttrType, sizeof(pstIn->aszAttrType)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_XIANGQIAN_DES(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_XIANGQIAN_DES *pstOut = (DT_EQUIP_XIANGQIAN_DES*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszAttrType, sizeof(pstOut->aszAttrType)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ALL_EQUIP_XIANGQIAN_DES(void *pHost, CNetData* poNetData)
{
	DT_ALL_EQUIP_XIANGQIAN_DES *pstIn = (DT_ALL_EQUIP_XIANGQIAN_DES*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszEquipPos1Des, sizeof(pstIn->aszEquipPos1Des)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEquipPos2Des, sizeof(pstIn->aszEquipPos2Des)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEquipPos3Des, sizeof(pstIn->aszEquipPos3Des)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEquipPos4Des, sizeof(pstIn->aszEquipPos4Des)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ALL_EQUIP_XIANGQIAN_DES(void *pHost, CNetData* poNetData)
{
	DT_ALL_EQUIP_XIANGQIAN_DES *pstOut = (DT_ALL_EQUIP_XIANGQIAN_DES*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszEquipPos1Des, sizeof(pstOut->aszEquipPos1Des)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEquipPos2Des, sizeof(pstOut->aszEquipPos2Des)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEquipPos3Des, sizeof(pstOut->aszEquipPos3Des)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEquipPos4Des, sizeof(pstOut->aszEquipPos4Des)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_XIANGQIAN_ATTR_DATA(void *pHost, CNetData* poNetData)
{
	DT_XIANGQIAN_ATTR_DATA *pstIn = (DT_XIANGQIAN_ATTR_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAttrType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddPercentValue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_XIANGQIAN_ATTR_DATA(void *pHost, CNetData* poNetData)
{
	DT_XIANGQIAN_ATTR_DATA *pstOut = (DT_XIANGQIAN_ATTR_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAttrType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddPercentValue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_CLI *pstIn = (DT_EQUIP_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDressPos))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressLevel))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttribute, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRecoverPrice))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMinScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxScience))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byXiangqianNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_XIANGQIAN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byXiangqianNum)
			break;
		if(-1 == EncodeDT_XIANGQIAN_ATTR_DATA(&pstIn->astXiangqianList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_CLI *pstOut = (DT_EQUIP_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDressPos))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressLevel))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttribute, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRecoverPrice))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMinScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxScience))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byXiangqianNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_XIANGQIAN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byXiangqianNum)
			break;
		if(-1 == DecodeDT_XIANGQIAN_ATTR_DATA(&pstOut->astXiangqianList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_MELT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_MELT_DATA_CLI *pstIn = (DT_EQUIP_MELT_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDressPos))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMinScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxScience))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byXiangqianNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMeltGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_MELT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_MELT_DATA_CLI *pstOut = (DT_EQUIP_MELT_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDressPos))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMinScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxScience))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byXiangqianNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMeltGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GOOD_MELT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOOD_MELT_DATA_CLI *pstIn = (DT_GOOD_MELT_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMinScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMeltGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GOOD_MELT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOOD_MELT_DATA_CLI *pstOut = (DT_GOOD_MELT_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMinScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMeltGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_LST_CLI *pstIn = (DT_EQUIP_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->astEquipList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_LST_CLI *pstOut = (DT_EQUIP_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->astEquipList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_MELT_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_MELT_DATA_LST_CLI *pstIn = (DT_EQUIP_MELT_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_MELT_DATA_CLI(&pstIn->astEquipList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_MELT_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_MELT_DATA_LST_CLI *pstOut = (DT_EQUIP_MELT_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_MELT_DATA_CLI(&pstOut->astEquipList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_GOOD_MELT_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOOD_MELT_DATA_LST_CLI *pstIn = (DT_GOOD_MELT_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wGoodNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wGoodNum)
			break;
		if(-1 == EncodeDT_GOOD_MELT_DATA_CLI(&pstIn->astGoodList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GOOD_MELT_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOOD_MELT_DATA_LST_CLI *pstOut = (DT_GOOD_MELT_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wGoodNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wGoodNum)
			break;
		if(-1 == DecodeDT_GOOD_MELT_DATA_CLI(&pstOut->astGoodList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_EQUIP_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_EQUIP_DATA_LST_CLI *pstIn = (DT_HERO_EQUIP_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->astEquipList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_EQUIP_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_EQUIP_DATA_LST_CLI *pstOut = (DT_HERO_EQUIP_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->astEquipList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_NEED_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEED_ITEM_DATA *pstIn = (DT_NEED_ITEM_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurNum))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stBurstInstance, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_NEED_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEED_ITEM_DATA *pstOut = (DT_NEED_ITEM_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurNum))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stBurstInstance, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ESTIMATE_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_ESTIMATE_EQUIP_DATA *pstIn = (DT_ESTIMATE_EQUIP_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressLevel))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttribute, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ESTIMATE_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_ESTIMATE_EQUIP_DATA *pstOut = (DT_ESTIMATE_EQUIP_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressLevel))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttribute, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ESTIMATE_DRUG_DATA(void *pHost, CNetData* poNetData)
{
	DT_ESTIMATE_DRUG_DATA *pstIn = (DT_ESTIMATE_DRUG_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBaseTalent))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDecTalent))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ESTIMATE_DRUG_DATA(void *pHost, CNetData* poNetData)
{
	DT_ESTIMATE_DRUG_DATA *pstOut = (DT_ESTIMATE_DRUG_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBaseTalent))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDecTalent))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeUnDT_ESTIMATE_ITEM_DATA_UNOIN(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case EEIK_EQUIP:
		return EncodeDT_ESTIMATE_EQUIP_DATA(pHost, poNetData);
	case EEIK_DRUG:
		return EncodeDT_ESTIMATE_DRUG_DATA(pHost, poNetData);
	default: return -1;
	}
}

INT32 DecodeUnDT_ESTIMATE_ITEM_DATA_UNOIN(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case EEIK_EQUIP:
		return DecodeDT_ESTIMATE_EQUIP_DATA(pHost, poNetData);
	case EEIK_DRUG:
		return DecodeDT_ESTIMATE_DRUG_DATA(pHost, poNetData);
	default: return -1;
	}
}

INT32 EncodeDT_ESTIMATE_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_ESTIMATE_ITEM_DATA *pstIn = (DT_ESTIMATE_ITEM_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemType))
		return -1;

	if(-1 == EncodeUnDT_ESTIMATE_ITEM_DATA_UNOIN(&pstIn->stItemInfo, pstIn->byItemType, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ESTIMATE_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_ESTIMATE_ITEM_DATA *pstOut = (DT_ESTIMATE_ITEM_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemType))
		return -1;

	if(-1 == DecodeUnDT_ESTIMATE_ITEM_DATA_UNOIN(&pstOut->stItemInfo, pstOut->byItemType, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_COMPOSE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_COMPOSE_DATA_CLI *pstIn = (DT_EQUIP_COMPOSE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ITEM_MAKER_NEED_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_NEED_ITEM_DATA(&pstIn->astItemInfoList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_ESTIMATE_EQUIP_DATA(&pstIn->stEstimateEquip, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySuccessRate))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSuccessGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_COMPOSE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_COMPOSE_DATA_CLI *pstOut = (DT_EQUIP_COMPOSE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ITEM_MAKER_NEED_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_NEED_ITEM_DATA(&pstOut->astItemInfoList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_ESTIMATE_EQUIP_DATA(&pstOut->stEstimateEquip, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySuccessRate))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSuccessGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI *pstIn = (DT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->astEquipInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstIn->astEquipStrengthenInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI *pstOut = (DT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->astEquipInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstOut->astEquipStrengthenInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_SEED_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SEED_DATA_CLI *pstIn = (DT_SEED_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwValue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SEED_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SEED_DATA_CLI *pstOut = (DT_SEED_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwValue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GOODS_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOODS_DATA_CLI *pstIn = (DT_GOODS_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoodsMainKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUseLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPileCount))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRecoverPrice))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParam1))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParam2))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParam3))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwValue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wComposeCount))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wComposeKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byComposeItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COMPOSE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byComposeItemNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awComposeItem[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->bySeedFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->bySeedFlag)
			break;
		if(-1 == EncodeDT_SEED_DATA_CLI(&pstIn->astSeedData[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwParam4))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GOODS_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOODS_DATA_CLI *pstOut = (DT_GOODS_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoodsMainKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUseLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPileCount))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRecoverPrice))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParam1))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParam2))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParam3))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwValue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wComposeCount))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wComposeKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byComposeItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COMPOSE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byComposeItemNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awComposeItem[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->bySeedFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->bySeedFlag)
			break;
		if(-1 == DecodeDT_SEED_DATA_CLI(&pstOut->astSeedData[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwParam4))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GOODS_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOODS_DATA_LST_CLI *pstIn = (DT_GOODS_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wGoodsNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wGoodsNum)
			break;
		if(-1 == EncodeDT_GOODS_DATA_CLI(&pstIn->astGoodsList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GOODS_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOODS_DATA_LST_CLI *pstOut = (DT_GOODS_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wGoodsNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wGoodsNum)
			break;
		if(-1 == DecodeDT_GOODS_DATA_CLI(&pstOut->astGoodsList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_CLI *pstIn = (DT_ITEM_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoodsMainKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPileNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_CLI *pstOut = (DT_ITEM_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoodsMainKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPileNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_DATA_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_LIST_CLI *pstIn = (DT_ITEM_DATA_LIST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_DATA_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_LIST_CLI *pstOut = (DT_ITEM_DATA_LIST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeUnDT_ITEM_DATA_UNOIN(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case EIK_EQUIP:
		return EncodeDT_EQUIP_DATA_CLI(pHost, poNetData);
	case EIK_GOODS:
		return EncodeDT_GOODS_DATA_CLI(pHost, poNetData);
	default: return -1;
	}
}

INT32 DecodeUnDT_ITEM_DATA_UNOIN(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case EIK_EQUIP:
		return DecodeDT_EQUIP_DATA_CLI(pHost, poNetData);
	case EIK_GOODS:
		return DecodeDT_GOODS_DATA_CLI(pHost, poNetData);
	default: return -1;
	}
}

INT32 EncodeDT_ITEM_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_CLI2 *pstIn = (DT_ITEM_DATA_CLI2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemType))
		return -1;

	if(-1 == EncodeUnDT_ITEM_DATA_UNOIN(&pstIn->stItemInfo, pstIn->byItemType, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_CLI2 *pstOut = (DT_ITEM_DATA_CLI2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemType))
		return -1;

	if(-1 == DecodeUnDT_ITEM_DATA_UNOIN(&pstOut->stItemInfo, pstOut->byItemType, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_DATA_LIST_CLI2(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_LIST_CLI2 *pstIn = (DT_ITEM_DATA_LIST_CLI2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_DATA_LIST_CLI2(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_LIST_CLI2 *pstOut = (DT_ITEM_DATA_LIST_CLI2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_TASK_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_TASK_ENCOURAGE_DATA *pstIn = (DT_TASK_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrength))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStory))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBlueGas))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPurpleGas))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI(&pstIn->astItemInfoList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_TASK_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_TASK_ENCOURAGE_DATA *pstOut = (DT_TASK_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrength))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStory))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBlueGas))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPurpleGas))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI(&pstOut->astItemInfoList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_TASK_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_TASK_BASE_DATA *pstIn = (DT_TASK_BASE_DATA*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszTaskDispName, sizeof(pstIn->aszTaskDispName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszTaskDesc, sizeof(pstIn->aszTaskDesc)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTaskType))
		return -1;

	if(-1 == EncodeUnDT_TASK_CONDITION(&pstIn->stTaskConditionInfo, pstIn->byTaskType, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_ENCOURAGE_DATA(&pstIn->stTaskEncourage, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_TASK_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_TASK_BASE_DATA *pstOut = (DT_TASK_BASE_DATA*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszTaskDispName, sizeof(pstOut->aszTaskDispName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszTaskDesc, sizeof(pstOut->aszTaskDesc)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTaskType))
		return -1;

	if(-1 == DecodeUnDT_TASK_CONDITION(&pstOut->stTaskConditionInfo, pstOut->byTaskType, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_ENCOURAGE_DATA(&pstOut->stTaskEncourage, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GIVEN_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_GIVEN_TASK_DATA *pstIn = (DT_GIVEN_TASK_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStateUpdateTime))
		return -1;

	if(-1 == EncodeDT_TASK_BASE_DATA(&pstIn->stTaskBaseData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanAccept))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlayerLevel))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GIVEN_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_GIVEN_TASK_DATA *pstOut = (DT_GIVEN_TASK_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStateUpdateTime))
		return -1;

	if(-1 == DecodeDT_TASK_BASE_DATA(&pstOut->stTaskBaseData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanAccept))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlayerLevel))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACCEPT_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACCEPT_TASK_DATA *pstIn = (DT_ACCEPT_TASK_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStateUpdateTime))
		return -1;

	if(-1 == EncodeDT_TASK_BASE_DATA(&pstIn->stTaskBaseData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACCEPT_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACCEPT_TASK_DATA *pstOut = (DT_ACCEPT_TASK_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStateUpdateTime))
		return -1;

	if(-1 == DecodeDT_TASK_BASE_DATA(&pstOut->stTaskBaseData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ENCOURAGE_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENCOURAGE_TASK_DATA *pstIn = (DT_ENCOURAGE_TASK_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStateUpdateTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveBaseData))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveBaseData)
			break;
		if(-1 == EncodeDT_TASK_BASE_DATA(&pstIn->astTaskBaseData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ENCOURAGE_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENCOURAGE_TASK_DATA *pstOut = (DT_ENCOURAGE_TASK_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStateUpdateTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveBaseData))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveBaseData)
			break;
		if(-1 == DecodeDT_TASK_BASE_DATA(&pstOut->astTaskBaseData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_INVALID_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_INVALID_TASK_DATA *pstIn = (DT_INVALID_TASK_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_INVALID_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_INVALID_TASK_DATA *pstOut = (DT_INVALID_TASK_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeUnDT_TASK_UNION(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case ETS_GIVEN:
		return EncodeDT_GIVEN_TASK_DATA(pHost, poNetData);
	case ETS_ACCEPTED:
		return EncodeDT_ACCEPT_TASK_DATA(pHost, poNetData);
	case ETS_ENCOURAGE:
		return EncodeDT_ENCOURAGE_TASK_DATA(pHost, poNetData);
	case ETS_INVALID:
		return EncodeDT_INVALID_TASK_DATA(pHost, poNetData);
	default: return -1;
	}
}

INT32 DecodeUnDT_TASK_UNION(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case ETS_GIVEN:
		return DecodeDT_GIVEN_TASK_DATA(pHost, poNetData);
	case ETS_ACCEPTED:
		return DecodeDT_ACCEPT_TASK_DATA(pHost, poNetData);
	case ETS_ENCOURAGE:
		return DecodeDT_ENCOURAGE_TASK_DATA(pHost, poNetData);
	case ETS_INVALID:
		return DecodeDT_INVALID_TASK_DATA(pHost, poNetData);
	default: return -1;
	}
}

INT32 EncodeDT_TASK_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_TASK_DATA_CLI *pstIn = (DT_TASK_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskState))
		return -1;

	if(-1 == EncodeUnDT_TASK_UNION(&pstIn->stTaskInfo, pstIn->byTaskState, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_TASK_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_TASK_DATA_CLI *pstOut = (DT_TASK_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskState))
		return -1;

	if(-1 == DecodeUnDT_TASK_UNION(&pstOut->stTaskInfo, pstOut->byTaskState, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_TASK_DATA_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_TASK_DATA_LIST_CLI *pstIn = (DT_TASK_DATA_LIST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TASK_LINE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byTaskNum)
			break;
		if(-1 == EncodeDT_TASK_DATA_CLI(&pstIn->astTaskInfoList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_TASK_DATA_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_TASK_DATA_LIST_CLI *pstOut = (DT_TASK_DATA_LIST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TASK_LINE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byTaskNum)
			break;
		if(-1 == DecodeDT_TASK_DATA_CLI(&pstOut->astTaskInfoList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACCEPT_TASK_COND_RECORD(void *pHost, CNetData* poNetData)
{
	DT_ACCEPT_TASK_COND_RECORD *pstIn = (DT_ACCEPT_TASK_COND_RECORD*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTaskType))
		return -1;

	if(-1 == EncodeUnDT_TASK_CONDITION(&pstIn->stTaskCondRecord, pstIn->byTaskType, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACCEPT_TASK_COND_RECORD(void *pHost, CNetData* poNetData)
{
	DT_ACCEPT_TASK_COND_RECORD *pstOut = (DT_ACCEPT_TASK_COND_RECORD*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTaskType))
		return -1;

	if(-1 == DecodeUnDT_TASK_CONDITION(&pstOut->stTaskCondRecord, pstOut->byTaskType, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_TASK_COND_RECORD_LIST(void *pHost, CNetData* poNetData)
{
	DT_TASK_COND_RECORD_LIST *pstIn = (DT_TASK_COND_RECORD_LIST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TASK_LINE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byTaskNum)
			break;
		if(-1 == EncodeDT_ACCEPT_TASK_COND_RECORD(&pstIn->astTaskConRecordList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_TASK_COND_RECORD_LIST(void *pHost, CNetData* poNetData)
{
	DT_TASK_COND_RECORD_LIST *pstOut = (DT_TASK_COND_RECORD_LIST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TASK_LINE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byTaskNum)
			break;
		if(-1 == DecodeDT_ACCEPT_TASK_COND_RECORD(&pstOut->astTaskConRecordList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_PHYSTRENGTH_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_PHYSTRENGTH_DATA_CLI *pstIn = (DT_PHYSTRENGTH_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrength))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxPhyStrength))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrengthRefreshCD))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrengthCountDown))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PHYSTRENGTH_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_PHYSTRENGTH_DATA_CLI *pstOut = (DT_PHYSTRENGTH_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrength))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxPhyStrength))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrengthRefreshCD))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrengthCountDown))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EXPERIENCE_DATA(void *pHost, CNetData* poNetData)
{
	DT_EXPERIENCE_DATA *pstIn = (DT_EXPERIENCE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeExperience))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EXPERIENCE_DATA(void *pHost, CNetData* poNetData)
{
	DT_EXPERIENCE_DATA *pstOut = (DT_EXPERIENCE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeExperience))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLAYER_BASE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_BASE_DATA_CLI *pstIn = (DT_PLAYER_BASE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == EncodeDT_EXPERIENCE_DATA(&pstIn->stExperienceInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == EncodeDT_LOCALE_DATA(&pstIn->stLocaleData, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyGuide[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byVipLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLAYER_BASE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_BASE_DATA_CLI *pstOut = (DT_PLAYER_BASE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == DecodeDT_EXPERIENCE_DATA(&pstOut->stExperienceInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == DecodeDT_LOCALE_DATA(&pstOut->stLocaleData, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyGuide[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byVipLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BUILD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BUILD_DATA_CLI *pstIn = (DT_BUILD_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySort))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveOpenFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BUILD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BUILD_DATA_CLI *pstOut = (DT_BUILD_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySort))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveOpenFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ONLINE_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_ONLINE_ENCOURAGE_DATA *pstIn = (DT_ONLINE_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrength))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI(&pstIn->astItemInfoList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ONLINE_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_ONLINE_ENCOURAGE_DATA *pstOut = (DT_ONLINE_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrength))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI(&pstOut->astItemInfoList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_DATA_AFTER_ONLINE_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_ONLINE_ENCOURAGE *pstIn = (DT_DATA_AFTER_ONLINE_ENCOURAGE*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrength))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DATA_AFTER_ONLINE_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_ONLINE_ENCOURAGE *pstOut = (DT_DATA_AFTER_ONLINE_ENCOURAGE*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrength))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_VIP_NUM_FUNC_DATA(void *pHost, CNetData* poNetData)
{
	DT_VIP_NUM_FUNC_DATA *pstIn = (DT_VIP_NUM_FUNC_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNumFuncKind))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCommonNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwIncNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_VIP_NUM_FUNC_DATA(void *pHost, CNetData* poNetData)
{
	DT_VIP_NUM_FUNC_DATA *pstOut = (DT_VIP_NUM_FUNC_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNumFuncKind))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCommonNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwIncNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_VIP_LEVEL_DATA(void *pHost, CNetData* poNetData)
{
	DT_VIP_LEVEL_DATA *pstIn = (DT_VIP_LEVEL_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byVipLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedRechargeGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byExtNumFuncNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_VIP_FUNC; i++)
	{
		if(i >= (INT32)pstIn->byExtNumFuncNum)
			break;
		if(-1 == EncodeDT_VIP_NUM_FUNC_DATA(&pstIn->astVipNumFuncInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byOpenVipFuncNum))
		return -1;

	for(i = 0; i < MAX_VIP_FUNC; i++)
	{
		if(i >= (INT32)pstIn->byOpenVipFuncNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyOpenVipFuncInfo[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_VIP_LEVEL_DATA(void *pHost, CNetData* poNetData)
{
	DT_VIP_LEVEL_DATA *pstOut = (DT_VIP_LEVEL_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byVipLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedRechargeGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byExtNumFuncNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_VIP_FUNC; i++)
	{
		if(i >= (INT32)pstOut->byExtNumFuncNum)
			break;
		if(-1 == DecodeDT_VIP_NUM_FUNC_DATA(&pstOut->astVipNumFuncInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byOpenVipFuncNum))
		return -1;

	for(i = 0; i < MAX_VIP_FUNC; i++)
	{
		if(i >= (INT32)pstOut->byOpenVipFuncNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyOpenVipFuncInfo[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_VIP_TAB_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_VIP_TAB_DATA_CLI *pstIn = (DT_VIP_TAB_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byCurVipLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHaveRechargeGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVipLevelNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_VIP_LEVEL; i++)
	{
		if(i >= (INT32)pstIn->byVipLevelNum)
			break;
		if(-1 == EncodeDT_VIP_LEVEL_DATA(&pstIn->astVipLevelInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_VIP_TAB_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_VIP_TAB_DATA_CLI *pstOut = (DT_VIP_TAB_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byCurVipLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHaveRechargeGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVipLevelNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_VIP_LEVEL; i++)
	{
		if(i >= (INT32)pstOut->byVipLevelNum)
			break;
		if(-1 == DecodeDT_VIP_LEVEL_DATA(&pstOut->astVipLevelInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_UNREAD_BATTLE_LOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_UNREAD_BATTLE_LOG_DATA_CLI *pstIn = (DT_UNREAD_BATTLE_LOG_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBattleLogType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnreadNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_UNREAD_BATTLE_LOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_UNREAD_BATTLE_LOG_DATA_CLI *pstOut = (DT_UNREAD_BATTLE_LOG_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBattleLogType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnreadNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FUNC_COMMON_PROMPT(void *pHost, CNetData* poNetData)
{
	DT_FUNC_COMMON_PROMPT *pstIn = (DT_FUNC_COMMON_PROMPT*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuildKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFuncFlag))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFuncCountDown))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAheadTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FUNC_COMMON_PROMPT(void *pHost, CNetData* poNetData)
{
	DT_FUNC_COMMON_PROMPT *pstOut = (DT_FUNC_COMMON_PROMPT*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuildKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFuncFlag))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFuncCountDown))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAheadTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FUNC_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_FUNC_PROMPT_DATA *pstIn = (DT_FUNC_PROMPT_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuildNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BUILD_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBuildNum)
			break;
		if(-1 == EncodeDT_FUNC_COMMON_PROMPT(&pstIn->astBuildPromptInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FUNC_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_FUNC_PROMPT_DATA *pstOut = (DT_FUNC_PROMPT_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuildNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BUILD_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBuildNum)
			break;
		if(-1 == DecodeDT_FUNC_COMMON_PROMPT(&pstOut->astBuildPromptInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_OTHER_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_OTHER_PROMPT_DATA *pstIn = (DT_OTHER_PROMPT_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byHaveBetterHeroFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_OTHER_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_OTHER_PROMPT_DATA *pstOut = (DT_OTHER_PROMPT_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byHaveBetterHeroFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_NEW_EQUIP_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEW_EQUIP_PROMPT_DATA *pstIn = (DT_NEW_EQUIP_PROMPT_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEquipNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awEquipIDInfo[i]))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_NEW_EQUIP_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEW_EQUIP_PROMPT_DATA *pstOut = (DT_NEW_EQUIP_PROMPT_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEquipNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awEquipIDInfo[i]))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENCOURAGE_DATA *pstIn = (DT_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrength))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStory))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBlueGas))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPurpleGas))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->astItemInfoList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENCOURAGE_DATA *pstOut = (DT_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrength))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStory))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBlueGas))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPurpleGas))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->astItemInfoList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_RSYNC_RECV_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_RSYNC_RECV_ENCOURAGE_DATA *pstIn = (DT_RSYNC_RECV_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stCurPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RSYNC_RECV_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_RSYNC_RECV_ENCOURAGE_DATA *pstOut = (DT_RSYNC_RECV_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stCurPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ENTERGS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTERGS_REQ *pstIn = (PKT_CLIGS_ENTERGS_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wZoneID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDeviceID, sizeof(pstIn->aszDeviceID)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszNotifyID, sizeof(pstIn->aszNotifyID)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszUserName, sizeof(pstIn->aszUserName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCareerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCliVer))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ENTERGS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTERGS_REQ *pstOut = (PKT_CLIGS_ENTERGS_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wZoneID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDeviceID, sizeof(pstOut->aszDeviceID)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszNotifyID, sizeof(pstOut->aszNotifyID)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszUserName, sizeof(pstOut->aszUserName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCareerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCliVer))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ENTERGS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTERGS_ACK *pstIn = (PKT_CLIGS_ENTERGS_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCliVer))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwResVer))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUIVer))
		return -1;

	if(-1 == EncodeDT_PLAYER_BASE_DATA_CLI(&pstIn->stPlayerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wBuildNum))
		return -1;

	for(i = 0; i < MAX_BUILD_NUM; i++)
	{
		if(i >= (INT32)pstIn->wBuildNum)
			break;
		if(-1 == EncodeDT_BUILD_DATA_CLI(&pstIn->astBuildInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byOnlineEncourageFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byOnlineEncourageFlag)
			break;
		if(-1 == EncodeDT_ONLINE_ENCOURAGE_DATA(&pstIn->astOnlineEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byOnlineEncourageFlag)
			break;
		if(-1 == poNetData->AddWord(pstIn->awRecvCountDown[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byBattleLogTypeNum))
		return -1;

	for(i = 0; i < MAX_BATTLE_LOG_TYPE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBattleLogTypeNum)
			break;
		if(-1 == EncodeDT_UNREAD_BATTLE_LOG_DATA_CLI(&pstIn->astUnreadBattleLogInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wJuniorLevel))
		return -1;

	if(-1 == EncodeDT_VIP_TAB_DATA_CLI(&pstIn->stVipTabInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EXT_FUNC_PARAM_LST(&pstIn->stExtFuncParamLst, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwServerTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanUseBoxGoodsID))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NOTICE_DATA(&pstIn->stNoticeInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ENTERGS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTERGS_ACK *pstOut = (PKT_CLIGS_ENTERGS_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCliVer))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwResVer))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUIVer))
		return -1;

	if(-1 == DecodeDT_PLAYER_BASE_DATA_CLI(&pstOut->stPlayerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wBuildNum))
		return -1;

	for(i = 0; i < MAX_BUILD_NUM; i++)
	{
		if(i >= (INT32)pstOut->wBuildNum)
			break;
		if(-1 == DecodeDT_BUILD_DATA_CLI(&pstOut->astBuildInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byOnlineEncourageFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byOnlineEncourageFlag)
			break;
		if(-1 == DecodeDT_ONLINE_ENCOURAGE_DATA(&pstOut->astOnlineEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byOnlineEncourageFlag)
			break;
		if(-1 == poNetData->DelWord(pstOut->awRecvCountDown[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byBattleLogTypeNum))
		return -1;

	for(i = 0; i < MAX_BATTLE_LOG_TYPE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBattleLogTypeNum)
			break;
		if(-1 == DecodeDT_UNREAD_BATTLE_LOG_DATA_CLI(&pstOut->astUnreadBattleLogInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wJuniorLevel))
		return -1;

	if(-1 == DecodeDT_VIP_TAB_DATA_CLI(&pstOut->stVipTabInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EXT_FUNC_PARAM_LST(&pstOut->stExtFuncParamLst, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwServerTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanUseBoxGoodsID))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NOTICE_DATA(&pstOut->stNoticeInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BAG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BAG_DATA_CLI *pstIn = (DT_BAG_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byMaxOpenNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byInitOpenNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurOpenNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBaseOpenCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOpenCoinIncrease))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBaseOpenGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOpenGoldIncrease))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BAG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BAG_DATA_CLI *pstOut = (DT_BAG_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byMaxOpenNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byInitOpenNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurOpenNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBaseOpenCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOpenCoinIncrease))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBaseOpenGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOpenGoldIncrease))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_BAG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_BAG_DATA_CLI *pstIn = (DT_EQUIP_BAG_DATA_CLI*)pHost;

	if(-1 == EncodeDT_BAG_DATA_CLI(&pstIn->stBagInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_LST_CLI(&pstIn->stBagEquipDataList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_BAG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_BAG_DATA_CLI *pstOut = (DT_EQUIP_BAG_DATA_CLI*)pHost;

	if(-1 == DecodeDT_BAG_DATA_CLI(&pstOut->stBagInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_LST_CLI(&pstOut->stBagEquipDataList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_HERO_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_HERO_INFO_REQ *pstIn = (PKT_CLIGS_GET_HERO_INFO_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipBagFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_HERO_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_HERO_INFO_REQ *pstOut = (PKT_CLIGS_GET_HERO_INFO_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipBagFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ATTR_ENABLE_UPDATE_INFO(void *pHost, CNetData* poNetData)
{
	DT_ATTR_ENABLE_UPDATE_INFO *pstIn = (DT_ATTR_ENABLE_UPDATE_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byEnableAttrHPUpdate))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnableAttrAttackUpdate))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ATTR_ENABLE_UPDATE_INFO(void *pHost, CNetData* poNetData)
{
	DT_ATTR_ENABLE_UPDATE_INFO *pstOut = (DT_ATTR_ENABLE_UPDATE_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byEnableAttrHPUpdate))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnableAttrAttackUpdate))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_DATA_CLI *pstIn = (DT_HERO_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->astHeroBaseData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_EQUIP_DATA_LST_CLI(&pstIn->astEquipDataList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_ATTR_ENABLE_UPDATE_INFO(&pstIn->astEnableAttrUpdate[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_SKILL_DATA_CLI(&pstIn->astSkillInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_DATA_CLI *pstOut = (DT_HERO_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->astHeroBaseData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_EQUIP_DATA_LST_CLI(&pstOut->astEquipDataList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_ATTR_ENABLE_UPDATE_INFO(&pstOut->astEnableAttrUpdate[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_SKILL_DATA_CLI(&pstOut->astSkillInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLAYER_BATTLE_INFO(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_BATTLE_INFO *pstIn = (DT_PLAYER_BATTLE_INFO*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszDisplayName, sizeof(pstIn->aszDisplayName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLAYER_BATTLE_INFO(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_BATTLE_INFO *pstOut = (DT_PLAYER_BATTLE_INFO*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszDisplayName, sizeof(pstOut->aszDisplayName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_HERO_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_HERO_INFO_ACK *pstIn = (PKT_CLIGS_GET_HERO_INFO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCoachExpRate))
		return -1;

	if(-1 == EncodeDT_PLAYER_BATTLE_INFO(&pstIn->stPlayerBattleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_DATA_CLI(&pstIn->stHeroInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipBagFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byEquipBagFlag)
			break;
		if(-1 == EncodeDT_EQUIP_BAG_DATA_CLI(&pstIn->astEquipBagDataInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byGoodsCellNum))
		return -1;

	if(-1 == EncodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstIn->stEquipXiangqianDes, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_HERO_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_HERO_INFO_ACK *pstOut = (PKT_CLIGS_GET_HERO_INFO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCoachExpRate))
		return -1;

	if(-1 == DecodeDT_PLAYER_BATTLE_INFO(&pstOut->stPlayerBattleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_DATA_CLI(&pstOut->stHeroInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipBagFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byEquipBagFlag)
			break;
		if(-1 == DecodeDT_EQUIP_BAG_DATA_CLI(&pstOut->astEquipBagDataInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byGoodsCellNum))
		return -1;

	if(-1 == DecodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstOut->stEquipXiangqianDes, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ENTER_HOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_HOME_REQ *pstIn = (PKT_CLIGS_ENTER_HOME_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKind))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ENTER_HOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_HOME_REQ *pstOut = (PKT_CLIGS_ENTER_HOME_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKind))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ENTER_HOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_HOME_ACK *pstIn = (PKT_CLIGS_ENTER_HOME_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byKind))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBuildNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BUILD_NUM; i++)
	{
		if(i >= (INT32)pstIn->wBuildNum)
			break;
		if(-1 == EncodeDT_BUILD_DATA_CLI(&pstIn->astBuildInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byLoginEncourageState))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBattleLogTypeNum))
		return -1;

	for(i = 0; i < MAX_BATTLE_LOG_TYPE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBattleLogTypeNum)
			break;
		if(-1 == EncodeDT_UNREAD_BATTLE_LOG_DATA_CLI(&pstIn->astUnreadBattleLogInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_UNLOCK_HERO_NUM; i++)
	{
		if(-1 == poNetData->AddWord(pstIn->awUnlockHeroID[i]))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wUnlockEquipLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUnlockElite))
		return -1;

	if(-1 == EncodeUnlockScienceInfo(&pstIn->stUnlockScienceList, poNetData))
		return -1;

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyGuide[i]))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_OTHER_PROMPT_DATA(&pstIn->stOtherPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEliteUnBattleNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ENTER_HOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_HOME_ACK *pstOut = (PKT_CLIGS_ENTER_HOME_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byKind))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBuildNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BUILD_NUM; i++)
	{
		if(i >= (INT32)pstOut->wBuildNum)
			break;
		if(-1 == DecodeDT_BUILD_DATA_CLI(&pstOut->astBuildInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byLoginEncourageState))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBattleLogTypeNum))
		return -1;

	for(i = 0; i < MAX_BATTLE_LOG_TYPE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBattleLogTypeNum)
			break;
		if(-1 == DecodeDT_UNREAD_BATTLE_LOG_DATA_CLI(&pstOut->astUnreadBattleLogInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_UNLOCK_HERO_NUM; i++)
	{
		if(-1 == poNetData->DelWord(pstOut->awUnlockHeroID[i]))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wUnlockEquipLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUnlockElite))
		return -1;

	if(-1 == DecodeUnlockScienceInfo(&pstOut->stUnlockScienceList, poNetData))
		return -1;

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyGuide[i]))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_OTHER_PROMPT_DATA(&pstOut->stOtherPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEliteUnBattleNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BATTLE_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_BATTLE_ENCOURAGE_DATA *pstIn = (DT_BATTLE_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStory))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJingJie))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BATTLE_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_BATTLE_ENCOURAGE_DATA *pstOut = (DT_BATTLE_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStory))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJingJie))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DATA_AFTER_BATTLE_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_BATTLE_ENCOURAGE *pstIn = (DT_DATA_AFTER_BATTLE_ENCOURAGE*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_DATA(&pstIn->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DATA_AFTER_BATTLE_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_BATTLE_ENCOURAGE *pstOut = (DT_DATA_AFTER_BATTLE_ENCOURAGE*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_DATA(&pstOut->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_RACE_CHALLENGE_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_RACE_CHALLENGE_ENCOURAGE_DATA *pstIn = (DT_RACE_CHALLENGE_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJingJie))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RACE_CHALLENGE_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_RACE_CHALLENGE_ENCOURAGE_DATA *pstOut = (DT_RACE_CHALLENGE_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJingJie))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RACE_RANK_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_RACE_RANK_ENCOURAGE_DATA *pstIn = (DT_RACE_RANK_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJingJie))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RACE_RANK_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_RACE_RANK_ENCOURAGE_DATA *pstOut = (DT_RACE_RANK_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJingJie))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ENTER_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_INSTANCE_REQ *pstIn = (PKT_CLIGS_ENTER_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSceneIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byInstanceIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNewFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ENTER_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_INSTANCE_REQ *pstOut = (PKT_CLIGS_ENTER_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSceneIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byInstanceIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNewFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PASS_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_PASS_ENCOURAGE_DATA *pstIn = (DT_PASS_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwStory))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoachExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PASS_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_PASS_ENCOURAGE_DATA *pstOut = (DT_PASS_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwStory))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoachExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DATA_AFTER_PASS_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_PASS_ENCOURAGE *pstIn = (DT_DATA_AFTER_PASS_ENCOURAGE*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_DATA(&pstIn->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DATA_AFTER_PASS_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_PASS_ENCOURAGE *pstOut = (DT_DATA_AFTER_PASS_ENCOURAGE*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_DATA(&pstOut->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_PASS_ENCOURAGE_BOX_GROUP_DATA(void *pHost, CNetData* poNetData)
{
	DT_PASS_ENCOURAGE_BOX_GROUP_DATA *pstIn = (DT_PASS_ENCOURAGE_BOX_GROUP_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHitItemIdx))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PASS_ENCOURAGE_BOX_GROUP_DATA(void *pHost, CNetData* poNetData)
{
	DT_PASS_ENCOURAGE_BOX_GROUP_DATA *pstOut = (DT_PASS_ENCOURAGE_BOX_GROUP_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHitItemIdx))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PASS_ENCOURAGE_BOX_DATA(void *pHost, CNetData* poNetData)
{
	DT_PASS_ENCOURAGE_BOX_DATA *pstIn = (DT_PASS_ENCOURAGE_BOX_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGroupNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_BOX_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstIn->byGroupNum)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_GROUP_DATA(&pstIn->astBoxGroupInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PASS_ENCOURAGE_BOX_DATA(void *pHost, CNetData* poNetData)
{
	DT_PASS_ENCOURAGE_BOX_DATA *pstOut = (DT_PASS_ENCOURAGE_BOX_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGroupNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_BOX_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstOut->byGroupNum)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_GROUP_DATA(&pstOut->astBoxGroupInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_UPGRADE_DATA_LIST(void *pHost, CNetData* poNetData)
{
	DT_HERO_UPGRADE_DATA_LIST *pstIn = (DT_HERO_UPGRADE_DATA_LIST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byUpgradeHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byUpgradeHeroNum)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_DATA(&pstIn->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_UPGRADE_DATA_LIST(void *pHost, CNetData* poNetData)
{
	DT_HERO_UPGRADE_DATA_LIST *pstOut = (DT_HERO_UPGRADE_DATA_LIST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byUpgradeHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byUpgradeHeroNum)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_DATA(&pstOut->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ENTER_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_INSTANCE_ACK *pstIn = (PKT_CLIGS_ENTER_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCliVer))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwResVer))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUIVer))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurHP))
		return -1;

	if(-1 == EncodeDT_MONSTER_DATA_LIST(&pstIn->stMonsterInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveBoxFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveBoxFlag)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_DATA(&pstIn->astBoxInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveBoxFlag)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_DATA_LIST(&pstIn->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wDoubleExpNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ENTER_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_INSTANCE_ACK *pstOut = (PKT_CLIGS_ENTER_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCliVer))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwResVer))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUIVer))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurHP))
		return -1;

	if(-1 == DecodeDT_MONSTER_DATA_LIST(&pstOut->stMonsterInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveBoxFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveBoxFlag)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_DATA(&pstOut->astBoxInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveBoxFlag)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_DATA_LIST(&pstOut->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wDoubleExpNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BATTLE_REQ *pstIn = (PKT_CLIGS_BATTLE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBattleIndex))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSceneIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byInstanceIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BATTLE_REQ *pstOut = (PKT_CLIGS_BATTLE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBattleIndex))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSceneIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byInstanceIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BURST_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_BURST_ITEM_DATA *pstIn = (DT_BURST_ITEM_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBurstItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBurstItemNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awBurstItemList[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BURST_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_BURST_ITEM_DATA *pstOut = (DT_BURST_ITEM_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBurstItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBurstItemNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awBurstItemList[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_NEXT_INSTANCE_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEXT_INSTANCE_DATA *pstIn = (DT_NEXT_INSTANCE_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSceneIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byInstanceIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEnterLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEnterPhyStrength))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_NEXT_INSTANCE_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEXT_INSTANCE_DATA *pstOut = (DT_NEXT_INSTANCE_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSceneIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byInstanceIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEnterLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEnterPhyStrength))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_UNLOCK_DATA(void *pHost, CNetData* poNetData)
{
	DT_UNLOCK_DATA *pstIn = (DT_UNLOCK_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wUnlockMainTownLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnlockBuildKindID))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_UNLOCK_HERO_NUM; i++)
	{
		if(-1 == poNetData->AddWord(pstIn->awUnlockHeroID[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_UNLOCK_DATA(void *pHost, CNetData* poNetData)
{
	DT_UNLOCK_DATA *pstOut = (DT_UNLOCK_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wUnlockMainTownLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnlockBuildKindID))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_UNLOCK_HERO_NUM; i++)
	{
		if(-1 == poNetData->DelWord(pstOut->awUnlockHeroID[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BATTLE_ACK *pstIn = (PKT_CLIGS_BATTLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA(&pstIn->stBattleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_ENCOURAGE_DATA(&pstIn->stBattleEncourage, poNetData))
		return -1;

	if(-1 == EncodeDT_DATA_AFTER_BATTLE_ENCOURAGE(&pstIn->stAfterBattleEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPassFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_DATA(&pstIn->astPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_DATA_AFTER_PASS_ENCOURAGE(&pstIn->astAfterPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_DATA(&pstIn->astPassEncourageBox[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_UNLOCK_DATA(&pstIn->astUnlockInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHaveNextInstance))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveNextInstance)
			break;
		if(-1 == EncodeDT_NEXT_INSTANCE_DATA(&pstIn->astNextInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stPhyStrengthInfo, poNetData))
		return -1;

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyGuide[i]))
			return -1;
	}

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BATTLE_ACK *pstOut = (PKT_CLIGS_BATTLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA(&pstOut->stBattleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_ENCOURAGE_DATA(&pstOut->stBattleEncourage, poNetData))
		return -1;

	if(-1 == DecodeDT_DATA_AFTER_BATTLE_ENCOURAGE(&pstOut->stAfterBattleEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPassFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_DATA(&pstOut->astPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_DATA_AFTER_PASS_ENCOURAGE(&pstOut->astAfterPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_DATA(&pstOut->astPassEncourageBox[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_UNLOCK_DATA(&pstOut->astUnlockInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHaveNextInstance))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveNextInstance)
			break;
		if(-1 == DecodeDT_NEXT_INSTANCE_DATA(&pstOut->astNextInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stPhyStrengthInfo, poNetData))
		return -1;

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyGuide[i]))
			return -1;
	}

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXIT_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXIT_INSTANCE_REQ *pstIn = (PKT_CLIGS_EXIT_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXIT_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXIT_INSTANCE_REQ *pstOut = (PKT_CLIGS_EXIT_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXIT_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXIT_INSTANCE_ACK *pstIn = (PKT_CLIGS_EXIT_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PLAYER_BASE_DATA_CLI(&pstIn->stPlayerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXIT_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXIT_INSTANCE_ACK *pstOut = (PKT_CLIGS_EXIT_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PLAYER_BASE_DATA_CLI(&pstOut->stPlayerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_INSTANCE_RECORD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_INSTANCE_RECORD_DATA_CLI *pstIn = (DT_INSTANCE_RECORD_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byScore))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEnterLevel))
		return -1;

	if(-1 == EncodeDT_BURST_ITEM_DATA(&pstIn->stBurstItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBurstExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxMonstorPower))
		return -1;

	if(-1 == EncodeDT_PASS_ENCOURAGE_DATA(&pstIn->stPassEncourage, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_INSTANCE_RECORD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_INSTANCE_RECORD_DATA_CLI *pstOut = (DT_INSTANCE_RECORD_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byScore))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEnterLevel))
		return -1;

	if(-1 == DecodeDT_BURST_ITEM_DATA(&pstOut->stBurstItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBurstExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxMonstorPower))
		return -1;

	if(-1 == DecodeDT_PASS_ENCOURAGE_DATA(&pstOut->stPassEncourage, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_TOWN_INSTANCE_RECORD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_TOWN_INSTANCE_RECORD_DATA_CLI *pstIn = (DT_TOWN_INSTANCE_RECORD_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMainMonsterKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanBattle))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_PER_TOWN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byInstanceNum)
			break;
		if(-1 == EncodeDT_INSTANCE_RECORD_DATA_CLI(&pstIn->astInstanceInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_TOWN_INSTANCE_RECORD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_TOWN_INSTANCE_RECORD_DATA_CLI *pstOut = (DT_TOWN_INSTANCE_RECORD_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMainMonsterKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanBattle))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_PER_TOWN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byInstanceNum)
			break;
		if(-1 == DecodeDT_INSTANCE_RECORD_DATA_CLI(&pstOut->astInstanceInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_SCENE_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_SCENE_INSTANCE_REQ *pstIn = (PKT_CLIGS_GET_SCENE_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wIndex))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_SCENE_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_SCENE_INSTANCE_REQ *pstOut = (PKT_CLIGS_GET_SCENE_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wIndex))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CHAPTER_SCORE(void *pHost, CNetData* poNetData)
{
	DT_CHAPTER_SCORE *pstIn = (DT_CHAPTER_SCORE*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	if(-1 == EncodeDT_ENCOURAGE_DATA(&pstIn->stChapterEncourage, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CHAPTER_SCORE(void *pHost, CNetData* poNetData)
{
	DT_CHAPTER_SCORE *pstOut = (DT_CHAPTER_SCORE*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	if(-1 == DecodeDT_ENCOURAGE_DATA(&pstOut->stChapterEncourage, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA *pstIn = (DT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGroupNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_BOX_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstIn->byGroupNum)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_GROUP_DATA(&pstIn->astBoxGroupInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA *pstOut = (DT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGroupNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_BOX_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstOut->byGroupNum)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_GROUP_DATA(&pstOut->astBoxGroupInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACCUMULATED_SCORE_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_ACCUMULATED_SCORE_ENCOURAGE *pstIn = (DT_ACCUMULATED_SCORE_ENCOURAGE*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCurSocre))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEncourageSocre))
		return -1;

	if(-1 == EncodeDT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA(&pstIn->stAccumulatedEncourageBox, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	if(-1 == EncodeDT_ENCOURAGE_DATA(&pstIn->stAccumulatedEncourage, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACCUMULATED_SCORE_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_ACCUMULATED_SCORE_ENCOURAGE *pstOut = (DT_ACCUMULATED_SCORE_ENCOURAGE*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCurSocre))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEncourageSocre))
		return -1;

	if(-1 == DecodeDT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA(&pstOut->stAccumulatedEncourageBox, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	if(-1 == DecodeDT_ENCOURAGE_DATA(&pstOut->stAccumulatedEncourage, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_SCENE_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_SCENE_INSTANCE_ACK *pstIn = (PKT_CLIGS_GET_SCENE_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIndex))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnterPhyStrength))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stMaxInstanceData, poNetData))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stMaxUnlockInstance, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byTownNum)
			break;
		if(-1 == EncodeDT_TOWN_INSTANCE_RECORD_DATA_CLI(&pstIn->astTownInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszContent, sizeof(pstIn->aszContent)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byChapterNum))
		return -1;

	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byChapterNum)
			break;
		if(-1 == EncodeDT_CHAPTER_SCORE(&pstIn->astChapterInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_ACCUMULATED_SCORE_ENCOURAGE(&pstIn->stAccumulatedEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurPhyStrength))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_SCENE_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_SCENE_INSTANCE_ACK *pstOut = (PKT_CLIGS_GET_SCENE_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIndex))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnterPhyStrength))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stMaxInstanceData, poNetData))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stMaxUnlockInstance, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byTownNum)
			break;
		if(-1 == DecodeDT_TOWN_INSTANCE_RECORD_DATA_CLI(&pstOut->astTownInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszContent, sizeof(pstOut->aszContent)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byChapterNum))
		return -1;

	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byChapterNum)
			break;
		if(-1 == DecodeDT_CHAPTER_SCORE(&pstOut->astChapterInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_ACCUMULATED_SCORE_ENCOURAGE(&pstOut->stAccumulatedEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurPhyStrength))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_STRENGTHEN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_STRENGTHEN_REQ *pstIn = (PKT_CLIGS_EQUIP_STRENGTHEN_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStrengthenType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_STRENGTHEN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_STRENGTHEN_REQ *pstOut = (PKT_CLIGS_EQUIP_STRENGTHEN_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStrengthenType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_STRENGTHEN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_STRENGTHEN_ACK *pstIn = (PKT_CLIGS_EQUIP_STRENGTHEN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->stEquipInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstIn->stEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStrengthenCountDown))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerMaxHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerCurHP))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_STRENGTHEN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_STRENGTHEN_ACK *pstOut = (PKT_CLIGS_EQUIP_STRENGTHEN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->stEquipInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstOut->stEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStrengthenCountDown))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerMaxHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerCurHP))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SMITHY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SMITHY_REQ *pstIn = (PKT_CLIGS_OPEN_SMITHY_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuildKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SMITHY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SMITHY_REQ *pstOut = (PKT_CLIGS_OPEN_SMITHY_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuildKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BUY_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_BUY_EQUIP_DATA *pstIn = (DT_BUY_EQUIP_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyCoin))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BUY_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_BUY_EQUIP_DATA *pstOut = (DT_BUY_EQUIP_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyCoin))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SMITHY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SMITHY_ACK *pstIn = (PKT_CLIGS_OPEN_SMITHY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStrengthenCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStrengthenCD))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClrCDGold))
		return -1;

	if(-1 == EncodeDT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI(&pstIn->stEquipList, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(-1 == EncodeDT_BUY_EQUIP_DATA(&pstIn->astByEquipInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SMITHY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SMITHY_ACK *pstOut = (PKT_CLIGS_OPEN_SMITHY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStrengthenCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStrengthenCD))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClrCDGold))
		return -1;

	if(-1 == DecodeDT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI(&pstOut->stEquipList, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < EQUIP_POS_NUM; i++)
		{
			if(-1 == DecodeDT_BUY_EQUIP_DATA(&pstOut->astByEquipInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelUint64(pstOut->qwBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RECRUIT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RECRUIT_REQ *pstIn = (PKT_CLIGS_OPEN_RECRUIT_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuildKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RECRUIT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RECRUIT_REQ *pstOut = (PKT_CLIGS_OPEN_RECRUIT_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuildKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_ATTR_ADD_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_ATTR_ADD_CLI *pstIn = (DT_HERO_ATTR_ADD_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwAddAttack))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddTalent))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_ATTR_ADD_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_ATTR_ADD_CLI *pstOut = (DT_HERO_ATTR_ADD_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwAddAttack))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddTalent))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RECRUIT_HERO_DATA(void *pHost, CNetData* poNetData)
{
	DT_RECRUIT_HERO_DATA *pstIn = (DT_RECRUIT_HERO_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNeedVisitNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurVisitNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwVisitCoin))
		return -1;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stHeroBaseInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_ATTR_ADD_CLI(&pstIn->stHeroAttrAddInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_SKILL_DATA_CLI(&pstIn->stSkillInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVisitGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRecuitLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRequireJingjieLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecuitUnLock))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecommend))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RECRUIT_HERO_DATA(void *pHost, CNetData* poNetData)
{
	DT_RECRUIT_HERO_DATA *pstOut = (DT_RECRUIT_HERO_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNeedVisitNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurVisitNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwVisitCoin))
		return -1;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stHeroBaseInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_ATTR_ADD_CLI(&pstOut->stHeroAttrAddInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_SKILL_DATA_CLI(&pstOut->stSkillInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVisitGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRecuitLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRequireJingjieLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecuitUnLock))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecommend))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RECRUIT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RECRUIT_ACK *pstIn = (PKT_CLIGS_OPEN_RECRUIT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJingJieLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_RECRUIT_HERO_DATA(&pstIn->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RECRUIT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RECRUIT_ACK *pstOut = (PKT_CLIGS_OPEN_RECRUIT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJingJieLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_RECRUIT_HERO_DATA(&pstOut->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECRUIT_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECRUIT_HERO_REQ *pstIn = (PKT_CLIGS_RECRUIT_HERO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECRUIT_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECRUIT_HERO_REQ *pstOut = (PKT_CLIGS_RECRUIT_HERO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECRUIT_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECRUIT_HERO_ACK *pstIn = (PKT_CLIGS_RECRUIT_HERO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stHeroBaseInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerCoin))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyGuide[i]))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECRUIT_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECRUIT_HERO_ACK *pstOut = (PKT_CLIGS_RECRUIT_HERO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stHeroBaseInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerCoin))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyGuide[i]))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_VISIT_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VISIT_HERO_REQ *pstIn = (PKT_CLIGS_VISIT_HERO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySizeFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_VISIT_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VISIT_HERO_REQ *pstOut = (PKT_CLIGS_VISIT_HERO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySizeFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_VISIT_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VISIT_HERO_ACK *pstIn = (PKT_CLIGS_VISIT_HERO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byWinFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedVisitNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurVisitNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUpgradeVisitNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwReturnCoin))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_VISIT_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VISIT_HERO_ACK *pstOut = (PKT_CLIGS_VISIT_HERO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byWinFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedVisitNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurVisitNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUpgradeVisitNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwReturnCoin))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BAG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BAG_REQ *pstIn = (PKT_CLIGS_OPEN_BAG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BAG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BAG_REQ *pstOut = (PKT_CLIGS_OPEN_BAG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BAG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BAG_ACK *pstIn = (PKT_CLIGS_OPEN_BAG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BAG_DATA_CLI(&pstIn->stBagInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->stBagItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstIn->stEquipXiangqianDes, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BAG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BAG_ACK *pstOut = (PKT_CLIGS_OPEN_BAG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BAG_DATA_CLI(&pstOut->stBagInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->stBagItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstOut->stEquipXiangqianDes, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACCEPT_TASK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACCEPT_TASK_REQ *pstIn = (PKT_CLIGS_ACCEPT_TASK_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACCEPT_TASK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACCEPT_TASK_REQ *pstOut = (PKT_CLIGS_ACCEPT_TASK_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_INSTANCE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_INSTANCE_DATA_CLI *pstIn = (DT_INSTANCE_DATA_CLI*)pHost;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEnterLevel))
		return -1;

	if(-1 == EncodeDT_BURST_ITEM_DATA(&pstIn->stBurstItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBurstExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxMonstorPower))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_INSTANCE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_INSTANCE_DATA_CLI *pstOut = (DT_INSTANCE_DATA_CLI*)pHost;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEnterLevel))
		return -1;

	if(-1 == DecodeDT_BURST_ITEM_DATA(&pstOut->stBurstItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBurstExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxMonstorPower))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACCEPT_TASK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACCEPT_TASK_ACK *pstIn = (PKT_CLIGS_ACCEPT_TASK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnlockNewInstanceFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byUnlockNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_ID(&pstIn->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_DATA_CLI(&pstIn->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACCEPT_TASK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACCEPT_TASK_ACK *pstOut = (PKT_CLIGS_ACCEPT_TASK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnlockNewInstanceFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byUnlockNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_ID(&pstOut->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_DATA_CLI(&pstOut->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GIVEUP_TASK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GIVEUP_TASK_REQ *pstIn = (PKT_CLIGS_GIVEUP_TASK_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GIVEUP_TASK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GIVEUP_TASK_REQ *pstOut = (PKT_CLIGS_GIVEUP_TASK_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GIVEUP_TASK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GIVEUP_TASK_ACK *pstIn = (PKT_CLIGS_GIVEUP_TASK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GIVEUP_TASK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GIVEUP_TASK_ACK *pstOut = (PKT_CLIGS_GIVEUP_TASK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_TASK_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_TASK_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_RECV_TASK_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_TASK_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_TASK_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_RECV_TASK_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_TASK_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_TASK_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_RECV_TASK_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	if(-1 == EncodeDT_HERO_UPGRADE_DATA(&pstIn->stMainHeroUpgradeInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUnlockEquipLevel))
		return -1;

	if(-1 == EncodeUnlockScienceInfo(&pstIn->stUnlockScienceList, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnlockNewInstanceFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byUnlockNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_ID(&pstIn->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_DATA_CLI(&pstIn->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyGuide[i]))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwBlueGas))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPurpleGas))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingJie))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_DATA(&pstIn->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_TASK_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_TASK_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_RECV_TASK_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	if(-1 == DecodeDT_HERO_UPGRADE_DATA(&pstOut->stMainHeroUpgradeInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUnlockEquipLevel))
		return -1;

	if(-1 == DecodeUnlockScienceInfo(&pstOut->stUnlockScienceList, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnlockNewInstanceFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byUnlockNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_ID(&pstOut->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_DATA_CLI(&pstOut->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyGuide[i]))
			return -1;
	}

	if(-1 == poNetData->DelUint64(pstOut->qwStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwBlueGas))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPurpleGas))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingJie))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_DATA(&pstOut->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RACE_BUILD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RACE_BUILD_REQ *pstIn = (PKT_CLIGS_OPEN_RACE_BUILD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuildKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RACE_BUILD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RACE_BUILD_REQ *pstOut = (PKT_CLIGS_OPEN_RACE_BUILD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuildKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CHALLENGE_PLAYER_DATA(void *pHost, CNetData* poNetData)
{
	DT_CHALLENGE_PLAYER_DATA *pstIn = (DT_CHALLENGE_PLAYER_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFirstAttack))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CHALLENGE_PLAYER_DATA(void *pHost, CNetData* poNetData)
{
	DT_CHALLENGE_PLAYER_DATA *pstOut = (DT_CHALLENGE_PLAYER_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFirstAttack))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RACE_BUILD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RACE_BUILD_ACK *pstIn = (PKT_CLIGS_OPEN_RACE_BUILD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wContiWin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingJie))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFirstAttack))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveRecvEncourageFlag))
		return -1;

	if(-1 == EncodeDT_RACE_RANK_ENCOURAGE_DATA(&pstIn->stTodayRankEncourage, poNetData))
		return -1;

	if(-1 == EncodeDT_RACE_RANK_ENCOURAGE_DATA(&pstIn->stTomorrowRankEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalChallengeNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanChallengeNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipExtNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreeChallengeNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwChallengeNeedGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wChallengeCountDown))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClrCDGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byChallengeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHALLENGE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byChallengeNum)
			break;
		if(-1 == EncodeDT_CHALLENGE_PLAYER_DATA(&pstIn->astChallengePlayerList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveWorship))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecvEncCountDown))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RACE_BUILD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RACE_BUILD_ACK *pstOut = (PKT_CLIGS_OPEN_RACE_BUILD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wContiWin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingJie))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFirstAttack))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveRecvEncourageFlag))
		return -1;

	if(-1 == DecodeDT_RACE_RANK_ENCOURAGE_DATA(&pstOut->stTodayRankEncourage, poNetData))
		return -1;

	if(-1 == DecodeDT_RACE_RANK_ENCOURAGE_DATA(&pstOut->stTomorrowRankEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalChallengeNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanChallengeNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipExtNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreeChallengeNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwChallengeNeedGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wChallengeCountDown))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClrCDGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byChallengeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHALLENGE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byChallengeNum)
			break;
		if(-1 == DecodeDT_CHALLENGE_PLAYER_DATA(&pstOut->astChallengePlayerList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveWorship))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecvEncCountDown))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ENEMY_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_EQUIP_DATA *pstIn = (DT_ENEMY_EQUIP_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttribute, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ENEMY_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_EQUIP_DATA *pstOut = (DT_ENEMY_EQUIP_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttribute, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ENEMY_EQUIP_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_EQUIP_DATA_LST *pstIn = (DT_ENEMY_EQUIP_DATA_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_ENEMY_EQUIP_DATA(&pstIn->astEquipList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ENEMY_EQUIP_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_EQUIP_DATA_LST *pstOut = (DT_ENEMY_EQUIP_DATA_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_ENEMY_EQUIP_DATA(&pstOut->astEquipList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ENEMY_HERO_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_HERO_DATA *pstIn = (DT_ENEMY_HERO_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCoach))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTalent))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttribute, poNetData))
		return -1;

	if(-1 == EncodeDT_ENEMY_EQUIP_DATA_LST(&pstIn->stEquipList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ENEMY_HERO_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_HERO_DATA *pstOut = (DT_ENEMY_HERO_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCoach))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTalent))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttribute, poNetData))
		return -1;

	if(-1 == DecodeDT_ENEMY_EQUIP_DATA_LST(&pstOut->stEquipList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHALLENGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_REQ *pstIn = (PKT_CLIGS_CHALLENGE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHALLENGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_REQ *pstOut = (PKT_CLIGS_CHALLENGE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHALLENGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_ACK *pstIn = (PKT_CLIGS_CHALLENGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_CHALLENGE_PLAYER_DATA(&pstIn->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEnemyHeroNum)
			break;
		if(-1 == EncodeDT_ENEMY_HERO_DATA(&pstIn->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_BATTLE_DATA(&pstIn->stBattleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RACE_CHALLENGE_ENCOURAGE_DATA(&pstIn->stChallengeEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHALLENGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_ACK *pstOut = (PKT_CLIGS_CHALLENGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_CHALLENGE_PLAYER_DATA(&pstOut->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEnemyHeroNum)
			break;
		if(-1 == DecodeDT_ENEMY_HERO_DATA(&pstOut->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_BATTLE_DATA(&pstOut->stBattleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RACE_CHALLENGE_ENCOURAGE_DATA(&pstOut->stChallengeEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_RANK_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RANK_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_RECV_RANK_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_RANK_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RANK_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_RECV_RANK_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_RANK_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RANK_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_RECV_RANK_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RACE_RANK_ENCOURAGE_DATA(&pstIn->stRankEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingJie))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_RANK_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RANK_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_RECV_RANK_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RACE_RANK_ENCOURAGE_DATA(&pstOut->stRankEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingJie))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_RANK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANK_REQ *pstIn = (PKT_CLIGS_GET_RANK_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_RANK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANK_REQ *pstOut = (PKT_CLIGS_GET_RANK_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RANK_DATA(void *pHost, CNetData* poNetData)
{
	DT_RANK_DATA *pstIn = (DT_RANK_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == EncodeDT_RACE_RANK_ENCOURAGE_DATA(&pstIn->stRankEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RANK_DATA(void *pHost, CNetData* poNetData)
{
	DT_RANK_DATA *pstOut = (DT_RANK_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == DecodeDT_RACE_RANK_ENCOURAGE_DATA(&pstOut->stRankEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_RANK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANK_ACK *pstIn = (PKT_CLIGS_GET_RANK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byShowNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RANK_SHOW_NUM; i++)
	{
		if(i >= (INT32)pstIn->byShowNum)
			break;
		if(-1 == EncodeDT_RANK_DATA(&pstIn->astRankShowInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_RANK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANK_ACK *pstOut = (PKT_CLIGS_GET_RANK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byShowNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RANK_SHOW_NUM; i++)
	{
		if(i >= (INT32)pstOut->byShowNum)
			break;
		if(-1 == DecodeDT_RANK_DATA(&pstOut->astRankShowInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_RACE_BATTLELOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RACE_BATTLELOG_REQ *pstIn = (PKT_CLIGS_GET_RACE_BATTLELOG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_RACE_BATTLELOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RACE_BATTLELOG_REQ *pstOut = (PKT_CLIGS_GET_RACE_BATTLELOG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RACE_BATTLELOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_RACE_BATTLELOG_DATA_CLI *pstIn = (DT_RACE_BATTLELOG_DATA_CLI*)pHost;

	if(-1 == EncodeDT_RACE_BATTLELOG_DATA(&pstIn->stBattlelogInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEnemyDispName, sizeof(pstIn->aszEnemyDispName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RACE_BATTLELOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_RACE_BATTLELOG_DATA_CLI *pstOut = (DT_RACE_BATTLELOG_DATA_CLI*)pHost;

	if(-1 == DecodeDT_RACE_BATTLELOG_DATA(&pstOut->stBattlelogInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEnemyDispName, sizeof(pstOut->aszEnemyDispName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_RACE_BATTLELOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RACE_BATTLELOG_ACK *pstIn = (PKT_CLIGS_GET_RACE_BATTLELOG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byShowNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RACE_BATTLELOG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byShowNum)
			break;
		if(-1 == EncodeDT_RACE_BATTLELOG_DATA_CLI(&pstIn->astRankBattleLogInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_RACE_BATTLELOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RACE_BATTLELOG_ACK *pstOut = (PKT_CLIGS_GET_RACE_BATTLELOG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byShowNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RACE_BATTLELOG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byShowNum)
			break;
		if(-1 == DecodeDT_RACE_BATTLELOG_DATA_CLI(&pstOut->astRankBattleLogInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SHOP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHOP_REQ *pstIn = (PKT_CLIGS_OPEN_SHOP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTabID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SHOP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHOP_REQ *pstOut = (PKT_CLIGS_OPEN_SHOP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTabID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_DATA_SHOP(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_SHOP *pstIn = (DT_ITEM_DATA_SHOP*)pHost;

	if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_DATA_SHOP(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_SHOP *pstOut = (DT_ITEM_DATA_SHOP*)pHost;

	if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SHOP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHOP_ACK *pstIn = (PKT_CLIGS_OPEN_SHOP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTabID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SHOP_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_SHOP(&pstIn->astItemDataList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SHOP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHOP_ACK *pstOut = (PKT_CLIGS_OPEN_SHOP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTabID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SHOP_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_SHOP(&pstOut->astItemDataList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_ITEM_REQ *pstIn = (PKT_CLIGS_BUY_ITEM_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTabID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPileCount))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_ITEM_REQ *pstOut = (PKT_CLIGS_BUY_ITEM_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTabID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPileCount))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_ITEM_ACK *pstIn = (PKT_CLIGS_BUY_ITEM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTabID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPileCount))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_ITEM_ACK *pstOut = (PKT_CLIGS_BUY_ITEM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTabID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPileCount))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SELL_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELL_ITEM_REQ *pstIn = (PKT_CLIGS_SELL_ITEM_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SELL_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELL_ITEM_REQ *pstOut = (PKT_CLIGS_SELL_ITEM_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SELL_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELL_ITEM_ACK *pstIn = (PKT_CLIGS_SELL_ITEM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SELL_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELL_ITEM_ACK *pstOut = (PKT_CLIGS_SELL_ITEM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DISBAND_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISBAND_HERO_REQ *pstIn = (PKT_CLIGS_DISBAND_HERO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DISBAND_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISBAND_HERO_REQ *pstOut = (PKT_CLIGS_DISBAND_HERO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DISBAND_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISBAND_HERO_ACK *pstIn = (PKT_CLIGS_DISBAND_HERO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerHP))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DISBAND_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISBAND_HERO_ACK *pstOut = (PKT_CLIGS_DISBAND_HERO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerHP))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_REQ *pstIn = (PKT_CLIGS_EQUIP_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDressType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressItemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressItemIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUndressItemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUndressItemIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_REQ *pstOut = (PKT_CLIGS_EQUIP_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDressType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressItemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressItemIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUndressItemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUndressItemIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_ACK *pstIn = (PKT_CLIGS_EQUIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDressType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressItemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressItemIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUndressItemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUndressItemIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerHP))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stHeroPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_ACK *pstOut = (PKT_CLIGS_EQUIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDressType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressItemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressItemIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUndressItemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUndressItemIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerHP))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stHeroPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REGISTER_USERNAME_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REGISTER_USERNAME_NTF *pstIn = (PKT_CLIGS_REGISTER_USERNAME_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REGISTER_USERNAME_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REGISTER_USERNAME_NTF *pstOut = (PKT_CLIGS_REGISTER_USERNAME_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EMBATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EMBATTLE_REQ *pstIn = (PKT_CLIGS_OPEN_EMBATTLE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EMBATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EMBATTLE_REQ *pstOut = (PKT_CLIGS_OPEN_EMBATTLE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_EMBATLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_HERO_EMBATLE_DATA *pstIn = (DT_HERO_EMBATLE_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCareerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTalent))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttribute, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == EncodeDT_SKILL_DATA_CLI(&pstIn->stSkillInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_EMBATLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_HERO_EMBATLE_DATA *pstOut = (DT_HERO_EMBATLE_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCareerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTalent))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttribute, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == DecodeDT_SKILL_DATA_CLI(&pstOut->stSkillInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EMBATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EMBATTLE_ACK *pstIn = (PKT_CLIGS_OPEN_EMBATTLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_EMBATLE_DATA(&pstIn->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FORMATION_DATA(&pstIn->stFormationInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EMBATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EMBATTLE_ACK *pstOut = (PKT_CLIGS_OPEN_EMBATTLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_EMBATLE_DATA(&pstOut->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FORMATION_DATA(&pstOut->stFormationInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EMBATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EMBATTLE_REQ *pstIn = (PKT_CLIGS_EMBATTLE_REQ*)pHost;

	if(-1 == EncodeDT_FORMATION_DATA(&pstIn->stFormationInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EMBATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EMBATTLE_REQ *pstOut = (PKT_CLIGS_EMBATTLE_REQ*)pHost;

	if(-1 == DecodeDT_FORMATION_DATA(&pstOut->stFormationInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EMBATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EMBATTLE_ACK *pstIn = (PKT_CLIGS_EMBATTLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EMBATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EMBATTLE_ACK *pstOut = (PKT_CLIGS_EMBATTLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_PLAYER_DATA_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_PLAYER_DATA_REQ *pstIn = (PKT_CLIGS_CLR_PLAYER_DATA_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_PLAYER_DATA_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_PLAYER_DATA_REQ *pstOut = (PKT_CLIGS_CLR_PLAYER_DATA_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_ITEM_MAKER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ITEM_MAKER_REQ *pstIn = (PKT_CLIGS_OPEN_ITEM_MAKER_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_ITEM_MAKER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ITEM_MAKER_REQ *pstOut = (PKT_CLIGS_OPEN_ITEM_MAKER_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_DATA_MAKER_NEED(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_MAKER_NEED *pstIn = (DT_EQUIP_DATA_MAKER_NEED*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stBurstInstance, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_DATA_MAKER_NEED(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_MAKER_NEED *pstOut = (DT_EQUIP_DATA_MAKER_NEED*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stBurstInstance, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_ITEM_MAKER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ITEM_MAKER_ACK *pstIn = (PKT_CLIGS_OPEN_ITEM_MAKER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_DATA_MAKER_NEED(&pstIn->astEquipList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	for(i = 0; i < MAX_ITEM_MAKER_NEED_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_NEED_ITEM_DATA(&pstIn->astItemInfoList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byEstimateItemNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEstimateItemNum)
			break;
		if(-1 == EncodeDT_ESTIMATE_ITEM_DATA(&pstIn->astEstimateItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_ITEM_MAKER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ITEM_MAKER_ACK *pstOut = (PKT_CLIGS_OPEN_ITEM_MAKER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_DATA_MAKER_NEED(&pstOut->astEquipList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	for(i = 0; i < MAX_ITEM_MAKER_NEED_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_NEED_ITEM_DATA(&pstOut->astItemInfoList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byEstimateItemNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEstimateItemNum)
			break;
		if(-1 == DecodeDT_ESTIMATE_ITEM_DATA(&pstOut->astEstimateItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MAKE_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MAKE_ITEM_REQ *pstIn = (PKT_CLIGS_MAKE_ITEM_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MAKE_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MAKE_ITEM_REQ *pstOut = (PKT_CLIGS_MAKE_ITEM_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MAKE_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MAKE_ITEM_ACK *pstIn = (PKT_CLIGS_MAKE_ITEM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->stGoodsBagItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwBlueGas))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszErrInfo, sizeof(pstIn->aszErrInfo)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MAKE_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MAKE_ITEM_ACK *pstOut = (PKT_CLIGS_MAKE_ITEM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->stGoodsBagItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwBlueGas))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszErrInfo, sizeof(pstOut->aszErrInfo)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DRUG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_DRUG_DATA_CLI *pstIn = (DT_DRUG_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUsedNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOddNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBaseTalent))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDecTalent))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DRUG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_DRUG_DATA_CLI *pstOut = (DT_DRUG_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUsedNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOddNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBaseTalent))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDecTalent))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DRUG_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_DRUG_DATA_LST_CLI *pstIn = (DT_DRUG_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_DRUG_LEVEL; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_DRUG_DATA_CLI(&pstIn->astDrugList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DRUG_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_DRUG_DATA_LST_CLI *pstOut = (DT_DRUG_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_DRUG_LEVEL; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_DRUG_DATA_CLI(&pstOut->astDrugList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_HERO_DRUG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_HERO_DRUG_REQ *pstIn = (PKT_CLIGS_GET_HERO_DRUG_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedDrugItemFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_HERO_DRUG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_HERO_DRUG_REQ *pstOut = (PKT_CLIGS_GET_HERO_DRUG_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedDrugItemFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DRUG_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_DRUG_ITEM_DATA *pstIn = (DT_DRUG_ITEM_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUseLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPileCount))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDrugLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBaseTalent))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDecTalent))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DRUG_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_DRUG_ITEM_DATA *pstOut = (DT_DRUG_ITEM_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUseLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPileCount))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDrugLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBaseTalent))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDecTalent))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DRUG_ITEM_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_DRUG_ITEM_DATA_LST *pstIn = (DT_DRUG_ITEM_DATA_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wItemNum)
			break;
		if(-1 == EncodeDT_DRUG_ITEM_DATA(&pstIn->astDrugItemLst[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DRUG_ITEM_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_DRUG_ITEM_DATA_LST *pstOut = (DT_DRUG_ITEM_DATA_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wItemNum)
			break;
		if(-1 == DecodeDT_DRUG_ITEM_DATA(&pstOut->astDrugItemLst[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_HERO_DRUG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_HERO_DRUG_ACK *pstIn = (PKT_CLIGS_GET_HERO_DRUG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == EncodeDT_DRUG_DATA_LST_CLI(&pstIn->stDrugInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveDrugItemFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveDrugItemFlag)
			break;
		if(-1 == EncodeDT_DRUG_ITEM_DATA_LST(&pstIn->astDrugItemInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_HERO_DRUG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_HERO_DRUG_ACK *pstOut = (PKT_CLIGS_GET_HERO_DRUG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == DecodeDT_DRUG_DATA_LST_CLI(&pstOut->stDrugInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveDrugItemFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveDrugItemFlag)
			break;
		if(-1 == DecodeDT_DRUG_ITEM_DATA_LST(&pstOut->astDrugItemInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRecvCountDown))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNextOnlineEncourageFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byNextOnlineEncourageFlag)
			break;
		if(-1 == EncodeDT_ONLINE_ENCOURAGE_DATA(&pstIn->astNextOnlineEncourage[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_DATA_AFTER_ONLINE_ENCOURAGE(&pstIn->stCurPlayerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRecvCountDown))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNextOnlineEncourageFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byNextOnlineEncourageFlag)
			break;
		if(-1 == DecodeDT_ONLINE_ENCOURAGE_DATA(&pstOut->astNextOnlineEncourage[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_DATA_AFTER_ONLINE_ENCOURAGE(&pstOut->stCurPlayerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DATA_AFTER_PASS_ENCOURAGE_BOX(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_PASS_ENCOURAGE_BOX *pstIn = (DT_DATA_AFTER_PASS_ENCOURAGE_BOX*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DATA_AFTER_PASS_ENCOURAGE_BOX(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_PASS_ENCOURAGE_BOX *pstOut = (DT_DATA_AFTER_PASS_ENCOURAGE_BOX*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ *pstIn = (PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ *pstOut = (PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK *pstIn = (PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_DATA(&pstIn->stPassEncourage, poNetData))
		return -1;

	if(-1 == EncodeDT_DATA_AFTER_PASS_ENCOURAGE_BOX(&pstIn->stAfterPassEncourage, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyGuide[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK *pstOut = (PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_DATA(&pstOut->stPassEncourage, poNetData))
		return -1;

	if(-1 == DecodeDT_DATA_AFTER_PASS_ENCOURAGE_BOX(&pstOut->stAfterPassEncourage, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyGuide[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_INCREASE_BAG_SIZE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_INCREASE_BAG_SIZE_REQ *pstIn = (PKT_CLIGS_INCREASE_BAG_SIZE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byInc2Size))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_INCREASE_BAG_SIZE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_INCREASE_BAG_SIZE_REQ *pstOut = (PKT_CLIGS_INCREASE_BAG_SIZE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byInc2Size))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_INCREASE_BAG_SIZE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_INCREASE_BAG_SIZE_ACK *pstIn = (PKT_CLIGS_INCREASE_BAG_SIZE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_INCREASE_BAG_SIZE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_INCREASE_BAG_SIZE_ACK *pstOut = (PKT_CLIGS_INCREASE_BAG_SIZE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ONHOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_REQ *pstIn = (PKT_CLIGS_ONHOOK_REQ*)pHost;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRunTimes))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ONHOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_REQ *pstOut = (PKT_CLIGS_ONHOOK_REQ*)pHost;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRunTimes))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_UPGRADE_DATA2(void *pHost, CNetData* poNetData)
{
	DT_HERO_UPGRADE_DATA2 *pstIn = (DT_HERO_UPGRADE_DATA2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUpgradeFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStartLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEncExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeExperience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanUseBoxGoodsID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_UPGRADE_DATA2(void *pHost, CNetData* poNetData)
{
	DT_HERO_UPGRADE_DATA2 *pstOut = (DT_HERO_UPGRADE_DATA2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUpgradeFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStartLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEncExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeExperience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanUseBoxGoodsID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DATA_AFTER_ONHOOK(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_ONHOOK *pstIn = (DT_DATA_AFTER_ONHOOK*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byUpgradeHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byUpgradeHeroNum)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_DATA2(&pstIn->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stCurPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EXPERIENCE_DATA(&pstIn->stExperienceInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUnlockEquipLevel))
		return -1;

	if(-1 == EncodeUnlockScienceInfo(&pstIn->stUnlockScienceList, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnlockNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byUnlockNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_ID(&pstIn->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_DATA_CLI(&pstIn->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DATA_AFTER_ONHOOK(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_ONHOOK *pstOut = (DT_DATA_AFTER_ONHOOK*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byUpgradeHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byUpgradeHeroNum)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_DATA2(&pstOut->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stCurPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EXPERIENCE_DATA(&pstOut->stExperienceInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUnlockEquipLevel))
		return -1;

	if(-1 == DecodeUnlockScienceInfo(&pstOut->stUnlockScienceList, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnlockNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byUnlockNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_ID(&pstOut->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_DATA_CLI(&pstOut->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ONHOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_ACK *pstIn = (PKT_CLIGS_ONHOOK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_ONHOOK_RESULT(&pstIn->stOnhookResult, poNetData))
		return -1;

	if(-1 == EncodeDT_DATA_AFTER_ONHOOK(&pstIn->stAfterOnhookData, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnlockNewInstanceFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byUnlockNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_ID(&pstIn->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_DATA_CLI(&pstIn->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ONHOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_ACK *pstOut = (PKT_CLIGS_ONHOOK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_ONHOOK_RESULT(&pstOut->stOnhookResult, poNetData))
		return -1;

	if(-1 == DecodeDT_DATA_AFTER_ONHOOK(&pstOut->stAfterOnhookData, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnlockNewInstanceFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byUnlockNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_ID(&pstOut->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_DATA_CLI(&pstOut->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_CHALLENGE_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CHALLENGE_CD_REQ *pstIn = (PKT_CLIGS_CLR_CHALLENGE_CD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_CHALLENGE_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CHALLENGE_CD_REQ *pstOut = (PKT_CLIGS_CLR_CHALLENGE_CD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_CHALLENGE_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CHALLENGE_CD_ACK *pstIn = (PKT_CLIGS_CLR_CHALLENGE_CD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_CHALLENGE_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CHALLENGE_CD_ACK *pstOut = (PKT_CLIGS_CLR_CHALLENGE_CD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SYNC_TIME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SYNC_TIME_REQ *pstIn = (PKT_CLIGS_SYNC_TIME_REQ*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCliTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SYNC_TIME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SYNC_TIME_REQ *pstOut = (PKT_CLIGS_SYNC_TIME_REQ*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCliTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SYNC_TIME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SYNC_TIME_ACK *pstIn = (PKT_CLIGS_SYNC_TIME_ACK*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCliTime))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwServTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SYNC_TIME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SYNC_TIME_ACK *pstOut = (PKT_CLIGS_SYNC_TIME_ACK*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCliTime))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwServTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_REGISTER_DSPNAME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_REGISTER_DSPNAME_REQ *pstIn = (PKT_CLILS_REGISTER_DSPNAME_REQ*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszDspName, sizeof(pstIn->aszDspName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_REGISTER_DSPNAME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_REGISTER_DSPNAME_REQ *pstOut = (PKT_CLILS_REGISTER_DSPNAME_REQ*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszDspName, sizeof(pstOut->aszDspName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_REGISTER_DSPNAME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_REGISTER_DSPNAME_ACK *pstIn = (PKT_CLILS_REGISTER_DSPNAME_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDspName, sizeof(pstIn->aszDspName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_REGISTER_DSPNAME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_REGISTER_DSPNAME_ACK *pstOut = (PKT_CLILS_REGISTER_DSPNAME_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDspName, sizeof(pstOut->aszDspName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_USE_GOODS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_USE_GOODS_REQ *pstIn = (PKT_CLILS_USE_GOODS_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wGoodsKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGetBagInfoFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUseNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_USE_GOODS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_USE_GOODS_REQ *pstOut = (PKT_CLILS_USE_GOODS_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wGoodsKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGetBagInfoFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUseNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_USE_GOODS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_USE_GOODS_ACK *pstIn = (PKT_CLILS_USE_GOODS_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrength))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMainHeroUpgradeFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byMainHeroUpgradeFlag)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_DATA(&pstIn->astMainHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byUseBoxFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byUseBoxFlag)
			break;
		if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->astBoxItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwBlueGas))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPurpleGas))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGetBagInfoFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byGetBagInfoFlag)
			break;
		if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->astBagInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wGoodsKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUseNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_USE_GOODS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_USE_GOODS_ACK *pstOut = (PKT_CLILS_USE_GOODS_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrength))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMainHeroUpgradeFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byMainHeroUpgradeFlag)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_DATA(&pstOut->astMainHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byUseBoxFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byUseBoxFlag)
			break;
		if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->astBoxItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwBlueGas))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPurpleGas))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGetBagInfoFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byGetBagInfoFlag)
			break;
		if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->astBagInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wGoodsKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUseNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ *pstIn = (PKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ *pstOut = (PKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_LOGIN_ENCOURAG_DATA(void *pHost, CNetData* poNetData)
{
	DT_LOGIN_ENCOURAG_DATA *pstIn = (DT_LOGIN_ENCOURAG_DATA*)pHost;

	INT32 i;
	for(i = 0; i < MAX_LOGIN_ENCOURAGE_ITEM_NUM; i++)
	{
		if(-1 == EncodeDT_ITEM_DATA_CLI(&pstIn->astItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHitIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveSelectFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKeepDays))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanRecvNumToday))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_LOGIN_ENCOURAG_DATA(void *pHost, CNetData* poNetData)
{
	DT_LOGIN_ENCOURAG_DATA *pstOut = (DT_LOGIN_ENCOURAG_DATA*)pHost;

	INT32 i;
		for(i = 0; i < MAX_LOGIN_ENCOURAGE_ITEM_NUM; i++)
		{
			if(-1 == DecodeDT_ITEM_DATA_CLI(&pstOut->astItemInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelByte(pstOut->byHitIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveSelectFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKeepDays))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanRecvNumToday))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK *pstIn = (PKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_LOGIN_ENCOURAG_DATA(&pstIn->stLoginEncourageInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK *pstOut = (PKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_LOGIN_ENCOURAG_DATA(&pstOut->stLoginEncourageInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ *pstIn = (PKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ *pstOut = (PKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK *pstIn = (PKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK *pstOut = (PKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ *pstIn = (PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ *pstOut = (PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK *pstIn = (PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveEncourageFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveEncourageFlag)
			break;
		if(-1 == EncodeDT_LOGIN_ENCOURAG_DATA(&pstIn->astLoginEncourageInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK *pstOut = (PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveEncourageFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveEncourageFlag)
			break;
		if(-1 == DecodeDT_LOGIN_ENCOURAG_DATA(&pstOut->astLoginEncourageInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_CAPTURE_WORK_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_CAPTURE_WORK_DATA_CLI *pstIn = (DT_CAPTURE_WORK_DATA_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwWorkCountdown))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIncomeType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCaptureWorkSecond))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCollectIncome))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUncollectIncome))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAllCollectIncome))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CAPTURE_WORK_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_CAPTURE_WORK_DATA_CLI *pstOut = (DT_CAPTURE_WORK_DATA_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwWorkCountdown))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIncomeType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCaptureWorkSecond))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCollectIncome))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUncollectIncome))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAllCollectIncome))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CAPTURE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_CAPTURE_DATA_CLI *pstIn = (DT_CAPTURE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszCaptureDispName, sizeof(pstIn->aszCaptureDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCaptureCareerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCaptureLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureGridIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwReleaseCountdown))
		return -1;

	if(-1 == EncodeDT_CAPTURE_WORK_DATA_CLI(&pstIn->stWorkInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CAPTURE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_CAPTURE_DATA_CLI *pstOut = (DT_CAPTURE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszCaptureDispName, sizeof(pstOut->aszCaptureDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCaptureCareerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCaptureLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureGridIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwReleaseCountdown))
		return -1;

	if(-1 == DecodeDT_CAPTURE_WORK_DATA_CLI(&pstOut->stWorkInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLUNDER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_REQ *pstIn = (PKT_CLIGS_PLUNDER_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwEnemyID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCaptureID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUseItemFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byResistFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureGridIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLUNDER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_REQ *pstOut = (PKT_CLIGS_PLUNDER_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwEnemyID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCaptureID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUseItemFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byResistFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureGridIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLUNDER_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_PLUNDER_ENCOURAGE_DATA *pstIn = (DT_PLUNDER_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLUNDER_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_PLUNDER_ENCOURAGE_DATA *pstOut = (DT_PLUNDER_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BECAPTURE_DATA(void *pHost, CNetData* poNetData)
{
	DT_BECAPTURE_DATA *pstIn = (DT_BECAPTURE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwOwnerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszOwnerDispName, sizeof(pstIn->aszOwnerDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOwnerLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOwnerPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwReleaseCountdown))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BECAPTURE_DATA(void *pHost, CNetData* poNetData)
{
	DT_BECAPTURE_DATA *pstOut = (DT_BECAPTURE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwOwnerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszOwnerDispName, sizeof(pstOut->aszOwnerDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOwnerLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOwnerPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwReleaseCountdown))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLUNDER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_ACK *pstIn = (PKT_CLIGS_PLUNDER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEnemyID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCaptureID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUseItemFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byResistFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureGridIdx))
		return -1;

	if(-1 == EncodeDT_BECAPTURE_DATA(&pstIn->stBeCaptureInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CHALLENGE_PLAYER_DATA(&pstIn->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEnemyHeroNum)
			break;
		if(-1 == EncodeDT_ENEMY_HERO_DATA(&pstIn->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_BATTLE_DATA(&pstIn->stBattleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_PLUNDER_ENCOURAGE_DATA(&pstIn->stPlunderEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipExtNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreePlunderNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlunderGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlunderItemNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byCaptureFlag)
			break;
		if(-1 == EncodeDT_CAPTURE_DATA_CLI(&pstIn->astCaptureInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLUNDER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_ACK *pstOut = (PKT_CLIGS_PLUNDER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEnemyID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCaptureID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUseItemFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byResistFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureGridIdx))
		return -1;

	if(-1 == DecodeDT_BECAPTURE_DATA(&pstOut->stBeCaptureInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CHALLENGE_PLAYER_DATA(&pstOut->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEnemyHeroNum)
			break;
		if(-1 == DecodeDT_ENEMY_HERO_DATA(&pstOut->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_BATTLE_DATA(&pstOut->stBattleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_PLUNDER_ENCOURAGE_DATA(&pstOut->stPlunderEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipExtNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreePlunderNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlunderGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlunderItemNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byCaptureFlag)
			break;
		if(-1 == DecodeDT_CAPTURE_DATA_CLI(&pstOut->astCaptureInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLUNDER_BATTLELOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_PLUNDER_BATTLELOG_DATA_CLI *pstIn = (DT_PLUNDER_BATTLELOG_DATA_CLI*)pHost;

	if(-1 == EncodeDT_PLUNDER_BATTLELOG_DATA(&pstIn->stBattelogInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszActiveDispName, sizeof(pstIn->aszActiveDispName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszPassiveDispName, sizeof(pstIn->aszPassiveDispName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszCaptureDispName, sizeof(pstIn->aszCaptureDispName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLUNDER_BATTLELOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_PLUNDER_BATTLELOG_DATA_CLI *pstOut = (DT_PLUNDER_BATTLELOG_DATA_CLI*)pHost;

	if(-1 == DecodeDT_PLUNDER_BATTLELOG_DATA(&pstOut->stBattelogInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszActiveDispName, sizeof(pstOut->aszActiveDispName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszPassiveDispName, sizeof(pstOut->aszPassiveDispName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszCaptureDispName, sizeof(pstOut->aszCaptureDispName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CAPTURE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CAPTURE_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_CAPTURE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CAPTURE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CAPTURE_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_CAPTURE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CAPTURE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CAPTURE_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_CAPTURE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurPower))
		return -1;

	if(-1 == EncodeDT_BECAPTURE_DATA(&pstIn->stOwner, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlunderNumPerDay))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipExtNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreeCanPlunderNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CAPTURE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byCaptureNum)
			break;
		if(-1 == EncodeDT_CAPTURE_DATA_CLI(&pstIn->astCaptureInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_CAPTURE_NUM; i++)
	{
		if(-1 == poNetData->AddWord(pstIn->awUnlockGridLevel[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byUnreadPlunderBattleLogNum))
		return -1;

	if(-1 == EncodeDT_PLUNDER_BATTLELOG_DATA_CLI(&pstIn->stLastBattleLog, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBleedPerGoldClrMin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDriveAwayGold))
		return -1;

	for(i = 0; i < MAX_CAPTURE_NUM; i++)
	{
		if(-1 == EncodeDT_PLUNDER_GRID_DATA(&pstIn->astCaptureGridInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwPlunderGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CAPTURE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CAPTURE_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_CAPTURE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurPower))
		return -1;

	if(-1 == DecodeDT_BECAPTURE_DATA(&pstOut->stOwner, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlunderNumPerDay))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipExtNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreeCanPlunderNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CAPTURE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byCaptureNum)
			break;
		if(-1 == DecodeDT_CAPTURE_DATA_CLI(&pstOut->astCaptureInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_CAPTURE_NUM; i++)
	{
		if(-1 == poNetData->DelWord(pstOut->awUnlockGridLevel[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byUnreadPlunderBattleLogNum))
		return -1;

	if(-1 == DecodeDT_PLUNDER_BATTLELOG_DATA_CLI(&pstOut->stLastBattleLog, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBleedPerGoldClrMin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDriveAwayGold))
		return -1;

		for(i = 0; i < MAX_CAPTURE_NUM; i++)
		{
			if(-1 == DecodeDT_PLUNDER_GRID_DATA(&pstOut->astCaptureGridInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelDword(pstOut->dwPlunderGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ENEMY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_DATA_CLI *pstIn = (DT_ENEMY_DATA_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwEnemyPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEnemyDispName, sizeof(pstIn->aszEnemyDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCareerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEnemyLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBattleNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveOwnerFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveOwnerFlag)
			break;
		if(-1 == EncodeDT_BECAPTURE_DATA(&pstIn->astOwnerInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ENEMY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_DATA_CLI *pstOut = (DT_ENEMY_DATA_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwEnemyPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEnemyDispName, sizeof(pstOut->aszEnemyDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCareerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEnemyLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBattleNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveOwnerFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveOwnerFlag)
			break;
		if(-1 == DecodeDT_BECAPTURE_DATA(&pstOut->astOwnerInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_ENEMY_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ENEMY_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_ENEMY_TAB_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wStartIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_ENEMY_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ENEMY_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_ENEMY_TAB_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wStartIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_ENEMY_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ENEMY_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_ENEMY_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStartIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstIn->wCurNum)
			break;
		if(-1 == EncodeDT_ENEMY_DATA_CLI(&pstIn->astEnemyInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_ENEMY_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ENEMY_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_ENEMY_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStartIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstOut->wCurNum)
			break;
		if(-1 == DecodeDT_ENEMY_DATA_CLI(&pstOut->astEnemyInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DEL_ENEMY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_ENEMY_REQ *pstIn = (PKT_CLIGS_DEL_ENEMY_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwEnemyID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStartIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DEL_ENEMY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_ENEMY_REQ *pstOut = (PKT_CLIGS_DEL_ENEMY_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwEnemyID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStartIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DEL_ENEMY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_ENEMY_ACK *pstIn = (PKT_CLIGS_DEL_ENEMY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEnemyID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStartIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstIn->wCurNum)
			break;
		if(-1 == EncodeDT_ENEMY_DATA_CLI(&pstIn->astEnemyInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DEL_ENEMY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_ENEMY_ACK *pstOut = (PKT_CLIGS_DEL_ENEMY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEnemyID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStartIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstOut->wCurNum)
			break;
		if(-1 == DecodeDT_ENEMY_DATA_CLI(&pstOut->astEnemyInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLUNDER_BATTLELOG_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_BATTLELOG_NTF *pstIn = (PKT_CLIGS_PLUNDER_BATTLELOG_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byUnreadNum))
		return -1;

	if(-1 == EncodeDT_PLUNDER_BATTLELOG_DATA_CLI(&pstIn->stBattleLog, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerScience))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLUNDER_BATTLELOG_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_BATTLELOG_NTF *pstOut = (PKT_CLIGS_PLUNDER_BATTLELOG_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byUnreadNum))
		return -1;

	if(-1 == DecodeDT_PLUNDER_BATTLELOG_DATA_CLI(&pstOut->stBattleLog, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerScience))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ *pstIn = (PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ *pstOut = (PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLUNDER_PLAYER_DATA(void *pHost, CNetData* poNetData)
{
	DT_PLUNDER_PLAYER_DATA *pstIn = (DT_PLUNDER_PLAYER_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMainHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRobotFunc))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveOwnerFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveOwnerFlag)
			break;
		if(-1 == EncodeDT_BECAPTURE_DATA(&pstIn->astOwnerInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLUNDER_PLAYER_DATA(void *pHost, CNetData* poNetData)
{
	DT_PLUNDER_PLAYER_DATA *pstOut = (DT_PLUNDER_PLAYER_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMainHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRobotFunc))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveOwnerFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveOwnerFlag)
			break;
		if(-1 == DecodeDT_BECAPTURE_DATA(&pstOut->astOwnerInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK *pstIn = (PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreePlunderNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlunderGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUseItemGapLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlunderItemNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlunderItemID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlunderItemPrice))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClrCDGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPlunderPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_PLUNDER_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byPlunderPlayerNum)
			break;
		if(-1 == EncodeDT_PLUNDER_PLAYER_DATA(&pstIn->astPlunderPlayerInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK *pstOut = (PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreePlunderNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlunderGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUseItemGapLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlunderItemNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlunderItemID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlunderItemPrice))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClrCDGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPlunderPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_PLUNDER_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byPlunderPlayerNum)
			break;
		if(-1 == DecodeDT_PLUNDER_PLAYER_DATA(&pstOut->astPlunderPlayerInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ *pstIn = (PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ *pstOut = (PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK *pstIn = (PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPlunderPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_PLUNDER_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byPlunderPlayerNum)
			break;
		if(-1 == EncodeDT_PLUNDER_PLAYER_DATA(&pstIn->astPlunderPlayerInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK *pstOut = (PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPlunderPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_PLUNDER_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byPlunderPlayerNum)
			break;
		if(-1 == DecodeDT_PLUNDER_PLAYER_DATA(&pstOut->astPlunderPlayerInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FREE_CAPTURE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_CAPTURE_REQ *pstIn = (PKT_CLIGS_FREE_CAPTURE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FREE_CAPTURE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_CAPTURE_REQ *pstOut = (PKT_CLIGS_FREE_CAPTURE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FREE_CAPTURE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_CAPTURE_ACK *pstIn = (PKT_CLIGS_FREE_CAPTURE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoinIncome))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScienceIncome))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FREE_CAPTURE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_CAPTURE_ACK *pstOut = (PKT_CLIGS_FREE_CAPTURE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoinIncome))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScienceIncome))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COLLECT_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_INCOME_REQ *pstIn = (PKT_CLIGS_COLLECT_INCOME_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwIncomeValue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COLLECT_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_INCOME_REQ *pstOut = (PKT_CLIGS_COLLECT_INCOME_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwIncomeValue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COLLECT_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_INCOME_ACK *pstIn = (PKT_CLIGS_COLLECT_INCOME_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwIncomeValue))
		return -1;

	if(-1 == EncodeDT_CAPTURE_WORK_DATA_CLI(&pstIn->stWorkInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHalved))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureReleaseFlag))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COLLECT_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_INCOME_ACK *pstOut = (PKT_CLIGS_COLLECT_INCOME_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwIncomeValue))
		return -1;

	if(-1 == DecodeDT_CAPTURE_WORK_DATA_CLI(&pstOut->stWorkInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHalved))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureReleaseFlag))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BLEED_CAPTURE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLEED_CAPTURE_REQ *pstIn = (PKT_CLIGS_BLEED_CAPTURE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BLEED_CAPTURE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLEED_CAPTURE_REQ *pstOut = (PKT_CLIGS_BLEED_CAPTURE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BLEED_CAPTURE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLEED_CAPTURE_ACK *pstIn = (PKT_CLIGS_BLEED_CAPTURE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIncomeType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwIncomeValue))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BLEED_CAPTURE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLEED_CAPTURE_ACK *pstOut = (PKT_CLIGS_BLEED_CAPTURE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIncomeType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwIncomeValue))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SET_WORK_TYPE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_WORK_TYPE_REQ *pstIn = (PKT_CLIGS_SET_WORK_TYPE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIncomeType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SET_WORK_TYPE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_WORK_TYPE_REQ *pstOut = (PKT_CLIGS_SET_WORK_TYPE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIncomeType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SET_WORK_TYPE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_WORK_TYPE_ACK *pstIn = (PKT_CLIGS_SET_WORK_TYPE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIncomeType))
		return -1;

	if(-1 == EncodeDT_CAPTURE_WORK_DATA_CLI(&pstIn->stWorkInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SET_WORK_TYPE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_WORK_TYPE_ACK *pstOut = (PKT_CLIGS_SET_WORK_TYPE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIncomeType))
		return -1;

	if(-1 == DecodeDT_CAPTURE_WORK_DATA_CLI(&pstOut->stWorkInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MONEY_TREE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_MONEY_TREE_DATA_CLI *pstIn = (DT_MONEY_TREE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCanRockNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipExtNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalCanRockNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRockNeedGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMoodValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRockBaseCoin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGetCoinRate))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMoodKeepTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMoodOverCountDown))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MONEY_TREE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_MONEY_TREE_DATA_CLI *pstOut = (DT_MONEY_TREE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCanRockNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipExtNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalCanRockNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRockNeedGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMoodValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRockBaseCoin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGetCoinRate))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMoodKeepTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMoodOverCountDown))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_MONEY_TREE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MONEY_TREE_REQ *pstIn = (PKT_CLIGS_OPEN_MONEY_TREE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_MONEY_TREE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MONEY_TREE_REQ *pstOut = (PKT_CLIGS_OPEN_MONEY_TREE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_MONEY_TREE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MONEY_TREE_ACK *pstIn = (PKT_CLIGS_OPEN_MONEY_TREE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_MONEY_TREE_DATA_CLI(&pstIn->stMoneyTreeInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGetCoinRate2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_MONEY_TREE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MONEY_TREE_ACK *pstOut = (PKT_CLIGS_OPEN_MONEY_TREE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_MONEY_TREE_DATA_CLI(&pstOut->stMoneyTreeInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGetCoinRate2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ROCK_MONEY_TREE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ROCK_MONEY_TREE_REQ *pstIn = (PKT_CLIGS_ROCK_MONEY_TREE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGuideFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ROCK_MONEY_TREE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ROCK_MONEY_TREE_REQ *pstOut = (PKT_CLIGS_ROCK_MONEY_TREE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGuideFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ROCK_MONEY_TREE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ROCK_MONEY_TREE_ACK *pstIn = (PKT_CLIGS_ROCK_MONEY_TREE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGuideFlag))
		return -1;

	if(-1 == EncodeDT_MONEY_TREE_DATA_CLI(&pstIn->stMoneyTreeInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGetCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerGold))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGetCoinRate2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ROCK_MONEY_TREE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ROCK_MONEY_TREE_ACK *pstOut = (PKT_CLIGS_ROCK_MONEY_TREE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGuideFlag))
		return -1;

	if(-1 == DecodeDT_MONEY_TREE_DATA_CLI(&pstOut->stMoneyTreeInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGetCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerGold))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGetCoinRate2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ *pstIn = (PKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ *pstOut = (PKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK *pstIn = (PKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCaptureOwnerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byShowNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PLUNDER_BATTLELOG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byShowNum)
			break;
		if(-1 == EncodeDT_PLUNDER_BATTLELOG_DATA_CLI(&pstIn->astBattleLogInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK *pstOut = (PKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCaptureOwnerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byShowNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PLUNDER_BATTLELOG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byShowNum)
			break;
		if(-1 == DecodeDT_PLUNDER_BATTLELOG_DATA_CLI(&pstOut->astBattleLogInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ATTR_INC_DATA(void *pHost, CNetData* poNetData)
{
	DT_ATTR_INC_DATA *pstIn = (DT_ATTR_INC_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byAttrKind))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAttrValue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ATTR_INC_DATA(void *pHost, CNetData* poNetData)
{
	DT_ATTR_INC_DATA *pstOut = (DT_ATTR_INC_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byAttrKind))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAttrValue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GODWEAPON_ATTR_DATA(void *pHost, CNetData* poNetData)
{
	DT_GODWEAPON_ATTR_DATA *pstIn = (DT_GODWEAPON_ATTR_DATA*)pHost;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttr, poNetData))
		return -1;

	if(-1 == EncodeDT_HIDE_BATTLE_ATTRIBUTE(&pstIn->stHideBattleAttr, poNetData))
		return -1;

	if(-1 == EncodeDT_EXT_BATTLE_ATTRIBUTE(&pstIn->stExtBattleAttr, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GODWEAPON_ATTR_DATA(void *pHost, CNetData* poNetData)
{
	DT_GODWEAPON_ATTR_DATA *pstOut = (DT_GODWEAPON_ATTR_DATA*)pHost;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttr, poNetData))
		return -1;

	if(-1 == DecodeDT_HIDE_BATTLE_ATTRIBUTE(&pstOut->stHideBattleAttr, poNetData))
		return -1;

	if(-1 == DecodeDT_EXT_BATTLE_ATTRIBUTE(&pstOut->stExtBattleAttr, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GODWEAPON_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GODWEAPON_DATA_CLI *pstIn = (DT_GODWEAPON_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxQuality))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wQuality))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == EncodeDT_GODWEAPON_ATTR_DATA(&pstIn->stIncAttr, poNetData))
		return -1;

	if(-1 == EncodeDT_ATTR_INC_DATA(&pstIn->stNextLevelIncAttr, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wQualityRequireLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgrageScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwRecoverScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPerfectRecoverScience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUpgradeQualityNeedItemNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxLevelFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEncAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GODWEAPON_QUALITY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEncAttrNum)
			break;
		if(-1 == EncodeDT_ATTR_INC_DATA(&pstIn->astQualityUpgradeEncAttr[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GODWEAPON_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GODWEAPON_DATA_CLI *pstOut = (DT_GODWEAPON_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxQuality))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wQuality))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == DecodeDT_GODWEAPON_ATTR_DATA(&pstOut->stIncAttr, poNetData))
		return -1;

	if(-1 == DecodeDT_ATTR_INC_DATA(&pstOut->stNextLevelIncAttr, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wQualityRequireLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgrageScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwRecoverScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPerfectRecoverScience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUpgradeQualityNeedItemNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxLevelFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEncAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GODWEAPON_QUALITY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEncAttrNum)
			break;
		if(-1 == DecodeDT_ATTR_INC_DATA(&pstOut->astQualityUpgradeEncAttr[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GODWEAPON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GODWEAPON_REQ *pstIn = (PKT_CLIGS_OPEN_GODWEAPON_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GODWEAPON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GODWEAPON_REQ *pstOut = (PKT_CLIGS_OPEN_GODWEAPON_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GODWEAPON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GODWEAPON_ACK *pstIn = (PKT_CLIGS_OPEN_GODWEAPON_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUpgradeQualityItemNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeQualityItemPrice))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUpgradeQualityItemID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwActiveCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerScience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGodweaponNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wGodweaponNum)
			break;
		if(-1 == EncodeDT_GODWEAPON_DATA_CLI(&pstIn->astGodweaponLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byOpenNeedVipLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPerfectFreeGodweapon))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPerfectFreeGodweaponCost))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GODWEAPON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GODWEAPON_ACK *pstOut = (PKT_CLIGS_OPEN_GODWEAPON_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUpgradeQualityItemNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeQualityItemPrice))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUpgradeQualityItemID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwActiveCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerScience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGodweaponNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wGodweaponNum)
			break;
		if(-1 == DecodeDT_GODWEAPON_DATA_CLI(&pstOut->astGodweaponLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byOpenNeedVipLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPerfectFreeGodweapon))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPerfectFreeGodweaponCost))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_GODWEAPON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_GODWEAPON_REQ *pstIn = (PKT_CLIGS_UPGRADE_GODWEAPON_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wQuality))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_GODWEAPON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_GODWEAPON_REQ *pstOut = (PKT_CLIGS_UPGRADE_GODWEAPON_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wQuality))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_GODWEAPON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_GODWEAPON_ACK *pstIn = (PKT_CLIGS_UPGRADE_GODWEAPON_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerScience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUpgradeQualityItemNum))
		return -1;

	if(-1 == EncodeDT_GODWEAPON_DATA_CLI(&pstIn->stGodweaponInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_GODWEAPON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_GODWEAPON_ACK *pstOut = (PKT_CLIGS_UPGRADE_GODWEAPON_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerScience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUpgradeQualityItemNum))
		return -1;

	if(-1 == DecodeDT_GODWEAPON_DATA_CLI(&pstOut->stGodweaponInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FREE_GODWEAPON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_GODWEAPON_REQ *pstIn = (PKT_CLIGS_FREE_GODWEAPON_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUseGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FREE_GODWEAPON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_GODWEAPON_REQ *pstOut = (PKT_CLIGS_FREE_GODWEAPON_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUseGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FREE_GODWEAPON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_GODWEAPON_ACK *pstIn = (PKT_CLIGS_FREE_GODWEAPON_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerScience))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_GODWEAPON_DATA_CLI(&pstIn->stGodweaponInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FREE_GODWEAPON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_GODWEAPON_ACK *pstOut = (PKT_CLIGS_FREE_GODWEAPON_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerScience))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_GODWEAPON_DATA_CLI(&pstOut->stGodweaponInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_AWAKEN_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_AWAKEN_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_STUDY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_STUDY_DATA_CLI *pstIn = (DT_STUDY_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byStudyColorKind))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyAttrKind))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStudyAttrValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStudyExp))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextLevelAttrValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeNeedExp))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_STUDY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_STUDY_DATA_CLI *pstOut = (DT_STUDY_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byStudyColorKind))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyAttrKind))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStudyAttrValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStudyExp))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextLevelAttrValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeNeedExp))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_AWAKEN_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_TAB_DATA *pstIn = (DT_AWAKEN_TAB_DATA*)pHost;

	if(-1 == EncodeDT_AWAKEN_BASE_DATA1(&pstIn->stBaseInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wMaxStudyLevel))
		return -1;

	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(-1 == poNetData->AddDword(pstIn->adwAwakenCoin[i]))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwAwakenGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTatalCallNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanCallNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_AWAKEN_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_TAB_DATA *pstOut = (DT_AWAKEN_TAB_DATA*)pHost;

	if(-1 == DecodeDT_AWAKEN_BASE_DATA1(&pstOut->stBaseInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelWord(pstOut->wMaxStudyLevel))
		return -1;

	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(-1 == poNetData->DelDword(pstOut->adwAwakenCoin[i]))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwAwakenGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTatalCallNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanCallNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_AWAKEN_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_AWAKEN_TAB_DATA(&pstIn->stAwakenInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_AWAKEN_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_AWAKEN_TAB_DATA(&pstOut->stAwakenInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AWAKEN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_REQ *pstIn = (PKT_CLIGS_AWAKEN_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byQuickFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AWAKEN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_REQ *pstOut = (PKT_CLIGS_AWAKEN_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byQuickFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_AWAKEN_GET_DATA(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_GET_DATA *pstIn = (DT_AWAKEN_GET_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwGetCoin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyBagIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAwakenLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_AWAKEN_GET_DATA(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_GET_DATA *pstOut = (DT_AWAKEN_GET_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwGetCoin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyBagIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAwakenLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AWAKEN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_ACK *pstIn = (PKT_CLIGS_AWAKEN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byQuickFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAwakenNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byAwakenNum)
			break;
		if(-1 == EncodeDT_AWAKEN_GET_DATA(&pstIn->astAwakenGetInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_AWAKEN_TAB_DATA(&pstIn->stAwakenTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AWAKEN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_ACK *pstOut = (PKT_CLIGS_AWAKEN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byQuickFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAwakenNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byAwakenNum)
			break;
		if(-1 == DecodeDT_AWAKEN_GET_DATA(&pstOut->astAwakenGetInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_AWAKEN_TAB_DATA(&pstOut->stAwakenTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_STUDY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_STUDY_DATA_CLI *pstIn = (DT_HERO_STUDY_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI(&pstIn->astStudyInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_STUDY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_STUDY_DATA_CLI *pstOut = (DT_HERO_STUDY_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI(&pstOut->astStudyInfo[i], poNetData))
				return -1;
		}

	return sizeof(*pstOut);
}

INT32 EncodeDT_DRESS_STUDY_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_DRESS_STUDY_TAB_DATA *pstIn = (DT_DRESS_STUDY_TAB_DATA*)pHost;

	INT32 i;
	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
	{
		if(-1 == poNetData->AddWord(pstIn->awStudyUnlockLevelInfo[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_STUDY_DATA_CLI(&pstIn->astHeroStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwStudyExp))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DRESS_STUDY_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_DRESS_STUDY_TAB_DATA *pstOut = (DT_DRESS_STUDY_TAB_DATA*)pHost;

	INT32 i;
		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
	{
		if(-1 == poNetData->DelWord(pstOut->awStudyUnlockLevelInfo[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_STUDY_DATA_CLI(&pstOut->astHeroStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelUint64(pstOut->qwStudyExp))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_DRESS_STUDY_TAB_DATA(&pstIn->stDressStudyTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_DRESS_STUDY_TAB_DATA(&pstOut->stDressStudyTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRESS_STUDY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_REQ *pstIn = (PKT_CLIGS_DRESS_STUDY_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroGridIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRESS_STUDY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_REQ *pstOut = (PKT_CLIGS_DRESS_STUDY_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroGridIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRESS_STUDY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_ACK *pstIn = (PKT_CLIGS_DRESS_STUDY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroGridIdx))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_HERO_STUDY_DATA_CLI(&pstIn->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRESS_STUDY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_ACK *pstOut = (PKT_CLIGS_DRESS_STUDY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroGridIdx))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_HERO_STUDY_DATA_CLI(&pstOut->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_TO_EXP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_REQ *pstIn = (PKT_CLIGS_STUDY_TO_EXP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAllFlag))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abySelectConvertColor[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_TO_EXP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_REQ *pstOut = (PKT_CLIGS_STUDY_TO_EXP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAllFlag))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abySelectConvertColor[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_TO_EXP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_ACK *pstIn = (PKT_CLIGS_STUDY_TO_EXP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abySelectConvertColor[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAllFlag))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGenStudyExp))
		return -1;

	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwCurStudyExp))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_TO_EXP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_ACK *pstOut = (PKT_CLIGS_STUDY_TO_EXP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abySelectConvertColor[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAllFlag))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGenStudyExp))
		return -1;

		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelUint64(pstOut->qwCurStudyExp))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_REQ *pstIn = (PKT_CLIGS_STUDY_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_REQ *pstOut = (PKT_CLIGS_STUDY_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_ACK *pstIn = (PKT_CLIGS_STUDY_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevel))
		return -1;

	if(-1 == EncodeDT_HERO_STUDY_DATA_CLI(&pstIn->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStudyExp))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_ACK *pstOut = (PKT_CLIGS_STUDY_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevel))
		return -1;

	if(-1 == DecodeDT_HERO_STUDY_DATA_CLI(&pstOut->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStudyExp))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RACE_BATTLELOG_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RACE_BATTLELOG_NTF *pstIn = (PKT_CLIGS_RACE_BATTLELOG_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byUnreadNum))
		return -1;

	if(-1 == EncodeDT_RACE_BATTLELOG_DATA_CLI(&pstIn->stBattleLog, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerScience))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RACE_BATTLELOG_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RACE_BATTLELOG_NTF *pstOut = (PKT_CLIGS_RACE_BATTLELOG_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byUnreadNum))
		return -1;

	if(-1 == DecodeDT_RACE_BATTLELOG_DATA_CLI(&pstOut->stBattleLog, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerScience))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_PHYSTRENGTH_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_PHYSTRENGTH_REQ *pstIn = (PKT_CLIGS_BUY_PHYSTRENGTH_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_PHYSTRENGTH_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_PHYSTRENGTH_REQ *pstOut = (PKT_CLIGS_BUY_PHYSTRENGTH_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_PHYSTRENGTH_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_PHYSTRENGTH_ACK *pstIn = (PKT_CLIGS_BUY_PHYSTRENGTH_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurPhyStrength))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanBuyNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipExtNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextBuyGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_PHYSTRENGTH_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_PHYSTRENGTH_ACK *pstOut = (PKT_CLIGS_BUY_PHYSTRENGTH_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurPhyStrength))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanBuyNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipExtNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextBuyGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_PLUNDER_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_PLUNDER_CD_REQ *pstIn = (PKT_CLIGS_CLR_PLUNDER_CD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_PLUNDER_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_PLUNDER_CD_REQ *pstOut = (PKT_CLIGS_CLR_PLUNDER_CD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_PLUNDER_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_PLUNDER_CD_ACK *pstIn = (PKT_CLIGS_CLR_PLUNDER_CD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_PLUNDER_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_PLUNDER_CD_ACK *pstOut = (PKT_CLIGS_CLR_PLUNDER_CD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_MAINTOWN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MAINTOWN_REQ *pstIn = (PKT_CLIGS_OPEN_MAINTOWN_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_MAINTOWN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MAINTOWN_REQ *pstOut = (PKT_CLIGS_OPEN_MAINTOWN_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_MAINTOWN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MAINTOWN_ACK *pstIn = (PKT_CLIGS_OPEN_MAINTOWN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanCrowFlag))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCrownCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCrownGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCrownJingJie))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLevyCountDown))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLevyCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLevyJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevyNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTotalLevyNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_MAINTOWN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MAINTOWN_ACK *pstOut = (PKT_CLIGS_OPEN_MAINTOWN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanCrowFlag))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCrownCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCrownGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCrownJingJie))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLevyCountDown))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLevyCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLevyJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevyNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTotalLevyNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_MAINTOWN_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_MAINTOWN_INCOME_REQ *pstIn = (PKT_CLIGS_RECV_MAINTOWN_INCOME_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_MAINTOWN_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_MAINTOWN_INCOME_REQ *pstOut = (PKT_CLIGS_RECV_MAINTOWN_INCOME_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_MAINTOWN_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_MAINTOWN_INCOME_ACK *pstIn = (PKT_CLIGS_RECV_MAINTOWN_INCOME_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanCrowFlag))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_MAINTOWN_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_MAINTOWN_INCOME_ACK *pstOut = (PKT_CLIGS_RECV_MAINTOWN_INCOME_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanCrowFlag))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ *pstIn = (PKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ *pstOut = (PKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK *pstIn = (PKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLevyCountDown))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevyNum))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK *pstOut = (PKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLevyCountDown))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevyNum))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRIVE_AWAY_OWNER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRIVE_AWAY_OWNER_REQ *pstIn = (PKT_CLIGS_DRIVE_AWAY_OWNER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRIVE_AWAY_OWNER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRIVE_AWAY_OWNER_REQ *pstOut = (PKT_CLIGS_DRIVE_AWAY_OWNER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRIVE_AWAY_OWNER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRIVE_AWAY_OWNER_ACK *pstIn = (PKT_CLIGS_DRIVE_AWAY_OWNER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDriveAwayGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRIVE_AWAY_OWNER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRIVE_AWAY_OWNER_ACK *pstOut = (PKT_CLIGS_DRIVE_AWAY_OWNER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDriveAwayGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DRUG_USE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRUG_USE_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_DRUG_USE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DRUG_USE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRUG_USE_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_DRUG_USE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_TALENT_DATA(void *pHost, CNetData* poNetData)
{
	DT_TALENT_DATA *pstIn = (DT_TALENT_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTalent))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUseCountDown))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_TALENT_DATA(void *pHost, CNetData* poNetData)
{
	DT_TALENT_DATA *pstOut = (DT_TALENT_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTalent))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUseCountDown))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DRUG_USE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRUG_USE_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_DRUG_USE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_TALENT_DATA(&pstIn->astHeroInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_DRUG_LEVEL; i++)
	{
		if(-1 == poNetData->AddWord(pstIn->awDrugNum[i]))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wNoCDGoldPerMin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagFullFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DRUG_USE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRUG_USE_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_DRUG_USE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_TALENT_DATA(&pstOut->astHeroInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_DRUG_LEVEL; i++)
	{
		if(-1 == poNetData->DelWord(pstOut->awDrugNum[i]))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wNoCDGoldPerMin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagFullFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_DRUG_LEVEL; i++)
	{
		if(-1 == EncodeDT_DRUG_DATA_CLI(&pstIn->astDrugInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byBagFullFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_HERO_DRUG_USE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_DRUG_LEVEL; i++)
		{
			if(-1 == DecodeDT_DRUG_DATA_CLI(&pstOut->astDrugInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelByte(pstOut->byBagFullFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_USE_DRUG_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_USE_DRUG_CD_REQ *pstIn = (PKT_CLIGS_CLR_USE_DRUG_CD_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_USE_DRUG_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_USE_DRUG_CD_REQ *pstOut = (PKT_CLIGS_CLR_USE_DRUG_CD_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_USE_DRUG_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_USE_DRUG_CD_ACK *pstIn = (PKT_CLIGS_CLR_USE_DRUG_CD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_TALENT_DATA(&pstIn->stHeroTalentInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_USE_DRUG_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_USE_DRUG_CD_ACK *pstOut = (PKT_CLIGS_CLR_USE_DRUG_CD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_TALENT_DATA(&pstOut->stHeroTalentInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_USE_DRUG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_USE_DRUG_REQ *pstIn = (PKT_CLIGS_USE_DRUG_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUseLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_USE_DRUG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_USE_DRUG_REQ *pstOut = (PKT_CLIGS_USE_DRUG_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUseLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_USE_DRUG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_USE_DRUG_ACK *pstIn = (PKT_CLIGS_USE_DRUG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUseLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurDrugNum))
		return -1;

	if(-1 == EncodeDT_TALENT_DATA(&pstIn->stHeroTalentInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagFullFlag))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_USE_DRUG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_USE_DRUG_ACK *pstOut = (PKT_CLIGS_USE_DRUG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUseLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurDrugNum))
		return -1;

	if(-1 == DecodeDT_TALENT_DATA(&pstOut->stHeroTalentInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagFullFlag))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_DRUG_LEVEL; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyDrugNum[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_UPGRADE_DRUG_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_DRUG_LEVEL; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyDrugNum[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_DRUG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_DRUG_REQ *pstIn = (PKT_CLIGS_UPGRADE_DRUG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byUseDrugLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_DRUG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_DRUG_REQ *pstOut = (PKT_CLIGS_UPGRADE_DRUG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byUseDrugLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_DRUG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_DRUG_ACK *pstIn = (PKT_CLIGS_UPGRADE_DRUG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUseDrugLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUseDrugNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byProduceDrugLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wProduceDrugNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagFullFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_DRUG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_DRUG_ACK *pstOut = (PKT_CLIGS_UPGRADE_DRUG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUseDrugLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUseDrugNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byProduceDrugLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wProduceDrugNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagFullFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COMPOSE_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_EQUIP_REQ *pstIn = (PKT_CLIGS_COMPOSE_EQUIP_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipItemID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldComposeFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COMPOSE_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_EQUIP_REQ *pstOut = (PKT_CLIGS_COMPOSE_EQUIP_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipItemID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldComposeFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COMPOSE_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_EQUIP_ACK *pstIn = (PKT_CLIGS_COMPOSE_EQUIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSrcEquipItemID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSrcEquipIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySrcItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ITEM_MAKER_NEED_NUM; i++)
	{
		if(i >= (INT32)pstIn->bySrcItemNum)
			break;
		if(-1 == EncodeDT_NEED_ITEM_DATA(&pstIn->astStrItemInfoList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->stEquipInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstIn->stEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COMPOSE_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_EQUIP_ACK *pstOut = (PKT_CLIGS_COMPOSE_EQUIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSrcEquipItemID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSrcEquipIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySrcItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ITEM_MAKER_NEED_NUM; i++)
	{
		if(i >= (INT32)pstOut->bySrcItemNum)
			break;
		if(-1 == DecodeDT_NEED_ITEM_DATA(&pstOut->astStrItemInfoList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->stEquipInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstOut->stEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACTIVITY_TIME_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACTIVITY_TIME_DATA *pstIn = (DT_ACTIVITY_TIME_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byStartHour))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStartMin))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKeepTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEndCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAheadTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveFinishFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACTIVITY_TIME_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACTIVITY_TIME_DATA *pstOut = (DT_ACTIVITY_TIME_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byStartHour))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStartMin))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKeepTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEndCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAheadTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveFinishFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACTIVITY_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACTIVITY_BASE_DATA *pstIn = (DT_ACTIVITY_BASE_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byActivityTimeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_TIME_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityTimeNum)
			break;
		if(-1 == EncodeDT_ACTIVITY_TIME_DATA(&pstIn->astActivityTimeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byNotity))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACTIVITY_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACTIVITY_BASE_DATA *pstOut = (DT_ACTIVITY_BASE_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byActivityTimeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_TIME_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityTimeNum)
			break;
		if(-1 == DecodeDT_ACTIVITY_TIME_DATA(&pstOut->astActivityTimeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byNotity))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PHYSTRENGTH_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PHYSTRENGTH_REQ *pstIn = (PKT_CLIGS_OPEN_PHYSTRENGTH_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PHYSTRENGTH_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PHYSTRENGTH_REQ *pstOut = (PKT_CLIGS_OPEN_PHYSTRENGTH_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PHYSTRENGTH_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PHYSTRENGTH_ACK *pstIn = (PKT_CLIGS_OPEN_PHYSTRENGTH_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStrength))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTotalBuyTimes))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBuyTimes))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipExtNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byActivityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityNum)
			break;
		if(-1 == EncodeDT_ACTIVITY_BASE_DATA(&pstIn->astActivityInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PHYSTRENGTH_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PHYSTRENGTH_ACK *pstOut = (PKT_CLIGS_OPEN_PHYSTRENGTH_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStrength))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTotalBuyTimes))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBuyTimes))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipExtNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byActivityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityNum)
			break;
		if(-1 == DecodeDT_ACTIVITY_BASE_DATA(&pstOut->astActivityInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_LEFT_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_LEFT_INCOME_REQ *pstIn = (PKT_CLIGS_RECV_LEFT_INCOME_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGridIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_LEFT_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_LEFT_INCOME_REQ *pstOut = (PKT_CLIGS_RECV_LEFT_INCOME_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGridIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_LEFT_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_LEFT_INCOME_ACK *pstIn = (PKT_CLIGS_RECV_LEFT_INCOME_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIncomeType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwIncomeValue))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_LEFT_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_LEFT_INCOME_ACK *pstOut = (PKT_CLIGS_RECV_LEFT_INCOME_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIncomeType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwIncomeValue))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SMITHY_BUY_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SMITHY_BUY_EQUIP_REQ *pstIn = (PKT_CLIGS_SMITHY_BUY_EQUIP_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipPos))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SMITHY_BUY_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SMITHY_BUY_EQUIP_REQ *pstOut = (PKT_CLIGS_SMITHY_BUY_EQUIP_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipPos))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SMITHY_BUY_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SMITHY_BUY_EQUIP_ACK *pstIn = (PKT_CLIGS_SMITHY_BUY_EQUIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->stEquipInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstIn->stEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SMITHY_BUY_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SMITHY_BUY_EQUIP_ACK *pstOut = (PKT_CLIGS_SMITHY_BUY_EQUIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->stEquipInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstOut->stEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_STRENGTHEN_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_STRENGTHEN_CD_REQ *pstIn = (PKT_CLIGS_CLR_STRENGTHEN_CD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_STRENGTHEN_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_STRENGTHEN_CD_REQ *pstOut = (PKT_CLIGS_CLR_STRENGTHEN_CD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_STRENGTHEN_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_STRENGTHEN_CD_ACK *pstIn = (PKT_CLIGS_CLR_STRENGTHEN_CD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_STRENGTHEN_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_STRENGTHEN_CD_ACK *pstOut = (PKT_CLIGS_CLR_STRENGTHEN_CD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CROP_SEED_INFO_DATA(void *pHost, CNetData* poNetData)
{
	DT_CROP_SEED_INFO_DATA *pstIn = (DT_CROP_SEED_INFO_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCropKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCropSeedNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCropType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCropTime))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCropValue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCropGainKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wComposeCount))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wComposeKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CROP_SEED_INFO_DATA(void *pHost, CNetData* poNetData)
{
	DT_CROP_SEED_INFO_DATA *pstOut = (DT_CROP_SEED_INFO_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCropKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCropSeedNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCropType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCropTime))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCropValue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCropGainKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wComposeCount))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wComposeKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CROP_FIELD_INFO_DATA(void *pHost, CNetData* poNetData)
{
	DT_CROP_FIELD_INFO_DATA *pstIn = (DT_CROP_FIELD_INFO_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byOpen))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CROP_FIELD_INFO_DATA(void *pHost, CNetData* poNetData)
{
	DT_CROP_FIELD_INFO_DATA *pstOut = (DT_CROP_FIELD_INFO_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byOpen))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CROP_MORE_INFO_DATA(void *pHost, CNetData* poNetData)
{
	DT_CROP_MORE_INFO_DATA *pstIn = (DT_CROP_MORE_INFO_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCropKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCropTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCropType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCropValue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCropGainKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CROP_MORE_INFO_DATA(void *pHost, CNetData* poNetData)
{
	DT_CROP_MORE_INFO_DATA *pstOut = (DT_CROP_MORE_INFO_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCropKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCropTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCropType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCropValue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCropGainKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_REQ *pstIn = (PKT_CLIGS_OPEN_CROP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_REQ *pstOut = (PKT_CLIGS_OPEN_CROP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_ACK *pstIn = (PKT_CLIGS_OPEN_CROP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCropSeedNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CROP_SEED_NUM; i++)
	{
		if(i >= (INT32)pstIn->byCropSeedNum)
			break;
		if(-1 == EncodeDT_CROP_SEED_INFO_DATA(&pstIn->astCropSeedInfoList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_CROP_NUM; i++)
	{
		if(-1 == EncodeDT_CROP_FIELD_INFO_DATA(&pstIn->astCropFieldInfoList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_CROP_NUM; i++)
	{
		if(-1 == EncodeDT_CROP_MORE_INFO_DATA(&pstIn->astCropMoreInfoList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wNoCDGoldPerMin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagFullFlag))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingJie))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_ACK *pstOut = (PKT_CLIGS_OPEN_CROP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCropSeedNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CROP_SEED_NUM; i++)
	{
		if(i >= (INT32)pstOut->byCropSeedNum)
			break;
		if(-1 == DecodeDT_CROP_SEED_INFO_DATA(&pstOut->astCropSeedInfoList[i], poNetData))
			return -1;
	}

		for(i = 0; i < MAX_CROP_NUM; i++)
		{
			if(-1 == DecodeDT_CROP_FIELD_INFO_DATA(&pstOut->astCropFieldInfoList[i], poNetData))
				return -1;
		}

		for(i = 0; i < MAX_CROP_NUM; i++)
		{
			if(-1 == DecodeDT_CROP_MORE_INFO_DATA(&pstOut->astCropMoreInfoList[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelWord(pstOut->wNoCDGoldPerMin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagFullFlag))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingJie))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CROP_FIELD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_FIELD_REQ *pstIn = (PKT_CLIGS_OPEN_CROP_FIELD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CROP_FIELD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_FIELD_REQ *pstOut = (PKT_CLIGS_OPEN_CROP_FIELD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CROP_FIELD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_FIELD_ACK *pstIn = (PKT_CLIGS_OPEN_CROP_FIELD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == EncodeDT_CROP_FIELD_INFO_DATA(&pstIn->stCropFieldInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CROP_FIELD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_FIELD_ACK *pstOut = (PKT_CLIGS_OPEN_CROP_FIELD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == DecodeDT_CROP_FIELD_INFO_DATA(&pstOut->stCropFieldInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROP_REQ *pstIn = (PKT_CLIGS_CROP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCropKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROP_REQ *pstOut = (PKT_CLIGS_CROP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCropKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROP_ACK *pstIn = (PKT_CLIGS_CROP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	if(-1 == EncodeDT_CROP_MORE_INFO_DATA(&pstIn->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CROP_FIELD_INFO_DATA(&pstIn->stCropFieldInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROP_ACK *pstOut = (PKT_CLIGS_CROP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	if(-1 == DecodeDT_CROP_MORE_INFO_DATA(&pstOut->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CROP_FIELD_INFO_DATA(&pstOut->stCropFieldInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GAIN_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GAIN_CROP_REQ *pstIn = (PKT_CLIGS_GAIN_CROP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GAIN_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GAIN_CROP_REQ *pstOut = (PKT_CLIGS_GAIN_CROP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GAIN_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GAIN_CROP_ACK *pstIn = (PKT_CLIGS_GAIN_CROP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCropType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCropValue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCropKindID))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CROP_MORE_INFO_DATA(&pstIn->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CROP_FIELD_INFO_DATA(&pstIn->stCropFieldInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GAIN_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GAIN_CROP_ACK *pstOut = (PKT_CLIGS_GAIN_CROP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCropType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCropValue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCropKindID))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CROP_MORE_INFO_DATA(&pstOut->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CROP_FIELD_INFO_DATA(&pstOut->stCropFieldInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CROP_REQ *pstIn = (PKT_CLIGS_CLR_CROP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CROP_REQ *pstOut = (PKT_CLIGS_CLR_CROP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CROP_ACK *pstIn = (PKT_CLIGS_CLR_CROP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == EncodeDT_CROP_MORE_INFO_DATA(&pstIn->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CROP_ACK *pstOut = (PKT_CLIGS_CLR_CROP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == DecodeDT_CROP_MORE_INFO_DATA(&pstOut->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EXPERIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_REQ *pstIn = (PKT_CLIGS_OPEN_EXPERIENCE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EXPERIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_REQ *pstOut = (PKT_CLIGS_OPEN_EXPERIENCE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EXPERIENCE_DRUG_DATA(void *pHost, CNetData* poNetData)
{
	DT_EXPERIENCE_DRUG_DATA *pstIn = (DT_EXPERIENCE_DRUG_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wExperienceDrugID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBagNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EXPERIENCE_DRUG_DATA(void *pHost, CNetData* poNetData)
{
	DT_EXPERIENCE_DRUG_DATA *pstOut = (DT_EXPERIENCE_DRUG_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wExperienceDrugID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBagNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GOLD_EXPERIENCE_DRUG_DATA(void *pHost, CNetData* poNetData)
{
	DT_GOLD_EXPERIENCE_DRUG_DATA *pstIn = (DT_GOLD_EXPERIENCE_DRUG_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wExperienceDrugID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRemainNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOpenVipLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNextVipLevelMaxNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GOLD_EXPERIENCE_DRUG_DATA(void *pHost, CNetData* poNetData)
{
	DT_GOLD_EXPERIENCE_DRUG_DATA *pstOut = (DT_GOLD_EXPERIENCE_DRUG_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wExperienceDrugID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRemainNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOpenVipLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNextVipLevelMaxNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EXPERIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_ACK *pstIn = (PKT_CLIGS_OPEN_EXPERIENCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeExperience))
		return -1;

	INT32 i;
	for(i = 0; i < 3; i++)
	{
		if(-1 == EncodeDT_EXPERIENCE_DRUG_DATA(&pstIn->astExperienceDrugDataList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_GOLD_EXPERIENCE_DRUG_DATA(&pstIn->stGoldExperienceDrugData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EXPERIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_ACK *pstOut = (PKT_CLIGS_OPEN_EXPERIENCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeExperience))
		return -1;

	INT32 i;
		for(i = 0; i < 3; i++)
		{
			if(-1 == DecodeDT_EXPERIENCE_DRUG_DATA(&pstOut->astExperienceDrugDataList[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_GOLD_EXPERIENCE_DRUG_DATA(&pstOut->stGoldExperienceDrugData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_USER_EXPERIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_USER_EXPERIENCE_REQ *pstIn = (PKT_CLIGS_USER_EXPERIENCE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wExperienceDrugID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRemainGoldExperienceDrugCnt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_USER_EXPERIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_USER_EXPERIENCE_REQ *pstOut = (PKT_CLIGS_USER_EXPERIENCE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wExperienceDrugID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRemainGoldExperienceDrugCnt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_USER_EXPERIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_USER_EXPERIENCE_ACK *pstIn = (PKT_CLIGS_USER_EXPERIENCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_EXPERIENCE_DRUG_DATA(&pstIn->stExperienceDrugData, poNetData))
		return -1;

	if(-1 == EncodeDT_GOLD_EXPERIENCE_DRUG_DATA(&pstIn->stGoldExperienceDrugData, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerChangeData, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stHeroBaseDataCli, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_USER_EXPERIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_USER_EXPERIENCE_ACK *pstOut = (PKT_CLIGS_USER_EXPERIENCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_EXPERIENCE_DRUG_DATA(&pstOut->stExperienceDrugData, poNetData))
		return -1;

	if(-1 == DecodeDT_GOLD_EXPERIENCE_DRUG_DATA(&pstOut->stGoldExperienceDrugData, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerChangeData, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stHeroBaseDataCli, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SCIENCE_BUILD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SCIENCE_BUILD_REQ *pstIn = (PKT_CLIGS_OPEN_SCIENCE_BUILD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SCIENCE_BUILD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SCIENCE_BUILD_REQ *pstOut = (PKT_CLIGS_OPEN_SCIENCE_BUILD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SCIENCE_ALREADY_OPEN_DATA(void *pHost, CNetData* poNetData)
{
	DT_SCIENCE_ALREADY_OPEN_DATA *pstIn = (DT_SCIENCE_ALREADY_OPEN_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKind))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostStory))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNeedPlayerLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SCIENCE_ALREADY_OPEN_DATA(void *pHost, CNetData* poNetData)
{
	DT_SCIENCE_ALREADY_OPEN_DATA *pstOut = (DT_SCIENCE_ALREADY_OPEN_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKind))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostStory))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNeedPlayerLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SCIENCE_WILL_OPEN_DATA(void *pHost, CNetData* poNetData)
{
	DT_SCIENCE_WILL_OPEN_DATA *pstIn = (DT_SCIENCE_WILL_OPEN_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKind))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOpenLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLv1Value))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostStory))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SCIENCE_WILL_OPEN_DATA(void *pHost, CNetData* poNetData)
{
	DT_SCIENCE_WILL_OPEN_DATA *pstOut = (DT_SCIENCE_WILL_OPEN_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKind))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOpenLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLv1Value))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostStory))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SCIENCE_BUILD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SCIENCE_BUILD_ACK *pstIn = (PKT_CLIGS_OPEN_SCIENCE_BUILD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAlreadyOpenScienceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SCIENCE_KIND_NUM; i++)
	{
		if(i >= (INT32)pstIn->byAlreadyOpenScienceNum)
			break;
		if(-1 == EncodeDT_SCIENCE_ALREADY_OPEN_DATA(&pstIn->astAlreadyOpenScienceList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byWillOpenScienceNum))
		return -1;

	for(i = 0; i < MAX_SCIENCE_KIND_NUM; i++)
	{
		if(i >= (INT32)pstIn->byWillOpenScienceNum)
			break;
		if(-1 == EncodeDT_SCIENCE_WILL_OPEN_DATA(&pstIn->astWillOpenScienceList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SCIENCE_BUILD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SCIENCE_BUILD_ACK *pstOut = (PKT_CLIGS_OPEN_SCIENCE_BUILD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAlreadyOpenScienceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SCIENCE_KIND_NUM; i++)
	{
		if(i >= (INT32)pstOut->byAlreadyOpenScienceNum)
			break;
		if(-1 == DecodeDT_SCIENCE_ALREADY_OPEN_DATA(&pstOut->astAlreadyOpenScienceList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byWillOpenScienceNum))
		return -1;

	for(i = 0; i < MAX_SCIENCE_KIND_NUM; i++)
	{
		if(i >= (INT32)pstOut->byWillOpenScienceNum)
			break;
		if(-1 == DecodeDT_SCIENCE_WILL_OPEN_DATA(&pstOut->astWillOpenScienceList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPDATE_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_SCIENCE_REQ *pstIn = (PKT_CLIGS_UPDATE_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCurLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byKind))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPDATE_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_SCIENCE_REQ *pstOut = (PKT_CLIGS_UPDATE_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCurLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byKind))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPDATE_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_SCIENCE_ACK *pstIn = (PKT_CLIGS_UPDATE_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrorCode))
		return -1;

	if(-1 == EncodeDT_SCIENCE_ALREADY_OPEN_DATA(&pstIn->stUpdatedData, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPower, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPDATE_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_SCIENCE_ACK *pstOut = (PKT_CLIGS_UPDATE_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrorCode))
		return -1;

	if(-1 == DecodeDT_SCIENCE_ALREADY_OPEN_DATA(&pstOut->stUpdatedData, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPower, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_MELT_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MELT_EQUIP_REQ *pstIn = (PKT_CLIGS_OPEN_MELT_EQUIP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_MELT_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MELT_EQUIP_REQ *pstOut = (PKT_CLIGS_OPEN_MELT_EQUIP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_MELT_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MELT_EQUIP_ACK *pstIn = (PKT_CLIGS_OPEN_MELT_EQUIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrorCode))
		return -1;

	if(-1 == EncodeDT_EQUIP_MELT_DATA_LST_CLI(&pstIn->stEquipInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_GOOD_MELT_DATA_LST_CLI(&pstIn->stGoodInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_MELT_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MELT_EQUIP_ACK *pstOut = (PKT_CLIGS_OPEN_MELT_EQUIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrorCode))
		return -1;

	if(-1 == DecodeDT_EQUIP_MELT_DATA_LST_CLI(&pstOut->stEquipInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_GOOD_MELT_DATA_LST_CLI(&pstOut->stGoodInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MELT_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_MELT_EQUIP_DATA *pstIn = (DT_MELT_EQUIP_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MELT_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_MELT_EQUIP_DATA *pstOut = (DT_MELT_EQUIP_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MELT_GOOD_DATA(void *pHost, CNetData* poNetData)
{
	DT_MELT_GOOD_DATA *pstIn = (DT_MELT_GOOD_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MELT_GOOD_DATA(void *pHost, CNetData* poNetData)
{
	DT_MELT_GOOD_DATA *pstOut = (DT_MELT_GOOD_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MELT_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MELT_EQUIP_REQ *pstIn = (PKT_CLIGS_MELT_EQUIP_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_MELT_EQUIP_DATA(&pstIn->astMeltEquipDataList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MELT_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MELT_EQUIP_REQ *pstOut = (PKT_CLIGS_MELT_EQUIP_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_MELT_EQUIP_DATA(&pstOut->astMeltEquipDataList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MELT_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MELT_EQUIP_ACK *pstIn = (PKT_CLIGS_MELT_EQUIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrorCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == EncodeDT_EQUIP_MELT_DATA_LST_CLI(&pstIn->stEquipInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MELT_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MELT_EQUIP_ACK *pstOut = (PKT_CLIGS_MELT_EQUIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrorCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == DecodeDT_EQUIP_MELT_DATA_LST_CLI(&pstOut->stEquipInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MELT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MELT_REQ *pstIn = (PKT_CLIGS_MELT_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_MELT_EQUIP_DATA(&pstIn->astMeltEquipDataList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoodNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wGoodNum)
			break;
		if(-1 == EncodeDT_MELT_GOOD_DATA(&pstIn->astMeltGoodDataList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MELT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MELT_REQ *pstOut = (PKT_CLIGS_MELT_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_MELT_EQUIP_DATA(&pstOut->astMeltEquipDataList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoodNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wGoodNum)
			break;
		if(-1 == DecodeDT_MELT_GOOD_DATA(&pstOut->astMeltGoodDataList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MELT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MELT_ACK *pstIn = (PKT_CLIGS_MELT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrorCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == EncodeDT_EQUIP_MELT_DATA_LST_CLI(&pstIn->stEquipInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_GOOD_MELT_DATA_LST_CLI(&pstIn->stGoodInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MELT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MELT_ACK *pstOut = (PKT_CLIGS_MELT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrorCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == DecodeDT_EQUIP_MELT_DATA_LST_CLI(&pstOut->stEquipInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_GOOD_MELT_DATA_LST_CLI(&pstOut->stGoodInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ *pstIn = (PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAttrKind))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ *pstOut = (PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAttrKind))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_UPDATE_ATTR_DATA(void *pHost, CNetData* poNetData)
{
	DT_UPDATE_ATTR_DATA *pstIn = (DT_UPDATE_ATTR_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byAttrKind))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurCount))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalCount))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurLevelValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextLevelValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostItemNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoinNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwItemID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwItemNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_UPDATE_ATTR_DATA(void *pHost, CNetData* poNetData)
{
	DT_UPDATE_ATTR_DATA *pstOut = (DT_UPDATE_ATTR_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byAttrKind))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurCount))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalCount))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurLevelValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextLevelValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostItemNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoinNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwItemID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwItemNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK *pstIn = (PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrorCode))
		return -1;

	if(-1 == EncodeDT_UPDATE_ATTR_DATA(&pstIn->stUpdateAttr, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK *pstOut = (PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrorCode))
		return -1;

	if(-1 == DecodeDT_UPDATE_ATTR_DATA(&pstOut->stUpdateAttr, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPDATE_ATTR_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_ATTR_REQ *pstIn = (PKT_CLIGS_UPDATE_ATTR_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurCount))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAttrType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUpdateType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPDATE_ATTR_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_ATTR_REQ *pstOut = (PKT_CLIGS_UPDATE_ATTR_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurCount))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAttrType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUpdateType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_UPDATED_ATTR_BATTLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_UPDATED_ATTR_BATTLE_DATA *pstIn = (DT_UPDATED_ATTR_BATTLE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwOldTotalPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSelfOldPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSelfPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHPValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAttackValue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_UPDATED_ATTR_BATTLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_UPDATED_ATTR_BATTLE_DATA *pstOut = (DT_UPDATED_ATTR_BATTLE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwOldTotalPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSelfOldPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSelfPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHPValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAttackValue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPDATE_ATTR_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_ATTR_ACK *pstIn = (PKT_CLIGS_UPDATE_ATTR_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrorCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == EncodeDT_UPDATE_ATTR_DATA(&pstIn->stAttrRet, poNetData))
		return -1;

	if(-1 == EncodeDT_UPDATED_ATTR_BATTLE_DATA(&pstIn->stBattleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPDATE_ATTR_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_ATTR_ACK *pstOut = (PKT_CLIGS_UPDATE_ATTR_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrorCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == DecodeDT_UPDATE_ATTR_DATA(&pstOut->stAttrRet, poNetData))
		return -1;

	if(-1 == DecodeDT_UPDATED_ATTR_BATTLE_DATA(&pstOut->stBattleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COMPOSE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_REQ *pstIn = (PKT_CLIGS_COMPOSE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byComposeFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COMPOSE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_REQ *pstOut = (PKT_CLIGS_COMPOSE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byComposeFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COMPOSE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_ACK *pstIn = (PKT_CLIGS_COMPOSE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->stGoodsBagItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COMPOSE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_ACK *pstOut = (PKT_CLIGS_COMPOSE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->stGoodsBagItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REFRESH_ELITE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_ELITE_REQ *pstIn = (PKT_CLIGS_REFRESH_ELITE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REFRESH_ELITE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_ELITE_REQ *pstOut = (PKT_CLIGS_REFRESH_ELITE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REFRESH_ELITE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_ELITE_ACK *pstIn = (PKT_CLIGS_REFRESH_ELITE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REFRESH_ELITE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_ELITE_ACK *pstOut = (PKT_CLIGS_REFRESH_ELITE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ONHOOK_ELITE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_ELITE_REQ *pstIn = (PKT_CLIGS_ONHOOK_ELITE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ONHOOK_ELITE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_ELITE_REQ *pstOut = (PKT_CLIGS_ONHOOK_ELITE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ONHOOK_ELITE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_ELITE_ACK *pstIn = (PKT_CLIGS_ONHOOK_ELITE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ONHOOK_ELITE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_ELITE_ACK *pstOut = (PKT_CLIGS_ONHOOK_ELITE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ITEM_REQ *pstIn = (PKT_CLIGS_GET_ITEM_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ITEM_REQ *pstOut = (PKT_CLIGS_GET_ITEM_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ITEM_ACK *pstIn = (PKT_CLIGS_GET_ITEM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wItemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wItemNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byshop))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTab))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stBurstInstance, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ITEM_ACK *pstOut = (PKT_CLIGS_GET_ITEM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wItemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wItemNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byshop))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTab))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stBurstInstance, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ORDER_ID_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ORDER_ID_REQ *pstIn = (PKT_CLIGS_GET_ORDER_ID_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ORDER_ID_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ORDER_ID_REQ *pstOut = (PKT_CLIGS_GET_ORDER_ID_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ORDER_ID_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ORDER_ID_ACK *pstIn = (PKT_CLIGS_GET_ORDER_ID_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszOrderID, sizeof(pstIn->aszOrderID)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ORDER_ID_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ORDER_ID_ACK *pstOut = (PKT_CLIGS_GET_ORDER_ID_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszOrderID, sizeof(pstOut->aszOrderID)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXCHANGE_RESULT(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_RESULT *pstIn = (PKT_CLIGS_EXCHANGE_RESULT*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExchangeGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVipLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalExchangeGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXCHANGE_RESULT(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_RESULT *pstOut = (PKT_CLIGS_EXCHANGE_RESULT*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExchangeGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVipLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalExchangeGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ *pstIn = (PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ*)pHost;

	if(-1 == poNetData->AddString(pstIn->szTransactionID, sizeof(pstIn->szTransactionID)))
		return -1;

	if(-1 == poNetData->AddString(pstIn->szReceiptData, sizeof(pstIn->szReceiptData)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ *pstOut = (PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ*)pHost;

	if(-1 == poNetData->DelString(pstOut->szTransactionID, sizeof(pstOut->szTransactionID)))
		return -1;

	if(-1 == poNetData->DelString(pstOut->szReceiptData, sizeof(pstOut->szReceiptData)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK *pstIn = (PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExchangeGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVipLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalExchangeGold))
		return -1;

	if(-1 == poNetData->AddString(pstIn->szTransactionID, sizeof(pstIn->szTransactionID)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK *pstOut = (PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExchangeGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVipLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalExchangeGold))
		return -1;

	if(-1 == poNetData->DelString(pstOut->szTransactionID, sizeof(pstOut->szTransactionID)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEED_COMPOSE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEED_COMPOSE_REQ *pstIn = (PKT_CLIGS_SEED_COMPOSE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEED_COMPOSE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEED_COMPOSE_REQ *pstOut = (PKT_CLIGS_SEED_COMPOSE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEED_COMPOSE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEED_COMPOSE_ACK *pstIn = (PKT_CLIGS_SEED_COMPOSE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCropSeedNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CROP_SEED_NUM; i++)
	{
		if(i >= (INT32)pstIn->byCropSeedNum)
			break;
		if(-1 == EncodeDT_CROP_SEED_INFO_DATA(&pstIn->astCropSeedInfoList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEED_COMPOSE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEED_COMPOSE_ACK *pstOut = (PKT_CLIGS_SEED_COMPOSE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCropSeedNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CROP_SEED_NUM; i++)
	{
		if(i >= (INT32)pstOut->byCropSeedNum)
			break;
		if(-1 == DecodeDT_CROP_SEED_INFO_DATA(&pstOut->astCropSeedInfoList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeCHAT_DATA(void *pHost, CNetData* poNetData)
{
	CHAT_DATA *pstIn = (CHAT_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwSerialNumber))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszUserName, sizeof(pstIn->aszUserName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byChatType))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwChatTime))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwChatLen))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_CONTENT_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwChatLen)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyChatContent[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeCHAT_DATA(void *pHost, CNetData* poNetData)
{
	CHAT_DATA *pstOut = (CHAT_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwSerialNumber))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszUserName, sizeof(pstOut->aszUserName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byChatType))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwChatTime))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwChatLen))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_CONTENT_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwChatLen)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyChatContent[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CHAT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CHAT_REQ *pstIn = (PKT_CLIGS_OPEN_CHAT_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwSerialNumber))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CHAT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CHAT_REQ *pstOut = (PKT_CLIGS_OPEN_CHAT_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwSerialNumber))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CHAT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CHAT_ACK *pstIn = (PKT_CLIGS_OPEN_CHAT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byChatNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstIn->byChatNum)
			break;
		if(-1 == EncodeCHAT_DATA(&pstIn->astChatData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CHAT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CHAT_ACK *pstOut = (PKT_CLIGS_OPEN_CHAT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byChatNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstOut->byChatNum)
			break;
		if(-1 == DecodeCHAT_DATA(&pstOut->astChatData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHAT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHAT_REQ *pstIn = (PKT_CLIGS_CHAT_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byChatType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwChatLen))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_CONTENT_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwChatLen)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyChatContent[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHAT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHAT_REQ *pstOut = (PKT_CLIGS_CHAT_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byChatType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwChatLen))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_CONTENT_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwChatLen)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyChatContent[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHAT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHAT_ACK *pstIn = (PKT_CLIGS_CHAT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeCHAT_DATA(&pstIn->stChatData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHAT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHAT_ACK *pstOut = (PKT_CLIGS_CHAT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeCHAT_DATA(&pstOut->stChatData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHAT_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHAT_NTF *pstIn = (PKT_CLIGS_CHAT_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byChatNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstIn->byChatNum)
			break;
		if(-1 == EncodeCHAT_DATA(&pstIn->astChatData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHAT_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHAT_NTF *pstOut = (PKT_CLIGS_CHAT_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byChatNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstOut->byChatNum)
			break;
		if(-1 == DecodeCHAT_DATA(&pstOut->astChatData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CROSS_DAY_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROSS_DAY_NTF *pstIn = (PKT_CLIGS_CROSS_DAY_NTF*)pHost;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOnlineEncourageFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byOnlineEncourageFlag)
			break;
		if(-1 == EncodeDT_ONLINE_ENCOURAGE_DATA(&pstIn->astOnlineEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byOnlineEncourageFlag)
			break;
		if(-1 == poNetData->AddWord(pstIn->awRecvCountDown[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CROSS_DAY_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROSS_DAY_NTF *pstOut = (PKT_CLIGS_CROSS_DAY_NTF*)pHost;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOnlineEncourageFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byOnlineEncourageFlag)
			break;
		if(-1 == DecodeDT_ONLINE_ENCOURAGE_DATA(&pstOut->astOnlineEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byOnlineEncourageFlag)
			break;
		if(-1 == poNetData->DelWord(pstOut->awRecvCountDown[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ *pstIn = (PKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ *pstOut = (PKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK *pstIn = (PKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byActivityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityNum)
			break;
		if(-1 == EncodeDT_ACTIVITY_BASE_DATA(&pstIn->astActivityInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyActivityStartCountDown[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK *pstOut = (PKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byActivityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityNum)
			break;
		if(-1 == DecodeDT_ACTIVITY_BASE_DATA(&pstOut->astActivityInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyActivityStartCountDown[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ACTIVITY_PROMPT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_PROMPT_REQ *pstIn = (PKT_CLIGS_GET_ACTIVITY_PROMPT_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ACTIVITY_PROMPT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_PROMPT_REQ *pstOut = (PKT_CLIGS_GET_ACTIVITY_PROMPT_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ACTIVITY_PROMPT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_PROMPT_ACK *pstIn = (PKT_CLIGS_GET_ACTIVITY_PROMPT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FUNC_COMMON_PROMPT(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ACTIVITY_PROMPT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_PROMPT_ACK *pstOut = (PKT_CLIGS_GET_ACTIVITY_PROMPT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FUNC_COMMON_PROMPT(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPNE_EAT_BREAD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_EAT_BREAD_REQ *pstIn = (PKT_CLIGS_OPNE_EAT_BREAD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPNE_EAT_BREAD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_EAT_BREAD_REQ *pstOut = (PKT_CLIGS_OPNE_EAT_BREAD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPNE_EAT_BREAD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_EAT_BREAD_ACK *pstIn = (PKT_CLIGS_OPNE_EAT_BREAD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEndCountDown))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTimePerPhyStrengthen))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOarNumPerPhyStrengthen))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOnceSpeedCoin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHaveObtainCoin))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHaveUseTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurPhyStrength))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPNE_EAT_BREAD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_EAT_BREAD_ACK *pstOut = (PKT_CLIGS_OPNE_EAT_BREAD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEndCountDown))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTimePerPhyStrengthen))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOarNumPerPhyStrengthen))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOnceSpeedCoin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHaveObtainCoin))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHaveUseTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurPhyStrength))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ *pstIn = (PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byHaveObtainPhyStrengthenCli))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHaveObtainCoinCli))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ *pstOut = (PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byHaveObtainPhyStrengthenCli))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHaveObtainCoinCli))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK *pstIn = (PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveObtainPhyStrengthenCli))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHaveObtainCoinCli))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHaveObtainCoin))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHaveUseTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK *pstOut = (PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveObtainPhyStrengthenCli))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHaveObtainCoinCli))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHaveObtainCoin))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHaveUseTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEAVE_EAT_BREAD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_EAT_BREAD_REQ *pstIn = (PKT_CLIGS_LEAVE_EAT_BREAD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byHaveObtainPhyStrengthenCli))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHaveObtainCoinCli))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEAVE_EAT_BREAD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_EAT_BREAD_REQ *pstOut = (PKT_CLIGS_LEAVE_EAT_BREAD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byHaveObtainPhyStrengthenCli))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHaveObtainCoinCli))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEAVE_EAT_BREAD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_EAT_BREAD_ACK *pstIn = (PKT_CLIGS_LEAVE_EAT_BREAD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHaveObtainCoin))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurPhyStrength))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEAVE_EAT_BREAD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_EAT_BREAD_ACK *pstOut = (PKT_CLIGS_LEAVE_EAT_BREAD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHaveObtainCoin))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurPhyStrength))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ *pstIn = (PKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ *pstOut = (PKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BIAO_INFO(void *pHost, CNetData* poNetData)
{
	DT_BIAO_INFO *pstIn = (DT_BIAO_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byQualityLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJingjie))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCostTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BIAO_INFO(void *pHost, CNetData* poNetData)
{
	DT_BIAO_INFO *pstOut = (DT_BIAO_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byQualityLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJingjie))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCostTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeBIAO_OPERATE_INFO(void *pHost, CNetData* poNetData)
{
	BIAO_OPERATE_INFO *pstIn = (BIAO_OPERATE_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byRemianOperateCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTotalOperateCnt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeBIAO_OPERATE_INFO(void *pHost, CNetData* poNetData)
{
	BIAO_OPERATE_INFO *pstOut = (BIAO_OPERATE_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byRemianOperateCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTotalOperateCnt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK *pstIn = (PKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byYabiaoFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAlreadyYabiaoTime))
		return -1;

	if(-1 == EncodeDT_BIAO_INFO(&pstIn->stBiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRemainYabiaoCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRemainJiebiaoCnt))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAllPlayerYabiaoCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnemyYabiaoCnt))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJiebiaoCD))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wClearCDCostGoldPerMin))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK *pstOut = (PKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byYabiaoFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAlreadyYabiaoTime))
		return -1;

	if(-1 == DecodeDT_BIAO_INFO(&pstOut->stBiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRemainYabiaoCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRemainJiebiaoCnt))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAllPlayerYabiaoCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnemyYabiaoCnt))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJiebiaoCD))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wClearCDCostGoldPerMin))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_YABIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_YABIAO_REQ *pstIn = (PKT_CLIGS_OPEN_YABIAO_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_YABIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_YABIAO_REQ *pstOut = (PKT_CLIGS_OPEN_YABIAO_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_YABIAO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_YABIAO_ACK *pstIn = (PKT_CLIGS_OPEN_YABIAO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byYabiaoing))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurBiaoIndex))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFlushCount))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFlushCostGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDirectMaxLevelCostGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBiaoQualityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BIAO_QUALITY; i++)
	{
		if(i >= (INT32)pstIn->wBiaoQualityNum)
			break;
		if(-1 == EncodeDT_BIAO_INFO(&pstIn->astBiaoInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byFreeFlushCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFreeFlushRemainCnt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_YABIAO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_YABIAO_ACK *pstOut = (PKT_CLIGS_OPEN_YABIAO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byYabiaoing))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurBiaoIndex))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFlushCount))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFlushCostGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDirectMaxLevelCostGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBiaoQualityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BIAO_QUALITY; i++)
	{
		if(i >= (INT32)pstOut->wBiaoQualityNum)
			break;
		if(-1 == DecodeDT_BIAO_INFO(&pstOut->astBiaoInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byFreeFlushCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFreeFlushRemainCnt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FLUSH_BIAO_QUALITY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FLUSH_BIAO_QUALITY_REQ *pstIn = (PKT_CLIGS_FLUSH_BIAO_QUALITY_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wQuality))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDirectMaxLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FLUSH_BIAO_QUALITY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FLUSH_BIAO_QUALITY_REQ *pstOut = (PKT_CLIGS_FLUSH_BIAO_QUALITY_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wQuality))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDirectMaxLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FLUSH_BIAO_QUALITY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FLUSH_BIAO_QUALITY_ACK *pstIn = (PKT_CLIGS_FLUSH_BIAO_QUALITY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BIAO_INFO(&pstIn->stBiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFlushCount))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFlushCostGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDirectMaxLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFreeFlushCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFreeFlushRemainCnt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FLUSH_BIAO_QUALITY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FLUSH_BIAO_QUALITY_ACK *pstOut = (PKT_CLIGS_FLUSH_BIAO_QUALITY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BIAO_INFO(&pstOut->stBiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFlushCount))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFlushCostGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDirectMaxLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFreeFlushCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFreeFlushRemainCnt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BEGIN_YABIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_YABIAO_REQ *pstIn = (PKT_CLIGS_BEGIN_YABIAO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wQuality))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BEGIN_YABIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_YABIAO_REQ *pstOut = (PKT_CLIGS_BEGIN_YABIAO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wQuality))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BEGIN_YABIAO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_YABIAO_ACK *pstIn = (PKT_CLIGS_BEGIN_YABIAO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAlreadyYabiaoTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalYabiaoTime))
		return -1;

	if(-1 == EncodeBIAO_OPERATE_INFO(&pstIn->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwBeJiebiaoCoinEncourage))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBeJiebiaoScienceEncourage))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BEGIN_YABIAO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_YABIAO_ACK *pstOut = (PKT_CLIGS_BEGIN_YABIAO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAlreadyYabiaoTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalYabiaoTime))
		return -1;

	if(-1 == DecodeBIAO_OPERATE_INFO(&pstOut->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwBeJiebiaoCoinEncourage))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBeJiebiaoScienceEncourage))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_JIEBIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JIEBIAO_REQ *pstIn = (PKT_CLIGS_OPEN_JIEBIAO_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byViewYabiaoType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLongestYabiaoEndTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedPlayerNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_JIEBIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JIEBIAO_REQ *pstOut = (PKT_CLIGS_OPEN_JIEBIAO_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byViewYabiaoType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLongestYabiaoEndTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedPlayerNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_YABIAO_PLAYER_INFO(void *pHost, CNetData* poNetData)
{
	DT_YABIAO_PLAYER_INFO *pstIn = (DT_YABIAO_PLAYER_INFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byQuality))
		return -1;

	if(-1 == EncodeBIAO_OPERATE_INFO(&pstIn->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAlreadyYabiaoTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalYabiaoTime))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanJiebiao))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_YABIAO_PLAYER_INFO(void *pHost, CNetData* poNetData)
{
	DT_YABIAO_PLAYER_INFO *pstOut = (DT_YABIAO_PLAYER_INFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byQuality))
		return -1;

	if(-1 == DecodeBIAO_OPERATE_INFO(&pstOut->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAlreadyYabiaoTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalYabiaoTime))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanJiebiao))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_JIEBIAO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JIEBIAO_ACK *pstIn = (PKT_CLIGS_OPEN_JIEBIAO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byYabiaoPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_YABIAO_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byYabiaoPlayerNum)
			break;
		if(-1 == EncodeDT_YABIAO_PLAYER_INFO(&pstIn->astYabiaoPlayerInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wLongestYabiaoEndTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJiebiaoCD))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRemainJiebiaoCnt))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wClearCDCostGoldPerMin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byYabiaoFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAlreadyYabiaoTime))
		return -1;

	if(-1 == EncodeDT_BIAO_INFO(&pstIn->stBiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingjie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRemainYabiaoCnt))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScienceEncourage))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingjieEncourage))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJiebiaoReduceCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJiebiaoReduceScience))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_JIEBIAO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JIEBIAO_ACK *pstOut = (PKT_CLIGS_OPEN_JIEBIAO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byYabiaoPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_YABIAO_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byYabiaoPlayerNum)
			break;
		if(-1 == DecodeDT_YABIAO_PLAYER_INFO(&pstOut->astYabiaoPlayerInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wLongestYabiaoEndTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJiebiaoCD))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRemainJiebiaoCnt))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wClearCDCostGoldPerMin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byYabiaoFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAlreadyYabiaoTime))
		return -1;

	if(-1 == DecodeDT_BIAO_INFO(&pstOut->stBiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingjie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRemainYabiaoCnt))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScienceEncourage))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingjieEncourage))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJiebiaoReduceCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJiebiaoReduceScience))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BEGIN_JIEBIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_JIEBIAO_REQ *pstIn = (PKT_CLIGS_BEGIN_JIEBIAO_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurCount))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BEGIN_JIEBIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_JIEBIAO_REQ *pstOut = (PKT_CLIGS_BEGIN_JIEBIAO_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurCount))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BEGIN_JIEBIAO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_JIEBIAO_ACK *pstIn = (PKT_CLIGS_BEGIN_JIEBIAO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byYabiaoFlag))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA(&pstIn->stBattleData, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBeJiebiaoPlayerID))
		return -1;

	if(-1 == EncodeBIAO_OPERATE_INFO(&pstIn->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJiebiaoPlayerID))
		return -1;

	if(-1 == EncodeBIAO_OPERATE_INFO(&pstIn->stJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJiebiaoCD))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BEGIN_JIEBIAO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_JIEBIAO_ACK *pstOut = (PKT_CLIGS_BEGIN_JIEBIAO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byYabiaoFlag))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA(&pstOut->stBattleData, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBeJiebiaoPlayerID))
		return -1;

	if(-1 == DecodeBIAO_OPERATE_INFO(&pstOut->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJiebiaoPlayerID))
		return -1;

	if(-1 == DecodeBIAO_OPERATE_INFO(&pstOut->stJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJiebiaoCD))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLEAR_JIEBIAO_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLEAR_JIEBIAO_CD_REQ *pstIn = (PKT_CLIGS_CLEAR_JIEBIAO_CD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLEAR_JIEBIAO_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLEAR_JIEBIAO_CD_REQ *pstOut = (PKT_CLIGS_CLEAR_JIEBIAO_CD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLEAR_JIEBIAO_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLEAR_JIEBIAO_CD_ACK *pstIn = (PKT_CLIGS_CLEAR_JIEBIAO_CD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJiebiaoCD))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLEAR_JIEBIAO_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLEAR_JIEBIAO_CD_ACK *pstOut = (PKT_CLIGS_CLEAR_JIEBIAO_CD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJiebiaoCD))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BE_JIEBIAO_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BE_JIEBIAO_NTF *pstIn = (PKT_CLIGS_BE_JIEBIAO_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byResult))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwIndex))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinDec))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScienceDec))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEnemyDispName, sizeof(pstIn->aszEnemyDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEnemyLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEnemyPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnreadBattleLogNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BE_JIEBIAO_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BE_JIEBIAO_NTF *pstOut = (PKT_CLIGS_BE_JIEBIAO_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byResult))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwIndex))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinDec))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScienceDec))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEnemyDispName, sizeof(pstOut->aszEnemyDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEnemyLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEnemyPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnreadBattleLogNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ *pstIn = (PKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ *pstOut = (PKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_YABIAO_BATTLELOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_YABIAO_BATTLELOG_DATA_CLI *pstIn = (DT_YABIAO_BATTLELOG_DATA_CLI*)pHost;

	if(-1 == EncodeDT_YABIAO_BATTLELOG_DATA(&pstIn->stBattleLogData, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEnemyDispName, sizeof(pstIn->aszEnemyDispName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_YABIAO_BATTLELOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_YABIAO_BATTLELOG_DATA_CLI *pstOut = (DT_YABIAO_BATTLELOG_DATA_CLI*)pHost;

	if(-1 == DecodeDT_YABIAO_BATTLELOG_DATA(&pstOut->stBattleLogData, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEnemyDispName, sizeof(pstOut->aszEnemyDispName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK *pstIn = (PKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_YABIAO_BATTLELOG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byLogNum)
			break;
		if(-1 == EncodeDT_YABIAO_BATTLELOG_DATA_CLI(&pstIn->astYabiaoBattleLog[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK *pstOut = (PKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_YABIAO_BATTLELOG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byLogNum)
			break;
		if(-1 == DecodeDT_YABIAO_BATTLELOG_DATA_CLI(&pstOut->astYabiaoBattleLog[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScienceEncourage))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingjieEncourage))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingjie))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScienceEncourage))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingjieEncourage))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingjie))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUERY_BATTLE_RECORD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_BATTLE_RECORD_REQ *pstIn = (PKT_CLIGS_QUERY_BATTLE_RECORD_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwIndex))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUERY_BATTLE_RECORD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_BATTLE_RECORD_REQ *pstOut = (PKT_CLIGS_QUERY_BATTLE_RECORD_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwIndex))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_BATTLE_RECORD_ACK *pstIn = (PKT_CLIGS_QUERY_BATTLE_RECORD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA(&pstIn->stBattleData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_BATTLE_RECORD_ACK *pstOut = (PKT_CLIGS_QUERY_BATTLE_RECORD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA(&pstOut->stBattleData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CLIMB_TOWER_INFO(void *pHost, CNetData* poNetData)
{
	DT_CLIMB_TOWER_INFO *pstIn = (DT_CLIMB_TOWER_INFO*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wIndex))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnterPhyStrength))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxInstanceNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxUnlockInstanceNum))
		return -1;

	if(-1 == EncodeDT_INSTANCE_RECORD_DATA_CLI(&pstIn->stCurInstanceInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanResetClimbTownNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wResetClimbTownNumPerDay))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBuyResetClimbTownGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CLIMB_TOWER_INFO(void *pHost, CNetData* poNetData)
{
	DT_CLIMB_TOWER_INFO *pstOut = (DT_CLIMB_TOWER_INFO*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wIndex))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnterPhyStrength))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxInstanceNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxUnlockInstanceNum))
		return -1;

	if(-1 == DecodeDT_INSTANCE_RECORD_DATA_CLI(&pstOut->stCurInstanceInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanResetClimbTownNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wResetClimbTownNumPerDay))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBuyResetClimbTownGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CLIMB_TOWER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CLIMB_TOWER_REQ *pstIn = (PKT_CLIGS_OPEN_CLIMB_TOWER_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wIndex))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CLIMB_TOWER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CLIMB_TOWER_REQ *pstOut = (PKT_CLIGS_OPEN_CLIMB_TOWER_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wIndex))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CLIMB_TOWER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CLIMB_TOWER_ACK *pstIn = (PKT_CLIGS_OPEN_CLIMB_TOWER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_CLIMB_TOWER_INFO(&pstIn->stClimbTowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CLIMB_TOWER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CLIMB_TOWER_ACK *pstOut = (PKT_CLIGS_OPEN_CLIMB_TOWER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_CLIMB_TOWER_INFO(&pstOut->stClimbTowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLIMB_TOWER_RESET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_RESET_REQ *pstIn = (PKT_CLIGS_CLIMB_TOWER_RESET_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSceneIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLIMB_TOWER_RESET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_RESET_REQ *pstOut = (PKT_CLIGS_CLIMB_TOWER_RESET_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSceneIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLIMB_TOWER_RESET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_RESET_ACK *pstIn = (PKT_CLIGS_CLIMB_TOWER_RESET_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == EncodeDT_CLIMB_TOWER_INFO(&pstIn->stClimbTowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLIMB_TOWER_RESET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_RESET_ACK *pstOut = (PKT_CLIGS_CLIMB_TOWER_RESET_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == DecodeDT_CLIMB_TOWER_INFO(&pstOut->stClimbTowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ *pstIn = (PKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSceneIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ *pstOut = (PKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSceneIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK *pstIn = (PKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOnhookResultNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_CLIMB_TOWER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byOnhookResultNum)
			break;
		if(-1 == EncodeDT_ONHOOK_RESULT(&pstIn->astOnhookResult[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_DATA_AFTER_ONHOOK(&pstIn->stAfterOnhookData, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnlockNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byUnlockNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_ID(&pstIn->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_DATA_CLI(&pstIn->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_CLIMB_TOWER_INFO(&pstIn->stClimbTowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK *pstOut = (PKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOnhookResultNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_CLIMB_TOWER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byOnhookResultNum)
			break;
		if(-1 == DecodeDT_ONHOOK_RESULT(&pstOut->astOnhookResult[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_DATA_AFTER_ONHOOK(&pstOut->stAfterOnhookData, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnlockNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byUnlockNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_ID(&pstOut->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_DATA_CLI(&pstOut->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_CLIMB_TOWER_INFO(&pstOut->stClimbTowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ *pstIn = (PKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuyNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ *pstOut = (PKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuyNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK *pstIn = (PKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanResetClimbTownNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanBuyResetClimbTownNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBuyResetClimbTownGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK *pstOut = (PKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanResetClimbTownNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanBuyResetClimbTownNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBuyResetClimbTownGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_JINGJIE_PER_LEVEL_DATA(void *pHost, CNetData* poNetData)
{
	DT_JINGJIE_PER_LEVEL_DATA *pstIn = (DT_JINGJIE_PER_LEVEL_DATA*)pHost;

	INT32 i;
	for(i = 0; i < MAX_JINGJIE_SUBLEVEL_NUM; i++)
	{
		if(-1 == EncodeDT_ATTR_INC_DATA(&pstIn->astSubLevelIncAttrInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_JINGJIE_SUBLEVEL_NUM; i++)
	{
		if(-1 == poNetData->AddDword(pstIn->adwSubLevelCostJingJieInfo[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_JINGJIE_PER_LEVEL_DATA(void *pHost, CNetData* poNetData)
{
	DT_JINGJIE_PER_LEVEL_DATA *pstOut = (DT_JINGJIE_PER_LEVEL_DATA*)pHost;

	INT32 i;
		for(i = 0; i < MAX_JINGJIE_SUBLEVEL_NUM; i++)
		{
			if(-1 == DecodeDT_ATTR_INC_DATA(&pstOut->astSubLevelIncAttrInfo[i], poNetData))
				return -1;
		}

	for(i = 0; i < MAX_JINGJIE_SUBLEVEL_NUM; i++)
	{
		if(-1 == poNetData->DelDword(pstOut->adwSubLevelCostJingJieInfo[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_JINGJIE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_JINGJIE_DATA_CLI *pstIn = (DT_JINGJIE_DATA_CLI*)pHost;

	if(-1 == EncodeDT_JINGJIE_BASE_DATA(&pstIn->stBaseData, poNetData))
		return -1;

	if(-1 == EncodeDT_JINGJIE_PER_LEVEL_DATA(&pstIn->stJingJiePerLevelData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIncAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_JINGJIE_ATTR_INC_NUM; i++)
	{
		if(i >= (INT32)pstIn->byIncAttrNum)
			break;
		if(-1 == EncodeDT_ATTR_INC_DATA(&pstIn->astIncAttrInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wCurCoachTalent))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_JINGJIE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_JINGJIE_DATA_CLI *pstOut = (DT_JINGJIE_DATA_CLI*)pHost;

	if(-1 == DecodeDT_JINGJIE_BASE_DATA(&pstOut->stBaseData, poNetData))
		return -1;

	if(-1 == DecodeDT_JINGJIE_PER_LEVEL_DATA(&pstOut->stJingJiePerLevelData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIncAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_JINGJIE_ATTR_INC_NUM; i++)
	{
		if(i >= (INT32)pstOut->byIncAttrNum)
			break;
		if(-1 == DecodeDT_ATTR_INC_DATA(&pstOut->astIncAttrInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wCurCoachTalent))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_JINGJIE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_JINGJIE_REQ *pstIn = (PKT_CLIGS_UPGRADE_JINGJIE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_JINGJIE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_JINGJIE_REQ *pstOut = (PKT_CLIGS_UPGRADE_JINGJIE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_JINGJIE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_JINGJIE_ACK *pstIn = (PKT_CLIGS_UPGRADE_JINGJIE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_JINGJIE_DATA_CLI(&pstIn->stJingJieInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byColor))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_JINGJIE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_JINGJIE_ACK *pstOut = (PKT_CLIGS_UPGRADE_JINGJIE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_JINGJIE_DATA_CLI(&pstOut->stJingJieInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byColor))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GEN_SCIENCE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GEN_SCIENCE_DATA_CLI *pstIn = (DT_GEN_SCIENCE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byCollectState))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GAS_BALL_NUM; i++)
	{
		if(-1 == EncodeDT_GAS_BALL_DATA(&pstIn->astGasBollInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwGenGasCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGenGasGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCommonUpGasCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFullLevelUpGasGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalGenNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanGenNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GEN_SCIENCE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GEN_SCIENCE_DATA_CLI *pstOut = (DT_GEN_SCIENCE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byCollectState))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_GAS_BALL_NUM; i++)
		{
			if(-1 == DecodeDT_GAS_BALL_DATA(&pstOut->astGasBollInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelDword(pstOut->dwGenGasCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGenGasGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCommonUpGasCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFullLevelUpGasGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalGenNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanGenNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GEN_GAS_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEN_GAS_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_GEN_GAS_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GEN_GAS_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEN_GAS_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_GEN_GAS_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GEN_GAS_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEN_GAS_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_GEN_GAS_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GEN_SCIENCE_DATA_CLI(&pstIn->stGenGasInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GEN_GAS_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEN_GAS_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_GEN_GAS_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GEN_SCIENCE_DATA_CLI(&pstOut->stGenGasInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GEN_GAS_BALL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GEN_GAS_BALL_REQ *pstIn = (PKT_CLIGS_GEN_GAS_BALL_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GEN_GAS_BALL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GEN_GAS_BALL_REQ *pstOut = (PKT_CLIGS_GEN_GAS_BALL_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GEN_GAS_BALL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GEN_GAS_BALL_ACK *pstIn = (PKT_CLIGS_GEN_GAS_BALL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GEN_SCIENCE_DATA_CLI(&pstIn->stGenGasInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GEN_GAS_BALL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GEN_GAS_BALL_ACK *pstOut = (PKT_CLIGS_GEN_GAS_BALL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GEN_SCIENCE_DATA_CLI(&pstOut->stGenGasInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UP_GAS_BALL_LEVEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UP_GAS_BALL_LEVEL_REQ *pstIn = (PKT_CLIGS_UP_GAS_BALL_LEVEL_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFullLevelFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UP_GAS_BALL_LEVEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UP_GAS_BALL_LEVEL_REQ *pstOut = (PKT_CLIGS_UP_GAS_BALL_LEVEL_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFullLevelFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UP_GAS_BALL_LEVEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UP_GAS_BALL_LEVEL_ACK *pstIn = (PKT_CLIGS_UP_GAS_BALL_LEVEL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GEN_SCIENCE_DATA_CLI(&pstIn->stGenGasInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UP_GAS_BALL_LEVEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UP_GAS_BALL_LEVEL_ACK *pstOut = (PKT_CLIGS_UP_GAS_BALL_LEVEL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GEN_SCIENCE_DATA_CLI(&pstOut->stGenGasInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COLLECT_GAS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_GAS_REQ *pstIn = (PKT_CLIGS_COLLECT_GAS_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COLLECT_GAS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_GAS_REQ *pstOut = (PKT_CLIGS_COLLECT_GAS_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COLLECT_GAS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_GAS_ACK *pstIn = (PKT_CLIGS_COLLECT_GAS_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GEN_SCIENCE_DATA_CLI(&pstIn->stGenGasInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COLLECT_GAS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_GAS_ACK *pstOut = (PKT_CLIGS_COLLECT_GAS_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GEN_SCIENCE_DATA_CLI(&pstOut->stGenGasInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ *pstIn = (PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wActionID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wActionLevelCli))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ *pstOut = (PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wActionID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wActionLevelCli))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ATTACK_RANG_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_ATTACK_RANG_DATA_LST *pstIn = (DT_ATTACK_RANG_DATA_LST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_ACTION_LEVEL_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_ATTACK_RANG_DATA_CLI(&pstIn->astInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ATTACK_RANG_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_ATTACK_RANG_DATA_LST *pstOut = (DT_ATTACK_RANG_DATA_LST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_ACTION_LEVEL_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_ATTACK_RANG_DATA_CLI(&pstOut->astInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_EFFECT_DATA_LST2(void *pHost, CNetData* poNetData)
{
	DT_EFFECT_DATA_LST2 *pstIn = (DT_EFFECT_DATA_LST2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_ACTION_LEVEL_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_SKILL_EFFECT_DATA_CLI2(&pstIn->astInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EFFECT_DATA_LST2(void *pHost, CNetData* poNetData)
{
	DT_EFFECT_DATA_LST2 *pstOut = (DT_EFFECT_DATA_LST2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_ACTION_LEVEL_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_SKILL_EFFECT_DATA_CLI2(&pstOut->astInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_TAB_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_TAB_DATA_CLI *pstIn = (DT_SKILL_TAB_DATA_CLI*)pHost;

	if(-1 == EncodeDT_SKILL_DATA_CLI(&pstIn->stSkillInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ATTACK_RANG_DATA_LST(&pstIn->stAttackRangInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EFFECT_DATA_LST2(&pstIn->stEffectInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAddExpPerUpgrade))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCostGasPerUpgrade))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurPlayerLevel))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_TAB_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_TAB_DATA_CLI *pstOut = (DT_SKILL_TAB_DATA_CLI*)pHost;

	if(-1 == DecodeDT_SKILL_DATA_CLI(&pstOut->stSkillInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ATTACK_RANG_DATA_LST(&pstOut->stAttackRangInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EFFECT_DATA_LST2(&pstOut->stEffectInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAddExpPerUpgrade))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCostGasPerUpgrade))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurPlayerLevel))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK *pstIn = (PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SKILL_TAB_DATA_CLI(&pstIn->stSkillTabInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK *pstOut = (PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SKILL_TAB_DATA_CLI(&pstOut->stSkillTabInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ *pstIn = (PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wActionID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEffectID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAttackRangKind))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTraceBuffKind))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ *pstOut = (PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wActionID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEffectID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAttackRangKind))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTraceBuffKind))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK *pstIn = (PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SKILL_TAB_DATA_CLI(&pstIn->stSkillTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK *pstOut = (PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SKILL_TAB_DATA_CLI(&pstOut->stSkillTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_JINGJIE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JINGJIE_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_JINGJIE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_JINGJIE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JINGJIE_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_JINGJIE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_JINGJIE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JINGJIE_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_JINGJIE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_JINGJIE_DATA_CLI(&pstIn->stJingJieInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxQualityLevel))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_JINGJIE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JINGJIE_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_JINGJIE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_JINGJIE_DATA_CLI(&pstOut->stJingJieInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxQualityLevel))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SKILL_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SKILL_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_SKILL_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SKILL_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SKILL_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_SKILL_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SKILL_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SKILL_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_SKILL_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SKILL_TAB_DATA_CLI(&pstIn->stSkillTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SKILL_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SKILL_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_SKILL_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SKILL_TAB_DATA_CLI(&pstOut->stSkillTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BLUE_TO_PURPLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLUE_TO_PURPLE_REQ *pstIn = (PKT_CLIGS_BLUE_TO_PURPLE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BLUE_TO_PURPLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLUE_TO_PURPLE_REQ *pstOut = (PKT_CLIGS_BLUE_TO_PURPLE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BLUE_TO_PURPLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLUE_TO_PURPLE_ACK *pstIn = (PKT_CLIGS_BLUE_TO_PURPLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BLUE_TO_PURPLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLUE_TO_PURPLE_ACK *pstOut = (PKT_CLIGS_BLUE_TO_PURPLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_VIP_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_VIP_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_VIP_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_VIP_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_VIP_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_VIP_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BUY_GOLD_INFO(void *pHost, CNetData* poNetData)
{
	DT_BUY_GOLD_INFO *pstIn = (DT_BUY_GOLD_INFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwGoldNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRMB))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwProductID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BUY_GOLD_INFO(void *pHost, CNetData* poNetData)
{
	DT_BUY_GOLD_INFO *pstOut = (DT_BUY_GOLD_INFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwGoldNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRMB))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwProductID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BUY_GOLD_TXT(void *pHost, CNetData* poNetData)
{
	DT_BUY_GOLD_TXT *pstIn = (DT_BUY_GOLD_TXT*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszBuyGoldInfo, sizeof(pstIn->aszBuyGoldInfo)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BUY_GOLD_TXT(void *pHost, CNetData* poNetData)
{
	DT_BUY_GOLD_TXT *pstOut = (DT_BUY_GOLD_TXT*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszBuyGoldInfo, sizeof(pstOut->aszBuyGoldInfo)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_VIP_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_VIP_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_VIP_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_VIP_TAB_DATA_CLI(&pstIn->stVipTabInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBuyGoldInfoNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BUY_GOLD_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBuyGoldInfoNum)
			break;
		if(-1 == EncodeDT_BUY_GOLD_INFO(&pstIn->astBuyGoldLst[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BUY_GOLD_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBuyGoldInfoNum)
			break;
		if(-1 == EncodeDT_BUY_GOLD_TXT(&pstIn->astBuyGoldTxtLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddTString(pstIn->aszProContextHead, sizeof(pstIn->aszProContextHead)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszVipProContext, sizeof(pstIn->aszVipProContext)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_VIP_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_VIP_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_VIP_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_VIP_TAB_DATA_CLI(&pstOut->stVipTabInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBuyGoldInfoNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BUY_GOLD_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBuyGoldInfoNum)
			break;
		if(-1 == DecodeDT_BUY_GOLD_INFO(&pstOut->astBuyGoldLst[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BUY_GOLD_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBuyGoldInfoNum)
			break;
		if(-1 == DecodeDT_BUY_GOLD_TXT(&pstOut->astBuyGoldTxtLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelTString(pstOut->aszProContextHead, sizeof(pstOut->aszProContextHead)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszVipProContext, sizeof(pstOut->aszVipProContext)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->stBagItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstIn->stEquipXiangqianDes, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->stBagItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstOut->stEquipXiangqianDes, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_XIANGQIAN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_XIANGQIAN_REQ *pstIn = (PKT_CLIGS_XIANGQIAN_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wItemID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPos))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_XIANGQIAN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_XIANGQIAN_REQ *pstOut = (PKT_CLIGS_XIANGQIAN_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wItemID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPos))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_XIANGQIAN_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_XIANGQIAN_DATA_CLI *pstIn = (DT_XIANGQIAN_DATA_CLI*)pHost;

	if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->stEquip, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->stBagItemInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_XIANGQIAN_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_XIANGQIAN_DATA_CLI *pstOut = (DT_XIANGQIAN_DATA_CLI*)pHost;

	if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->stEquip, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->stBagItemInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_XIANGQIAN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_XIANGQIAN_ACK *pstIn = (PKT_CLIGS_XIANGQIAN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_XIANGQIAN_DATA_CLI(&pstIn->stXiangqianData, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_XIANGQIAN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_XIANGQIAN_ACK *pstOut = (PKT_CLIGS_XIANGQIAN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_XIANGQIAN_DATA_CLI(&pstOut->stXiangqianData, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REMOVE_XIANGQIAN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REMOVE_XIANGQIAN_REQ *pstIn = (PKT_CLIGS_REMOVE_XIANGQIAN_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRemoveAll))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPos))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REMOVE_XIANGQIAN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REMOVE_XIANGQIAN_REQ *pstOut = (PKT_CLIGS_REMOVE_XIANGQIAN_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRemoveAll))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPos))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REMOVE_XIANGQIAN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REMOVE_XIANGQIAN_ACK *pstIn = (PKT_CLIGS_REMOVE_XIANGQIAN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == EncodeDT_XIANGQIAN_DATA_CLI(&pstIn->stXiangqianData, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REMOVE_XIANGQIAN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REMOVE_XIANGQIAN_ACK *pstOut = (PKT_CLIGS_REMOVE_XIANGQIAN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == DecodeDT_XIANGQIAN_DATA_CLI(&pstOut->stXiangqianData, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RESET_ELITE_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESET_ELITE_INSTANCE_REQ *pstIn = (PKT_CLIGS_RESET_ELITE_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRemainResetNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RESET_ELITE_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESET_ELITE_INSTANCE_REQ *pstOut = (PKT_CLIGS_RESET_ELITE_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRemainResetNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ELITE_INSTANCE_VIP_EXT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_VIP_EXT_DATA_CLI *pstIn = (DT_ELITE_INSTANCE_VIP_EXT_DATA_CLI*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNextVipLevelNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ELITE_INSTANCE_VIP_EXT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_VIP_EXT_DATA_CLI *pstOut = (DT_ELITE_INSTANCE_VIP_EXT_DATA_CLI*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNextVipLevelNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RESET_ELITE_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESET_ELITE_INSTANCE_ACK *pstIn = (PKT_CLIGS_RESET_ELITE_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRemainResetNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxResetNum))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ELITE_INSTANCE_VIP_EXT_DATA_CLI(&pstIn->stEliteInstanceVipExt, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCostGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RESET_ELITE_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESET_ELITE_INSTANCE_ACK *pstOut = (PKT_CLIGS_RESET_ELITE_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRemainResetNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxResetNum))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ELITE_INSTANCE_VIP_EXT_DATA_CLI(&pstOut->stEliteInstanceVipExt, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCostGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ *pstIn = (PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ *pstOut = (PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ELITE_INSTANCE_RECORD_DATA(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_RECORD_DATA *pstIn = (DT_ELITE_INSTANCE_RECORD_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	if(-1 == EncodeDT_BURST_ITEM_DATA(&pstIn->stBurstItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMainMonsterKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanBattle))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ELITE_INSTANCE_RECORD_DATA(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_RECORD_DATA *pstOut = (DT_ELITE_INSTANCE_RECORD_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	if(-1 == DecodeDT_BURST_ITEM_DATA(&pstOut->stBurstItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMainMonsterKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanBattle))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ELITE_INSTANCE_RECORD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_RECORD_DATA_CLI *pstIn = (DT_ELITE_INSTANCE_RECORD_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_PER_TOWN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byInstanceNum)
			break;
		if(-1 == EncodeDT_ELITE_INSTANCE_RECORD_DATA(&pstIn->astInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wRemainResetNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCostGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOnhookLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ELITE_INSTANCE_RECORD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_RECORD_DATA_CLI *pstOut = (DT_ELITE_INSTANCE_RECORD_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_PER_TOWN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byInstanceNum)
			break;
		if(-1 == DecodeDT_ELITE_INSTANCE_RECORD_DATA(&pstOut->astInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wRemainResetNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCostGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOnhookLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI *pstIn = (DT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_PER_TOWN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byInstanceNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyScore[i]))
			return -1;
	}

	if(-1 == EncodeDT_CHAPTER_SCORE(&pstIn->stChapterInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI *pstOut = (DT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_PER_TOWN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byInstanceNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyScore[i]))
			return -1;
	}

	if(-1 == DecodeDT_CHAPTER_SCORE(&pstOut->stChapterInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK *pstIn = (PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOnhookResultNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_CLIMB_TOWER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byOnhookResultNum)
			break;
		if(-1 == EncodeDT_ONHOOK_RESULT(&pstIn->astOnhookResult[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_DATA_AFTER_ONHOOK(&pstIn->stAfterOnhookData, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAllOnhookNum))
		return -1;

	if(-1 == EncodeDT_ELITE_INSTANCE_RECORD_DATA_CLI(&pstIn->stInstanceData, poNetData))
		return -1;

	if(-1 == EncodeDT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI(&pstIn->stInstanceScoreData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK *pstOut = (PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOnhookResultNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_CLIMB_TOWER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byOnhookResultNum)
			break;
		if(-1 == DecodeDT_ONHOOK_RESULT(&pstOut->astOnhookResult[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_DATA_AFTER_ONHOOK(&pstOut->stAfterOnhookData, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAllOnhookNum))
		return -1;

	if(-1 == DecodeDT_ELITE_INSTANCE_RECORD_DATA_CLI(&pstOut->stInstanceData, poNetData))
		return -1;

	if(-1 == DecodeDT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI(&pstOut->stInstanceScoreData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ELITE_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ELITE_INSTANCE_REQ *pstIn = (PKT_CLIGS_GET_ELITE_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ELITE_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ELITE_INSTANCE_REQ *pstOut = (PKT_CLIGS_GET_ELITE_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ELITE_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ELITE_INSTANCE_ACK *pstIn = (PKT_CLIGS_GET_ELITE_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stMaxInstanceData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byTownNum)
			break;
		if(-1 == EncodeDT_ELITE_INSTANCE_RECORD_DATA_CLI(&pstIn->astTownInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wNextUnlockInstanceTownID))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ELITE_INSTANCE_VIP_EXT_DATA_CLI(&pstIn->stEliteInstanceVipExt, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxResetNum))
		return -1;

	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byTownNum)
			break;
		if(-1 == EncodeDT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI(&pstIn->astTownInstanceScoreInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_ACCUMULATED_SCORE_ENCOURAGE(&pstIn->stAccumulatedEncourage, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ELITE_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ELITE_INSTANCE_ACK *pstOut = (PKT_CLIGS_GET_ELITE_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stMaxInstanceData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byTownNum)
			break;
		if(-1 == DecodeDT_ELITE_INSTANCE_RECORD_DATA_CLI(&pstOut->astTownInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wNextUnlockInstanceTownID))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ELITE_INSTANCE_VIP_EXT_DATA_CLI(&pstOut->stEliteInstanceVipExt, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxResetNum))
		return -1;

	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byTownNum)
			break;
		if(-1 == DecodeDT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI(&pstOut->astTownInstanceScoreInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_ACCUMULATED_SCORE_ENCOURAGE(&pstOut->stAccumulatedEncourage, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_ID(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_ID *pstIn = (DT_EQUIP_ID*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_ID(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_ID *pstOut = (DT_EQUIP_ID*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUICK_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUICK_EQUIP_REQ *pstIn = (PKT_CLIGS_QUICK_EQUIP_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_ID(&pstIn->astEquipIDLst[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUICK_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUICK_EQUIP_REQ *pstOut = (PKT_CLIGS_QUICK_EQUIP_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_ID(&pstOut->astEquipIDLst[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUICK_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUICK_EQUIP_ACK *pstIn = (PKT_CLIGS_QUICK_EQUIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_ID(&pstIn->astEquipIDLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwPlayerHP))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stHeroPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUICK_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUICK_EQUIP_ACK *pstOut = (PKT_CLIGS_QUICK_EQUIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_ID(&pstOut->astEquipIDLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwPlayerHP))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stHeroPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PKBATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PKBATTLE_REQ *pstIn = (PKT_CLIGS_PKBATTLE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PKBATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PKBATTLE_REQ *pstOut = (PKT_CLIGS_PKBATTLE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PKBATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PKBATTLE_ACK *pstIn = (PKT_CLIGS_PKBATTLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PKBATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PKBATTLE_ACK *pstOut = (PKT_CLIGS_PKBATTLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RESOURCES_PROMPT(void *pHost, CNetData* poNetData)
{
	DT_RESOURCES_PROMPT *pstIn = (DT_RESOURCES_PROMPT*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RESOURCES_PROMPT(void *pHost, CNetData* poNetData)
{
	DT_RESOURCES_PROMPT *pstOut = (DT_RESOURCES_PROMPT*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RESOURCES_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_RESOURCES_PROMPT_DATA *pstIn = (DT_RESOURCES_PROMPT_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byRsNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RESOURCES_NUM; i++)
	{
		if(i >= (INT32)pstIn->byRsNum)
			break;
		if(-1 == EncodeDT_RESOURCES_PROMPT(&pstIn->astRsPromptInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RESOURCES_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_RESOURCES_PROMPT_DATA *pstOut = (DT_RESOURCES_PROMPT_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byRsNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RESOURCES_NUM; i++)
	{
		if(i >= (INT32)pstOut->byRsNum)
			break;
		if(-1 == DecodeDT_RESOURCES_PROMPT(&pstOut->astRsPromptInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RESOURCES_PROMPT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESOURCES_PROMPT_REQ *pstIn = (PKT_CLIGS_RESOURCES_PROMPT_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwRsID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RESOURCES_PROMPT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESOURCES_PROMPT_REQ *pstOut = (PKT_CLIGS_RESOURCES_PROMPT_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwRsID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RESOURCES_PROMPT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESOURCES_PROMPT_ACK *pstIn = (PKT_CLIGS_RESOURCES_PROMPT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RESOURCES_PROMPT_DATA(&pstIn->stRsPromptData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RESOURCES_PROMPT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESOURCES_PROMPT_ACK *pstOut = (PKT_CLIGS_RESOURCES_PROMPT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RESOURCES_PROMPT_DATA(&pstOut->stRsPromptData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_PLAYER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_PLAYER_DATA_CLI *pstIn = (DT_BOSSB_PLAYER_DATA_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_PLAYER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_PLAYER_DATA_CLI *pstOut = (DT_BOSSB_PLAYER_DATA_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_PLAYER_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_PLAYER_DATA_CLI_LST *pstIn = (DT_BOSSB_PLAYER_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_BOSSB_PLAYER_DATA_CLI(&pstIn->astInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_PLAYER_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_PLAYER_DATA_CLI_LST *pstOut = (DT_BOSSB_PLAYER_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_BOSSB_PLAYER_DATA_CLI(&pstOut->astInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_DATA_CLI *pstIn = (DT_BOSSB_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wBossID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBossLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurBossHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHPPerGrid))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wReadyCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStopCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wReliveGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_DATA_CLI *pstOut = (DT_BOSSB_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wBossID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBossLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurBossHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHPPerGrid))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wReadyCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStopCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wReliveGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_MY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_MY_DATA_CLI *pstIn = (DT_BOSSB_MY_DATA_CLI*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIncPowerRate))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wReliveCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldReliveCountDown))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHurtValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHurtRate))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_MY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_MY_DATA_CLI *pstOut = (DT_BOSSB_MY_DATA_CLI*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIncPowerRate))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wReliveCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldReliveCountDown))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHurtValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHurtRate))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HURT_ENC_DATA(void *pHost, CNetData* poNetData)
{
	DT_HURT_ENC_DATA *pstIn = (DT_HURT_ENC_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwEncCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEncJingJie))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HURT_ENC_DATA(void *pHost, CNetData* poNetData)
{
	DT_HURT_ENC_DATA *pstOut = (DT_HURT_ENC_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwEncCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEncJingJie))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_ENTER_BOSSB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_ENTER_BOSSB_REQ *pstIn = (PKT_ENTER_BOSSB_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_ENTER_BOSSB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_ENTER_BOSSB_REQ *pstOut = (PKT_ENTER_BOSSB_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_ENTER_BOSSB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_ENTER_BOSSB_ACK *pstIn = (PKT_ENTER_BOSSB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCliVer))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwResVer))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUIVer))
		return -1;

	if(-1 == EncodeDT_BOSSB_MY_DATA_CLI(&pstIn->stMyBossBInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BOSSB_PLAYER_DATA_CLI_LST(&pstIn->stPlayerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BOSSB_DATA_CLI(&pstIn->stBossBInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->astTopHurtInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_HURT_ENC_DATA(&pstIn->stHurtEncInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_ENTER_BOSSB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_ENTER_BOSSB_ACK *pstOut = (PKT_ENTER_BOSSB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCliVer))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwResVer))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUIVer))
		return -1;

	if(-1 == DecodeDT_BOSSB_MY_DATA_CLI(&pstOut->stMyBossBInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BOSSB_PLAYER_DATA_CLI_LST(&pstOut->stPlayerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BOSSB_DATA_CLI(&pstOut->stBossBInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->astTopHurtInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_HURT_ENC_DATA(&pstOut->stHurtEncInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_LEAVE_BOSSB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_LEAVE_BOSSB_REQ *pstIn = (PKT_LEAVE_BOSSB_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_LEAVE_BOSSB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_LEAVE_BOSSB_REQ *pstOut = (PKT_LEAVE_BOSSB_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_LEAVE_BOSSB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_LEAVE_BOSSB_ACK *pstIn = (PKT_LEAVE_BOSSB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_LEAVE_BOSSB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_LEAVE_BOSSB_ACK *pstOut = (PKT_LEAVE_BOSSB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_MOVE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_MOVE_REQ *pstIn = (PKT_BOSSB_MOVE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_MOVE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_MOVE_REQ *pstOut = (PKT_BOSSB_MOVE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_MOVE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_MOVE_ACK *pstIn = (PKT_BOSSB_MOVE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOldPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOldPosY))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_MOVE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_MOVE_ACK *pstOut = (PKT_BOSSB_MOVE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOldPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOldPosY))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_HURT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_HURT_REQ *pstIn = (PKT_BOSSB_HURT_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_HURT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_HURT_REQ *pstOut = (PKT_BOSSB_HURT_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_HURT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_HURT_ACK *pstIn = (PKT_BOSSB_HURT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurHurtValue))
		return -1;

	if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->stMyHurtInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->astTopHurtInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_HURT_ENC_DATA(&pstIn->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wReliveCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldReliveCountDown))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurBossHP))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_HURT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_HURT_ACK *pstOut = (PKT_BOSSB_HURT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurHurtValue))
		return -1;

	if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->stMyHurtInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->astTopHurtInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_HURT_ENC_DATA(&pstOut->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wReliveCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldReliveCountDown))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurBossHP))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_POS_NTF(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_POS_NTF *pstIn = (PKT_BOSSB_POS_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->bySyncType))
		return -1;

	if(-1 == EncodeDT_BOSSB_PLAYER_DATA_CLI(&pstIn->stPlayerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_POS_NTF(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_POS_NTF *pstOut = (PKT_BOSSB_POS_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->bySyncType))
		return -1;

	if(-1 == DecodeDT_BOSSB_PLAYER_DATA_CLI(&pstOut->stPlayerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_PLAYER_HRUT_NTF(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_PLAYER_HRUT_NTF *pstIn = (PKT_BOSSB_PLAYER_HRUT_NTF*)pHost;

	if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->stCurHurtInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->astTopHurtInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurBossHP))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_PLAYER_HRUT_NTF(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_PLAYER_HRUT_NTF *pstOut = (PKT_BOSSB_PLAYER_HRUT_NTF*)pHost;

	if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->stCurHurtInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->astTopHurtInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelDword(pstOut->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurBossHP))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_POS(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_POS *pstIn = (DT_BOSSB_POS*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_POS(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_POS *pstOut = (DT_BOSSB_POS*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_HURT(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_HURT *pstIn = (DT_BOSSB_HURT*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHurtValue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_HURT(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_HURT *pstOut = (DT_BOSSB_HURT*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHurtValue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_INFO_SYNC_NTF(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_INFO_SYNC_NTF *pstIn = (PKT_BOSSB_INFO_SYNC_NTF*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurBossHP))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->astTopHurtInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byLeaveNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byLeaveNum)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwLeaveInfo[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byEnterNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEnterNum)
			break;
		if(-1 == EncodeDT_BOSSB_PLAYER_DATA_CLI(&pstIn->astEnterInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byMoveNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byMoveNum)
			break;
		if(-1 == EncodeDT_BOSSB_POS(&pstIn->astMoveInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHurtNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHurtNum)
			break;
		if(-1 == EncodeDT_BOSSB_HURT(&pstIn->astHurtInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_INFO_SYNC_NTF(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_INFO_SYNC_NTF *pstOut = (PKT_BOSSB_INFO_SYNC_NTF*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurBossHP))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->astTopHurtInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelByte(pstOut->byLeaveNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byLeaveNum)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwLeaveInfo[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byEnterNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEnterNum)
			break;
		if(-1 == DecodeDT_BOSSB_PLAYER_DATA_CLI(&pstOut->astEnterInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byMoveNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byMoveNum)
			break;
		if(-1 == DecodeDT_BOSSB_POS(&pstOut->astMoveInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHurtNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHurtNum)
			break;
		if(-1 == DecodeDT_BOSSB_HURT(&pstOut->astHurtInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_OVER_INFO(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_OVER_INFO *pstIn = (DT_BOSSB_OVER_INFO*)pHost;

	if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->stMyHurtInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->astTopHurtInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurBossHP))
		return -1;

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stHeroEncInfo, poNetData))
		return -1;

	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->astTopEncInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stKillEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBossDeadFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedUpgrade))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_OVER_INFO(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_OVER_INFO *pstOut = (DT_BOSSB_OVER_INFO*)pHost;

	if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->stMyHurtInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->astTopHurtInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelDword(pstOut->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurBossHP))
		return -1;

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stHeroEncInfo, poNetData))
		return -1;

		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->astTopEncInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stKillEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBossDeadFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedUpgrade))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_OVER_NTF(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_OVER_NTF *pstIn = (PKT_BOSSB_OVER_NTF*)pHost;

	if(-1 == EncodeDT_BOSSB_OVER_INFO(&pstIn->stBossOverInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnreadBattleLogNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_OVER_NTF(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_OVER_NTF *pstOut = (PKT_BOSSB_OVER_NTF*)pHost;

	if(-1 == DecodeDT_BOSSB_OVER_INFO(&pstOut->stBossOverInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnreadBattleLogNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_OPEN_INSPIRE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_OPEN_INSPIRE_TAB_REQ *pstIn = (PKT_OPEN_INSPIRE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_OPEN_INSPIRE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_OPEN_INSPIRE_TAB_REQ *pstOut = (PKT_OPEN_INSPIRE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_INSPIRE_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_INSPIRE_TAB_DATA *pstIn = (DT_INSPIRE_TAB_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHaveIncPowerRate))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIncCostStory))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIncCostGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStoryIncRate))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldIncRate))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanIncPowerRate))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_INSPIRE_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_INSPIRE_TAB_DATA *pstOut = (DT_INSPIRE_TAB_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHaveIncPowerRate))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIncCostStory))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIncCostGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStoryIncRate))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldIncRate))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanIncPowerRate))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_OPEN_INSPIRE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_OPEN_INSPIRE_TAB_ACK *pstIn = (PKT_OPEN_INSPIRE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_INSPIRE_TAB_DATA(&pstIn->stInspireTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_OPEN_INSPIRE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_OPEN_INSPIRE_TAB_ACK *pstOut = (PKT_OPEN_INSPIRE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_INSPIRE_TAB_DATA(&pstOut->stInspireTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_INSPIRE_POWER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_INSPIRE_POWER_REQ *pstIn = (PKT_INSPIRE_POWER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGoldInspireFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_INSPIRE_POWER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_INSPIRE_POWER_REQ *pstOut = (PKT_INSPIRE_POWER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGoldInspireFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_INSPIRE_POWER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_INSPIRE_POWER_ACK *pstIn = (PKT_INSPIRE_POWER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_INSPIRE_TAB_DATA(&pstIn->stInspireTabInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_INSPIRE_POWER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_INSPIRE_POWER_ACK *pstOut = (PKT_INSPIRE_POWER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_INSPIRE_TAB_DATA(&pstOut->stInspireTabInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_RELIVE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_RELIVE_REQ *pstIn = (PKT_BOSSB_RELIVE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_RELIVE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_RELIVE_REQ *pstOut = (PKT_BOSSB_RELIVE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_RELIVE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_RELIVE_ACK *pstIn = (PKT_BOSSB_RELIVE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_RELIVE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_RELIVE_ACK *pstOut = (PKT_BOSSB_RELIVE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_GET_LAST_BOSSB_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_GET_LAST_BOSSB_INFO_REQ *pstIn = (PKT_BOSSB_GET_LAST_BOSSB_INFO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_GET_LAST_BOSSB_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_GET_LAST_BOSSB_INFO_REQ *pstOut = (PKT_BOSSB_GET_LAST_BOSSB_INFO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_GET_LAST_BOSSB_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK *pstIn = (PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BOSSB_OVER_INFO(&pstIn->stBossOverInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_GET_LAST_BOSSB_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK *pstOut = (PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BOSSB_OVER_INFO(&pstOut->stBossOverInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ *pstIn = (PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ *pstOut = (PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK *pstIn = (PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stHeroBaseInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_SKILL_DATA_CLI(&pstIn->stSkillInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RECHARGE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK *pstOut = (PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stHeroBaseInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_SKILL_DATA_CLI(&pstOut->stSkillInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RECHARGE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ *pstIn = (PKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ *pstOut = (PKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK *pstIn = (PKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAppAddNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_APP_ADDRESS_NUM; i++)
	{
		if(i >= (INT32)pstIn->byAppAddNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyAppAddress[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	for(i = 0; i < MAX_SCORE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK *pstOut = (PKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAppAddNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_APP_ADDRESS_NUM; i++)
	{
		if(i >= (INT32)pstOut->byAppAddNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyAppAddress[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	for(i = 0; i < MAX_SCORE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_RANDOM_DSPNAME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANDOM_DSPNAME_REQ *pstIn = (PKT_CLIGS_GET_RANDOM_DSPNAME_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_RANDOM_DSPNAME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANDOM_DSPNAME_REQ *pstOut = (PKT_CLIGS_GET_RANDOM_DSPNAME_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_RANDOM_DSPNAME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANDOM_DSPNAME_ACK *pstIn = (PKT_CLIGS_GET_RANDOM_DSPNAME_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDspName, sizeof(pstIn->aszDspName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_RANDOM_DSPNAME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANDOM_DSPNAME_ACK *pstOut = (PKT_CLIGS_GET_RANDOM_DSPNAME_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDspName, sizeof(pstOut->aszDspName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI *pstIn = (DT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwOverTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBossID))
		return -1;

	if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->stMyHurtInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stHeroEncInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->astBossBTopEncInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stBossBKillEncInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI *pstOut = (DT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwOverTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBossID))
		return -1;

	if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->stMyHurtInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stHeroEncInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->astBossBTopEncInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stBossBKillEncInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ *pstIn = (PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ *pstOut = (PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK *pstIn = (PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSSB_BATTLE_LOG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI(&pstIn->astBossBattleBL[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK *pstOut = (PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSSB_BATTLE_LOG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI(&pstOut->astBossBattleBL[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_UPGRADE_LEVEL(void *pHost, CNetData* poNetData)
{
	DT_HERO_UPGRADE_LEVEL *pstIn = (DT_HERO_UPGRADE_LEVEL*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFreeLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_UPGRADE_LEVEL(void *pHost, CNetData* poNetData)
{
	DT_HERO_UPGRADE_LEVEL *pstOut = (DT_HERO_UPGRADE_LEVEL*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFreeLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ *pstIn = (PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ *pstOut = (PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK *pstIn = (PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFreePercentage))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldPercentage))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGold))
		return -1;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stHeroInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->astHeroInfoLst[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_LEVEL(&pstIn->astUpgradeHeroInfoLst[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK *pstOut = (PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFreePercentage))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldPercentage))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGold))
		return -1;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stHeroInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->astHeroInfoLst[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_LEVEL(&pstOut->astUpgradeHeroInfoLst[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXPERIENCE_TRANSFER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXPERIENCE_TRANSFER_REQ *pstIn = (PKT_CLIGS_EXPERIENCE_TRANSFER_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTransHeroID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXPERIENCE_TRANSFER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXPERIENCE_TRANSFER_REQ *pstOut = (PKT_CLIGS_EXPERIENCE_TRANSFER_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTransHeroID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXPERIENCE_TRANSFER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXPERIENCE_TRANSFER_ACK *pstIn = (PKT_CLIGS_EXPERIENCE_TRANSFER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerChangeData, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stHeroInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stTransHeroInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXPERIENCE_TRANSFER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXPERIENCE_TRANSFER_ACK *pstOut = (PKT_CLIGS_EXPERIENCE_TRANSFER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerChangeData, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stHeroInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stTransHeroInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RDCHALLENGE_POINT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_RDCHALLENGE_POINT_DATA_CLI *pstIn = (DT_RDCHALLENGE_POINT_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCurChallengePoint))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxChallengePoint))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRefreshCD))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCountDown))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RDCHALLENGE_POINT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_RDCHALLENGE_POINT_DATA_CLI *pstOut = (DT_RDCHALLENGE_POINT_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCurChallengePoint))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxChallengePoint))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRefreshCD))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCountDown))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byRefreshFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byRefreshFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RDC_ENC_DATA(void *pHost, CNetData* poNetData)
{
	DT_RDC_ENC_DATA *pstIn = (DT_RDC_ENC_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwJingJie))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPurpleGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RDC_ENC_DATA(void *pHost, CNetData* poNetData)
{
	DT_RDC_ENC_DATA *pstOut = (DT_RDC_ENC_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwJingJie))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPurpleGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RDC_PLAYER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_RDC_PLAYER_DATA_CLI *pstIn = (DT_RDC_PLAYER_DATA_CLI*)pHost;

	if(-1 == EncodeDT_RDC_PLAYER_DATA(&pstIn->stPlayerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RDC_ENC_DATA(&pstIn->stSuccessEnc, poNetData))
		return -1;

	if(-1 == EncodeDT_RDC_ENC_DATA(&pstIn->stFailEnc, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RDC_PLAYER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_RDC_PLAYER_DATA_CLI *pstOut = (DT_RDC_PLAYER_DATA_CLI*)pHost;

	if(-1 == DecodeDT_RDC_PLAYER_DATA(&pstOut->stPlayerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RDC_ENC_DATA(&pstOut->stSuccessEnc, poNetData))
		return -1;

	if(-1 == DecodeDT_RDC_ENC_DATA(&pstOut->stFailEnc, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RDC_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_RDC_TAB_DATA *pstIn = (DT_RDC_TAB_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_RDC_NUM; i++)
	{
		if(i >= (INT32)pstIn->byPlayerNum)
			break;
		if(-1 == EncodeDT_RDC_PLAYER_DATA_CLI(&pstIn->astPlayerInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_RDCHALLENGE_POINT_DATA_CLI(&pstIn->stChallengePointInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wChallengeCountDown))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRefreshCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClrCDGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RDC_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_RDC_TAB_DATA *pstOut = (DT_RDC_TAB_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_RDC_NUM; i++)
	{
		if(i >= (INT32)pstOut->byPlayerNum)
			break;
		if(-1 == DecodeDT_RDC_PLAYER_DATA_CLI(&pstOut->astPlayerInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_RDCHALLENGE_POINT_DATA_CLI(&pstOut->stChallengePointInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wChallengeCountDown))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRefreshCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClrCDGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RDC_TAB_DATA(&pstIn->stTabInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveWorship))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RDC_TAB_DATA(&pstOut->stTabInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveWorship))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RDCHALLENGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RDCHALLENGE_REQ *pstIn = (PKT_CLIGS_RDCHALLENGE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RDCHALLENGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RDCHALLENGE_REQ *pstOut = (PKT_CLIGS_RDCHALLENGE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RDCHALLENGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RDCHALLENGE_ACK *pstIn = (PKT_CLIGS_RDCHALLENGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA(&pstIn->stBattleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RDC_TAB_DATA(&pstIn->stTabInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RDC_ENC_DATA(&pstIn->stEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RDCHALLENGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RDCHALLENGE_ACK *pstOut = (PKT_CLIGS_RDCHALLENGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA(&pstOut->stBattleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RDC_TAB_DATA(&pstOut->stTabInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RDC_ENC_DATA(&pstOut->stEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_RDCHALLENGE_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_RDCHALLENGE_CD_REQ *pstIn = (PKT_CLIGS_CLR_RDCHALLENGE_CD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_RDCHALLENGE_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_RDCHALLENGE_CD_REQ *pstOut = (PKT_CLIGS_CLR_RDCHALLENGE_CD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_RDCHALLENGE_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_RDCHALLENGE_CD_ACK *pstIn = (PKT_CLIGS_CLR_RDCHALLENGE_CD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_RDCHALLENGE_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_RDCHALLENGE_CD_ACK *pstOut = (PKT_CLIGS_CLR_RDCHALLENGE_CD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_WORSHIP_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_WORSHIP_DATA_CLI *pstIn = (DT_WORSHIP_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byWorshipTypeLevel))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoachID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedVipLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEncJingJie))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEncPurpleGas))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveWorship))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_WORSHIP_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_WORSHIP_DATA_CLI *pstOut = (DT_WORSHIP_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byWorshipTypeLevel))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoachID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedVipLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEncJingJie))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEncPurpleGas))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveWorship))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_WORSHIP_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_WORSHIP_DATA_CLI_LST *pstIn = (DT_WORSHIP_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_WORSHIP_NUM; i++)
	{
		if(i >= (INT32)pstIn->wNum)
			break;
		if(-1 == EncodeDT_WORSHIP_DATA_CLI(&pstIn->astWorshipInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_WORSHIP_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_WORSHIP_DATA_CLI_LST *pstOut = (DT_WORSHIP_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_WORSHIP_NUM; i++)
	{
		if(i >= (INT32)pstOut->wNum)
			break;
		if(-1 == DecodeDT_WORSHIP_DATA_CLI(&pstOut->astWorshipInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_WORSHIP_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_WORSHIP_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_WORSHIP_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byWorshipType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_WORSHIP_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_WORSHIP_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_WORSHIP_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byWorshipType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_WORSHIP_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_WORSHIP_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_WORSHIP_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_WORSHIP_DATA_CLI_LST(&pstIn->stWorshipInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_WORSHIP_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_WORSHIP_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_WORSHIP_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_WORSHIP_DATA_CLI_LST(&pstOut->stWorshipInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_WORSHIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WORSHIP_REQ *pstIn = (PKT_CLIGS_WORSHIP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byWorshipType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byWorshipTypeLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_WORSHIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WORSHIP_REQ *pstOut = (PKT_CLIGS_WORSHIP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byWorshipType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byWorshipTypeLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_WORSHIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WORSHIP_ACK *pstIn = (PKT_CLIGS_WORSHIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_WORSHIP_DATA_CLI_LST(&pstIn->stWorshipInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_WORSHIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WORSHIP_ACK *pstOut = (PKT_CLIGS_WORSHIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_WORSHIP_DATA_CLI_LST(&pstOut->stWorshipInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACTIVITY_NOTIFY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVITY_NOTIFY_REQ *pstIn = (PKT_CLIGS_ACTIVITY_NOTIFY_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byActivityType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNotify))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACTIVITY_NOTIFY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVITY_NOTIFY_REQ *pstOut = (PKT_CLIGS_ACTIVITY_NOTIFY_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byActivityType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNotify))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACTIVITY_NOTIFY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVITY_NOTIFY_ACK *pstIn = (PKT_CLIGS_ACTIVITY_NOTIFY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACTIVITY_NOTIFY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVITY_NOTIFY_ACK *pstOut = (PKT_CLIGS_ACTIVITY_NOTIFY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DOGFECES_BUILD_TIP(void *pHost, CNetData* poNetData)
{
	DT_DOGFECES_BUILD_TIP *pstIn = (DT_DOGFECES_BUILD_TIP*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wBuildID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParameter1))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParameter2))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParameter3))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParameter4))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParameter5))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DOGFECES_BUILD_TIP(void *pHost, CNetData* poNetData)
{
	DT_DOGFECES_BUILD_TIP *pstOut = (DT_DOGFECES_BUILD_TIP*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wBuildID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParameter1))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParameter2))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParameter3))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParameter4))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParameter5))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DOGFECES_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DOGFECES_REQ *pstIn = (PKT_CLIGS_OPEN_DOGFECES_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DOGFECES_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DOGFECES_REQ *pstOut = (PKT_CLIGS_OPEN_DOGFECES_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DOGFECES_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DOGFECES_ACK *pstIn = (PKT_CLIGS_OPEN_DOGFECES_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_DOGFECES_BUILD_TIP_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_DOGFECES_BUILD_TIP(&pstIn->astDogFecesBuildTip[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DOGFECES_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DOGFECES_ACK *pstOut = (PKT_CLIGS_OPEN_DOGFECES_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_DOGFECES_BUILD_TIP_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_DOGFECES_BUILD_TIP(&pstOut->astDogFecesBuildTip[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ACTIVITY_CENTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_CENTER_REQ *pstIn = (PKT_CLIGS_GET_ACTIVITY_CENTER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ACTIVITY_CENTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_CENTER_REQ *pstOut = (PKT_CLIGS_GET_ACTIVITY_CENTER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ACTIVITY_CENTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_CENTER_ACK *pstIn = (PKT_CLIGS_GET_ACTIVITY_CENTER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byActivityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityNum)
			break;
		if(-1 == EncodeDT_ACTIVITY_BASE_DATA(&pstIn->astActivityInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyActivityStartCountDown[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ACTIVITY_CENTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_CENTER_ACK *pstOut = (PKT_CLIGS_GET_ACTIVITY_CENTER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byActivityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityNum)
			break;
		if(-1 == DecodeDT_ACTIVITY_BASE_DATA(&pstOut->astActivityInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyActivityStartCountDown[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACTIVITY_ENCOURAGE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ACTIVITY_ENCOURAGE_DATA_CLI *pstIn = (DT_ACTIVITY_ENCOURAGE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wActivityID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanReceive))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySeriesNo))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszActivityName, sizeof(pstIn->aszActivityName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszActivityDesc, sizeof(pstIn->aszActivityDesc)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszObtainingConditions, sizeof(pstIn->aszObtainingConditions)))
		return -1;

	if(-1 == EncodeDT_ENCOURAGE_DATA(&pstIn->stEncourageData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACTIVITY_ENCOURAGE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ACTIVITY_ENCOURAGE_DATA_CLI *pstOut = (DT_ACTIVITY_ENCOURAGE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wActivityID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanReceive))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySeriesNo))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszActivityName, sizeof(pstOut->aszActivityName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszActivityDesc, sizeof(pstOut->aszActivityDesc)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszObtainingConditions, sizeof(pstOut->aszObtainingConditions)))
		return -1;

	if(-1 == DecodeDT_ENCOURAGE_DATA(&pstOut->stEncourageData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ *pstIn = (PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ *pstOut = (PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK *pstIn = (PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byActivityEncourageNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_ENCOURAGE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityEncourageNum)
			break;
		if(-1 == EncodeDT_ACTIVITY_ENCOURAGE_DATA_CLI(&pstIn->astActivityEncourageInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK *pstOut = (PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byActivityEncourageNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_ENCOURAGE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityEncourageNum)
			break;
		if(-1 == DecodeDT_ACTIVITY_ENCOURAGE_DATA_CLI(&pstOut->astActivityEncourageInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ *pstIn = (PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wActivityID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszSeriesNo, sizeof(pstIn->aszSeriesNo)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ *pstOut = (PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wActivityID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszSeriesNo, sizeof(pstOut->aszSeriesNo)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK *pstIn = (PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wActivityID))
		return -1;

	if(-1 == EncodeDT_RSYNC_RECV_ENCOURAGE_DATA(&pstIn->stRsyncRecvEncourageData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHide))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK *pstOut = (PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wActivityID))
		return -1;

	if(-1 == DecodeDT_RSYNC_RECV_ENCOURAGE_DATA(&pstOut->stRsyncRecvEncourageData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHide))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GEM_MAKER_DATA(void *pHost, CNetData* poNetData)
{
	DT_GEM_MAKER_DATA *pstIn = (DT_GEM_MAKER_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wMakerKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPileNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGemLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedBlueGas))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOpenNeedTowerNum))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszSuccessRate, sizeof(pstIn->aszSuccessRate)))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->stGemInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GEM_MAKER_DATA(void *pHost, CNetData* poNetData)
{
	DT_GEM_MAKER_DATA *pstOut = (DT_GEM_MAKER_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wMakerKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPileNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGemLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedBlueGas))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOpenNeedTowerNum))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszSuccessRate, sizeof(pstOut->aszSuccessRate)))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->stGemInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurTowerNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMakerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GEM_LEVEL; i++)
	{
		if(i >= (INT32)pstIn->byMakerNum)
			break;
		if(-1 == EncodeDT_GEM_MAKER_DATA(&pstIn->astGemMakerInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddTString(pstIn->aszOtherPrompt, sizeof(pstIn->aszOtherPrompt)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurTowerNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMakerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GEM_LEVEL; i++)
	{
		if(i >= (INT32)pstOut->byMakerNum)
			break;
		if(-1 == DecodeDT_GEM_MAKER_DATA(&pstOut->astGemMakerInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelTString(pstOut->aszOtherPrompt, sizeof(pstOut->aszOtherPrompt)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_RATING_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RATING_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_RECV_RATING_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSceneIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wChapterID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_RATING_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RATING_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_RECV_RATING_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSceneIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wChapterID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_RATING_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RATING_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_RECV_RATING_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byType))
		return -1;

	if(-1 == EncodeDT_RSYNC_RECV_ENCOURAGE_DATA(&pstIn->stRsyncRecvEncourageData, poNetData))
		return -1;

	if(-1 == EncodeDT_ACCUMULATED_SCORE_ENCOURAGE(&pstIn->stAccumulatedEncourage, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_RATING_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RATING_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_RECV_RATING_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byType))
		return -1;

	if(-1 == DecodeDT_RSYNC_RECV_ENCOURAGE_DATA(&pstOut->stRsyncRecvEncourageData, poNetData))
		return -1;

	if(-1 == DecodeDT_ACCUMULATED_SCORE_ENCOURAGE(&pstOut->stAccumulatedEncourage, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_STUDY_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_STUDY_DATA_CLI2 *pstIn = (DT_STUDY_DATA_CLI2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byStudyColorKind))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyAttrKind1))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStudyAttrValue1))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStudyExp))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextLevelAttrValue1))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeNeedExp))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyAttrKind2))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStudyAttrValue2))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextLevelAttrValue2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_STUDY_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_STUDY_DATA_CLI2 *pstOut = (DT_STUDY_DATA_CLI2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byStudyColorKind))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyAttrKind1))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStudyAttrValue1))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStudyExp))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextLevelAttrValue1))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeNeedExp))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyAttrKind2))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStudyAttrValue2))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextLevelAttrValue2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_AWAKEN_TAB_DATA2(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_TAB_DATA2 *pstIn = (DT_AWAKEN_TAB_DATA2*)pHost;

	if(-1 == EncodeDT_AWAKEN_BASE_DATA(&pstIn->stBaseInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wMaxStudyLevel))
		return -1;

	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(-1 == poNetData->AddDword(pstIn->adwAwakenCoin[i]))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwAwakenGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTatalCallNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanCallNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->stCallStudy, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_AWAKEN_TAB_DATA2(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_TAB_DATA2 *pstOut = (DT_AWAKEN_TAB_DATA2*)pHost;

	if(-1 == DecodeDT_AWAKEN_BASE_DATA(&pstOut->stBaseInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelWord(pstOut->wMaxStudyLevel))
		return -1;

	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(-1 == poNetData->DelDword(pstOut->adwAwakenCoin[i]))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwAwakenGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTatalCallNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanCallNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->stCallStudy, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_AWAKEN_STUDY_EXCHANGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_STUDY_EXCHANGE_DATA *pstIn = (DT_AWAKEN_STUDY_EXCHANGE_DATA*)pHost;

	if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->stStudyInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedClip))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNeePlayerLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_AWAKEN_STUDY_EXCHANGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_STUDY_EXCHANGE_DATA *pstOut = (DT_AWAKEN_STUDY_EXCHANGE_DATA*)pHost;

	if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->stStudyInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedClip))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNeePlayerLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byExchangeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_EXCHANGE_STUDY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byExchangeNum)
			break;
		if(-1 == EncodeDT_AWAKEN_STUDY_EXCHANGE_DATA(&pstIn->astStudyExchangeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStudyClip))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byExchangeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_EXCHANGE_STUDY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byExchangeNum)
			break;
		if(-1 == DecodeDT_AWAKEN_STUDY_EXCHANGE_DATA(&pstOut->astStudyExchangeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStudyClip))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXCHANGE_STUDY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_STUDY_REQ *pstIn = (PKT_CLIGS_EXCHANGE_STUDY_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byStudyColorKind))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyAttrKind1))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyAttrKind2))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXCHANGE_STUDY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_STUDY_REQ *pstOut = (PKT_CLIGS_EXCHANGE_STUDY_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byStudyColorKind))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyAttrKind1))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyAttrKind2))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXCHANGE_STUDY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_STUDY_ACK *pstIn = (PKT_CLIGS_EXCHANGE_STUDY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyBagIdx))
		return -1;

	if(-1 == EncodeDT_AWAKEN_TAB_DATA2(&pstIn->stAwakenTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXCHANGE_STUDY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_STUDY_ACK *pstOut = (PKT_CLIGS_EXCHANGE_STUDY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyBagIdx))
		return -1;

	if(-1 == DecodeDT_AWAKEN_TAB_DATA2(&pstOut->stAwakenTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COMPOSE_EQUIP_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_COMPOSE_EQUIP_DATA_CLI *pstIn = (DT_COMPOSE_EQUIP_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDressPos))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStrengthenLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressLevel))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttribute, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COMPOSE_EQUIP_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_COMPOSE_EQUIP_DATA_CLI *pstOut = (DT_COMPOSE_EQUIP_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDressPos))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStrengthenLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressLevel))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttribute, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_COMPOSE_LEVEL_DATA_CLI *pstIn = (DT_EQUIP_COMPOSE_LEVEL_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEquipNum)
			break;
		if(-1 == EncodeDT_COMPOSE_EQUIP_DATA_CLI(&pstIn->astEquipInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wEquipClipNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wComposeNeedNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurLowColor))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHitKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwColorComposeNeedGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCommonComposeNeedGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_COMPOSE_LEVEL_DATA_CLI *pstOut = (DT_EQUIP_COMPOSE_LEVEL_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEquipNum)
			break;
		if(-1 == DecodeDT_COMPOSE_EQUIP_DATA_CLI(&pstOut->astEquipInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wEquipClipNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wComposeNeedNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurLowColor))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHitKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwColorComposeNeedGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCommonComposeNeedGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipLevelNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_EQUIPLEVEL_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEquipLevelNum)
			break;
		if(-1 == EncodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(&pstIn->astEquipLevelInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wComposeCountDown))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipLevelNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_EQUIPLEVEL_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEquipLevelNum)
			break;
		if(-1 == DecodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(&pstOut->astEquipLevelInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wComposeCountDown))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_COMPOSE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_COMPOSE_REQ *pstIn = (PKT_CLIGS_EQUIP_COMPOSE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurColorFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_COMPOSE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_COMPOSE_REQ *pstOut = (PKT_CLIGS_EQUIP_COMPOSE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurColorFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_COMPOSE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_COMPOSE_ACK *pstIn = (PKT_CLIGS_EQUIP_COMPOSE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(&pstIn->stEquipLevelInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wComposeCountDown))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_COMPOSE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_COMPOSE_ACK *pstOut = (PKT_CLIGS_EQUIP_COMPOSE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(&pstOut->stEquipLevelInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wComposeCountDown))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_COMPOSE_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_COMPOSE_EQUIP_REQ *pstIn = (PKT_CLIGS_RECV_COMPOSE_EQUIP_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_COMPOSE_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_COMPOSE_EQUIP_REQ *pstOut = (PKT_CLIGS_RECV_COMPOSE_EQUIP_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_COMPOSE_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_COMPOSE_EQUIP_ACK *pstIn = (PKT_CLIGS_RECV_COMPOSE_EQUIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(&pstIn->stEquipLevelInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->stRecvEquipInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstIn->stRecvEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_COMPOSE_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_COMPOSE_EQUIP_ACK *pstOut = (PKT_CLIGS_RECV_COMPOSE_EQUIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(&pstOut->stEquipLevelInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->stRecvEquipInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstOut->stRecvEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_BASE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BASE_DATA_CLI *pstIn = (DT_FACTION_BASE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byJoinFlag))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFactionNumberPeople))
		return -1;

	if(-1 == EncodeDT_FACTION_BASE_DATA(&pstIn->stFactionBaseData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_BASE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BASE_DATA_CLI *pstOut = (DT_FACTION_BASE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byJoinFlag))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFactionNumberPeople))
		return -1;

	if(-1 == DecodeDT_FACTION_BASE_DATA(&pstOut->stFactionBaseData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_BASE_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BASE_DATA_LST *pstIn = (DT_FACTION_BASE_DATA_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_CLI_NUM; i++)
	{
		if(i >= (INT32)pstIn->wFactionNum)
			break;
		if(-1 == EncodeDT_FACTION_BASE_DATA(&pstIn->astFactionBaseData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_BASE_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BASE_DATA_LST *pstOut = (DT_FACTION_BASE_DATA_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_CLI_NUM; i++)
	{
		if(i >= (INT32)pstOut->wFactionNum)
			break;
		if(-1 == DecodeDT_FACTION_BASE_DATA(&pstOut->astFactionBaseData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_BASE_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BASE_DATA_CLI_LST *pstIn = (DT_FACTION_BASE_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_CLI_NUM; i++)
	{
		if(i >= (INT32)pstIn->wFactionNum)
			break;
		if(-1 == EncodeDT_FACTION_BASE_DATA_CLI(&pstIn->astFactionBaseData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_BASE_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BASE_DATA_CLI_LST *pstOut = (DT_FACTION_BASE_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_CLI_NUM; i++)
	{
		if(i >= (INT32)pstOut->wFactionNum)
			break;
		if(-1 == DecodeDT_FACTION_BASE_DATA_CLI(&pstOut->astFactionBaseData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_OPEN_FACTION_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_OPEN_FACTION_BASE_DATA *pstIn = (DT_OPEN_FACTION_BASE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCreateFactionCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCreateFactionGold))
		return -1;

	if(-1 == EncodeDT_FACTION_BASE_DATA_CLI_LST(&pstIn->stRankFactionBaseDataCliLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_OPEN_FACTION_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_OPEN_FACTION_BASE_DATA *pstOut = (DT_OPEN_FACTION_BASE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCreateFactionCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCreateFactionGold))
		return -1;

	if(-1 == DecodeDT_FACTION_BASE_DATA_CLI_LST(&pstOut->stRankFactionBaseDataCliLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_PLAYER_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_CLI *pstIn = (DT_FACTION_PLAYER_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRank))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byJobType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwContribution))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOnLineState))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_PLAYER_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_CLI *pstOut = (DT_FACTION_PLAYER_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRank))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byJobType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwContribution))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOnLineState))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_PLAYER_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_CLI_LST *pstIn = (DT_FACTION_PLAYER_CLI_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->wFactionNum)
			break;
		if(-1 == EncodeDT_FACTION_PLAYER_CLI(&pstIn->astFactionPlayerCli[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_PLAYER_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_CLI_LST *pstOut = (DT_FACTION_PLAYER_CLI_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->wFactionNum)
			break;
		if(-1 == DecodeDT_FACTION_PLAYER_CLI(&pstOut->astFactionPlayerCli[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_BASE_OWNER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BASE_OWNER_DATA_CLI *pstIn = (DT_FACTION_BASE_OWNER_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byJobtype))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFactionNumberPeople))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwContributionValues))
		return -1;

	if(-1 == EncodeDT_FACTION_BASE_DATA(&pstIn->stFactionBaseData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_BASE_OWNER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BASE_OWNER_DATA_CLI *pstOut = (DT_FACTION_BASE_OWNER_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byJobtype))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFactionNumberPeople))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwContributionValues))
		return -1;

	if(-1 == DecodeDT_FACTION_BASE_DATA(&pstOut->stFactionBaseData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_OWNER_DATA(void *pHost, CNetData* poNetData)
{
	DT_FACTION_OWNER_DATA *pstIn = (DT_FACTION_OWNER_DATA*)pHost;

	if(-1 == EncodeDT_FACTION_BASE_OWNER_DATA_CLI(&pstIn->stFactionBaseData, poNetData))
		return -1;

	if(-1 == EncodeDT_FACTION_PLAYER_CLI_LST(&pstIn->stFactionPlayerCliLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_OWNER_DATA(void *pHost, CNetData* poNetData)
{
	DT_FACTION_OWNER_DATA *pstOut = (DT_FACTION_OWNER_DATA*)pHost;

	if(-1 == DecodeDT_FACTION_BASE_OWNER_DATA_CLI(&pstOut->stFactionBaseData, poNetData))
		return -1;

	if(-1 == DecodeDT_FACTION_PLAYER_CLI_LST(&pstOut->stFactionPlayerCliLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeUnDT_OPEN_FACTION_CONDITION(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case NOTIN:
		return EncodeDT_OPEN_FACTION_BASE_DATA(pHost, poNetData);
	case OWNER:
		return EncodeDT_FACTION_OWNER_DATA(pHost, poNetData);
	default: return -1;
	}
}

INT32 DecodeUnDT_OPEN_FACTION_CONDITION(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case NOTIN:
		return DecodeDT_OPEN_FACTION_BASE_DATA(pHost, poNetData);
	case OWNER:
		return DecodeDT_FACTION_OWNER_DATA(pHost, poNetData);
	default: return -1;
	}
}

INT32 EncodePKT_CLIGS_OPEN_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOwnerFlag))
		return -1;

	if(-1 == EncodeUnDT_OPEN_FACTION_CONDITION(&pstIn->stOpenFactionCondition, pstIn->byOwnerFlag, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOwnerFlag))
		return -1;

	if(-1 == DecodeUnDT_OPEN_FACTION_CONDITION(&pstOut->stOpenFactionCondition, pstOut->byOwnerFlag, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_APPLY_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_APPLY_FACTION_REQ *pstIn = (PKT_CLIGS_APPLY_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_APPLY_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_APPLY_FACTION_REQ *pstOut = (PKT_CLIGS_APPLY_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_APPLY_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_APPLY_FACTION_ACK *pstIn = (PKT_CLIGS_APPLY_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_APPLY_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_APPLY_FACTION_ACK *pstOut = (PKT_CLIGS_APPLY_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CANCEL_APPLY_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CANCEL_APPLY_FACTION_REQ *pstIn = (PKT_CLIGS_CANCEL_APPLY_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CANCEL_APPLY_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CANCEL_APPLY_FACTION_REQ *pstOut = (PKT_CLIGS_CANCEL_APPLY_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CANCEL_APPLY_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CANCEL_APPLY_FACTION_ACK *pstIn = (PKT_CLIGS_CANCEL_APPLY_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CANCEL_APPLY_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CANCEL_APPLY_FACTION_ACK *pstOut = (PKT_CLIGS_CANCEL_APPLY_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CREATE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CREATE_FACTION_REQ *pstIn = (PKT_CLIGS_CREATE_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCreateFactionType))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionDescName, sizeof(pstIn->aszFactionDescName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CREATE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CREATE_FACTION_REQ *pstOut = (PKT_CLIGS_CREATE_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCreateFactionType))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionDescName, sizeof(pstOut->aszFactionDescName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CREATE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CREATE_FACTION_ACK *pstIn = (PKT_CLIGS_CREATE_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CREATE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CREATE_FACTION_ACK *pstOut = (PKT_CLIGS_CREATE_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEARCH_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_FACTION_REQ *pstIn = (PKT_CLIGS_SEARCH_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEARCH_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_FACTION_REQ *pstOut = (PKT_CLIGS_SEARCH_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEARCH_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_FACTION_ACK *pstIn = (PKT_CLIGS_SEARCH_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_BASE_DATA_CLI_LST(&pstIn->stSearchFactionBaseDataCliLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEARCH_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_FACTION_ACK *pstOut = (PKT_CLIGS_SEARCH_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_BASE_DATA_CLI_LST(&pstOut->stSearchFactionBaseDataCliLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_OWNER_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OWNER_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_OWNER_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_OWNER_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OWNER_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_OWNER_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_PLAYER_AUDIT_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_AUDIT_CLI *pstIn = (DT_FACTION_PLAYER_AUDIT_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFirstAttack))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_PLAYER_AUDIT_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_AUDIT_CLI *pstOut = (DT_FACTION_PLAYER_AUDIT_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFirstAttack))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_PLAYER_AUDIT_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_AUDIT_CLI_LST *pstIn = (DT_FACTION_PLAYER_AUDIT_CLI_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->wFactionNum)
			break;
		if(-1 == EncodeDT_FACTION_PLAYER_AUDIT_CLI(&pstIn->astFactionPlayerAuditCli[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_PLAYER_AUDIT_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_AUDIT_CLI_LST *pstOut = (DT_FACTION_PLAYER_AUDIT_CLI_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->wFactionNum)
			break;
		if(-1 == DecodeDT_FACTION_PLAYER_AUDIT_CLI(&pstOut->astFactionPlayerAuditCli[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_OWNER_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OWNER_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_OWNER_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_OWNER_DATA(&pstIn->stFactionOwnerData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_OWNER_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OWNER_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_OWNER_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_OWNER_DATA(&pstOut->stFactionOwnerData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CONTRIBUTION_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CONTRIBUTION_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_CONTRIBUTION_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CONTRIBUTION_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CONTRIBUTION_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_CONTRIBUTION_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CONTRIBUTION_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_CONTRIBUTION_BASE_DATA *pstIn = (DT_CONTRIBUTION_BASE_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCoinMaxTimeEveryDay))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoinEveryTimeValues))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoinEveryTimeContributionValues))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldMaxTimeEveryDay))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoldEveryTimeValues))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoldEveryTimeContributionValues))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CONTRIBUTION_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_CONTRIBUTION_BASE_DATA *pstOut = (DT_CONTRIBUTION_BASE_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCoinMaxTimeEveryDay))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoinEveryTimeValues))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoinEveryTimeContributionValues))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldMaxTimeEveryDay))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoldEveryTimeValues))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoldEveryTimeContributionValues))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CONTRIBUTION_TODAY_DATA(void *pHost, CNetData* poNetData)
{
	DT_CONTRIBUTION_TODAY_DATA *pstIn = (DT_CONTRIBUTION_TODAY_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byCoinRecvFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCoinTodaysContributionTimes))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldRecvFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldTodaysContributionTimes))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CONTRIBUTION_TODAY_DATA(void *pHost, CNetData* poNetData)
{
	DT_CONTRIBUTION_TODAY_DATA *pstOut = (DT_CONTRIBUTION_TODAY_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byCoinRecvFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCoinTodaysContributionTimes))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldRecvFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldTodaysContributionTimes))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CONTRIBUTION_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CONTRIBUTION_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_CONTRIBUTION_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_CONTRIBUTION_BASE_DATA(&pstIn->stContributionBaseData, poNetData))
		return -1;

	if(-1 == EncodeDT_ENCOURAGE_DATA(&pstIn->stEncourageData, poNetData))
		return -1;

	if(-1 == EncodeDT_CONTRIBUTION_TODAY_DATA(&pstIn->stContributionTodayData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CONTRIBUTION_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CONTRIBUTION_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_CONTRIBUTION_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_CONTRIBUTION_BASE_DATA(&pstOut->stContributionBaseData, poNetData))
		return -1;

	if(-1 == DecodeDT_ENCOURAGE_DATA(&pstOut->stEncourageData, poNetData))
		return -1;

	if(-1 == DecodeDT_CONTRIBUTION_TODAY_DATA(&pstOut->stContributionTodayData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CONTRIBUTION_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CONTRIBUTION_FACTION_REQ *pstIn = (PKT_CLIGS_CONTRIBUTION_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwContributionFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CONTRIBUTION_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CONTRIBUTION_FACTION_REQ *pstOut = (PKT_CLIGS_CONTRIBUTION_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwContributionFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CONTRIBUTION_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CONTRIBUTION_FACTION_ACK *pstIn = (PKT_CLIGS_CONTRIBUTION_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_CONTRIBUTION_BASE_DATA(&pstIn->stContributionBaseData, poNetData))
		return -1;

	if(-1 == EncodeDT_ENCOURAGE_DATA(&pstIn->stEncourageData, poNetData))
		return -1;

	if(-1 == EncodeDT_CONTRIBUTION_TODAY_DATA(&pstIn->stContributionTodayData, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CONTRIBUTION_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CONTRIBUTION_FACTION_ACK *pstOut = (PKT_CLIGS_CONTRIBUTION_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_CONTRIBUTION_BASE_DATA(&pstOut->stContributionBaseData, poNetData))
		return -1;

	if(-1 == DecodeDT_ENCOURAGE_DATA(&pstOut->stEncourageData, poNetData))
		return -1;

	if(-1 == DecodeDT_CONTRIBUTION_TODAY_DATA(&pstOut->stContributionTodayData, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RSYNC_RECV_ENCOURAGE_DATA(&pstIn->stRsyncRecvEncourageData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_RECV_CONTRIBUTION_FACTION_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RSYNC_RECV_ENCOURAGE_DATA(&pstOut->stRsyncRecvEncourageData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_KICKED_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_KICKED_FACTION_REQ *pstIn = (PKT_CLIGS_KICKED_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_KICKED_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_KICKED_FACTION_REQ *pstOut = (PKT_CLIGS_KICKED_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_KICKED_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_KICKED_FACTION_ACK *pstIn = (PKT_CLIGS_KICKED_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_KICKED_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_KICKED_FACTION_ACK *pstOut = (PKT_CLIGS_KICKED_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JOB_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JOB_FACTION_REQ *pstIn = (PKT_CLIGS_JOB_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JOB_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JOB_FACTION_REQ *pstOut = (PKT_CLIGS_JOB_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JOB_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JOB_FACTION_ACK *pstIn = (PKT_CLIGS_JOB_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_PLAYER_CLI_LST(&pstIn->stFactionPlayerDataLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JOB_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JOB_FACTION_ACK *pstOut = (PKT_CLIGS_JOB_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_PLAYER_CLI_LST(&pstOut->stFactionPlayerDataLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SET_NOTICE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_NOTICE_FACTION_REQ *pstIn = (PKT_CLIGS_SET_NOTICE_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionNotice, sizeof(pstIn->aszFactionNotice)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SET_NOTICE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_NOTICE_FACTION_REQ *pstOut = (PKT_CLIGS_SET_NOTICE_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionNotice, sizeof(pstOut->aszFactionNotice)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SET_NOTICE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_NOTICE_FACTION_ACK *pstIn = (PKT_CLIGS_SET_NOTICE_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SET_NOTICE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_NOTICE_FACTION_ACK *pstOut = (PKT_CLIGS_SET_NOTICE_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DISSOLVE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISSOLVE_FACTION_REQ *pstIn = (PKT_CLIGS_DISSOLVE_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DISSOLVE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISSOLVE_FACTION_REQ *pstOut = (PKT_CLIGS_DISSOLVE_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DISSOLVE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISSOLVE_FACTION_ACK *pstIn = (PKT_CLIGS_DISSOLVE_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DISSOLVE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISSOLVE_FACTION_ACK *pstOut = (PKT_CLIGS_DISSOLVE_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_AUDIT_PLAYER_DATA(void *pHost, CNetData* poNetData)
{
	DT_FACTION_AUDIT_PLAYER_DATA *pstIn = (DT_FACTION_AUDIT_PLAYER_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAuditFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_AUDIT_PLAYER_DATA(void *pHost, CNetData* poNetData)
{
	DT_FACTION_AUDIT_PLAYER_DATA *pstOut = (DT_FACTION_AUDIT_PLAYER_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAuditFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AUDIT_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_FACTION_REQ *pstIn = (PKT_CLIGS_AUDIT_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwFactionNum)
			break;
		if(-1 == EncodeDT_FACTION_AUDIT_PLAYER_DATA(&pstIn->astAuditPlayerData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AUDIT_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_FACTION_REQ *pstOut = (PKT_CLIGS_AUDIT_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwFactionNum)
			break;
		if(-1 == DecodeDT_FACTION_AUDIT_PLAYER_DATA(&pstOut->astAuditPlayerData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AUDIT_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_FACTION_ACK *pstIn = (PKT_CLIGS_AUDIT_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AUDIT_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_FACTION_ACK *pstOut = (PKT_CLIGS_AUDIT_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_APPLY_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_APPLY_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_APPLY_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_APPLY_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_APPLY_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_APPLY_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_APPLY_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_APPLY_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_APPLY_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_BASE_DATA_CLI_LST(&pstIn->stApplyFactionBaseDataCliLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_APPLY_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_APPLY_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_APPLY_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_BASE_DATA_CLI_LST(&pstOut->stApplyFactionBaseDataCliLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RANK_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RANK_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_RANK_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RANK_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RANK_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_RANK_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RANK_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RANK_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_RANK_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_BASE_DATA_CLI_LST(&pstIn->stRankFactionBaseDataCliLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RANK_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RANK_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_RANK_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_BASE_DATA_CLI_LST(&pstOut->stRankFactionBaseDataCliLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AUDIT_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AUDIT_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_AUDIT_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AUDIT_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AUDIT_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_AUDIT_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AUDIT_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AUDIT_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_AUDIT_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_PLAYER_AUDIT_CLI_LST(&pstIn->stFactionPlayerAuditCliLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AUDIT_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AUDIT_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_AUDIT_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_PLAYER_AUDIT_CLI_LST(&pstOut->stFactionPlayerAuditCliLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_LOG_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LOG_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_LOG_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_LOG_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LOG_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_LOG_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_LOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_LOG_DATA_CLI *pstIn = (DT_FACTION_LOG_DATA_CLI*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszDispName1, sizeof(pstIn->aszDispName1)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName2, sizeof(pstIn->aszDispName2)))
		return -1;

	if(-1 == EncodeDT_FACTION_LOG_DATA(&pstIn->stFactionLogData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_LOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_LOG_DATA_CLI *pstOut = (DT_FACTION_LOG_DATA_CLI*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszDispName1, sizeof(pstOut->aszDispName1)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName2, sizeof(pstOut->aszDispName2)))
		return -1;

	if(-1 == DecodeDT_FACTION_LOG_DATA(&pstOut->stFactionLogData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_LOG_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_LOG_DATA_CLI_LST *pstIn = (DT_FACTION_LOG_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wFactionLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_LOG_NUM; i++)
	{
		if(i >= (INT32)pstIn->wFactionLogNum)
			break;
		if(-1 == EncodeDT_FACTION_LOG_DATA_CLI(&pstIn->astFactionLogDataCli[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_LOG_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_LOG_DATA_CLI_LST *pstOut = (DT_FACTION_LOG_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wFactionLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_LOG_NUM; i++)
	{
		if(i >= (INT32)pstOut->wFactionLogNum)
			break;
		if(-1 == DecodeDT_FACTION_LOG_DATA_CLI(&pstOut->astFactionLogDataCli[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_LOG_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LOG_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_LOG_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_LOG_DATA_CLI_LST(&pstIn->stFactionLogDataCliLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_LOG_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LOG_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_LOG_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_LOG_DATA_CLI_LST(&pstOut->stFactionLogDataCliLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GATHER_SCIENCE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GATHER_SCIENCE_DATA_CLI *pstIn = (DT_GATHER_SCIENCE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinScience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCoinMaxNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCoinNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoinValues))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGoldScience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldMaxNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoldValues))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIncrease))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INCREASE; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyIncrease[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GATHER_SCIENCE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GATHER_SCIENCE_DATA_CLI *pstOut = (DT_GATHER_SCIENCE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinScience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCoinMaxNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCoinNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoinValues))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGoldScience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldMaxNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoldValues))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIncrease))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INCREASE; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyIncrease[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GATHER_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GATHER_SCIENCE_REQ *pstIn = (PKT_CLIGS_OPEN_GATHER_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GATHER_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GATHER_SCIENCE_REQ *pstOut = (PKT_CLIGS_OPEN_GATHER_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GATHER_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GATHER_SCIENCE_ACK *pstIn = (PKT_CLIGS_OPEN_GATHER_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == EncodeDT_GATHER_SCIENCE_DATA_CLI(&pstIn->stGatherScience, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GATHER_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GATHER_SCIENCE_ACK *pstOut = (PKT_CLIGS_OPEN_GATHER_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == DecodeDT_GATHER_SCIENCE_DATA_CLI(&pstOut->stGatherScience, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GATHER_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GATHER_SCIENCE_REQ *pstIn = (PKT_CLIGS_GATHER_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGatherType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GATHER_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GATHER_SCIENCE_REQ *pstOut = (PKT_CLIGS_GATHER_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGatherType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GATHER_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GATHER_SCIENCE_ACK *pstIn = (PKT_CLIGS_GATHER_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == EncodeDT_GATHER_SCIENCE_DATA_CLI(&pstIn->stGatherScience, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GATHER_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GATHER_SCIENCE_ACK *pstOut = (PKT_CLIGS_GATHER_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == DecodeDT_GATHER_SCIENCE_DATA_CLI(&pstOut->stGatherScience, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_NOTICE_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_NOTICE_NTF *pstIn = (PKT_CLIGS_NOTICE_NTF*)pHost;

	if(-1 == EncodeDT_NOTICE_DATA(&pstIn->stNoticeInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_NOTICE_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_NOTICE_NTF *pstOut = (PKT_CLIGS_NOTICE_NTF*)pHost;

	if(-1 == DecodeDT_NOTICE_DATA(&pstOut->stNoticeInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACTIVITY_ENC_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVITY_ENC_NTF *pstIn = (PKT_CLIGS_ACTIVITY_ENC_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byEncNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACTIVITY_ENC_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVITY_ENC_NTF *pstOut = (PKT_CLIGS_ACTIVITY_ENC_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byEncNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_REQ2 *pstIn = (PKT_CLIGS_OPEN_AWAKEN_TAB_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_REQ2 *pstOut = (PKT_CLIGS_OPEN_AWAKEN_TAB_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_ACK2 *pstIn = (PKT_CLIGS_OPEN_AWAKEN_TAB_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_AWAKEN_TAB_DATA2(&pstIn->stAwakenInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_ACK2 *pstOut = (PKT_CLIGS_OPEN_AWAKEN_TAB_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_AWAKEN_TAB_DATA2(&pstOut->stAwakenInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AWAKEN_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_REQ2 *pstIn = (PKT_CLIGS_AWAKEN_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byQuickFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AWAKEN_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_REQ2 *pstOut = (PKT_CLIGS_AWAKEN_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byQuickFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_AWAKEN_GET_DATA2(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_GET_DATA2 *pstIn = (DT_AWAKEN_GET_DATA2*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwGetCoin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyBagIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAwakenLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGetStudyClip))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_AWAKEN_GET_DATA2(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_GET_DATA2 *pstOut = (DT_AWAKEN_GET_DATA2*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwGetCoin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyBagIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAwakenLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGetStudyClip))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AWAKEN_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_ACK2 *pstIn = (PKT_CLIGS_AWAKEN_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byQuickFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAwakenNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byAwakenNum)
			break;
		if(-1 == EncodeDT_AWAKEN_GET_DATA2(&pstIn->astAwakenGetInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_AWAKEN_TAB_DATA2(&pstIn->stAwakenTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AWAKEN_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_ACK2 *pstOut = (PKT_CLIGS_AWAKEN_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byQuickFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAwakenNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byAwakenNum)
			break;
		if(-1 == DecodeDT_AWAKEN_GET_DATA2(&pstOut->astAwakenGetInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_AWAKEN_TAB_DATA2(&pstOut->stAwakenTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2 *pstIn = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2 *pstOut = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_STUDY_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_HERO_STUDY_DATA_CLI2 *pstIn = (DT_HERO_STUDY_DATA_CLI2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->astStudyInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_STUDY_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_HERO_STUDY_DATA_CLI2 *pstOut = (DT_HERO_STUDY_DATA_CLI2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->astStudyInfo[i], poNetData))
				return -1;
		}

	return sizeof(*pstOut);
}

INT32 EncodeDT_DRESS_STUDY_TAB_DATA2(void *pHost, CNetData* poNetData)
{
	DT_DRESS_STUDY_TAB_DATA2 *pstIn = (DT_DRESS_STUDY_TAB_DATA2*)pHost;

	INT32 i;
	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
	{
		if(-1 == poNetData->AddWord(pstIn->awStudyUnlockLevelInfo[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_STUDY_DATA_CLI2(&pstIn->astHeroStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwStudyExp))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DRESS_STUDY_TAB_DATA2(void *pHost, CNetData* poNetData)
{
	DT_DRESS_STUDY_TAB_DATA2 *pstOut = (DT_DRESS_STUDY_TAB_DATA2*)pHost;

	INT32 i;
		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
	{
		if(-1 == poNetData->DelWord(pstOut->awStudyUnlockLevelInfo[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_STUDY_DATA_CLI2(&pstOut->astHeroStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelUint64(pstOut->qwStudyExp))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2 *pstIn = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_DRESS_STUDY_TAB_DATA2(&pstIn->stDressStudyTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2 *pstOut = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_DRESS_STUDY_TAB_DATA2(&pstOut->stDressStudyTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRESS_STUDY_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_REQ2 *pstIn = (PKT_CLIGS_DRESS_STUDY_REQ2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroGridIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRESS_STUDY_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_REQ2 *pstOut = (PKT_CLIGS_DRESS_STUDY_REQ2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroGridIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRESS_STUDY_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_ACK2 *pstIn = (PKT_CLIGS_DRESS_STUDY_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroGridIdx))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_HERO_STUDY_DATA_CLI2(&pstIn->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveSecondsUndress))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx2))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroGridIdx2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRESS_STUDY_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_ACK2 *pstOut = (PKT_CLIGS_DRESS_STUDY_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroGridIdx))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_HERO_STUDY_DATA_CLI2(&pstOut->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveSecondsUndress))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx2))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroGridIdx2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_TO_EXP_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_REQ2 *pstIn = (PKT_CLIGS_STUDY_TO_EXP_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAllFlag))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abySelectConvertColor[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_TO_EXP_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_REQ2 *pstOut = (PKT_CLIGS_STUDY_TO_EXP_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAllFlag))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abySelectConvertColor[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_TO_EXP_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_ACK2 *pstIn = (PKT_CLIGS_STUDY_TO_EXP_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abySelectConvertColor[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAllFlag))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGenStudyExp))
		return -1;

	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwCurStudyExp))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_TO_EXP_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_ACK2 *pstOut = (PKT_CLIGS_STUDY_TO_EXP_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abySelectConvertColor[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAllFlag))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGenStudyExp))
		return -1;

		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelUint64(pstOut->qwCurStudyExp))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_UPGRADE_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_REQ2 *pstIn = (PKT_CLIGS_STUDY_UPGRADE_REQ2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_UPGRADE_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_REQ2 *pstOut = (PKT_CLIGS_STUDY_UPGRADE_REQ2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_UPGRADE_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_ACK2 *pstIn = (PKT_CLIGS_STUDY_UPGRADE_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevel))
		return -1;

	if(-1 == EncodeDT_HERO_STUDY_DATA_CLI2(&pstIn->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStudyExp))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_UPGRADE_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_ACK2 *pstOut = (PKT_CLIGS_STUDY_UPGRADE_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevel))
		return -1;

	if(-1 == DecodeDT_HERO_STUDY_DATA_CLI2(&pstOut->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStudyExp))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BEGBLUE_PLAYER_RES_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_PLAYER_RES_CLI *pstIn = (DT_BEGBLUE_PLAYER_RES_CLI*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwBlue))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStory))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BEGBLUE_PLAYER_RES_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_PLAYER_RES_CLI *pstOut = (DT_BEGBLUE_PLAYER_RES_CLI*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwBlue))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStory))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BEGBLUE_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_INFO_CLI *pstIn = (DT_BEGBLUE_INFO_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwMaxBegTimes))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLeftBegTimes))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BEGBLUE_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_INFO_CLI *pstOut = (DT_BEGBLUE_INFO_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwMaxBegTimes))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLeftBegTimes))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_IMPROVELUCK_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_IMPROVELUCK_INFO_CLI *pstIn = (DT_IMPROVELUCK_INFO_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFreeImproveLuckMaxTimes))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLeftFreeImproveLuckTimes))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoldImproveLuckIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextImproveLuckGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_IMPROVELUCK_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_IMPROVELUCK_INFO_CLI *pstOut = (DT_IMPROVELUCK_INFO_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFreeImproveLuckMaxTimes))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLeftFreeImproveLuckTimes))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoldImproveLuckIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextImproveLuckGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BEGBLUE_RES_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_RES_DATA_CLI *pstIn = (DT_BEGBLUE_RES_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSmileNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBlueUnit))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStoryUnit))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wXnMultiple))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszLuckPrompt, sizeof(pstIn->aszLuckPrompt)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BEGBLUE_RES_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_RES_DATA_CLI *pstOut = (DT_BEGBLUE_RES_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSmileNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBlueUnit))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStoryUnit))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wXnMultiple))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszLuckPrompt, sizeof(pstOut->aszLuckPrompt)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BEGBLUE_RESULT_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_RESULT_CLI *pstIn = (DT_BEGBLUE_RESULT_CLI*)pHost;

	if(-1 == EncodeDT_BEGBLUE_INFO_CLI(&pstIn->stBegBlueInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_IMPROVELUCK_INFO_CLI(&pstIn->stImproveLuckInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BEGBLUE_RES_DATA_CLI(&pstIn->stBegBlueResCli, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BEGBLUE_RESULT_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_RESULT_CLI *pstOut = (DT_BEGBLUE_RESULT_CLI*)pHost;

	if(-1 == DecodeDT_BEGBLUE_INFO_CLI(&pstOut->stBegBlueInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_IMPROVELUCK_INFO_CLI(&pstOut->stImproveLuckInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BEGBLUE_RES_DATA_CLI(&pstOut->stBegBlueResCli, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeUnDT_BLUE_PAVILION_UNION_DATA_CLI(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case FOR_NEW_BEGBLUE:
		return EncodeDT_BEGBLUE_INFO_CLI(pHost, poNetData);
	case FOR_TO_COMFIRM_BEGBLUE:
		return EncodeDT_BEGBLUE_RESULT_CLI(pHost, poNetData);
	default: return -1;
	}
}

INT32 DecodeUnDT_BLUE_PAVILION_UNION_DATA_CLI(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case FOR_NEW_BEGBLUE:
		return DecodeDT_BEGBLUE_INFO_CLI(pHost, poNetData);
	case FOR_TO_COMFIRM_BEGBLUE:
		return DecodeDT_BEGBLUE_RESULT_CLI(pHost, poNetData);
	default: return -1;
	}
}

INT32 EncodeDT_BLUE_PAVILION_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BLUE_PAVILION_DATA_CLI *pstIn = (DT_BLUE_PAVILION_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBluePavilionType))
		return -1;

	if(-1 == EncodeUnDT_BLUE_PAVILION_UNION_DATA_CLI(&pstIn->stBluePavilionUnion, pstIn->byBluePavilionType, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszClimbTowerPrompt, sizeof(pstIn->aszClimbTowerPrompt)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BLUE_PAVILION_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BLUE_PAVILION_DATA_CLI *pstOut = (DT_BLUE_PAVILION_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBluePavilionType))
		return -1;

	if(-1 == DecodeUnDT_BLUE_PAVILION_UNION_DATA_CLI(&pstOut->stBluePavilionUnion, pstOut->byBluePavilionType, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszClimbTowerPrompt, sizeof(pstOut->aszClimbTowerPrompt)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BLUE_PAVILION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BLUE_PAVILION_REQ *pstIn = (PKT_CLIGS_OPEN_BLUE_PAVILION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BLUE_PAVILION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BLUE_PAVILION_REQ *pstOut = (PKT_CLIGS_OPEN_BLUE_PAVILION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BLUE_PAVILION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BLUE_PAVILION_ACK *pstIn = (PKT_CLIGS_OPEN_BLUE_PAVILION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BEGBLUE_PLAYER_RES_CLI(&pstIn->stPlayerResInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BLUE_PAVILION_DATA_CLI(&pstIn->stBluePavilion, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BLUE_PAVILION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BLUE_PAVILION_ACK *pstOut = (PKT_CLIGS_OPEN_BLUE_PAVILION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BEGBLUE_PLAYER_RES_CLI(&pstOut->stPlayerResInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BLUE_PAVILION_DATA_CLI(&pstOut->stBluePavilion, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BEGBLUE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGBLUE_REQ *pstIn = (PKT_CLIGS_BEGBLUE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BEGBLUE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGBLUE_REQ *pstOut = (PKT_CLIGS_BEGBLUE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BEGBLUE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGBLUE_ACK *pstIn = (PKT_CLIGS_BEGBLUE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BEGBLUE_RESULT_CLI(&pstIn->stBegBlueResult, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BEGBLUE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGBLUE_ACK *pstOut = (PKT_CLIGS_BEGBLUE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BEGBLUE_RESULT_CLI(&pstOut->stBegBlueResult, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_IMPROVELUCK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_IMPROVELUCK_REQ *pstIn = (PKT_CLIGS_IMPROVELUCK_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_IMPROVELUCK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_IMPROVELUCK_REQ *pstOut = (PKT_CLIGS_IMPROVELUCK_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_IMPROVELUCK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_IMPROVELUCK_ACK *pstIn = (PKT_CLIGS_IMPROVELUCK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == EncodeDT_BEGBLUE_RES_DATA_CLI(&pstIn->stBegBlueResCli, poNetData))
		return -1;

	if(-1 == EncodeDT_IMPROVELUCK_INFO_CLI(&pstIn->stImproveLuckInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_IMPROVELUCK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_IMPROVELUCK_ACK *pstOut = (PKT_CLIGS_IMPROVELUCK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == DecodeDT_BEGBLUE_RES_DATA_CLI(&pstOut->stBegBlueResCli, poNetData))
		return -1;

	if(-1 == DecodeDT_IMPROVELUCK_INFO_CLI(&pstOut->stImproveLuckInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COMFIRM_BEGBLUE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMFIRM_BEGBLUE_REQ *pstIn = (PKT_CLIGS_COMFIRM_BEGBLUE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COMFIRM_BEGBLUE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMFIRM_BEGBLUE_REQ *pstOut = (PKT_CLIGS_COMFIRM_BEGBLUE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COMFIRM_BEGBLUE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMFIRM_BEGBLUE_ACK *pstIn = (PKT_CLIGS_COMFIRM_BEGBLUE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BEGBLUE_PLAYER_RES_CLI(&pstIn->stPlayerResInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BEGBLUE_INFO_CLI(&pstIn->stBegBlueInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COMFIRM_BEGBLUE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMFIRM_BEGBLUE_ACK *pstOut = (PKT_CLIGS_COMFIRM_BEGBLUE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BEGBLUE_PLAYER_RES_CLI(&pstOut->stPlayerResInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BEGBLUE_INFO_CLI(&pstOut->stBegBlueInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

