#include "protocligs.h"
CProtoCliGS::CProtoCliGS()
{
    m_vecMsgList.clear() ;
	memset(m_EncodeFuncArray, 0, sizeof(m_EncodeFuncArray));
	memset(m_DecodeFuncArray, 0, sizeof(m_DecodeFuncArray));
	m_iMaxPkgSize = 0;
	Init();
}

CProtoCliGS * CProtoCliGS::Instance()
{
   static CProtoCliGS oInst;
   return &oInst;
}

CProtoCliGS::~CProtoCliGS()
{
}

INT32 CProtoCliGS::Encode(INT32 iMsgID, void *pHost, CHAR *pNet, INT32 iNetSize)
{
	m_oData.Prepare(pNet, iNetSize, 1, 3, 1);

	EnFuncCProtoCliGS pfnEncode = FindEncodeFunc(iMsgID);
	if(NULL == pfnEncode)
		return -1;

	return (*pfnEncode)(pHost, &m_oData);
}

INT32 CProtoCliGS::Decode(INT32 iMsgID, CHAR *pNet,INT32 iNetSize, void *pHost, INT32 iHostSize)
{
	m_oData.Prepare(pNet, iNetSize, 1, 3, 1);
	if(iHostSize < m_iMaxPkgSize)
		return -1;

	DeFuncCProtoCliGS pfnDecode = FindDecodeFunc(iMsgID);
	if(NULL == pfnDecode)
		return -1;

	return (*pfnDecode)(pHost, &m_oData);
}

EnFuncCProtoCliGS CProtoCliGS::FindEncodeFunc(INT32 iMsgID)
{
	if(iMsgID - PROTOCLIGS_MSGID_OFFSET >= PROTOCLIGS_MSGID_RANGE)
		return NULL;
	return m_EncodeFuncArray[iMsgID - PROTOCLIGS_MSGID_OFFSET];
}

DeFuncCProtoCliGS CProtoCliGS::FindDecodeFunc(INT32 iMsgID)
{
	if(iMsgID - PROTOCLIGS_MSGID_OFFSET >= PROTOCLIGS_MSGID_RANGE)
		return NULL;
	return m_DecodeFuncArray[iMsgID - PROTOCLIGS_MSGID_OFFSET];
}

BOOL CProtoCliGS::Init()
{
	memset(m_EncodeFuncArray, 0, sizeof(m_EncodeFuncArray));
	memset(m_DecodeFuncArray, 0, sizeof(m_DecodeFuncArray));

	m_EncodeFuncArray[CLIGS_ENTERGS_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ENTERGS_REQ;
	m_DecodeFuncArray[CLIGS_ENTERGS_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ENTERGS_REQ;
	m_vecMsgList.push_back(CLIGS_ENTERGS_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ENTERGS_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ENTERGS_REQ);

	m_EncodeFuncArray[CLIGS_ENTERGS_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ENTERGS_ACK;
	m_DecodeFuncArray[CLIGS_ENTERGS_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ENTERGS_ACK;
	m_vecMsgList.push_back(CLIGS_ENTERGS_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ENTERGS_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ENTERGS_ACK);

	m_EncodeFuncArray[CLIGS_GET_HERO_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_HERO_INFO_REQ;
	m_DecodeFuncArray[CLIGS_GET_HERO_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_HERO_INFO_REQ;
	m_vecMsgList.push_back(CLIGS_GET_HERO_INFO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_HERO_INFO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_HERO_INFO_REQ);

	m_EncodeFuncArray[CLIGS_GET_HERO_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_HERO_INFO_ACK;
	m_DecodeFuncArray[CLIGS_GET_HERO_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_HERO_INFO_ACK;
	m_vecMsgList.push_back(CLIGS_GET_HERO_INFO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_HERO_INFO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_HERO_INFO_ACK);

	m_EncodeFuncArray[CLIGS_ENTER_HOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ENTER_HOME_REQ;
	m_DecodeFuncArray[CLIGS_ENTER_HOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ENTER_HOME_REQ;
	m_vecMsgList.push_back(CLIGS_ENTER_HOME_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ENTER_HOME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ENTER_HOME_REQ);

	m_EncodeFuncArray[CLIGS_ENTER_HOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ENTER_HOME_ACK;
	m_DecodeFuncArray[CLIGS_ENTER_HOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ENTER_HOME_ACK;
	m_vecMsgList.push_back(CLIGS_ENTER_HOME_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ENTER_HOME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ENTER_HOME_ACK);

	m_EncodeFuncArray[CLIGS_ENTER_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ENTER_INSTANCE_REQ;
	m_DecodeFuncArray[CLIGS_ENTER_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ENTER_INSTANCE_REQ;
	m_vecMsgList.push_back(CLIGS_ENTER_INSTANCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ENTER_INSTANCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ENTER_INSTANCE_REQ);

	m_EncodeFuncArray[CLIGS_ENTER_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ENTER_INSTANCE_ACK;
	m_DecodeFuncArray[CLIGS_ENTER_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ENTER_INSTANCE_ACK;
	m_vecMsgList.push_back(CLIGS_ENTER_INSTANCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ENTER_INSTANCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ENTER_INSTANCE_ACK);

	m_EncodeFuncArray[CLIGS_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BATTLE_REQ;
	m_DecodeFuncArray[CLIGS_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_BATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BATTLE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK);

	m_EncodeFuncArray[CLIGS_EXIT_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXIT_INSTANCE_REQ;
	m_DecodeFuncArray[CLIGS_EXIT_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXIT_INSTANCE_REQ;
	m_vecMsgList.push_back(CLIGS_EXIT_INSTANCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EXIT_INSTANCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXIT_INSTANCE_REQ);

	m_EncodeFuncArray[CLIGS_EXIT_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXIT_INSTANCE_ACK;
	m_DecodeFuncArray[CLIGS_EXIT_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXIT_INSTANCE_ACK;
	m_vecMsgList.push_back(CLIGS_EXIT_INSTANCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EXIT_INSTANCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXIT_INSTANCE_ACK);

	m_EncodeFuncArray[CLIGS_GET_SCENE_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_SCENE_INSTANCE_REQ;
	m_DecodeFuncArray[CLIGS_GET_SCENE_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_SCENE_INSTANCE_REQ;
	m_vecMsgList.push_back(CLIGS_GET_SCENE_INSTANCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_SCENE_INSTANCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_SCENE_INSTANCE_REQ);

	m_EncodeFuncArray[CLIGS_GET_SCENE_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_SCENE_INSTANCE_ACK;
	m_DecodeFuncArray[CLIGS_GET_SCENE_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_SCENE_INSTANCE_ACK;
	m_vecMsgList.push_back(CLIGS_GET_SCENE_INSTANCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_SCENE_INSTANCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_SCENE_INSTANCE_ACK);

	m_EncodeFuncArray[CLIGS_EQUIP_STRENGTHEN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_STRENGTHEN_REQ;
	m_DecodeFuncArray[CLIGS_EQUIP_STRENGTHEN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_STRENGTHEN_REQ;
	m_vecMsgList.push_back(CLIGS_EQUIP_STRENGTHEN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_STRENGTHEN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_STRENGTHEN_REQ);

	m_EncodeFuncArray[CLIGS_EQUIP_STRENGTHEN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_STRENGTHEN_ACK;
	m_DecodeFuncArray[CLIGS_EQUIP_STRENGTHEN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_STRENGTHEN_ACK;
	m_vecMsgList.push_back(CLIGS_EQUIP_STRENGTHEN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_STRENGTHEN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_STRENGTHEN_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_SMITHY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SMITHY_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_SMITHY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SMITHY_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_SMITHY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SMITHY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SMITHY_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_SMITHY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SMITHY_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_SMITHY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SMITHY_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_SMITHY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SMITHY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SMITHY_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_RECRUIT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RECRUIT_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_RECRUIT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RECRUIT_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_RECRUIT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RECRUIT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RECRUIT_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_RECRUIT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RECRUIT_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_RECRUIT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RECRUIT_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_RECRUIT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RECRUIT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RECRUIT_ACK);

	m_EncodeFuncArray[CLIGS_RECRUIT_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECRUIT_HERO_REQ;
	m_DecodeFuncArray[CLIGS_RECRUIT_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECRUIT_HERO_REQ;
	m_vecMsgList.push_back(CLIGS_RECRUIT_HERO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECRUIT_HERO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECRUIT_HERO_REQ);

	m_EncodeFuncArray[CLIGS_RECRUIT_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECRUIT_HERO_ACK;
	m_DecodeFuncArray[CLIGS_RECRUIT_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECRUIT_HERO_ACK;
	m_vecMsgList.push_back(CLIGS_RECRUIT_HERO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECRUIT_HERO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECRUIT_HERO_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_BAG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BAG_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_BAG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BAG_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_BAG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BAG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BAG_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_BAG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BAG_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_BAG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BAG_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_BAG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BAG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BAG_ACK);

	m_EncodeFuncArray[CLIGS_RECV_TASK_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_TASK_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_TASK_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_TASK_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_TASK_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_TASK_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_TASK_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_TASK_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_TASK_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_TASK_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_TASK_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_TASK_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_TASK_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_TASK_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_RACE_BUILD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RACE_BUILD_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_RACE_BUILD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RACE_BUILD_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_RACE_BUILD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RACE_BUILD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RACE_BUILD_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_RACE_BUILD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RACE_BUILD_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_RACE_BUILD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RACE_BUILD_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_RACE_BUILD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RACE_BUILD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RACE_BUILD_ACK);

	m_EncodeFuncArray[CLIGS_CHALLENGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHALLENGE_REQ;
	m_DecodeFuncArray[CLIGS_CHALLENGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHALLENGE_REQ;
	m_vecMsgList.push_back(CLIGS_CHALLENGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CHALLENGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHALLENGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_RANK_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_RANK_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_RANK_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_RANK_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_RANK_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_RANK_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_RANK_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_RANK_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_RANK_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_RANK_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_RANK_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_RANK_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_RANK_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_RANK_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_SHOP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SHOP_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_SHOP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SHOP_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_SHOP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SHOP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SHOP_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_SHOP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SHOP_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_SHOP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SHOP_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_SHOP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SHOP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SHOP_ACK);

	m_EncodeFuncArray[CLIGS_BUY_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_ITEM_REQ;
	m_DecodeFuncArray[CLIGS_BUY_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_ITEM_REQ;
	m_vecMsgList.push_back(CLIGS_BUY_ITEM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BUY_ITEM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_ITEM_REQ);

	m_EncodeFuncArray[CLIGS_BUY_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_ITEM_ACK;
	m_DecodeFuncArray[CLIGS_BUY_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_ITEM_ACK;
	m_vecMsgList.push_back(CLIGS_BUY_ITEM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BUY_ITEM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_ITEM_ACK);

	m_EncodeFuncArray[CLIGS_SELL_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SELL_ITEM_REQ;
	m_DecodeFuncArray[CLIGS_SELL_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SELL_ITEM_REQ;
	m_vecMsgList.push_back(CLIGS_SELL_ITEM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SELL_ITEM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SELL_ITEM_REQ);

	m_EncodeFuncArray[CLIGS_SELL_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SELL_ITEM_ACK;
	m_DecodeFuncArray[CLIGS_SELL_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SELL_ITEM_ACK;
	m_vecMsgList.push_back(CLIGS_SELL_ITEM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SELL_ITEM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SELL_ITEM_ACK);

	m_EncodeFuncArray[CLIGS_DISBAND_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DISBAND_HERO_REQ;
	m_DecodeFuncArray[CLIGS_DISBAND_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DISBAND_HERO_REQ;
	m_vecMsgList.push_back(CLIGS_DISBAND_HERO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DISBAND_HERO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DISBAND_HERO_REQ);

	m_EncodeFuncArray[CLIGS_DISBAND_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DISBAND_HERO_ACK;
	m_DecodeFuncArray[CLIGS_DISBAND_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DISBAND_HERO_ACK;
	m_vecMsgList.push_back(CLIGS_DISBAND_HERO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DISBAND_HERO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DISBAND_HERO_ACK);

	m_EncodeFuncArray[CLIGS_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_REQ;
	m_DecodeFuncArray[CLIGS_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_REQ;
	m_vecMsgList.push_back(CLIGS_EQUIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_REQ);

	m_EncodeFuncArray[CLIGS_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_ACK;
	m_DecodeFuncArray[CLIGS_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_ACK;
	m_vecMsgList.push_back(CLIGS_EQUIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_ACK);

	m_EncodeFuncArray[CLIGS_REGISTER_USERNAME_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REGISTER_USERNAME_NTF;
	m_DecodeFuncArray[CLIGS_REGISTER_USERNAME_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REGISTER_USERNAME_NTF;
	m_vecMsgList.push_back(CLIGS_REGISTER_USERNAME_NTF);
	if( (INT32)sizeof(PKT_CLIGS_REGISTER_USERNAME_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REGISTER_USERNAME_NTF);

	m_EncodeFuncArray[CLIGS_EMBATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EMBATTLE_REQ;
	m_DecodeFuncArray[CLIGS_EMBATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EMBATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_EMBATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EMBATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EMBATTLE_REQ);

	m_EncodeFuncArray[CLIGS_EMBATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EMBATTLE_ACK;
	m_DecodeFuncArray[CLIGS_EMBATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EMBATTLE_ACK;
	m_vecMsgList.push_back(CLIGS_EMBATTLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EMBATTLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EMBATTLE_ACK);

	m_EncodeFuncArray[CLIGS_CLR_PLAYER_DATA_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_PLAYER_DATA_REQ;
	m_DecodeFuncArray[CLIGS_CLR_PLAYER_DATA_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_PLAYER_DATA_REQ;
	m_vecMsgList.push_back(CLIGS_CLR_PLAYER_DATA_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLR_PLAYER_DATA_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_PLAYER_DATA_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_EMBATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EMBATTLE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_EMBATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EMBATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_EMBATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EMBATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EMBATTLE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_EMBATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EMBATTLE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_EMBATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EMBATTLE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_EMBATTLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EMBATTLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EMBATTLE_ACK);

	m_EncodeFuncArray[CLIGS_MAKE_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MAKE_ITEM_REQ;
	m_DecodeFuncArray[CLIGS_MAKE_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MAKE_ITEM_REQ;
	m_vecMsgList.push_back(CLIGS_MAKE_ITEM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_MAKE_ITEM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MAKE_ITEM_REQ);

	m_EncodeFuncArray[CLIGS_MAKE_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MAKE_ITEM_ACK;
	m_DecodeFuncArray[CLIGS_MAKE_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MAKE_ITEM_ACK;
	m_vecMsgList.push_back(CLIGS_MAKE_ITEM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_MAKE_ITEM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MAKE_ITEM_ACK);

	m_EncodeFuncArray[CLIGS_ONHOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ONHOOK_REQ;
	m_DecodeFuncArray[CLIGS_ONHOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ONHOOK_REQ;
	m_vecMsgList.push_back(CLIGS_ONHOOK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ONHOOK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ONHOOK_REQ);

	m_EncodeFuncArray[CLIGS_ONHOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ONHOOK_ACK;
	m_DecodeFuncArray[CLIGS_ONHOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ONHOOK_ACK;
	m_vecMsgList.push_back(CLIGS_ONHOOK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ONHOOK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ONHOOK_ACK);

	m_EncodeFuncArray[CLIGS_RECV_ONLINE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_ONLINE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_ONLINE_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_ONLINE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_ONLINE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_ONLINE_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_INCREASE_BAG_SIZE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_INCREASE_BAG_SIZE_REQ;
	m_DecodeFuncArray[CLIGS_INCREASE_BAG_SIZE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_INCREASE_BAG_SIZE_REQ;
	m_vecMsgList.push_back(CLIGS_INCREASE_BAG_SIZE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_INCREASE_BAG_SIZE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_INCREASE_BAG_SIZE_REQ);

	m_EncodeFuncArray[CLIGS_INCREASE_BAG_SIZE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_INCREASE_BAG_SIZE_ACK;
	m_DecodeFuncArray[CLIGS_INCREASE_BAG_SIZE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_INCREASE_BAG_SIZE_ACK;
	m_vecMsgList.push_back(CLIGS_INCREASE_BAG_SIZE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_INCREASE_BAG_SIZE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_INCREASE_BAG_SIZE_ACK);

	m_EncodeFuncArray[CLIGS_CLR_CHALLENGE_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_CHALLENGE_CD_REQ;
	m_DecodeFuncArray[CLIGS_CLR_CHALLENGE_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_CHALLENGE_CD_REQ;
	m_vecMsgList.push_back(CLIGS_CLR_CHALLENGE_CD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLR_CHALLENGE_CD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_CHALLENGE_CD_REQ);

	m_EncodeFuncArray[CLIGS_CLR_CHALLENGE_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_CHALLENGE_CD_ACK;
	m_DecodeFuncArray[CLIGS_CLR_CHALLENGE_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_CHALLENGE_CD_ACK;
	m_vecMsgList.push_back(CLIGS_CLR_CHALLENGE_CD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLR_CHALLENGE_CD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_CHALLENGE_CD_ACK);

	m_EncodeFuncArray[CLIGS_SYNC_TIME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SYNC_TIME_REQ;
	m_DecodeFuncArray[CLIGS_SYNC_TIME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SYNC_TIME_REQ;
	m_vecMsgList.push_back(CLIGS_SYNC_TIME_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SYNC_TIME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SYNC_TIME_REQ);

	m_EncodeFuncArray[CLIGS_SYNC_TIME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SYNC_TIME_ACK;
	m_DecodeFuncArray[CLIGS_SYNC_TIME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SYNC_TIME_ACK;
	m_vecMsgList.push_back(CLIGS_SYNC_TIME_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SYNC_TIME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SYNC_TIME_ACK);

	m_EncodeFuncArray[CLILS_REGISTER_DSPNAME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_REGISTER_DSPNAME_REQ;
	m_DecodeFuncArray[CLILS_REGISTER_DSPNAME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_REGISTER_DSPNAME_REQ;
	m_vecMsgList.push_back(CLILS_REGISTER_DSPNAME_REQ);
	if( (INT32)sizeof(PKT_CLILS_REGISTER_DSPNAME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_REGISTER_DSPNAME_REQ);

	m_EncodeFuncArray[CLILS_REGISTER_DSPNAME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_REGISTER_DSPNAME_ACK;
	m_DecodeFuncArray[CLILS_REGISTER_DSPNAME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_REGISTER_DSPNAME_ACK;
	m_vecMsgList.push_back(CLILS_REGISTER_DSPNAME_ACK);
	if( (INT32)sizeof(PKT_CLILS_REGISTER_DSPNAME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_REGISTER_DSPNAME_ACK);

	m_EncodeFuncArray[CLILS_USE_GOODS_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_USE_GOODS_REQ;
	m_DecodeFuncArray[CLILS_USE_GOODS_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_USE_GOODS_REQ;
	m_vecMsgList.push_back(CLILS_USE_GOODS_REQ);
	if( (INT32)sizeof(PKT_CLILS_USE_GOODS_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_USE_GOODS_REQ);

	m_EncodeFuncArray[CLILS_USE_GOODS_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_USE_GOODS_ACK;
	m_DecodeFuncArray[CLILS_USE_GOODS_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_USE_GOODS_ACK;
	m_vecMsgList.push_back(CLILS_USE_GOODS_ACK);
	if( (INT32)sizeof(PKT_CLILS_USE_GOODS_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_USE_GOODS_ACK);

	m_EncodeFuncArray[CLILS_OPEN_LOGIN_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLILS_OPEN_LOGIN_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLILS_OPEN_LOGIN_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLILS_OPEN_LOGIN_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLILS_OPEN_LOGIN_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLILS_OPEN_LOGIN_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ;
	m_DecodeFuncArray[CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ;
	m_vecMsgList.push_back(CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ);
	if( (INT32)sizeof(PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ);

	m_EncodeFuncArray[CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK;
	m_DecodeFuncArray[CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK;
	m_vecMsgList.push_back(CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK);
	if( (INT32)sizeof(PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK);

	m_EncodeFuncArray[CLILS_RATE_LOGIN_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLILS_RATE_LOGIN_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLILS_RATE_LOGIN_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLILS_RATE_LOGIN_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLILS_RATE_LOGIN_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLILS_RATE_LOGIN_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_GET_RANK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_RANK_REQ;
	m_DecodeFuncArray[CLIGS_GET_RANK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_RANK_REQ;
	m_vecMsgList.push_back(CLIGS_GET_RANK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_RANK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_RANK_REQ);

	m_EncodeFuncArray[CLIGS_GET_RANK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_RANK_ACK;
	m_DecodeFuncArray[CLIGS_GET_RANK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_RANK_ACK;
	m_vecMsgList.push_back(CLIGS_GET_RANK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_RANK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_RANK_ACK);

	m_EncodeFuncArray[CLIGS_GET_RACE_BATTLELOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_RACE_BATTLELOG_REQ;
	m_DecodeFuncArray[CLIGS_GET_RACE_BATTLELOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_RACE_BATTLELOG_REQ;
	m_vecMsgList.push_back(CLIGS_GET_RACE_BATTLELOG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_RACE_BATTLELOG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_RACE_BATTLELOG_REQ);

	m_EncodeFuncArray[CLIGS_GET_RACE_BATTLELOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_RACE_BATTLELOG_ACK;
	m_DecodeFuncArray[CLIGS_GET_RACE_BATTLELOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_RACE_BATTLELOG_ACK;
	m_vecMsgList.push_back(CLIGS_GET_RACE_BATTLELOG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_RACE_BATTLELOG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_RACE_BATTLELOG_ACK);

	m_EncodeFuncArray[CLIGS_ACCEPT_TASK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACCEPT_TASK_REQ;
	m_DecodeFuncArray[CLIGS_ACCEPT_TASK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACCEPT_TASK_REQ;
	m_vecMsgList.push_back(CLIGS_ACCEPT_TASK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ACCEPT_TASK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACCEPT_TASK_REQ);

	m_EncodeFuncArray[CLIGS_ACCEPT_TASK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACCEPT_TASK_ACK;
	m_DecodeFuncArray[CLIGS_ACCEPT_TASK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACCEPT_TASK_ACK;
	m_vecMsgList.push_back(CLIGS_ACCEPT_TASK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ACCEPT_TASK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACCEPT_TASK_ACK);

	m_EncodeFuncArray[CLIGS_GIVEUP_TASK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GIVEUP_TASK_REQ;
	m_DecodeFuncArray[CLIGS_GIVEUP_TASK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GIVEUP_TASK_REQ;
	m_vecMsgList.push_back(CLIGS_GIVEUP_TASK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GIVEUP_TASK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GIVEUP_TASK_REQ);

	m_EncodeFuncArray[CLIGS_GIVEUP_TASK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GIVEUP_TASK_ACK;
	m_DecodeFuncArray[CLIGS_GIVEUP_TASK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GIVEUP_TASK_ACK;
	m_vecMsgList.push_back(CLIGS_GIVEUP_TASK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GIVEUP_TASK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GIVEUP_TASK_ACK);

	m_EncodeFuncArray[CLIGS_PLUNDER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLUNDER_REQ;
	m_DecodeFuncArray[CLIGS_PLUNDER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLUNDER_REQ;
	m_vecMsgList.push_back(CLIGS_PLUNDER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PLUNDER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLUNDER_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_CAPTURE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CAPTURE_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_CAPTURE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CAPTURE_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_CAPTURE_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CAPTURE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CAPTURE_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_CAPTURE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CAPTURE_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_CAPTURE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CAPTURE_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_CAPTURE_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CAPTURE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CAPTURE_TAB_ACK);

	m_EncodeFuncArray[CLIGS_COLLECT_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COLLECT_INCOME_REQ;
	m_DecodeFuncArray[CLIGS_COLLECT_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COLLECT_INCOME_REQ;
	m_vecMsgList.push_back(CLIGS_COLLECT_INCOME_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COLLECT_INCOME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COLLECT_INCOME_REQ);

	m_EncodeFuncArray[CLIGS_COLLECT_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COLLECT_INCOME_ACK;
	m_DecodeFuncArray[CLIGS_COLLECT_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COLLECT_INCOME_ACK;
	m_vecMsgList.push_back(CLIGS_COLLECT_INCOME_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COLLECT_INCOME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COLLECT_INCOME_ACK);

	m_EncodeFuncArray[CLIGS_BLEED_CAPTURE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BLEED_CAPTURE_REQ;
	m_DecodeFuncArray[CLIGS_BLEED_CAPTURE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BLEED_CAPTURE_REQ;
	m_vecMsgList.push_back(CLIGS_BLEED_CAPTURE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BLEED_CAPTURE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BLEED_CAPTURE_REQ);

	m_EncodeFuncArray[CLIGS_BLEED_CAPTURE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BLEED_CAPTURE_ACK;
	m_DecodeFuncArray[CLIGS_BLEED_CAPTURE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BLEED_CAPTURE_ACK;
	m_vecMsgList.push_back(CLIGS_BLEED_CAPTURE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BLEED_CAPTURE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BLEED_CAPTURE_ACK);

	m_EncodeFuncArray[CLIGS_DEL_ENEMY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DEL_ENEMY_REQ;
	m_DecodeFuncArray[CLIGS_DEL_ENEMY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DEL_ENEMY_REQ;
	m_vecMsgList.push_back(CLIGS_DEL_ENEMY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DEL_ENEMY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DEL_ENEMY_REQ);

	m_EncodeFuncArray[CLIGS_DEL_ENEMY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DEL_ENEMY_ACK;
	m_DecodeFuncArray[CLIGS_DEL_ENEMY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DEL_ENEMY_ACK;
	m_vecMsgList.push_back(CLIGS_DEL_ENEMY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DEL_ENEMY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DEL_ENEMY_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_ENEMY_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_ENEMY_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_ENEMY_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_ENEMY_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_ENEMY_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_ENEMY_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_ENEMY_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_ENEMY_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_ENEMY_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_ENEMY_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_ENEMY_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_ENEMY_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_ENEMY_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_ENEMY_TAB_ACK);

	m_EncodeFuncArray[CLIGS_PLUNDER_BATTLELOG_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLUNDER_BATTLELOG_NTF;
	m_DecodeFuncArray[CLIGS_PLUNDER_BATTLELOG_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLUNDER_BATTLELOG_NTF;
	m_vecMsgList.push_back(CLIGS_PLUNDER_BATTLELOG_NTF);
	if( (INT32)sizeof(PKT_CLIGS_PLUNDER_BATTLELOG_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLUNDER_BATTLELOG_NTF);

	m_EncodeFuncArray[CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK);

	m_EncodeFuncArray[CLIGS_FREE_CAPTURE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FREE_CAPTURE_REQ;
	m_DecodeFuncArray[CLIGS_FREE_CAPTURE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FREE_CAPTURE_REQ;
	m_vecMsgList.push_back(CLIGS_FREE_CAPTURE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_FREE_CAPTURE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FREE_CAPTURE_REQ);

	m_EncodeFuncArray[CLIGS_FREE_CAPTURE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FREE_CAPTURE_ACK;
	m_DecodeFuncArray[CLIGS_FREE_CAPTURE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FREE_CAPTURE_ACK;
	m_vecMsgList.push_back(CLIGS_FREE_CAPTURE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_FREE_CAPTURE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FREE_CAPTURE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_MONEY_TREE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_MONEY_TREE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_MONEY_TREE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_MONEY_TREE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_MONEY_TREE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_MONEY_TREE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_MONEY_TREE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_MONEY_TREE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_MONEY_TREE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_MONEY_TREE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_MONEY_TREE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_MONEY_TREE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_MONEY_TREE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_MONEY_TREE_ACK);

	m_EncodeFuncArray[CLIGS_ROCK_MONEY_TREE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ROCK_MONEY_TREE_REQ;
	m_DecodeFuncArray[CLIGS_ROCK_MONEY_TREE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ROCK_MONEY_TREE_REQ;
	m_vecMsgList.push_back(CLIGS_ROCK_MONEY_TREE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ROCK_MONEY_TREE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ROCK_MONEY_TREE_REQ);

	m_EncodeFuncArray[CLIGS_ROCK_MONEY_TREE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ROCK_MONEY_TREE_ACK;
	m_DecodeFuncArray[CLIGS_ROCK_MONEY_TREE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ROCK_MONEY_TREE_ACK;
	m_vecMsgList.push_back(CLIGS_ROCK_MONEY_TREE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ROCK_MONEY_TREE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ROCK_MONEY_TREE_ACK);

	m_EncodeFuncArray[CLIGS_GET_PLUNDER_BATTLELOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ;
	m_DecodeFuncArray[CLIGS_GET_PLUNDER_BATTLELOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ;
	m_vecMsgList.push_back(CLIGS_GET_PLUNDER_BATTLELOG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ);

	m_EncodeFuncArray[CLIGS_GET_PLUNDER_BATTLELOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK;
	m_DecodeFuncArray[CLIGS_GET_PLUNDER_BATTLELOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK;
	m_vecMsgList.push_back(CLIGS_GET_PLUNDER_BATTLELOG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GODWEAPON_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GODWEAPON_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GODWEAPON_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GODWEAPON_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GODWEAPON_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GODWEAPON_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GODWEAPON_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GODWEAPON_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GODWEAPON_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GODWEAPON_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GODWEAPON_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GODWEAPON_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GODWEAPON_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GODWEAPON_ACK);

	m_EncodeFuncArray[CLIGS_UPGRADE_GODWEAPON_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_GODWEAPON_REQ;
	m_DecodeFuncArray[CLIGS_UPGRADE_GODWEAPON_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_GODWEAPON_REQ;
	m_vecMsgList.push_back(CLIGS_UPGRADE_GODWEAPON_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_GODWEAPON_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_GODWEAPON_REQ);

	m_EncodeFuncArray[CLIGS_UPGRADE_GODWEAPON_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_GODWEAPON_ACK;
	m_DecodeFuncArray[CLIGS_UPGRADE_GODWEAPON_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_GODWEAPON_ACK;
	m_vecMsgList.push_back(CLIGS_UPGRADE_GODWEAPON_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_GODWEAPON_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_GODWEAPON_ACK);

	m_EncodeFuncArray[CLIGS_FREE_GODWEAPON_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FREE_GODWEAPON_REQ;
	m_DecodeFuncArray[CLIGS_FREE_GODWEAPON_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FREE_GODWEAPON_REQ;
	m_vecMsgList.push_back(CLIGS_FREE_GODWEAPON_REQ);
	if( (INT32)sizeof(PKT_CLIGS_FREE_GODWEAPON_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FREE_GODWEAPON_REQ);

	m_EncodeFuncArray[CLIGS_FREE_GODWEAPON_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FREE_GODWEAPON_ACK;
	m_DecodeFuncArray[CLIGS_FREE_GODWEAPON_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FREE_GODWEAPON_ACK;
	m_vecMsgList.push_back(CLIGS_FREE_GODWEAPON_ACK);
	if( (INT32)sizeof(PKT_CLIGS_FREE_GODWEAPON_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FREE_GODWEAPON_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_AWAKEN_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_AWAKEN_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_ACK);

	m_EncodeFuncArray[CLIGS_AWAKEN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AWAKEN_REQ;
	m_DecodeFuncArray[CLIGS_AWAKEN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AWAKEN_REQ;
	m_vecMsgList.push_back(CLIGS_AWAKEN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_AWAKEN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AWAKEN_REQ);

	m_EncodeFuncArray[CLIGS_AWAKEN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AWAKEN_ACK;
	m_DecodeFuncArray[CLIGS_AWAKEN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AWAKEN_ACK;
	m_vecMsgList.push_back(CLIGS_AWAKEN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_AWAKEN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AWAKEN_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_DRESS_STUDY_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_DRESS_STUDY_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK);

	m_EncodeFuncArray[CLIGS_DRESS_STUDY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRESS_STUDY_REQ;
	m_DecodeFuncArray[CLIGS_DRESS_STUDY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRESS_STUDY_REQ;
	m_vecMsgList.push_back(CLIGS_DRESS_STUDY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_REQ);

	m_EncodeFuncArray[CLIGS_DRESS_STUDY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRESS_STUDY_ACK;
	m_DecodeFuncArray[CLIGS_DRESS_STUDY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRESS_STUDY_ACK;
	m_vecMsgList.push_back(CLIGS_DRESS_STUDY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_ACK);

	m_EncodeFuncArray[CLIGS_STUDY_TO_EXP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_TO_EXP_REQ;
	m_DecodeFuncArray[CLIGS_STUDY_TO_EXP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_TO_EXP_REQ;
	m_vecMsgList.push_back(CLIGS_STUDY_TO_EXP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_REQ);

	m_EncodeFuncArray[CLIGS_STUDY_TO_EXP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_TO_EXP_ACK;
	m_DecodeFuncArray[CLIGS_STUDY_TO_EXP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_TO_EXP_ACK;
	m_vecMsgList.push_back(CLIGS_STUDY_TO_EXP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_ACK);

	m_EncodeFuncArray[CLIGS_STUDY_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_UPGRADE_REQ;
	m_DecodeFuncArray[CLIGS_STUDY_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_UPGRADE_REQ;
	m_vecMsgList.push_back(CLIGS_STUDY_UPGRADE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_REQ);

	m_EncodeFuncArray[CLIGS_STUDY_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_UPGRADE_ACK;
	m_DecodeFuncArray[CLIGS_STUDY_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_UPGRADE_ACK;
	m_vecMsgList.push_back(CLIGS_STUDY_UPGRADE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_ACK);

	m_EncodeFuncArray[CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ;
	m_DecodeFuncArray[CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ;
	m_vecMsgList.push_back(CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ);
	if( (INT32)sizeof(PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ);

	m_EncodeFuncArray[CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK;
	m_DecodeFuncArray[CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK;
	m_vecMsgList.push_back(CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK);
	if( (INT32)sizeof(PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK);

	m_EncodeFuncArray[CLIGS_RACE_BATTLELOG_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RACE_BATTLELOG_NTF;
	m_DecodeFuncArray[CLIGS_RACE_BATTLELOG_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RACE_BATTLELOG_NTF;
	m_vecMsgList.push_back(CLIGS_RACE_BATTLELOG_NTF);
	if( (INT32)sizeof(PKT_CLIGS_RACE_BATTLELOG_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RACE_BATTLELOG_NTF);

	m_EncodeFuncArray[CLIGS_VISIT_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_VISIT_HERO_REQ;
	m_DecodeFuncArray[CLIGS_VISIT_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_VISIT_HERO_REQ;
	m_vecMsgList.push_back(CLIGS_VISIT_HERO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_VISIT_HERO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_VISIT_HERO_REQ);

	m_EncodeFuncArray[CLIGS_VISIT_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_VISIT_HERO_ACK;
	m_DecodeFuncArray[CLIGS_VISIT_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_VISIT_HERO_ACK;
	m_vecMsgList.push_back(CLIGS_VISIT_HERO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_VISIT_HERO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_VISIT_HERO_ACK);

	m_EncodeFuncArray[CLIGS_BUY_PHYSTRENGTH_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_PHYSTRENGTH_REQ;
	m_DecodeFuncArray[CLIGS_BUY_PHYSTRENGTH_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_PHYSTRENGTH_REQ;
	m_vecMsgList.push_back(CLIGS_BUY_PHYSTRENGTH_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BUY_PHYSTRENGTH_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_PHYSTRENGTH_REQ);

	m_EncodeFuncArray[CLIGS_BUY_PHYSTRENGTH_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_PHYSTRENGTH_ACK;
	m_DecodeFuncArray[CLIGS_BUY_PHYSTRENGTH_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_PHYSTRENGTH_ACK;
	m_vecMsgList.push_back(CLIGS_BUY_PHYSTRENGTH_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BUY_PHYSTRENGTH_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_PHYSTRENGTH_ACK);

	m_EncodeFuncArray[CLIGS_CLR_PLUNDER_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_PLUNDER_CD_REQ;
	m_DecodeFuncArray[CLIGS_CLR_PLUNDER_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_PLUNDER_CD_REQ;
	m_vecMsgList.push_back(CLIGS_CLR_PLUNDER_CD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLR_PLUNDER_CD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_PLUNDER_CD_REQ);

	m_EncodeFuncArray[CLIGS_CLR_PLUNDER_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_PLUNDER_CD_ACK;
	m_DecodeFuncArray[CLIGS_CLR_PLUNDER_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_PLUNDER_CD_ACK;
	m_vecMsgList.push_back(CLIGS_CLR_PLUNDER_CD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLR_PLUNDER_CD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_PLUNDER_CD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_MAINTOWN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_MAINTOWN_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_MAINTOWN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_MAINTOWN_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_MAINTOWN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_MAINTOWN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_MAINTOWN_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_MAINTOWN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_MAINTOWN_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_MAINTOWN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_MAINTOWN_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_MAINTOWN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_MAINTOWN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_MAINTOWN_ACK);

	m_EncodeFuncArray[CLIGS_RECV_MAINTOWN_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_MAINTOWN_INCOME_REQ;
	m_DecodeFuncArray[CLIGS_RECV_MAINTOWN_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_MAINTOWN_INCOME_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_MAINTOWN_INCOME_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_MAINTOWN_INCOME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_MAINTOWN_INCOME_REQ);

	m_EncodeFuncArray[CLIGS_RECV_MAINTOWN_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_MAINTOWN_INCOME_ACK;
	m_DecodeFuncArray[CLIGS_RECV_MAINTOWN_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_MAINTOWN_INCOME_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_MAINTOWN_INCOME_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_MAINTOWN_INCOME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_MAINTOWN_INCOME_ACK);

	m_EncodeFuncArray[CLIGS_LEVY_MAINTOWN_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ;
	m_DecodeFuncArray[CLIGS_LEVY_MAINTOWN_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ;
	m_vecMsgList.push_back(CLIGS_LEVY_MAINTOWN_INCOME_REQ);
	if( (INT32)sizeof(PKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ);

	m_EncodeFuncArray[CLIGS_LEVY_MAINTOWN_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK;
	m_DecodeFuncArray[CLIGS_LEVY_MAINTOWN_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK;
	m_vecMsgList.push_back(CLIGS_LEVY_MAINTOWN_INCOME_ACK);
	if( (INT32)sizeof(PKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK);

	m_EncodeFuncArray[CLIGS_SET_WORK_TYPE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SET_WORK_TYPE_REQ;
	m_DecodeFuncArray[CLIGS_SET_WORK_TYPE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SET_WORK_TYPE_REQ;
	m_vecMsgList.push_back(CLIGS_SET_WORK_TYPE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SET_WORK_TYPE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SET_WORK_TYPE_REQ);

	m_EncodeFuncArray[CLIGS_SET_WORK_TYPE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SET_WORK_TYPE_ACK;
	m_DecodeFuncArray[CLIGS_SET_WORK_TYPE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SET_WORK_TYPE_ACK;
	m_vecMsgList.push_back(CLIGS_SET_WORK_TYPE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SET_WORK_TYPE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SET_WORK_TYPE_ACK);

	m_EncodeFuncArray[CLIGS_DRIVE_AWAY_OWNER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRIVE_AWAY_OWNER_REQ;
	m_DecodeFuncArray[CLIGS_DRIVE_AWAY_OWNER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRIVE_AWAY_OWNER_REQ;
	m_vecMsgList.push_back(CLIGS_DRIVE_AWAY_OWNER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DRIVE_AWAY_OWNER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRIVE_AWAY_OWNER_REQ);

	m_EncodeFuncArray[CLIGS_DRIVE_AWAY_OWNER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRIVE_AWAY_OWNER_ACK;
	m_DecodeFuncArray[CLIGS_DRIVE_AWAY_OWNER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRIVE_AWAY_OWNER_ACK;
	m_vecMsgList.push_back(CLIGS_DRIVE_AWAY_OWNER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DRIVE_AWAY_OWNER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRIVE_AWAY_OWNER_ACK);

	m_EncodeFuncArray[CLIGS_COMPOSE_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COMPOSE_EQUIP_REQ;
	m_DecodeFuncArray[CLIGS_COMPOSE_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COMPOSE_EQUIP_REQ;
	m_vecMsgList.push_back(CLIGS_COMPOSE_EQUIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COMPOSE_EQUIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COMPOSE_EQUIP_REQ);

	m_EncodeFuncArray[CLIGS_COMPOSE_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COMPOSE_EQUIP_ACK;
	m_DecodeFuncArray[CLIGS_COMPOSE_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COMPOSE_EQUIP_ACK;
	m_vecMsgList.push_back(CLIGS_COMPOSE_EQUIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COMPOSE_EQUIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COMPOSE_EQUIP_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_PHYSTRENGTH_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PHYSTRENGTH_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_PHYSTRENGTH_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PHYSTRENGTH_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_PHYSTRENGTH_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PHYSTRENGTH_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PHYSTRENGTH_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_PHYSTRENGTH_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PHYSTRENGTH_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_PHYSTRENGTH_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PHYSTRENGTH_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_PHYSTRENGTH_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PHYSTRENGTH_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PHYSTRENGTH_ACK);

	m_EncodeFuncArray[CLIGS_RECV_LEFT_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_LEFT_INCOME_REQ;
	m_DecodeFuncArray[CLIGS_RECV_LEFT_INCOME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_LEFT_INCOME_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_LEFT_INCOME_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_LEFT_INCOME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_LEFT_INCOME_REQ);

	m_EncodeFuncArray[CLIGS_RECV_LEFT_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_LEFT_INCOME_ACK;
	m_DecodeFuncArray[CLIGS_RECV_LEFT_INCOME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_LEFT_INCOME_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_LEFT_INCOME_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_LEFT_INCOME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_LEFT_INCOME_ACK);

	m_EncodeFuncArray[CLIGS_SMITHY_BUY_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SMITHY_BUY_EQUIP_REQ;
	m_DecodeFuncArray[CLIGS_SMITHY_BUY_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SMITHY_BUY_EQUIP_REQ;
	m_vecMsgList.push_back(CLIGS_SMITHY_BUY_EQUIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SMITHY_BUY_EQUIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SMITHY_BUY_EQUIP_REQ);

	m_EncodeFuncArray[CLIGS_SMITHY_BUY_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SMITHY_BUY_EQUIP_ACK;
	m_DecodeFuncArray[CLIGS_SMITHY_BUY_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SMITHY_BUY_EQUIP_ACK;
	m_vecMsgList.push_back(CLIGS_SMITHY_BUY_EQUIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SMITHY_BUY_EQUIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SMITHY_BUY_EQUIP_ACK);

	m_EncodeFuncArray[CLIGS_CLR_STRENGTHEN_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_STRENGTHEN_CD_REQ;
	m_DecodeFuncArray[CLIGS_CLR_STRENGTHEN_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_STRENGTHEN_CD_REQ;
	m_vecMsgList.push_back(CLIGS_CLR_STRENGTHEN_CD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLR_STRENGTHEN_CD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_STRENGTHEN_CD_REQ);

	m_EncodeFuncArray[CLIGS_CLR_STRENGTHEN_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_STRENGTHEN_CD_ACK;
	m_DecodeFuncArray[CLIGS_CLR_STRENGTHEN_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_STRENGTHEN_CD_ACK;
	m_vecMsgList.push_back(CLIGS_CLR_STRENGTHEN_CD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLR_STRENGTHEN_CD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_STRENGTHEN_CD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CROP_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CROP_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_CROP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CROP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CROP_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CROP_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CROP_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_CROP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CROP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CROP_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_CROP_FIELD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CROP_FIELD_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_CROP_FIELD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CROP_FIELD_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_CROP_FIELD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CROP_FIELD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CROP_FIELD_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_CROP_FIELD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CROP_FIELD_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_CROP_FIELD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CROP_FIELD_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_CROP_FIELD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CROP_FIELD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CROP_FIELD_ACK);

	m_EncodeFuncArray[CLIGS_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CROP_REQ;
	m_DecodeFuncArray[CLIGS_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CROP_REQ;
	m_vecMsgList.push_back(CLIGS_CROP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CROP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CROP_REQ);

	m_EncodeFuncArray[CLIGS_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CROP_ACK;
	m_DecodeFuncArray[CLIGS_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CROP_ACK;
	m_vecMsgList.push_back(CLIGS_CROP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CROP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CROP_ACK);

	m_EncodeFuncArray[CLIGS_GAIN_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GAIN_CROP_REQ;
	m_DecodeFuncArray[CLIGS_GAIN_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GAIN_CROP_REQ;
	m_vecMsgList.push_back(CLIGS_GAIN_CROP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GAIN_CROP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GAIN_CROP_REQ);

	m_EncodeFuncArray[CLIGS_GAIN_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GAIN_CROP_ACK;
	m_DecodeFuncArray[CLIGS_GAIN_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GAIN_CROP_ACK;
	m_vecMsgList.push_back(CLIGS_GAIN_CROP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GAIN_CROP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GAIN_CROP_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_SCIENCE_BUILD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SCIENCE_BUILD_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_SCIENCE_BUILD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SCIENCE_BUILD_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_SCIENCE_BUILD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SCIENCE_BUILD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SCIENCE_BUILD_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_SCIENCE_BUILD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SCIENCE_BUILD_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_SCIENCE_BUILD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SCIENCE_BUILD_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_SCIENCE_BUILD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SCIENCE_BUILD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SCIENCE_BUILD_ACK);

	m_EncodeFuncArray[CLIGS_UPDATE_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPDATE_SCIENCE_REQ;
	m_DecodeFuncArray[CLIGS_UPDATE_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPDATE_SCIENCE_REQ;
	m_vecMsgList.push_back(CLIGS_UPDATE_SCIENCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPDATE_SCIENCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPDATE_SCIENCE_REQ);

	m_EncodeFuncArray[CLIGS_UPDATE_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPDATE_SCIENCE_ACK;
	m_DecodeFuncArray[CLIGS_UPDATE_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPDATE_SCIENCE_ACK;
	m_vecMsgList.push_back(CLIGS_UPDATE_SCIENCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPDATE_SCIENCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPDATE_SCIENCE_ACK);

	m_EncodeFuncArray[CLIGS_CLR_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_CROP_REQ;
	m_DecodeFuncArray[CLIGS_CLR_CROP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_CROP_REQ;
	m_vecMsgList.push_back(CLIGS_CLR_CROP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLR_CROP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_CROP_REQ);

	m_EncodeFuncArray[CLIGS_CLR_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_CROP_ACK;
	m_DecodeFuncArray[CLIGS_CLR_CROP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_CROP_ACK;
	m_vecMsgList.push_back(CLIGS_CLR_CROP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLR_CROP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_CROP_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_EXPERIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EXPERIENCE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_EXPERIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EXPERIENCE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_EXPERIENCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_EXPERIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EXPERIENCE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_EXPERIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EXPERIENCE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_EXPERIENCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_ACK);

	m_EncodeFuncArray[CLIGS_USER_EXPERIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_USER_EXPERIENCE_REQ;
	m_DecodeFuncArray[CLIGS_USER_EXPERIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_USER_EXPERIENCE_REQ;
	m_vecMsgList.push_back(CLIGS_USER_EXPERIENCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_USER_EXPERIENCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_USER_EXPERIENCE_REQ);

	m_EncodeFuncArray[CLIGS_USER_EXPERIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_USER_EXPERIENCE_ACK;
	m_DecodeFuncArray[CLIGS_USER_EXPERIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_USER_EXPERIENCE_ACK;
	m_vecMsgList.push_back(CLIGS_USER_EXPERIENCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_USER_EXPERIENCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_USER_EXPERIENCE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_MELT_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_MELT_EQUIP_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_MELT_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_MELT_EQUIP_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_MELT_EQUIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_MELT_EQUIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_MELT_EQUIP_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_MELT_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_MELT_EQUIP_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_MELT_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_MELT_EQUIP_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_MELT_EQUIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_MELT_EQUIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_MELT_EQUIP_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK);

	m_EncodeFuncArray[CLIGS_UPDATE_ATTR_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPDATE_ATTR_REQ;
	m_DecodeFuncArray[CLIGS_UPDATE_ATTR_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPDATE_ATTR_REQ;
	m_vecMsgList.push_back(CLIGS_UPDATE_ATTR_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPDATE_ATTR_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPDATE_ATTR_REQ);

	m_EncodeFuncArray[CLIGS_UPDATE_ATTR_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPDATE_ATTR_ACK;
	m_DecodeFuncArray[CLIGS_UPDATE_ATTR_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPDATE_ATTR_ACK;
	m_vecMsgList.push_back(CLIGS_UPDATE_ATTR_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPDATE_ATTR_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPDATE_ATTR_ACK);

	m_EncodeFuncArray[CLIGS_COMPOSE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COMPOSE_REQ;
	m_DecodeFuncArray[CLIGS_COMPOSE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COMPOSE_REQ;
	m_vecMsgList.push_back(CLIGS_COMPOSE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COMPOSE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COMPOSE_REQ);

	m_EncodeFuncArray[CLIGS_COMPOSE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COMPOSE_ACK;
	m_DecodeFuncArray[CLIGS_COMPOSE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COMPOSE_ACK;
	m_vecMsgList.push_back(CLIGS_COMPOSE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COMPOSE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COMPOSE_ACK);

	m_EncodeFuncArray[CLIGS_REFRESH_ELITE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REFRESH_ELITE_REQ;
	m_DecodeFuncArray[CLIGS_REFRESH_ELITE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REFRESH_ELITE_REQ;
	m_vecMsgList.push_back(CLIGS_REFRESH_ELITE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_REFRESH_ELITE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REFRESH_ELITE_REQ);

	m_EncodeFuncArray[CLIGS_REFRESH_ELITE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REFRESH_ELITE_ACK;
	m_DecodeFuncArray[CLIGS_REFRESH_ELITE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REFRESH_ELITE_ACK;
	m_vecMsgList.push_back(CLIGS_REFRESH_ELITE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_REFRESH_ELITE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REFRESH_ELITE_ACK);

	m_EncodeFuncArray[CLIGS_ONHOOK_ELITE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ONHOOK_ELITE_REQ;
	m_DecodeFuncArray[CLIGS_ONHOOK_ELITE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ONHOOK_ELITE_REQ;
	m_vecMsgList.push_back(CLIGS_ONHOOK_ELITE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ONHOOK_ELITE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ONHOOK_ELITE_REQ);

	m_EncodeFuncArray[CLIGS_ONHOOK_ELITE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ONHOOK_ELITE_ACK;
	m_DecodeFuncArray[CLIGS_ONHOOK_ELITE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ONHOOK_ELITE_ACK;
	m_vecMsgList.push_back(CLIGS_ONHOOK_ELITE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ONHOOK_ELITE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ONHOOK_ELITE_ACK);

	m_EncodeFuncArray[CLIGS_GET_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ITEM_REQ;
	m_DecodeFuncArray[CLIGS_GET_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ITEM_REQ;
	m_vecMsgList.push_back(CLIGS_GET_ITEM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_ITEM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ITEM_REQ);

	m_EncodeFuncArray[CLIGS_GET_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ITEM_ACK;
	m_DecodeFuncArray[CLIGS_GET_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ITEM_ACK;
	m_vecMsgList.push_back(CLIGS_GET_ITEM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_ITEM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ITEM_ACK);

	m_EncodeFuncArray[CLIGS_GET_ORDER_ID_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ORDER_ID_REQ;
	m_DecodeFuncArray[CLIGS_GET_ORDER_ID_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ORDER_ID_REQ;
	m_vecMsgList.push_back(CLIGS_GET_ORDER_ID_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_ORDER_ID_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ORDER_ID_REQ);

	m_EncodeFuncArray[CLIGS_GET_ORDER_ID_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ORDER_ID_ACK;
	m_DecodeFuncArray[CLIGS_GET_ORDER_ID_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ORDER_ID_ACK;
	m_vecMsgList.push_back(CLIGS_GET_ORDER_ID_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_ORDER_ID_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ORDER_ID_ACK);

	m_EncodeFuncArray[CLIGS_EXCHANGE_RESULT - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXCHANGE_RESULT;
	m_DecodeFuncArray[CLIGS_EXCHANGE_RESULT - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXCHANGE_RESULT;
	m_vecMsgList.push_back(CLIGS_EXCHANGE_RESULT);
	if( (INT32)sizeof(PKT_CLIGS_EXCHANGE_RESULT) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXCHANGE_RESULT);

	m_EncodeFuncArray[CLIGS_SEED_COMPOSE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEED_COMPOSE_REQ;
	m_DecodeFuncArray[CLIGS_SEED_COMPOSE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEED_COMPOSE_REQ;
	m_vecMsgList.push_back(CLIGS_SEED_COMPOSE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SEED_COMPOSE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEED_COMPOSE_REQ);

	m_EncodeFuncArray[CLIGS_SEED_COMPOSE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEED_COMPOSE_ACK;
	m_DecodeFuncArray[CLIGS_SEED_COMPOSE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEED_COMPOSE_ACK;
	m_vecMsgList.push_back(CLIGS_SEED_COMPOSE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SEED_COMPOSE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEED_COMPOSE_ACK);

	m_EncodeFuncArray[CLIGS_CHAT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHAT_REQ;
	m_DecodeFuncArray[CLIGS_CHAT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHAT_REQ;
	m_vecMsgList.push_back(CLIGS_CHAT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CHAT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHAT_REQ);

	m_EncodeFuncArray[CLIGS_CHAT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHAT_ACK;
	m_DecodeFuncArray[CLIGS_CHAT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHAT_ACK;
	m_vecMsgList.push_back(CLIGS_CHAT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CHAT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHAT_ACK);

	m_EncodeFuncArray[CLIGS_CHAT_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHAT_NTF;
	m_DecodeFuncArray[CLIGS_CHAT_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHAT_NTF;
	m_vecMsgList.push_back(CLIGS_CHAT_NTF);
	if( (INT32)sizeof(PKT_CLIGS_CHAT_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHAT_NTF);

	m_EncodeFuncArray[CLIGS_CROSS_DAY_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CROSS_DAY_NTF;
	m_DecodeFuncArray[CLIGS_CROSS_DAY_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CROSS_DAY_NTF;
	m_vecMsgList.push_back(CLIGS_CROSS_DAY_NTF);
	if( (INT32)sizeof(PKT_CLIGS_CROSS_DAY_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CROSS_DAY_NTF);

	m_EncodeFuncArray[CLIGS_OPNE_ACTIVITY_CENTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ;
	m_DecodeFuncArray[CLIGS_OPNE_ACTIVITY_CENTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ;
	m_vecMsgList.push_back(CLIGS_OPNE_ACTIVITY_CENTER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ);

	m_EncodeFuncArray[CLIGS_OPNE_ACTIVITY_CENTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK;
	m_DecodeFuncArray[CLIGS_OPNE_ACTIVITY_CENTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK;
	m_vecMsgList.push_back(CLIGS_OPNE_ACTIVITY_CENTER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK);

	m_EncodeFuncArray[CLIGS_OPNE_EAT_BREAD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPNE_EAT_BREAD_REQ;
	m_DecodeFuncArray[CLIGS_OPNE_EAT_BREAD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPNE_EAT_BREAD_REQ;
	m_vecMsgList.push_back(CLIGS_OPNE_EAT_BREAD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPNE_EAT_BREAD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPNE_EAT_BREAD_REQ);

	m_EncodeFuncArray[CLIGS_OPNE_EAT_BREAD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPNE_EAT_BREAD_ACK;
	m_DecodeFuncArray[CLIGS_OPNE_EAT_BREAD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPNE_EAT_BREAD_ACK;
	m_vecMsgList.push_back(CLIGS_OPNE_EAT_BREAD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPNE_EAT_BREAD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPNE_EAT_BREAD_ACK);

	m_EncodeFuncArray[CLIGS_OBTAIN_PHYSTRENGTHEN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ;
	m_DecodeFuncArray[CLIGS_OBTAIN_PHYSTRENGTHEN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ;
	m_vecMsgList.push_back(CLIGS_OBTAIN_PHYSTRENGTHEN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ);

	m_EncodeFuncArray[CLIGS_OBTAIN_PHYSTRENGTHEN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK;
	m_DecodeFuncArray[CLIGS_OBTAIN_PHYSTRENGTHEN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK;
	m_vecMsgList.push_back(CLIGS_OBTAIN_PHYSTRENGTHEN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK);

	m_EncodeFuncArray[CLIGS_LEAVE_EAT_BREAD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEAVE_EAT_BREAD_REQ;
	m_DecodeFuncArray[CLIGS_LEAVE_EAT_BREAD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEAVE_EAT_BREAD_REQ;
	m_vecMsgList.push_back(CLIGS_LEAVE_EAT_BREAD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_LEAVE_EAT_BREAD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEAVE_EAT_BREAD_REQ);

	m_EncodeFuncArray[CLIGS_LEAVE_EAT_BREAD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEAVE_EAT_BREAD_ACK;
	m_DecodeFuncArray[CLIGS_LEAVE_EAT_BREAD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEAVE_EAT_BREAD_ACK;
	m_vecMsgList.push_back(CLIGS_LEAVE_EAT_BREAD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_LEAVE_EAT_BREAD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEAVE_EAT_BREAD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_PAOSHANG_BUILD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_PAOSHANG_BUILD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_PAOSHANG_BUILD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_PAOSHANG_BUILD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_PAOSHANG_BUILD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_PAOSHANG_BUILD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_YABIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_YABIAO_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_YABIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_YABIAO_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_YABIAO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_YABIAO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_YABIAO_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_YABIAO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_YABIAO_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_YABIAO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_YABIAO_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_YABIAO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_YABIAO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_YABIAO_ACK);

	m_EncodeFuncArray[CLIGS_FLUSH_BIAO_QUALITY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FLUSH_BIAO_QUALITY_REQ;
	m_DecodeFuncArray[CLIGS_FLUSH_BIAO_QUALITY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FLUSH_BIAO_QUALITY_REQ;
	m_vecMsgList.push_back(CLIGS_FLUSH_BIAO_QUALITY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_FLUSH_BIAO_QUALITY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FLUSH_BIAO_QUALITY_REQ);

	m_EncodeFuncArray[CLIGS_FLUSH_BIAO_QUALITY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FLUSH_BIAO_QUALITY_ACK;
	m_DecodeFuncArray[CLIGS_FLUSH_BIAO_QUALITY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FLUSH_BIAO_QUALITY_ACK;
	m_vecMsgList.push_back(CLIGS_FLUSH_BIAO_QUALITY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_FLUSH_BIAO_QUALITY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FLUSH_BIAO_QUALITY_ACK);

	m_EncodeFuncArray[CLIGS_CLIMB_TOWER_RESET_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLIMB_TOWER_RESET_REQ;
	m_DecodeFuncArray[CLIGS_CLIMB_TOWER_RESET_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLIMB_TOWER_RESET_REQ;
	m_vecMsgList.push_back(CLIGS_CLIMB_TOWER_RESET_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_RESET_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_RESET_REQ);

	m_EncodeFuncArray[CLIGS_CLIMB_TOWER_RESET_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLIMB_TOWER_RESET_ACK;
	m_DecodeFuncArray[CLIGS_CLIMB_TOWER_RESET_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLIMB_TOWER_RESET_ACK;
	m_vecMsgList.push_back(CLIGS_CLIMB_TOWER_RESET_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_RESET_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_RESET_ACK);

	m_EncodeFuncArray[CLIGS_CLIMB_TOWER_ONHOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ;
	m_DecodeFuncArray[CLIGS_CLIMB_TOWER_ONHOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ;
	m_vecMsgList.push_back(CLIGS_CLIMB_TOWER_ONHOOK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ);

	m_EncodeFuncArray[CLIGS_CLIMB_TOWER_ONHOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK;
	m_DecodeFuncArray[CLIGS_CLIMB_TOWER_ONHOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK;
	m_vecMsgList.push_back(CLIGS_CLIMB_TOWER_ONHOOK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK);

	m_EncodeFuncArray[CLIGS_BEGIN_YABIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BEGIN_YABIAO_REQ;
	m_DecodeFuncArray[CLIGS_BEGIN_YABIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BEGIN_YABIAO_REQ;
	m_vecMsgList.push_back(CLIGS_BEGIN_YABIAO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BEGIN_YABIAO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BEGIN_YABIAO_REQ);

	m_EncodeFuncArray[CLIGS_BEGIN_YABIAO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BEGIN_YABIAO_ACK;
	m_DecodeFuncArray[CLIGS_BEGIN_YABIAO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BEGIN_YABIAO_ACK;
	m_vecMsgList.push_back(CLIGS_BEGIN_YABIAO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BEGIN_YABIAO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BEGIN_YABIAO_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_JIEBIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_JIEBIAO_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_JIEBIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_JIEBIAO_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_JIEBIAO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_JIEBIAO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_JIEBIAO_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_JIEBIAO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_JIEBIAO_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_JIEBIAO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_JIEBIAO_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_JIEBIAO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_JIEBIAO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_JIEBIAO_ACK);

	m_EncodeFuncArray[CLIGS_BEGIN_JIEBIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BEGIN_JIEBIAO_REQ;
	m_DecodeFuncArray[CLIGS_BEGIN_JIEBIAO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BEGIN_JIEBIAO_REQ;
	m_vecMsgList.push_back(CLIGS_BEGIN_JIEBIAO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BEGIN_JIEBIAO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BEGIN_JIEBIAO_REQ);

	m_EncodeFuncArray[CLIGS_BE_JIEBIAO_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BE_JIEBIAO_NTF;
	m_DecodeFuncArray[CLIGS_BE_JIEBIAO_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BE_JIEBIAO_NTF;
	m_vecMsgList.push_back(CLIGS_BE_JIEBIAO_NTF);
	if( (INT32)sizeof(PKT_CLIGS_BE_JIEBIAO_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BE_JIEBIAO_NTF);

	m_EncodeFuncArray[CLIGS_QUERY_BATTLE_RECORD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUERY_BATTLE_RECORD_REQ;
	m_DecodeFuncArray[CLIGS_QUERY_BATTLE_RECORD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUERY_BATTLE_RECORD_REQ;
	m_vecMsgList.push_back(CLIGS_QUERY_BATTLE_RECORD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_QUERY_BATTLE_RECORD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUERY_BATTLE_RECORD_REQ);

	m_EncodeFuncArray[CLIGS_QUERY_YABIAO_BATTLELOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ;
	m_DecodeFuncArray[CLIGS_QUERY_YABIAO_BATTLELOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ;
	m_vecMsgList.push_back(CLIGS_QUERY_YABIAO_BATTLELOG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ);

	m_EncodeFuncArray[CLIGS_QUERY_YABIAO_BATTLELOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK;
	m_DecodeFuncArray[CLIGS_QUERY_YABIAO_BATTLELOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK;
	m_vecMsgList.push_back(CLIGS_QUERY_YABIAO_BATTLELOG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK);

	m_EncodeFuncArray[CLIGS_QUERY_YABIAO_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_QUERY_YABIAO_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_QUERY_YABIAO_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_QUERY_YABIAO_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_QUERY_YABIAO_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_QUERY_YABIAO_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_UPGRADE_JINGJIE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_JINGJIE_REQ;
	m_DecodeFuncArray[CLIGS_UPGRADE_JINGJIE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_JINGJIE_REQ;
	m_vecMsgList.push_back(CLIGS_UPGRADE_JINGJIE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_JINGJIE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_JINGJIE_REQ);

	m_EncodeFuncArray[CLIGS_UPGRADE_JINGJIE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_JINGJIE_ACK;
	m_DecodeFuncArray[CLIGS_UPGRADE_JINGJIE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_JINGJIE_ACK;
	m_vecMsgList.push_back(CLIGS_UPGRADE_JINGJIE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_JINGJIE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_JINGJIE_ACK);

	m_EncodeFuncArray[CLIGS_GEN_GAS_BALL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GEN_GAS_BALL_REQ;
	m_DecodeFuncArray[CLIGS_GEN_GAS_BALL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GEN_GAS_BALL_REQ;
	m_vecMsgList.push_back(CLIGS_GEN_GAS_BALL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GEN_GAS_BALL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GEN_GAS_BALL_REQ);

	m_EncodeFuncArray[CLIGS_GEN_GAS_BALL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GEN_GAS_BALL_ACK;
	m_DecodeFuncArray[CLIGS_GEN_GAS_BALL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GEN_GAS_BALL_ACK;
	m_vecMsgList.push_back(CLIGS_GEN_GAS_BALL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GEN_GAS_BALL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GEN_GAS_BALL_ACK);

	m_EncodeFuncArray[CLIGS_UP_GAS_BALL_LEVEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UP_GAS_BALL_LEVEL_REQ;
	m_DecodeFuncArray[CLIGS_UP_GAS_BALL_LEVEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UP_GAS_BALL_LEVEL_REQ;
	m_vecMsgList.push_back(CLIGS_UP_GAS_BALL_LEVEL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UP_GAS_BALL_LEVEL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UP_GAS_BALL_LEVEL_REQ);

	m_EncodeFuncArray[CLIGS_UP_GAS_BALL_LEVEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UP_GAS_BALL_LEVEL_ACK;
	m_DecodeFuncArray[CLIGS_UP_GAS_BALL_LEVEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UP_GAS_BALL_LEVEL_ACK;
	m_vecMsgList.push_back(CLIGS_UP_GAS_BALL_LEVEL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UP_GAS_BALL_LEVEL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UP_GAS_BALL_LEVEL_ACK);

	m_EncodeFuncArray[CLIGS_COLLECT_GAS_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COLLECT_GAS_REQ;
	m_DecodeFuncArray[CLIGS_COLLECT_GAS_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COLLECT_GAS_REQ;
	m_vecMsgList.push_back(CLIGS_COLLECT_GAS_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COLLECT_GAS_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COLLECT_GAS_REQ);

	m_EncodeFuncArray[CLIGS_COLLECT_GAS_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COLLECT_GAS_ACK;
	m_DecodeFuncArray[CLIGS_COLLECT_GAS_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COLLECT_GAS_ACK;
	m_vecMsgList.push_back(CLIGS_COLLECT_GAS_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COLLECT_GAS_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COLLECT_GAS_ACK);

	m_EncodeFuncArray[CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ;
	m_DecodeFuncArray[CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ;
	m_vecMsgList.push_back(CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ);

	m_EncodeFuncArray[CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK;
	m_DecodeFuncArray[CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK;
	m_vecMsgList.push_back(CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK);

	m_EncodeFuncArray[CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ;
	m_DecodeFuncArray[CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ;
	m_vecMsgList.push_back(CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ);

	m_EncodeFuncArray[CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK;
	m_DecodeFuncArray[CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK;
	m_vecMsgList.push_back(CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_JINGJIE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_JINGJIE_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_JINGJIE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_JINGJIE_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_JINGJIE_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_JINGJIE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_JINGJIE_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_JINGJIE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_JINGJIE_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_JINGJIE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_JINGJIE_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_JINGJIE_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_JINGJIE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_JINGJIE_TAB_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GEN_GAS_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GEN_GAS_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GEN_GAS_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GEN_GAS_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GEN_GAS_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GEN_GAS_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GEN_GAS_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GEN_GAS_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GEN_GAS_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GEN_GAS_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GEN_GAS_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GEN_GAS_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GEN_GAS_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GEN_GAS_TAB_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_SKILL_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SKILL_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_SKILL_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SKILL_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_SKILL_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SKILL_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SKILL_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_SKILL_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SKILL_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_SKILL_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SKILL_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_SKILL_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SKILL_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SKILL_TAB_ACK);

	m_EncodeFuncArray[CLIGS_CLEAR_JIEBIAO_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLEAR_JIEBIAO_CD_REQ;
	m_DecodeFuncArray[CLIGS_CLEAR_JIEBIAO_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLEAR_JIEBIAO_CD_REQ;
	m_vecMsgList.push_back(CLIGS_CLEAR_JIEBIAO_CD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLEAR_JIEBIAO_CD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLEAR_JIEBIAO_CD_REQ);

	m_EncodeFuncArray[CLIGS_CLEAR_JIEBIAO_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLEAR_JIEBIAO_CD_ACK;
	m_DecodeFuncArray[CLIGS_CLEAR_JIEBIAO_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLEAR_JIEBIAO_CD_ACK;
	m_vecMsgList.push_back(CLIGS_CLEAR_JIEBIAO_CD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLEAR_JIEBIAO_CD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLEAR_JIEBIAO_CD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_VIP_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_VIP_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_VIP_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_VIP_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_VIP_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_VIP_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_VIP_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_VIP_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_VIP_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_VIP_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_VIP_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_VIP_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_VIP_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_VIP_TAB_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_CLIMB_TOWER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CLIMB_TOWER_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_CLIMB_TOWER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CLIMB_TOWER_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_CLIMB_TOWER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CLIMB_TOWER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CLIMB_TOWER_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_CLIMB_TOWER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CLIMB_TOWER_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_CLIMB_TOWER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CLIMB_TOWER_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_CLIMB_TOWER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CLIMB_TOWER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CLIMB_TOWER_ACK);

	m_EncodeFuncArray[CLIGS_BUY_CLIMB_TOWER_RESET_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ;
	m_DecodeFuncArray[CLIGS_BUY_CLIMB_TOWER_RESET_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ;
	m_vecMsgList.push_back(CLIGS_BUY_CLIMB_TOWER_RESET_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ);

	m_EncodeFuncArray[CLIGS_BUY_CLIMB_TOWER_RESET_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK;
	m_DecodeFuncArray[CLIGS_BUY_CLIMB_TOWER_RESET_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK;
	m_vecMsgList.push_back(CLIGS_BUY_CLIMB_TOWER_RESET_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_XIANGQIAN_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_XIANGQIAN_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_XIANGQIAN_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_XIANGQIAN_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_XIANGQIAN_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_XIANGQIAN_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK);

	m_EncodeFuncArray[CLIGS_XIANGQIAN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_XIANGQIAN_REQ;
	m_DecodeFuncArray[CLIGS_XIANGQIAN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_XIANGQIAN_REQ;
	m_vecMsgList.push_back(CLIGS_XIANGQIAN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_XIANGQIAN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_XIANGQIAN_REQ);

	m_EncodeFuncArray[CLIGS_XIANGQIAN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_XIANGQIAN_ACK;
	m_DecodeFuncArray[CLIGS_XIANGQIAN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_XIANGQIAN_ACK;
	m_vecMsgList.push_back(CLIGS_XIANGQIAN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_XIANGQIAN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_XIANGQIAN_ACK);

	m_EncodeFuncArray[CLIGS_CHECK_APPSTORE_ORDER_ID_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ;
	m_DecodeFuncArray[CLIGS_CHECK_APPSTORE_ORDER_ID_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ;
	m_vecMsgList.push_back(CLIGS_CHECK_APPSTORE_ORDER_ID_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ);

	m_EncodeFuncArray[CLIGS_CHECK_APPSTORE_ORDER_ID_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK;
	m_DecodeFuncArray[CLIGS_CHECK_APPSTORE_ORDER_ID_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK;
	m_vecMsgList.push_back(CLIGS_CHECK_APPSTORE_ORDER_ID_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK);

	m_EncodeFuncArray[CLIGS_REMOVE_XIANGQIAN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REMOVE_XIANGQIAN_REQ;
	m_DecodeFuncArray[CLIGS_REMOVE_XIANGQIAN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REMOVE_XIANGQIAN_REQ;
	m_vecMsgList.push_back(CLIGS_REMOVE_XIANGQIAN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_REMOVE_XIANGQIAN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REMOVE_XIANGQIAN_REQ);

	m_EncodeFuncArray[CLIGS_REMOVE_XIANGQIAN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REMOVE_XIANGQIAN_ACK;
	m_DecodeFuncArray[CLIGS_REMOVE_XIANGQIAN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REMOVE_XIANGQIAN_ACK;
	m_vecMsgList.push_back(CLIGS_REMOVE_XIANGQIAN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_REMOVE_XIANGQIAN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REMOVE_XIANGQIAN_ACK);

	m_EncodeFuncArray[CLIGS_RESET_ELITE_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RESET_ELITE_INSTANCE_REQ;
	m_DecodeFuncArray[CLIGS_RESET_ELITE_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RESET_ELITE_INSTANCE_REQ;
	m_vecMsgList.push_back(CLIGS_RESET_ELITE_INSTANCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RESET_ELITE_INSTANCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RESET_ELITE_INSTANCE_REQ);

	m_EncodeFuncArray[CLIGS_RESET_ELITE_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RESET_ELITE_INSTANCE_ACK;
	m_DecodeFuncArray[CLIGS_RESET_ELITE_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RESET_ELITE_INSTANCE_ACK;
	m_vecMsgList.push_back(CLIGS_RESET_ELITE_INSTANCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RESET_ELITE_INSTANCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RESET_ELITE_INSTANCE_ACK);

	m_EncodeFuncArray[CLIGS_ELITE_INSTANCE_ON_HOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ;
	m_DecodeFuncArray[CLIGS_ELITE_INSTANCE_ON_HOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ;
	m_vecMsgList.push_back(CLIGS_ELITE_INSTANCE_ON_HOOK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ);

	m_EncodeFuncArray[CLIGS_ELITE_INSTANCE_ON_HOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK;
	m_DecodeFuncArray[CLIGS_ELITE_INSTANCE_ON_HOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK;
	m_vecMsgList.push_back(CLIGS_ELITE_INSTANCE_ON_HOOK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK);

	m_EncodeFuncArray[CLIGS_GET_ELITE_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ELITE_INSTANCE_REQ;
	m_DecodeFuncArray[CLIGS_GET_ELITE_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ELITE_INSTANCE_REQ;
	m_vecMsgList.push_back(CLIGS_GET_ELITE_INSTANCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_ELITE_INSTANCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ELITE_INSTANCE_REQ);

	m_EncodeFuncArray[CLIGS_GET_ELITE_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ELITE_INSTANCE_ACK;
	m_DecodeFuncArray[CLIGS_GET_ELITE_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ELITE_INSTANCE_ACK;
	m_vecMsgList.push_back(CLIGS_GET_ELITE_INSTANCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_ELITE_INSTANCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ELITE_INSTANCE_ACK);

	m_EncodeFuncArray[CLIGS_QUICK_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUICK_EQUIP_REQ;
	m_DecodeFuncArray[CLIGS_QUICK_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUICK_EQUIP_REQ;
	m_vecMsgList.push_back(CLIGS_QUICK_EQUIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_QUICK_EQUIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUICK_EQUIP_REQ);

	m_EncodeFuncArray[CLIGS_QUICK_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUICK_EQUIP_ACK;
	m_DecodeFuncArray[CLIGS_QUICK_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUICK_EQUIP_ACK;
	m_vecMsgList.push_back(CLIGS_QUICK_EQUIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_QUICK_EQUIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUICK_EQUIP_ACK);

	m_EncodeFuncArray[CLIGS_GET_ACTIVITY_PROMPT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ACTIVITY_PROMPT_REQ;
	m_DecodeFuncArray[CLIGS_GET_ACTIVITY_PROMPT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ACTIVITY_PROMPT_REQ;
	m_vecMsgList.push_back(CLIGS_GET_ACTIVITY_PROMPT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_PROMPT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_PROMPT_REQ);

	m_EncodeFuncArray[CLIGS_GET_ACTIVITY_PROMPT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ACTIVITY_PROMPT_ACK;
	m_DecodeFuncArray[CLIGS_GET_ACTIVITY_PROMPT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ACTIVITY_PROMPT_ACK;
	m_vecMsgList.push_back(CLIGS_GET_ACTIVITY_PROMPT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_PROMPT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_PROMPT_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_CHAT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CHAT_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_CHAT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CHAT_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_CHAT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CHAT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CHAT_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_CHAT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CHAT_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_CHAT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CHAT_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_CHAT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CHAT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CHAT_ACK);

	m_EncodeFuncArray[CLIGS_BLUE_TO_PURPLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BLUE_TO_PURPLE_REQ;
	m_DecodeFuncArray[CLIGS_BLUE_TO_PURPLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BLUE_TO_PURPLE_REQ;
	m_vecMsgList.push_back(CLIGS_BLUE_TO_PURPLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BLUE_TO_PURPLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BLUE_TO_PURPLE_REQ);

	m_EncodeFuncArray[CLIGS_BLUE_TO_PURPLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BLUE_TO_PURPLE_ACK;
	m_DecodeFuncArray[CLIGS_BLUE_TO_PURPLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BLUE_TO_PURPLE_ACK;
	m_vecMsgList.push_back(CLIGS_BLUE_TO_PURPLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BLUE_TO_PURPLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BLUE_TO_PURPLE_ACK);

	m_EncodeFuncArray[CLIGS_PKBATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PKBATTLE_REQ;
	m_DecodeFuncArray[CLIGS_PKBATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PKBATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_PKBATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PKBATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PKBATTLE_REQ);

	m_EncodeFuncArray[CLIGS_RESOURCES_PROMPT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RESOURCES_PROMPT_REQ;
	m_DecodeFuncArray[CLIGS_RESOURCES_PROMPT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RESOURCES_PROMPT_REQ;
	m_vecMsgList.push_back(CLIGS_RESOURCES_PROMPT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RESOURCES_PROMPT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RESOURCES_PROMPT_REQ);

	m_EncodeFuncArray[CLIGS_RESOURCES_PROMPT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RESOURCES_PROMPT_ACK;
	m_DecodeFuncArray[CLIGS_RESOURCES_PROMPT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RESOURCES_PROMPT_ACK;
	m_vecMsgList.push_back(CLIGS_RESOURCES_PROMPT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RESOURCES_PROMPT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RESOURCES_PROMPT_ACK);

	m_EncodeFuncArray[ENTER_BOSSB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_ENTER_BOSSB_REQ;
	m_DecodeFuncArray[ENTER_BOSSB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_ENTER_BOSSB_REQ;
	m_vecMsgList.push_back(ENTER_BOSSB_REQ);
	if( (INT32)sizeof(PKT_ENTER_BOSSB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_ENTER_BOSSB_REQ);

	m_EncodeFuncArray[ENTER_BOSSB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_ENTER_BOSSB_ACK;
	m_DecodeFuncArray[ENTER_BOSSB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_ENTER_BOSSB_ACK;
	m_vecMsgList.push_back(ENTER_BOSSB_ACK);
	if( (INT32)sizeof(PKT_ENTER_BOSSB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_ENTER_BOSSB_ACK);

	m_EncodeFuncArray[LEAVE_BOSSB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_LEAVE_BOSSB_REQ;
	m_DecodeFuncArray[LEAVE_BOSSB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_LEAVE_BOSSB_REQ;
	m_vecMsgList.push_back(LEAVE_BOSSB_REQ);
	if( (INT32)sizeof(PKT_LEAVE_BOSSB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_LEAVE_BOSSB_REQ);

	m_EncodeFuncArray[LEAVE_BOSSB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_LEAVE_BOSSB_ACK;
	m_DecodeFuncArray[LEAVE_BOSSB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_LEAVE_BOSSB_ACK;
	m_vecMsgList.push_back(LEAVE_BOSSB_ACK);
	if( (INT32)sizeof(PKT_LEAVE_BOSSB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_LEAVE_BOSSB_ACK);

	m_EncodeFuncArray[BOSSB_MOVE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_MOVE_REQ;
	m_DecodeFuncArray[BOSSB_MOVE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_MOVE_REQ;
	m_vecMsgList.push_back(BOSSB_MOVE_REQ);
	if( (INT32)sizeof(PKT_BOSSB_MOVE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_MOVE_REQ);

	m_EncodeFuncArray[BOSSB_MOVE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_MOVE_ACK;
	m_DecodeFuncArray[BOSSB_MOVE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_MOVE_ACK;
	m_vecMsgList.push_back(BOSSB_MOVE_ACK);
	if( (INT32)sizeof(PKT_BOSSB_MOVE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_MOVE_ACK);

	m_EncodeFuncArray[BOSSB_HURT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_HURT_REQ;
	m_DecodeFuncArray[BOSSB_HURT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_HURT_REQ;
	m_vecMsgList.push_back(BOSSB_HURT_REQ);
	if( (INT32)sizeof(PKT_BOSSB_HURT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_HURT_REQ);

	m_EncodeFuncArray[BOSSB_HURT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_HURT_ACK;
	m_DecodeFuncArray[BOSSB_HURT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_HURT_ACK;
	m_vecMsgList.push_back(BOSSB_HURT_ACK);
	if( (INT32)sizeof(PKT_BOSSB_HURT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_HURT_ACK);

	m_EncodeFuncArray[BOSSB_POS_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_POS_NTF;
	m_DecodeFuncArray[BOSSB_POS_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_POS_NTF;
	m_vecMsgList.push_back(BOSSB_POS_NTF);
	if( (INT32)sizeof(PKT_BOSSB_POS_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_POS_NTF);

	m_EncodeFuncArray[BOSSB_OVER_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_OVER_NTF;
	m_DecodeFuncArray[BOSSB_OVER_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_OVER_NTF;
	m_vecMsgList.push_back(BOSSB_OVER_NTF);
	if( (INT32)sizeof(PKT_BOSSB_OVER_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_OVER_NTF);

	m_EncodeFuncArray[OPEN_INSPIRE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_OPEN_INSPIRE_TAB_REQ;
	m_DecodeFuncArray[OPEN_INSPIRE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_OPEN_INSPIRE_TAB_REQ;
	m_vecMsgList.push_back(OPEN_INSPIRE_TAB_REQ);
	if( (INT32)sizeof(PKT_OPEN_INSPIRE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_OPEN_INSPIRE_TAB_REQ);

	m_EncodeFuncArray[OPEN_INSPIRE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_OPEN_INSPIRE_TAB_ACK;
	m_DecodeFuncArray[OPEN_INSPIRE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_OPEN_INSPIRE_TAB_ACK;
	m_vecMsgList.push_back(OPEN_INSPIRE_TAB_ACK);
	if( (INT32)sizeof(PKT_OPEN_INSPIRE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_OPEN_INSPIRE_TAB_ACK);

	m_EncodeFuncArray[INSPIRE_POWER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_INSPIRE_POWER_REQ;
	m_DecodeFuncArray[INSPIRE_POWER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_INSPIRE_POWER_REQ;
	m_vecMsgList.push_back(INSPIRE_POWER_REQ);
	if( (INT32)sizeof(PKT_INSPIRE_POWER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_INSPIRE_POWER_REQ);

	m_EncodeFuncArray[INSPIRE_POWER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_INSPIRE_POWER_ACK;
	m_DecodeFuncArray[INSPIRE_POWER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_INSPIRE_POWER_ACK;
	m_vecMsgList.push_back(INSPIRE_POWER_ACK);
	if( (INT32)sizeof(PKT_INSPIRE_POWER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_INSPIRE_POWER_ACK);

	m_EncodeFuncArray[BOSSB_RELIVE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_RELIVE_REQ;
	m_DecodeFuncArray[BOSSB_RELIVE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_RELIVE_REQ;
	m_vecMsgList.push_back(BOSSB_RELIVE_REQ);
	if( (INT32)sizeof(PKT_BOSSB_RELIVE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_RELIVE_REQ);

	m_EncodeFuncArray[BOSSB_RELIVE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_RELIVE_ACK;
	m_DecodeFuncArray[BOSSB_RELIVE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_RELIVE_ACK;
	m_vecMsgList.push_back(BOSSB_RELIVE_ACK);
	if( (INT32)sizeof(PKT_BOSSB_RELIVE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_RELIVE_ACK);

	m_EncodeFuncArray[BOSSB_GET_LAST_BOSSB_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_GET_LAST_BOSSB_INFO_REQ;
	m_DecodeFuncArray[BOSSB_GET_LAST_BOSSB_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_GET_LAST_BOSSB_INFO_REQ;
	m_vecMsgList.push_back(BOSSB_GET_LAST_BOSSB_INFO_REQ);
	if( (INT32)sizeof(PKT_BOSSB_GET_LAST_BOSSB_INFO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_GET_LAST_BOSSB_INFO_REQ);

	m_EncodeFuncArray[BOSSB_GET_LAST_BOSSB_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_GET_LAST_BOSSB_INFO_ACK;
	m_DecodeFuncArray[BOSSB_GET_LAST_BOSSB_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_GET_LAST_BOSSB_INFO_ACK;
	m_vecMsgList.push_back(BOSSB_GET_LAST_BOSSB_INFO_ACK);
	if( (INT32)sizeof(PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK);

	m_EncodeFuncArray[CLILS_OPEN_RECHARGE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLILS_OPEN_RECHARGE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLILS_OPEN_RECHARGE_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLILS_OPEN_RECHARGE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLILS_OPEN_RECHARGE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLILS_OPEN_RECHARGE_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_RECV_RECHARGE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_RECHARGE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_RECHARGE_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_RECHARGE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_RECHARGE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_RECHARGE_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLILS_OPEN_SCORE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLILS_OPEN_SCORE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLILS_OPEN_SCORE_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLILS_OPEN_SCORE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLILS_OPEN_SCORE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLILS_OPEN_SCORE_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_RECV_SCORE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_SCORE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_SCORE_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_SCORE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_SCORE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_SCORE_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_GET_RANDOM_DSPNAME_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_RANDOM_DSPNAME_REQ;
	m_DecodeFuncArray[CLIGS_GET_RANDOM_DSPNAME_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_RANDOM_DSPNAME_REQ;
	m_vecMsgList.push_back(CLIGS_GET_RANDOM_DSPNAME_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_RANDOM_DSPNAME_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_RANDOM_DSPNAME_REQ);

	m_EncodeFuncArray[CLIGS_GET_RANDOM_DSPNAME_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_RANDOM_DSPNAME_ACK;
	m_DecodeFuncArray[CLIGS_GET_RANDOM_DSPNAME_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_RANDOM_DSPNAME_ACK;
	m_vecMsgList.push_back(CLIGS_GET_RANDOM_DSPNAME_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_RANDOM_DSPNAME_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_RANDOM_DSPNAME_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK);

	m_EncodeFuncArray[CLIGS_EXPERIENCE_TRANSFER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXPERIENCE_TRANSFER_REQ;
	m_DecodeFuncArray[CLIGS_EXPERIENCE_TRANSFER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXPERIENCE_TRANSFER_REQ;
	m_vecMsgList.push_back(CLIGS_EXPERIENCE_TRANSFER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EXPERIENCE_TRANSFER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXPERIENCE_TRANSFER_REQ);

	m_EncodeFuncArray[CLIGS_EXPERIENCE_TRANSFER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXPERIENCE_TRANSFER_ACK;
	m_DecodeFuncArray[CLIGS_EXPERIENCE_TRANSFER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXPERIENCE_TRANSFER_ACK;
	m_vecMsgList.push_back(CLIGS_EXPERIENCE_TRANSFER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EXPERIENCE_TRANSFER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXPERIENCE_TRANSFER_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_RDCHALLENGE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_RDCHALLENGE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_RDCHALLENGE_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_RDCHALLENGE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_RDCHALLENGE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_RDCHALLENGE_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK);

	m_EncodeFuncArray[CLIGS_RDCHALLENGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RDCHALLENGE_REQ;
	m_DecodeFuncArray[CLIGS_RDCHALLENGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RDCHALLENGE_REQ;
	m_vecMsgList.push_back(CLIGS_RDCHALLENGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RDCHALLENGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RDCHALLENGE_REQ);

	m_EncodeFuncArray[CLIGS_CLR_RDCHALLENGE_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_RDCHALLENGE_CD_REQ;
	m_DecodeFuncArray[CLIGS_CLR_RDCHALLENGE_CD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_RDCHALLENGE_CD_REQ;
	m_vecMsgList.push_back(CLIGS_CLR_RDCHALLENGE_CD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLR_RDCHALLENGE_CD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_RDCHALLENGE_CD_REQ);

	m_EncodeFuncArray[CLIGS_CLR_RDCHALLENGE_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_RDCHALLENGE_CD_ACK;
	m_DecodeFuncArray[CLIGS_CLR_RDCHALLENGE_CD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_RDCHALLENGE_CD_ACK;
	m_vecMsgList.push_back(CLIGS_CLR_RDCHALLENGE_CD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLR_RDCHALLENGE_CD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_RDCHALLENGE_CD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_WORSHIP_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_WORSHIP_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_WORSHIP_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_WORSHIP_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_WORSHIP_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_WORSHIP_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_WORSHIP_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_WORSHIP_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_WORSHIP_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_WORSHIP_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_WORSHIP_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_WORSHIP_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_WORSHIP_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_WORSHIP_TAB_ACK);

	m_EncodeFuncArray[CLIGS_WORSHIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_WORSHIP_REQ;
	m_DecodeFuncArray[CLIGS_WORSHIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_WORSHIP_REQ;
	m_vecMsgList.push_back(CLIGS_WORSHIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_WORSHIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_WORSHIP_REQ);

	m_EncodeFuncArray[CLIGS_WORSHIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_WORSHIP_ACK;
	m_DecodeFuncArray[CLIGS_WORSHIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_WORSHIP_ACK;
	m_vecMsgList.push_back(CLIGS_WORSHIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_WORSHIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_WORSHIP_ACK);

	m_EncodeFuncArray[CLIGS_RECV_RATING_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_RATING_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_RATING_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_RATING_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_RATING_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_RATING_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_RATING_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_RATING_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_RATING_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_RATING_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_RATING_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_RATING_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_RATING_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_RATING_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_ACTIVITY_NOTIFY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACTIVITY_NOTIFY_REQ;
	m_DecodeFuncArray[CLIGS_ACTIVITY_NOTIFY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACTIVITY_NOTIFY_REQ;
	m_vecMsgList.push_back(CLIGS_ACTIVITY_NOTIFY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ACTIVITY_NOTIFY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACTIVITY_NOTIFY_REQ);

	m_EncodeFuncArray[CLIGS_ACTIVITY_NOTIFY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACTIVITY_NOTIFY_ACK;
	m_DecodeFuncArray[CLIGS_ACTIVITY_NOTIFY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACTIVITY_NOTIFY_ACK;
	m_vecMsgList.push_back(CLIGS_ACTIVITY_NOTIFY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ACTIVITY_NOTIFY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACTIVITY_NOTIFY_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_DOGFECES_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DOGFECES_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_DOGFECES_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DOGFECES_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_DOGFECES_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DOGFECES_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DOGFECES_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_DOGFECES_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DOGFECES_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_DOGFECES_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DOGFECES_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_DOGFECES_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DOGFECES_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DOGFECES_ACK);

	m_EncodeFuncArray[CLIGS_GET_ACTIVITY_CENTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ACTIVITY_CENTER_REQ;
	m_DecodeFuncArray[CLIGS_GET_ACTIVITY_CENTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ACTIVITY_CENTER_REQ;
	m_vecMsgList.push_back(CLIGS_GET_ACTIVITY_CENTER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_CENTER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_CENTER_REQ);

	m_EncodeFuncArray[CLIGS_GET_ACTIVITY_CENTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ACTIVITY_CENTER_ACK;
	m_DecodeFuncArray[CLIGS_GET_ACTIVITY_CENTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ACTIVITY_CENTER_ACK;
	m_vecMsgList.push_back(CLIGS_GET_ACTIVITY_CENTER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_CENTER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_CENTER_ACK);

	m_EncodeFuncArray[BOSSB_INFO_SYNC_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_INFO_SYNC_NTF;
	m_DecodeFuncArray[BOSSB_INFO_SYNC_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_INFO_SYNC_NTF;
	m_vecMsgList.push_back(BOSSB_INFO_SYNC_NTF);
	if( (INT32)sizeof(PKT_BOSSB_INFO_SYNC_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_INFO_SYNC_NTF);

	m_EncodeFuncArray[CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ;
	m_DecodeFuncArray[CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ;
	m_vecMsgList.push_back(CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ);

	m_EncodeFuncArray[CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK;
	m_DecodeFuncArray[CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK;
	m_vecMsgList.push_back(CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK);

	m_EncodeFuncArray[CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GEM_MAKER_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GEM_MAKER_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GEM_MAKER_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GEM_MAKER_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GEM_MAKER_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GEM_MAKER_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK);

	m_EncodeFuncArray[CLIGS_EXCHANGE_STUDY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXCHANGE_STUDY_REQ;
	m_DecodeFuncArray[CLIGS_EXCHANGE_STUDY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXCHANGE_STUDY_REQ;
	m_vecMsgList.push_back(CLIGS_EXCHANGE_STUDY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EXCHANGE_STUDY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXCHANGE_STUDY_REQ);

	m_EncodeFuncArray[CLIGS_EXCHANGE_STUDY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXCHANGE_STUDY_ACK;
	m_DecodeFuncArray[CLIGS_EXCHANGE_STUDY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXCHANGE_STUDY_ACK;
	m_vecMsgList.push_back(CLIGS_EXCHANGE_STUDY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EXCHANGE_STUDY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXCHANGE_STUDY_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK);

	m_EncodeFuncArray[CLIGS_EQUIP_COMPOSE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_COMPOSE_REQ;
	m_DecodeFuncArray[CLIGS_EQUIP_COMPOSE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_COMPOSE_REQ;
	m_vecMsgList.push_back(CLIGS_EQUIP_COMPOSE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_COMPOSE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_COMPOSE_REQ);

	m_EncodeFuncArray[CLIGS_EQUIP_COMPOSE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_COMPOSE_ACK;
	m_DecodeFuncArray[CLIGS_EQUIP_COMPOSE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_COMPOSE_ACK;
	m_vecMsgList.push_back(CLIGS_EQUIP_COMPOSE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_COMPOSE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_COMPOSE_ACK);

	m_EncodeFuncArray[CLIGS_RECV_COMPOSE_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_COMPOSE_EQUIP_REQ;
	m_DecodeFuncArray[CLIGS_RECV_COMPOSE_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_COMPOSE_EQUIP_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_COMPOSE_EQUIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_COMPOSE_EQUIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_COMPOSE_EQUIP_REQ);

	m_EncodeFuncArray[CLIGS_RECV_COMPOSE_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_COMPOSE_EQUIP_ACK;
	m_DecodeFuncArray[CLIGS_RECV_COMPOSE_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_COMPOSE_EQUIP_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_COMPOSE_EQUIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_COMPOSE_EQUIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_COMPOSE_EQUIP_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_APPLY_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_APPLY_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_APPLY_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_APPLY_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_APPLY_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_APPLY_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_APPLY_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_APPLY_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_APPLY_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_APPLY_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_APPLY_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_APPLY_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_APPLY_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_APPLY_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_CANCEL_APPLY_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CANCEL_APPLY_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_CANCEL_APPLY_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CANCEL_APPLY_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_CANCEL_APPLY_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CANCEL_APPLY_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CANCEL_APPLY_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_CANCEL_APPLY_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CANCEL_APPLY_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_CANCEL_APPLY_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CANCEL_APPLY_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_CANCEL_APPLY_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CANCEL_APPLY_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CANCEL_APPLY_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_CREATE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CREATE_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_CREATE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CREATE_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_CREATE_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CREATE_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CREATE_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_CREATE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CREATE_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_CREATE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CREATE_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_CREATE_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CREATE_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CREATE_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_SEARCH_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEARCH_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_SEARCH_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEARCH_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_SEARCH_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SEARCH_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEARCH_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_SEARCH_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEARCH_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_SEARCH_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEARCH_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_SEARCH_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SEARCH_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEARCH_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_OWNER_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_OWNER_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_OWNER_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_OWNER_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_OWNER_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_OWNER_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_OWNER_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_OWNER_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_OWNER_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_OWNER_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_OWNER_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_OWNER_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_OWNER_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_OWNER_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_DOORS_TRIBUTE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_DOORS_TRIBUTE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_DOORS_TRIBUTE_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_DOORS_TRIBUTE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_DOORS_TRIBUTE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_DOORS_TRIBUTE_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_DOORS_TRIBUTE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DOORS_TRIBUTE_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_DOORS_TRIBUTE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DOORS_TRIBUTE_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_DOORS_TRIBUTE_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DOORS_TRIBUTE_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DOORS_TRIBUTE_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_DOORS_TRIBUTE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DOORS_TRIBUTE_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_DOORS_TRIBUTE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DOORS_TRIBUTE_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_DOORS_TRIBUTE_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DOORS_TRIBUTE_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DOORS_TRIBUTE_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_KICKED_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_KICKED_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_KICKED_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_KICKED_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_KICKED_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_KICKED_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_KICKED_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_KICKED_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_KICKED_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_KICKED_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_KICKED_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_KICKED_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_KICKED_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_KICKED_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_JOB_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JOB_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_JOB_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JOB_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_JOB_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_JOB_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JOB_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_JOB_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JOB_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_JOB_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JOB_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_JOB_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_JOB_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JOB_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_SET_NOTICE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SET_NOTICE_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_SET_NOTICE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SET_NOTICE_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_SET_NOTICE_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SET_NOTICE_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SET_NOTICE_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_SET_NOTICE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SET_NOTICE_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_SET_NOTICE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SET_NOTICE_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_SET_NOTICE_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SET_NOTICE_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SET_NOTICE_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_DISSOLVE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DISSOLVE_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_DISSOLVE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DISSOLVE_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_DISSOLVE_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DISSOLVE_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DISSOLVE_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_DISSOLVE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DISSOLVE_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_DISSOLVE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DISSOLVE_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_DISSOLVE_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DISSOLVE_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DISSOLVE_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_AUDIT_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AUDIT_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_AUDIT_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AUDIT_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_AUDIT_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_AUDIT_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AUDIT_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_AUDIT_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AUDIT_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_AUDIT_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AUDIT_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_AUDIT_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_AUDIT_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AUDIT_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_APPLY_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_APPLY_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_APPLY_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_APPLY_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_APPLY_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_APPLY_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_APPLY_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_APPLY_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_APPLY_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_APPLY_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_APPLY_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_APPLY_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_APPLY_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_APPLY_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_RANK_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RANK_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_RANK_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RANK_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_RANK_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RANK_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RANK_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_RANK_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RANK_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_RANK_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RANK_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_RANK_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RANK_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RANK_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_AUDIT_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AUDIT_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_AUDIT_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AUDIT_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_AUDIT_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AUDIT_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AUDIT_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_AUDIT_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AUDIT_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_AUDIT_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AUDIT_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_AUDIT_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AUDIT_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AUDIT_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GATHER_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GATHER_SCIENCE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GATHER_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GATHER_SCIENCE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GATHER_SCIENCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GATHER_SCIENCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GATHER_SCIENCE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GATHER_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GATHER_SCIENCE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GATHER_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GATHER_SCIENCE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GATHER_SCIENCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GATHER_SCIENCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GATHER_SCIENCE_ACK);

	m_EncodeFuncArray[CLIGS_GATHER_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GATHER_SCIENCE_REQ;
	m_DecodeFuncArray[CLIGS_GATHER_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GATHER_SCIENCE_REQ;
	m_vecMsgList.push_back(CLIGS_GATHER_SCIENCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GATHER_SCIENCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GATHER_SCIENCE_REQ);

	m_EncodeFuncArray[CLIGS_GATHER_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GATHER_SCIENCE_ACK;
	m_DecodeFuncArray[CLIGS_GATHER_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GATHER_SCIENCE_ACK;
	m_vecMsgList.push_back(CLIGS_GATHER_SCIENCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GATHER_SCIENCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GATHER_SCIENCE_ACK);

	m_EncodeFuncArray[CLIGS_MELT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MELT_REQ;
	m_DecodeFuncArray[CLIGS_MELT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MELT_REQ;
	m_vecMsgList.push_back(CLIGS_MELT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_MELT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MELT_REQ);

	m_EncodeFuncArray[CLIGS_MELT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MELT_ACK;
	m_DecodeFuncArray[CLIGS_MELT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MELT_ACK;
	m_vecMsgList.push_back(CLIGS_MELT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_MELT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MELT_ACK);

	m_EncodeFuncArray[CLIGS_NOTICE_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_NOTICE_NTF;
	m_DecodeFuncArray[CLIGS_NOTICE_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_NOTICE_NTF;
	m_vecMsgList.push_back(CLIGS_NOTICE_NTF);
	if( (INT32)sizeof(PKT_CLIGS_NOTICE_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_NOTICE_NTF);

	m_EncodeFuncArray[CLIGS_ACTIVITY_ENC_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACTIVITY_ENC_NTF;
	m_DecodeFuncArray[CLIGS_ACTIVITY_ENC_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACTIVITY_ENC_NTF;
	m_vecMsgList.push_back(CLIGS_ACTIVITY_ENC_NTF);
	if( (INT32)sizeof(PKT_CLIGS_ACTIVITY_ENC_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACTIVITY_ENC_NTF);

	m_EncodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ2;
	m_DecodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ2;
	m_vecMsgList.push_back(CLIGS_OPEN_AWAKEN_TAB_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_REQ2);

	m_EncodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK2;
	m_DecodeFuncArray[CLIGS_OPEN_AWAKEN_TAB_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK2;
	m_vecMsgList.push_back(CLIGS_OPEN_AWAKEN_TAB_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AWAKEN_TAB_ACK2);

	m_EncodeFuncArray[CLIGS_AWAKEN_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AWAKEN_REQ2;
	m_DecodeFuncArray[CLIGS_AWAKEN_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AWAKEN_REQ2;
	m_vecMsgList.push_back(CLIGS_AWAKEN_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_AWAKEN_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AWAKEN_REQ2);

	m_EncodeFuncArray[CLIGS_AWAKEN_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AWAKEN_ACK2;
	m_DecodeFuncArray[CLIGS_AWAKEN_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AWAKEN_ACK2;
	m_vecMsgList.push_back(CLIGS_AWAKEN_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_AWAKEN_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AWAKEN_ACK2);

	m_EncodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2;
	m_DecodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2;
	m_vecMsgList.push_back(CLIGS_OPEN_DRESS_STUDY_TAB_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2);

	m_EncodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2;
	m_DecodeFuncArray[CLIGS_OPEN_DRESS_STUDY_TAB_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2;
	m_vecMsgList.push_back(CLIGS_OPEN_DRESS_STUDY_TAB_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2);

	m_EncodeFuncArray[CLIGS_DRESS_STUDY_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRESS_STUDY_REQ2;
	m_DecodeFuncArray[CLIGS_DRESS_STUDY_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRESS_STUDY_REQ2;
	m_vecMsgList.push_back(CLIGS_DRESS_STUDY_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_REQ2);

	m_EncodeFuncArray[CLIGS_DRESS_STUDY_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRESS_STUDY_ACK2;
	m_DecodeFuncArray[CLIGS_DRESS_STUDY_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRESS_STUDY_ACK2;
	m_vecMsgList.push_back(CLIGS_DRESS_STUDY_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRESS_STUDY_ACK2);

	m_EncodeFuncArray[CLIGS_STUDY_TO_EXP_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_TO_EXP_REQ2;
	m_DecodeFuncArray[CLIGS_STUDY_TO_EXP_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_TO_EXP_REQ2;
	m_vecMsgList.push_back(CLIGS_STUDY_TO_EXP_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_REQ2);

	m_EncodeFuncArray[CLIGS_STUDY_TO_EXP_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_TO_EXP_ACK2;
	m_DecodeFuncArray[CLIGS_STUDY_TO_EXP_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_TO_EXP_ACK2;
	m_vecMsgList.push_back(CLIGS_STUDY_TO_EXP_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_TO_EXP_ACK2);

	m_EncodeFuncArray[CLIGS_STUDY_UPGRADE_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_UPGRADE_REQ2;
	m_DecodeFuncArray[CLIGS_STUDY_UPGRADE_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_UPGRADE_REQ2;
	m_vecMsgList.push_back(CLIGS_STUDY_UPGRADE_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_REQ2);

	m_EncodeFuncArray[CLIGS_STUDY_UPGRADE_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_STUDY_UPGRADE_ACK2;
	m_DecodeFuncArray[CLIGS_STUDY_UPGRADE_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_STUDY_UPGRADE_ACK2;
	m_vecMsgList.push_back(CLIGS_STUDY_UPGRADE_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_STUDY_UPGRADE_ACK2);

	m_EncodeFuncArray[CLIGS_OPEN_BLUE_PAVILION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BLUE_PAVILION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_BLUE_PAVILION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BLUE_PAVILION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_BLUE_PAVILION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BLUE_PAVILION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BLUE_PAVILION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_BLUE_PAVILION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BLUE_PAVILION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_BLUE_PAVILION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BLUE_PAVILION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_BLUE_PAVILION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BLUE_PAVILION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BLUE_PAVILION_ACK);

	m_EncodeFuncArray[CLIGS_BEGBLUE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BEGBLUE_REQ;
	m_DecodeFuncArray[CLIGS_BEGBLUE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BEGBLUE_REQ;
	m_vecMsgList.push_back(CLIGS_BEGBLUE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BEGBLUE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BEGBLUE_REQ);

	m_EncodeFuncArray[CLIGS_BEGBLUE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BEGBLUE_ACK;
	m_DecodeFuncArray[CLIGS_BEGBLUE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BEGBLUE_ACK;
	m_vecMsgList.push_back(CLIGS_BEGBLUE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BEGBLUE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BEGBLUE_ACK);

	m_EncodeFuncArray[CLIGS_IMPROVELUCK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_IMPROVELUCK_REQ;
	m_DecodeFuncArray[CLIGS_IMPROVELUCK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_IMPROVELUCK_REQ;
	m_vecMsgList.push_back(CLIGS_IMPROVELUCK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_IMPROVELUCK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_IMPROVELUCK_REQ);

	m_EncodeFuncArray[CLIGS_IMPROVELUCK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_IMPROVELUCK_ACK;
	m_DecodeFuncArray[CLIGS_IMPROVELUCK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_IMPROVELUCK_ACK;
	m_vecMsgList.push_back(CLIGS_IMPROVELUCK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_IMPROVELUCK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_IMPROVELUCK_ACK);

	m_EncodeFuncArray[CLIGS_COMFIRM_BEGBLUE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COMFIRM_BEGBLUE_REQ;
	m_DecodeFuncArray[CLIGS_COMFIRM_BEGBLUE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COMFIRM_BEGBLUE_REQ;
	m_vecMsgList.push_back(CLIGS_COMFIRM_BEGBLUE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COMFIRM_BEGBLUE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COMFIRM_BEGBLUE_REQ);

	m_EncodeFuncArray[CLIGS_COMFIRM_BEGBLUE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COMFIRM_BEGBLUE_ACK;
	m_DecodeFuncArray[CLIGS_COMFIRM_BEGBLUE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COMFIRM_BEGBLUE_ACK;
	m_vecMsgList.push_back(CLIGS_COMFIRM_BEGBLUE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COMFIRM_BEGBLUE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COMFIRM_BEGBLUE_ACK);

	m_EncodeFuncArray[CLIGS_GET_OPENLIGHT_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_OPENLIGHT_INFO_REQ;
	m_DecodeFuncArray[CLIGS_GET_OPENLIGHT_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_OPENLIGHT_INFO_REQ;
	m_vecMsgList.push_back(CLIGS_GET_OPENLIGHT_INFO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_OPENLIGHT_INFO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_OPENLIGHT_INFO_REQ);

	m_EncodeFuncArray[CLIGS_GET_OPENLIGHT_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_OPENLIGHT_INFO_ACK;
	m_DecodeFuncArray[CLIGS_GET_OPENLIGHT_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_OPENLIGHT_INFO_ACK;
	m_vecMsgList.push_back(CLIGS_GET_OPENLIGHT_INFO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_OPENLIGHT_INFO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_OPENLIGHT_INFO_ACK);

	m_EncodeFuncArray[CLIGS_OPENLIGHT_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPENLIGHT_INFO_REQ;
	m_DecodeFuncArray[CLIGS_OPENLIGHT_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPENLIGHT_INFO_REQ;
	m_vecMsgList.push_back(CLIGS_OPENLIGHT_INFO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPENLIGHT_INFO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPENLIGHT_INFO_REQ);

	m_EncodeFuncArray[CLIGS_OPENLIGHT_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPENLIGHT_INFO_ACK;
	m_DecodeFuncArray[CLIGS_OPENLIGHT_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPENLIGHT_INFO_ACK;
	m_vecMsgList.push_back(CLIGS_OPENLIGHT_INFO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPENLIGHT_INFO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPENLIGHT_INFO_ACK);

	m_EncodeFuncArray[CLIGS_CHANGE_CAREER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHANGE_CAREER_REQ;
	m_DecodeFuncArray[CLIGS_CHANGE_CAREER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHANGE_CAREER_REQ;
	m_vecMsgList.push_back(CLIGS_CHANGE_CAREER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CHANGE_CAREER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHANGE_CAREER_REQ);

	m_EncodeFuncArray[CLIGS_CHANGE_CAREER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHANGE_CAREER_ACK;
	m_DecodeFuncArray[CLIGS_CHANGE_CAREER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHANGE_CAREER_ACK;
	m_vecMsgList.push_back(CLIGS_CHANGE_CAREER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CHANGE_CAREER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHANGE_CAREER_ACK);

	m_EncodeFuncArray[CLIGS_CHALLENGE_MYSELF_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHALLENGE_MYSELF_REQ;
	m_DecodeFuncArray[CLIGS_CHALLENGE_MYSELF_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHALLENGE_MYSELF_REQ;
	m_vecMsgList.push_back(CLIGS_CHALLENGE_MYSELF_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CHALLENGE_MYSELF_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHALLENGE_MYSELF_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GEM_MAKER_TAB_EX_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GEM_MAKER_TAB_EX_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GEM_MAKER_TAB_EX_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GEM_MAKER_TAB_EX_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GEM_MAKER_TAB_EX_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GEM_MAKER_TAB_EX_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_ITEM_EXCHANGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_ITEM_EXCHANGE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_ITEM_EXCHANGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_ITEM_EXCHANGE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_ITEM_EXCHANGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_ITEM_EXCHANGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_ITEM_EXCHANGE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_ITEM_EXCHANGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_ITEM_EXCHANGE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_ITEM_EXCHANGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_ITEM_EXCHANGE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_ITEM_EXCHANGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_ITEM_EXCHANGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_ITEM_EXCHANGE_ACK);

	m_EncodeFuncArray[CLIGS_ITEM_EXCHANGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ITEM_EXCHANGE_REQ;
	m_DecodeFuncArray[CLIGS_ITEM_EXCHANGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ITEM_EXCHANGE_REQ;
	m_vecMsgList.push_back(CLIGS_ITEM_EXCHANGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ITEM_EXCHANGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ITEM_EXCHANGE_REQ);

	m_EncodeFuncArray[CLIGS_ITEM_EXCHANGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ITEM_EXCHANGE_ACK;
	m_DecodeFuncArray[CLIGS_ITEM_EXCHANGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ITEM_EXCHANGE_ACK;
	m_vecMsgList.push_back(CLIGS_ITEM_EXCHANGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ITEM_EXCHANGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ITEM_EXCHANGE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_BIGREWARD_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BIGREWARD_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_BIGREWARD_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BIGREWARD_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_BIGREWARD_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BIGREWARD_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BIGREWARD_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_BIGREWARD_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BIGREWARD_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_BIGREWARD_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BIGREWARD_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_BIGREWARD_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BIGREWARD_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BIGREWARD_TAB_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_COLLECT_CLUE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_COLLECT_CLUE_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_COLLECT_CLUE_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_COLLECT_CLUE_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_COLLECT_CLUE_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_COLLECT_CLUE_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_COLLECT_CLUE_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_COLLECT_CLUE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_COLLECT_CLUE_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_COLLECT_CLUE_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_COLLECT_CLUE_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_COLLECT_CLUE_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_COLLECT_CLUE_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_COLLECT_CLUE_TAB_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_CLUE_GRID_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CLUE_GRID_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_CLUE_GRID_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CLUE_GRID_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_CLUE_GRID_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CLUE_GRID_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CLUE_GRID_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_CLUE_GRID_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CLUE_GRID_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_CLUE_GRID_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CLUE_GRID_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_CLUE_GRID_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CLUE_GRID_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CLUE_GRID_ACK);

	m_EncodeFuncArray[CLIGS_SHAKE_DICE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SHAKE_DICE_REQ;
	m_DecodeFuncArray[CLIGS_SHAKE_DICE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SHAKE_DICE_REQ;
	m_vecMsgList.push_back(CLIGS_SHAKE_DICE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SHAKE_DICE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SHAKE_DICE_REQ);

	m_EncodeFuncArray[CLIGS_SHAKE_DICE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SHAKE_DICE_ACK;
	m_DecodeFuncArray[CLIGS_SHAKE_DICE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SHAKE_DICE_ACK;
	m_vecMsgList.push_back(CLIGS_SHAKE_DICE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SHAKE_DICE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SHAKE_DICE_ACK);

	m_EncodeFuncArray[CLIGS_REFRESH_DICE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REFRESH_DICE_REQ;
	m_DecodeFuncArray[CLIGS_REFRESH_DICE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REFRESH_DICE_REQ;
	m_vecMsgList.push_back(CLIGS_REFRESH_DICE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_REFRESH_DICE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REFRESH_DICE_REQ);

	m_EncodeFuncArray[CLIGS_REFRESH_DICE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REFRESH_DICE_ACK;
	m_DecodeFuncArray[CLIGS_REFRESH_DICE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REFRESH_DICE_ACK;
	m_vecMsgList.push_back(CLIGS_REFRESH_DICE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_REFRESH_DICE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REFRESH_DICE_ACK);

	m_EncodeFuncArray[CLIGS_COMFIRM_DICE_POINT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COMFIRM_DICE_POINT_REQ;
	m_DecodeFuncArray[CLIGS_COMFIRM_DICE_POINT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COMFIRM_DICE_POINT_REQ;
	m_vecMsgList.push_back(CLIGS_COMFIRM_DICE_POINT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COMFIRM_DICE_POINT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COMFIRM_DICE_POINT_REQ);

	m_EncodeFuncArray[CLIGS_COMFIRM_DICE_POINT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COMFIRM_DICE_POINT_ACK;
	m_DecodeFuncArray[CLIGS_COMFIRM_DICE_POINT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COMFIRM_DICE_POINT_ACK;
	m_vecMsgList.push_back(CLIGS_COMFIRM_DICE_POINT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COMFIRM_DICE_POINT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COMFIRM_DICE_POINT_ACK);

	m_EncodeFuncArray[CLIGS_PLAYER_RES_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_RES_NTF;
	m_DecodeFuncArray[CLIGS_PLAYER_RES_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_RES_NTF;
	m_vecMsgList.push_back(CLIGS_PLAYER_RES_NTF);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_RES_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_RES_NTF);

	m_EncodeFuncArray[CLIGS_OPERATING_ACTIVITY_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPERATING_ACTIVITY_NTF;
	m_DecodeFuncArray[CLIGS_OPERATING_ACTIVITY_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPERATING_ACTIVITY_NTF;
	m_vecMsgList.push_back(CLIGS_OPERATING_ACTIVITY_NTF);
	if( (INT32)sizeof(PKT_CLIGS_OPERATING_ACTIVITY_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPERATING_ACTIVITY_NTF);

	m_EncodeFuncArray[CLIGS_OPERATING_ACTIVITY_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPERATING_ACTIVITY_BATTLE_REQ;
	m_DecodeFuncArray[CLIGS_OPERATING_ACTIVITY_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPERATING_ACTIVITY_BATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_OPERATING_ACTIVITY_BATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPERATING_ACTIVITY_BATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPERATING_ACTIVITY_BATTLE_REQ);

	m_EncodeFuncArray[CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ;
	m_DecodeFuncArray[CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ;
	m_vecMsgList.push_back(CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ);

	m_EncodeFuncArray[CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK;
	m_DecodeFuncArray[CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK;
	m_vecMsgList.push_back(CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK);

	m_EncodeFuncArray[CLIGS_DEL_FRIEND_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DEL_FRIEND_REQ;
	m_DecodeFuncArray[CLIGS_DEL_FRIEND_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DEL_FRIEND_REQ;
	m_vecMsgList.push_back(CLIGS_DEL_FRIEND_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DEL_FRIEND_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DEL_FRIEND_REQ);

	m_EncodeFuncArray[CLIGS_DEL_FRIEND_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DEL_FRIEND_ACK;
	m_DecodeFuncArray[CLIGS_DEL_FRIEND_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DEL_FRIEND_ACK;
	m_vecMsgList.push_back(CLIGS_DEL_FRIEND_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DEL_FRIEND_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DEL_FRIEND_ACK);

	m_EncodeFuncArray[CLIGS_SEARCH_PLAYER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEARCH_PLAYER_REQ;
	m_DecodeFuncArray[CLIGS_SEARCH_PLAYER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEARCH_PLAYER_REQ;
	m_vecMsgList.push_back(CLIGS_SEARCH_PLAYER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SEARCH_PLAYER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEARCH_PLAYER_REQ);

	m_EncodeFuncArray[CLIGS_SEARCH_PLAYER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEARCH_PLAYER_ACK;
	m_DecodeFuncArray[CLIGS_SEARCH_PLAYER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEARCH_PLAYER_ACK;
	m_vecMsgList.push_back(CLIGS_SEARCH_PLAYER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SEARCH_PLAYER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEARCH_PLAYER_ACK);

	m_EncodeFuncArray[CLIGS_VIEW_PLAYER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_VIEW_PLAYER_REQ;
	m_DecodeFuncArray[CLIGS_VIEW_PLAYER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_VIEW_PLAYER_REQ;
	m_vecMsgList.push_back(CLIGS_VIEW_PLAYER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_VIEW_PLAYER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_VIEW_PLAYER_REQ);

	m_EncodeFuncArray[CLIGS_VIEW_PLAYER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_VIEW_PLAYER_ACK;
	m_DecodeFuncArray[CLIGS_VIEW_PLAYER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_VIEW_PLAYER_ACK;
	m_vecMsgList.push_back(CLIGS_VIEW_PLAYER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_VIEW_PLAYER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_VIEW_PLAYER_ACK);

	m_EncodeFuncArray[CLIGS_ADD_FRIEND_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ADD_FRIEND_REQ;
	m_DecodeFuncArray[CLIGS_ADD_FRIEND_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ADD_FRIEND_REQ;
	m_vecMsgList.push_back(CLIGS_ADD_FRIEND_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ADD_FRIEND_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ADD_FRIEND_REQ);

	m_EncodeFuncArray[CLIGS_ADD_FRIEND_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ADD_FRIEND_ACK;
	m_DecodeFuncArray[CLIGS_ADD_FRIEND_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ADD_FRIEND_ACK;
	m_vecMsgList.push_back(CLIGS_ADD_FRIEND_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ADD_FRIEND_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ADD_FRIEND_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_SEND_FLOWER_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_SEND_FLOWER_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_SEND_FLOWER_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SEND_FLOWER_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SEND_FLOWER_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_SEND_FLOWER_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_SEND_FLOWER_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_SEND_FLOWER_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SEND_FLOWER_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SEND_FLOWER_TAB_ACK);

	m_EncodeFuncArray[CLIGS_SEND_FLOWER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEND_FLOWER_REQ;
	m_DecodeFuncArray[CLIGS_SEND_FLOWER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEND_FLOWER_REQ;
	m_vecMsgList.push_back(CLIGS_SEND_FLOWER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SEND_FLOWER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEND_FLOWER_REQ);

	m_EncodeFuncArray[CLIGS_SEND_FLOWER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEND_FLOWER_ACK;
	m_DecodeFuncArray[CLIGS_SEND_FLOWER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEND_FLOWER_ACK;
	m_vecMsgList.push_back(CLIGS_SEND_FLOWER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SEND_FLOWER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEND_FLOWER_ACK);

	m_EncodeFuncArray[CLIGS_GET_FLOWER_BY_PLAYERID_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_FLOWER_BY_PLAYERID_REQ;
	m_DecodeFuncArray[CLIGS_GET_FLOWER_BY_PLAYERID_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_FLOWER_BY_PLAYERID_REQ;
	m_vecMsgList.push_back(CLIGS_GET_FLOWER_BY_PLAYERID_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_FLOWER_BY_PLAYERID_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_FLOWER_BY_PLAYERID_REQ);

	m_EncodeFuncArray[CLIGS_GET_FLOWER_BY_PLAYERID_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_FLOWER_BY_PLAYERID_ACK;
	m_DecodeFuncArray[CLIGS_GET_FLOWER_BY_PLAYERID_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_FLOWER_BY_PLAYERID_ACK;
	m_vecMsgList.push_back(CLIGS_GET_FLOWER_BY_PLAYERID_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_FLOWER_BY_PLAYERID_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_FLOWER_BY_PLAYERID_ACK);

	m_EncodeFuncArray[CLIGS_GET_FLOWER_RANKING_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_FLOWER_RANKING_REQ;
	m_DecodeFuncArray[CLIGS_GET_FLOWER_RANKING_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_FLOWER_RANKING_REQ;
	m_vecMsgList.push_back(CLIGS_GET_FLOWER_RANKING_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_FLOWER_RANKING_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_FLOWER_RANKING_REQ);

	m_EncodeFuncArray[CLIGS_GET_FLOWER_RANKING_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_FLOWER_RANKING_ACK;
	m_DecodeFuncArray[CLIGS_GET_FLOWER_RANKING_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_FLOWER_RANKING_ACK;
	m_vecMsgList.push_back(CLIGS_GET_FLOWER_RANKING_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_FLOWER_RANKING_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_FLOWER_RANKING_ACK);

	m_EncodeFuncArray[CLIGS_GET_PRIVATE_MSG_LOG_LIST_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_REQ;
	m_DecodeFuncArray[CLIGS_GET_PRIVATE_MSG_LOG_LIST_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_REQ;
	m_vecMsgList.push_back(CLIGS_GET_PRIVATE_MSG_LOG_LIST_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_REQ);

	m_EncodeFuncArray[CLIGS_GET_PRIVATE_MSG_LOG_LIST_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_ACK;
	m_DecodeFuncArray[CLIGS_GET_PRIVATE_MSG_LOG_LIST_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_ACK;
	m_vecMsgList.push_back(CLIGS_GET_PRIVATE_MSG_LOG_LIST_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_ACK);

	m_EncodeFuncArray[CLIGS_SEND_PRIVATE_MSG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEND_PRIVATE_MSG_REQ;
	m_DecodeFuncArray[CLIGS_SEND_PRIVATE_MSG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEND_PRIVATE_MSG_REQ;
	m_vecMsgList.push_back(CLIGS_SEND_PRIVATE_MSG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SEND_PRIVATE_MSG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEND_PRIVATE_MSG_REQ);

	m_EncodeFuncArray[CLIGS_SEND_PRIVATE_MSG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEND_PRIVATE_MSG_ACK;
	m_DecodeFuncArray[CLIGS_SEND_PRIVATE_MSG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEND_PRIVATE_MSG_ACK;
	m_vecMsgList.push_back(CLIGS_SEND_PRIVATE_MSG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SEND_PRIVATE_MSG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEND_PRIVATE_MSG_ACK);

	m_EncodeFuncArray[CLIGS_DEL_PRIVATE_MSG_LOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DEL_PRIVATE_MSG_LOG_REQ;
	m_DecodeFuncArray[CLIGS_DEL_PRIVATE_MSG_LOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DEL_PRIVATE_MSG_LOG_REQ;
	m_vecMsgList.push_back(CLIGS_DEL_PRIVATE_MSG_LOG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DEL_PRIVATE_MSG_LOG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DEL_PRIVATE_MSG_LOG_REQ);

	m_EncodeFuncArray[CLIGS_DEL_PRIVATE_MSG_LOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DEL_PRIVATE_MSG_LOG_ACK;
	m_DecodeFuncArray[CLIGS_DEL_PRIVATE_MSG_LOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DEL_PRIVATE_MSG_LOG_ACK;
	m_vecMsgList.push_back(CLIGS_DEL_PRIVATE_MSG_LOG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DEL_PRIVATE_MSG_LOG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DEL_PRIVATE_MSG_LOG_ACK);

	m_EncodeFuncArray[CLIGS_ADD_TO_BLACKLIST_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ADD_TO_BLACKLIST_REQ;
	m_DecodeFuncArray[CLIGS_ADD_TO_BLACKLIST_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ADD_TO_BLACKLIST_REQ;
	m_vecMsgList.push_back(CLIGS_ADD_TO_BLACKLIST_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ADD_TO_BLACKLIST_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ADD_TO_BLACKLIST_REQ);

	m_EncodeFuncArray[CLIGS_ADD_TO_BLACKLIST_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ADD_TO_BLACKLIST_ACK;
	m_DecodeFuncArray[CLIGS_ADD_TO_BLACKLIST_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ADD_TO_BLACKLIST_ACK;
	m_vecMsgList.push_back(CLIGS_ADD_TO_BLACKLIST_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ADD_TO_BLACKLIST_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ADD_TO_BLACKLIST_ACK);

	m_EncodeFuncArray[CLIGS_MOVE_FROM_BLACKLIST_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MOVE_FROM_BLACKLIST_REQ;
	m_DecodeFuncArray[CLIGS_MOVE_FROM_BLACKLIST_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MOVE_FROM_BLACKLIST_REQ;
	m_vecMsgList.push_back(CLIGS_MOVE_FROM_BLACKLIST_REQ);
	if( (INT32)sizeof(PKT_CLIGS_MOVE_FROM_BLACKLIST_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MOVE_FROM_BLACKLIST_REQ);

	m_EncodeFuncArray[CLIGS_MOVE_FROM_BLACKLIST_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MOVE_FROM_BLACKLIST_ACK;
	m_DecodeFuncArray[CLIGS_MOVE_FROM_BLACKLIST_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MOVE_FROM_BLACKLIST_ACK;
	m_vecMsgList.push_back(CLIGS_MOVE_FROM_BLACKLIST_ACK);
	if( (INT32)sizeof(PKT_CLIGS_MOVE_FROM_BLACKLIST_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MOVE_FROM_BLACKLIST_ACK);

	m_EncodeFuncArray[CLIGS_ONLINE_PRIVATE_MSG_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ONLINE_PRIVATE_MSG_NTF;
	m_DecodeFuncArray[CLIGS_ONLINE_PRIVATE_MSG_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ONLINE_PRIVATE_MSG_NTF;
	m_vecMsgList.push_back(CLIGS_ONLINE_PRIVATE_MSG_NTF);
	if( (INT32)sizeof(PKT_CLIGS_ONLINE_PRIVATE_MSG_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ONLINE_PRIVATE_MSG_NTF);

	m_EncodeFuncArray[CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_REQ;
	m_DecodeFuncArray[CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_REQ;
	m_vecMsgList.push_back(CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_REQ);

	m_EncodeFuncArray[CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_ACK;
	m_DecodeFuncArray[CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_ACK;
	m_vecMsgList.push_back(CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_ACK);

	m_EncodeFuncArray[CLIGS_READ_OFFLINE_MSG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_READ_OFFLINE_MSG_REQ;
	m_DecodeFuncArray[CLIGS_READ_OFFLINE_MSG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_READ_OFFLINE_MSG_REQ;
	m_vecMsgList.push_back(CLIGS_READ_OFFLINE_MSG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_READ_OFFLINE_MSG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_READ_OFFLINE_MSG_REQ);

	m_EncodeFuncArray[CLIGS_READ_OFFLINE_MSG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_READ_OFFLINE_MSG_ACK;
	m_DecodeFuncArray[CLIGS_READ_OFFLINE_MSG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_READ_OFFLINE_MSG_ACK;
	m_vecMsgList.push_back(CLIGS_READ_OFFLINE_MSG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_READ_OFFLINE_MSG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_READ_OFFLINE_MSG_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_RAREITEMROOM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RAREITEMROOM_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_RAREITEMROOM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RAREITEMROOM_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_RAREITEMROOM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RAREITEMROOM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RAREITEMROOM_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_RAREITEMROOM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RAREITEMROOM_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_RAREITEMROOM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RAREITEMROOM_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_RAREITEMROOM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RAREITEMROOM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RAREITEMROOM_ACK);

	m_EncodeFuncArray[CLIGS_BUY_RAREITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_RAREITEM_REQ;
	m_DecodeFuncArray[CLIGS_BUY_RAREITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_RAREITEM_REQ;
	m_vecMsgList.push_back(CLIGS_BUY_RAREITEM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BUY_RAREITEM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_RAREITEM_REQ);

	m_EncodeFuncArray[CLIGS_BUY_RAREITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_RAREITEM_ACK;
	m_DecodeFuncArray[CLIGS_BUY_RAREITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_RAREITEM_ACK;
	m_vecMsgList.push_back(CLIGS_BUY_RAREITEM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BUY_RAREITEM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_RAREITEM_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_UPGRADERAREITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_UPGRADERAREITEM_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_UPGRADERAREITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_UPGRADERAREITEM_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_UPGRADERAREITEM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_UPGRADERAREITEM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_UPGRADERAREITEM_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_UPGRADERAREITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_UPGRADERAREITEM_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_UPGRADERAREITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_UPGRADERAREITEM_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_UPGRADERAREITEM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_UPGRADERAREITEM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_UPGRADERAREITEM_ACK);

	m_EncodeFuncArray[CLIGS_UPGRADE_RAREITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_RAREITEM_REQ;
	m_DecodeFuncArray[CLIGS_UPGRADE_RAREITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_RAREITEM_REQ;
	m_vecMsgList.push_back(CLIGS_UPGRADE_RAREITEM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_RAREITEM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_RAREITEM_REQ);

	m_EncodeFuncArray[CLIGS_UPGRADE_RAREITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_RAREITEM_ACK;
	m_DecodeFuncArray[CLIGS_UPGRADE_RAREITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_RAREITEM_ACK;
	m_vecMsgList.push_back(CLIGS_UPGRADE_RAREITEM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_RAREITEM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_RAREITEM_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GYMNASIUM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GYMNASIUM_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GYMNASIUM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GYMNASIUM_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GYMNASIUM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GYMNASIUM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GYMNASIUM_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GYMNASIUM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GYMNASIUM_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GYMNASIUM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GYMNASIUM_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GYMNASIUM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GYMNASIUM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GYMNASIUM_ACK);

	m_EncodeFuncArray[CLIGS_LEARN_GYMNASIUM_SKILL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ;
	m_DecodeFuncArray[CLIGS_LEARN_GYMNASIUM_SKILL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ;
	m_vecMsgList.push_back(CLIGS_LEARN_GYMNASIUM_SKILL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ);

	m_EncodeFuncArray[CLIGS_LEARN_GYMNASIUM_SKILL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK;
	m_DecodeFuncArray[CLIGS_LEARN_GYMNASIUM_SKILL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK;
	m_vecMsgList.push_back(CLIGS_LEARN_GYMNASIUM_SKILL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GYMNASIUM_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GYMNASIUM_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GYMNASIUM_UPGRADE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GYMNASIUM_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GYMNASIUM_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GYMNASIUM_UPGRADE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_ACK);

	m_EncodeFuncArray[CLIGS_GYMNASIUM_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GYMNASIUM_UPGRADE_REQ;
	m_DecodeFuncArray[CLIGS_GYMNASIUM_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GYMNASIUM_UPGRADE_REQ;
	m_vecMsgList.push_back(CLIGS_GYMNASIUM_UPGRADE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GYMNASIUM_UPGRADE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GYMNASIUM_UPGRADE_REQ);

	m_EncodeFuncArray[CLIGS_GYMNASIUM_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GYMNASIUM_UPGRADE_ACK;
	m_DecodeFuncArray[CLIGS_GYMNASIUM_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GYMNASIUM_UPGRADE_ACK;
	m_vecMsgList.push_back(CLIGS_GYMNASIUM_UPGRADE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GYMNASIUM_UPGRADE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GYMNASIUM_UPGRADE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_SHADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SHADE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_SHADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SHADE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_SHADE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SHADE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SHADE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_SHADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SHADE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_SHADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SHADE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_SHADE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SHADE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SHADE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_SHADE_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SHADE_UPGRADE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_SHADE_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SHADE_UPGRADE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_SHADE_UPGRADE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SHADE_UPGRADE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SHADE_UPGRADE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_SHADE_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SHADE_UPGRADE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_SHADE_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SHADE_UPGRADE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_SHADE_UPGRADE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SHADE_UPGRADE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SHADE_UPGRADE_ACK);

	m_EncodeFuncArray[CLIGS_SHADE_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SHADE_UPGRADE_REQ;
	m_DecodeFuncArray[CLIGS_SHADE_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SHADE_UPGRADE_REQ;
	m_vecMsgList.push_back(CLIGS_SHADE_UPGRADE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SHADE_UPGRADE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SHADE_UPGRADE_REQ);

	m_EncodeFuncArray[CLIGS_SHADE_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SHADE_UPGRADE_ACK;
	m_DecodeFuncArray[CLIGS_SHADE_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SHADE_UPGRADE_ACK;
	m_vecMsgList.push_back(CLIGS_SHADE_UPGRADE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SHADE_UPGRADE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SHADE_UPGRADE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GOLDMODE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GOLDMODE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GOLDMODE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GOLDMODE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GOLDMODE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GOLDMODE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GOLDMODE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GOLDMODE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GOLDMODE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GOLDMODE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GOLDMODE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GOLDMODE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GOLDMODE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GOLDMODE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_HUNTING_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_HUNTING_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_HUNTING_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_HUNTING_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_HUNTING_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_HUNTING_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_HUNTING_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_HUNTING_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_HUNTING_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_HUNTING_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_HUNTING_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_HUNTING_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_HUNTING_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_HUNTING_ACK);

	m_EncodeFuncArray[CLIGS_FIND_MONSTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FIND_MONSTER_REQ;
	m_DecodeFuncArray[CLIGS_FIND_MONSTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FIND_MONSTER_REQ;
	m_vecMsgList.push_back(CLIGS_FIND_MONSTER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_FIND_MONSTER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FIND_MONSTER_REQ);

	m_EncodeFuncArray[CLIGS_FIND_MONSTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FIND_MONSTER_ACK;
	m_DecodeFuncArray[CLIGS_FIND_MONSTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FIND_MONSTER_ACK;
	m_vecMsgList.push_back(CLIGS_FIND_MONSTER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_FIND_MONSTER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FIND_MONSTER_ACK);

	m_EncodeFuncArray[CLIGS_HUNTING_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HUNTING_BATTLE_REQ;
	m_DecodeFuncArray[CLIGS_HUNTING_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HUNTING_BATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_HUNTING_BATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_HUNTING_BATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HUNTING_BATTLE_REQ);

	m_EncodeFuncArray[CLIGS_CHANGE_SCHEDEULE_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHANGE_SCHEDEULE_NTF;
	m_DecodeFuncArray[CLIGS_CHANGE_SCHEDEULE_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHANGE_SCHEDEULE_NTF;
	m_vecMsgList.push_back(CLIGS_CHANGE_SCHEDEULE_NTF);
	if( (INT32)sizeof(PKT_CLIGS_CHANGE_SCHEDEULE_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHANGE_SCHEDEULE_NTF);

	m_EncodeFuncArray[CLIGS_OPEN_HOT_SPRING_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_HOT_SPRING_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_HOT_SPRING_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_HOT_SPRING_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_HOT_SPRING_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_HOT_SPRING_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_HOT_SPRING_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_HOT_SPRING_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_HOT_SPRING_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_HOT_SPRING_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_HOT_SPRING_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_HOT_SPRING_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_HOT_SPRING_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_HOT_SPRING_ACK);

	m_EncodeFuncArray[CLIGS_SELECT_WINE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SELECT_WINE_REQ;
	m_DecodeFuncArray[CLIGS_SELECT_WINE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SELECT_WINE_REQ;
	m_vecMsgList.push_back(CLIGS_SELECT_WINE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SELECT_WINE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SELECT_WINE_REQ);

	m_EncodeFuncArray[CLIGS_SELECT_WINE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SELECT_WINE_ACK;
	m_DecodeFuncArray[CLIGS_SELECT_WINE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SELECT_WINE_ACK;
	m_vecMsgList.push_back(CLIGS_SELECT_WINE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SELECT_WINE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SELECT_WINE_ACK);

	m_EncodeFuncArray[CLIGS_DRINK_WINE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRINK_WINE_REQ;
	m_DecodeFuncArray[CLIGS_DRINK_WINE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRINK_WINE_REQ;
	m_vecMsgList.push_back(CLIGS_DRINK_WINE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DRINK_WINE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRINK_WINE_REQ);

	m_EncodeFuncArray[CLIGS_DRINK_WINE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRINK_WINE_ACK;
	m_DecodeFuncArray[CLIGS_DRINK_WINE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRINK_WINE_ACK;
	m_vecMsgList.push_back(CLIGS_DRINK_WINE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DRINK_WINE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRINK_WINE_ACK);

	m_EncodeFuncArray[CLIGS_DRINK_WINE_MOVE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRINK_WINE_MOVE_REQ;
	m_DecodeFuncArray[CLIGS_DRINK_WINE_MOVE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRINK_WINE_MOVE_REQ;
	m_vecMsgList.push_back(CLIGS_DRINK_WINE_MOVE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DRINK_WINE_MOVE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRINK_WINE_MOVE_REQ);

	m_EncodeFuncArray[CLIGS_DRINK_WINE_MOVE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRINK_WINE_MOVE_ACK;
	m_DecodeFuncArray[CLIGS_DRINK_WINE_MOVE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRINK_WINE_MOVE_ACK;
	m_vecMsgList.push_back(CLIGS_DRINK_WINE_MOVE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DRINK_WINE_MOVE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRINK_WINE_MOVE_ACK);

	m_EncodeFuncArray[CLIGS_LEAVE_HOT_SPRING_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEAVE_HOT_SPRING_REQ;
	m_DecodeFuncArray[CLIGS_LEAVE_HOT_SPRING_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEAVE_HOT_SPRING_REQ;
	m_vecMsgList.push_back(CLIGS_LEAVE_HOT_SPRING_REQ);
	if( (INT32)sizeof(PKT_CLIGS_LEAVE_HOT_SPRING_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEAVE_HOT_SPRING_REQ);

	m_EncodeFuncArray[CLIGS_LEAVE_HOT_SPRING_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEAVE_HOT_SPRING_ACK;
	m_DecodeFuncArray[CLIGS_LEAVE_HOT_SPRING_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEAVE_HOT_SPRING_ACK;
	m_vecMsgList.push_back(CLIGS_LEAVE_HOT_SPRING_ACK);
	if( (INT32)sizeof(PKT_CLIGS_LEAVE_HOT_SPRING_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEAVE_HOT_SPRING_ACK);

	m_EncodeFuncArray[CLIGS_HOT_SPRING_POS_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HOT_SPRING_POS_NTF;
	m_DecodeFuncArray[CLIGS_HOT_SPRING_POS_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HOT_SPRING_POS_NTF;
	m_vecMsgList.push_back(CLIGS_HOT_SPRING_POS_NTF);
	if( (INT32)sizeof(PKT_CLIGS_HOT_SPRING_POS_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HOT_SPRING_POS_NTF);

	m_EncodeFuncArray[CLIGS_CHANGE_OTHER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHANGE_OTHER_REQ;
	m_DecodeFuncArray[CLIGS_CHANGE_OTHER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHANGE_OTHER_REQ;
	m_vecMsgList.push_back(CLIGS_CHANGE_OTHER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CHANGE_OTHER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHANGE_OTHER_REQ);

	m_EncodeFuncArray[CLIGS_CHANGE_OTHER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHANGE_OTHER_ACK;
	m_DecodeFuncArray[CLIGS_CHANGE_OTHER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHANGE_OTHER_ACK;
	m_vecMsgList.push_back(CLIGS_CHANGE_OTHER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CHANGE_OTHER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHANGE_OTHER_ACK);

	m_EncodeFuncArray[CLIGS_GIVE_WINE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GIVE_WINE_REQ;
	m_DecodeFuncArray[CLIGS_GIVE_WINE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GIVE_WINE_REQ;
	m_vecMsgList.push_back(CLIGS_GIVE_WINE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GIVE_WINE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GIVE_WINE_REQ);

	m_EncodeFuncArray[CLIGS_GIVE_WINE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GIVE_WINE_ACK;
	m_DecodeFuncArray[CLIGS_GIVE_WINE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GIVE_WINE_ACK;
	m_vecMsgList.push_back(CLIGS_GIVE_WINE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GIVE_WINE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GIVE_WINE_ACK);

	m_EncodeFuncArray[CLIGS_CLICK_SELECT_WINE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLICK_SELECT_WINE_REQ;
	m_DecodeFuncArray[CLIGS_CLICK_SELECT_WINE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLICK_SELECT_WINE_REQ;
	m_vecMsgList.push_back(CLIGS_CLICK_SELECT_WINE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLICK_SELECT_WINE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLICK_SELECT_WINE_REQ);

	m_EncodeFuncArray[CLIGS_CLICK_SELECT_WINE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLICK_SELECT_WINE_ACK;
	m_DecodeFuncArray[CLIGS_CLICK_SELECT_WINE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLICK_SELECT_WINE_ACK;
	m_vecMsgList.push_back(CLIGS_CLICK_SELECT_WINE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLICK_SELECT_WINE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLICK_SELECT_WINE_ACK);

	m_EncodeFuncArray[CLIGS_SURE_GIVE_WINE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SURE_GIVE_WINE_REQ;
	m_DecodeFuncArray[CLIGS_SURE_GIVE_WINE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SURE_GIVE_WINE_REQ;
	m_vecMsgList.push_back(CLIGS_SURE_GIVE_WINE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SURE_GIVE_WINE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SURE_GIVE_WINE_REQ);

	m_EncodeFuncArray[CLIGS_SURE_GIVE_WINE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SURE_GIVE_WINE_ACK;
	m_DecodeFuncArray[CLIGS_SURE_GIVE_WINE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SURE_GIVE_WINE_ACK;
	m_vecMsgList.push_back(CLIGS_SURE_GIVE_WINE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SURE_GIVE_WINE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SURE_GIVE_WINE_ACK);

	m_EncodeFuncArray[CLIGS_CLOSED_MONSTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLOSED_MONSTER_REQ;
	m_DecodeFuncArray[CLIGS_CLOSED_MONSTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLOSED_MONSTER_REQ;
	m_vecMsgList.push_back(CLIGS_CLOSED_MONSTER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CLOSED_MONSTER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLOSED_MONSTER_REQ);

	m_EncodeFuncArray[CLIGS_CLOSED_MONSTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLOSED_MONSTER_ACK;
	m_DecodeFuncArray[CLIGS_CLOSED_MONSTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLOSED_MONSTER_ACK;
	m_vecMsgList.push_back(CLIGS_CLOSED_MONSTER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CLOSED_MONSTER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLOSED_MONSTER_ACK);

	m_EncodeFuncArray[CLIGS_FACTION_PLAYER_CHANGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FACTION_PLAYER_CHANGE_REQ;
	m_DecodeFuncArray[CLIGS_FACTION_PLAYER_CHANGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FACTION_PLAYER_CHANGE_REQ;
	m_vecMsgList.push_back(CLIGS_FACTION_PLAYER_CHANGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_FACTION_PLAYER_CHANGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FACTION_PLAYER_CHANGE_REQ);

	m_EncodeFuncArray[CLIGS_FACTION_PLAYER_CHANGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FACTION_PLAYER_CHANGE_ACK;
	m_DecodeFuncArray[CLIGS_FACTION_PLAYER_CHANGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FACTION_PLAYER_CHANGE_ACK;
	m_vecMsgList.push_back(CLIGS_FACTION_PLAYER_CHANGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_FACTION_PLAYER_CHANGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FACTION_PLAYER_CHANGE_ACK);

	m_EncodeFuncArray[CLIGS_GIVE_WINE_ACTIVITY_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GIVE_WINE_ACTIVITY_NTF;
	m_DecodeFuncArray[CLIGS_GIVE_WINE_ACTIVITY_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GIVE_WINE_ACTIVITY_NTF;
	m_vecMsgList.push_back(CLIGS_GIVE_WINE_ACTIVITY_NTF);
	if( (INT32)sizeof(PKT_CLIGS_GIVE_WINE_ACTIVITY_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GIVE_WINE_ACTIVITY_NTF);

	m_EncodeFuncArray[CLIGS_LEAVE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEAVE_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_LEAVE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEAVE_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_LEAVE_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_LEAVE_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEAVE_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_LEAVE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEAVE_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_LEAVE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEAVE_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_LEAVE_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_LEAVE_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEAVE_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_LEAVE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_LEAVE_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_LEAVE_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_LEAVE_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_LEAVE_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_LEAVE_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_LEAVE_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_LEAVE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_LEAVE_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_LEAVE_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_LEAVE_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_LEAVE_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_LEAVE_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_LEAVE_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_FACTION_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FACTION_UPGRADE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_FACTION_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FACTION_UPGRADE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_FACTION_UPGRADE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_UPGRADE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_UPGRADE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_FACTION_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FACTION_UPGRADE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_FACTION_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FACTION_UPGRADE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_FACTION_UPGRADE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_UPGRADE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_UPGRADE_ACK);

	m_EncodeFuncArray[CLIGS_FACTION_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FACTION_UPGRADE_REQ;
	m_DecodeFuncArray[CLIGS_FACTION_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FACTION_UPGRADE_REQ;
	m_vecMsgList.push_back(CLIGS_FACTION_UPGRADE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_FACTION_UPGRADE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FACTION_UPGRADE_REQ);

	m_EncodeFuncArray[CLIGS_FACTION_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FACTION_UPGRADE_ACK;
	m_DecodeFuncArray[CLIGS_FACTION_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FACTION_UPGRADE_ACK;
	m_vecMsgList.push_back(CLIGS_FACTION_UPGRADE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_FACTION_UPGRADE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FACTION_UPGRADE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_EQUIP_MASTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EQUIP_MASTER_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_EQUIP_MASTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EQUIP_MASTER_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_EQUIP_MASTER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_MASTER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_MASTER_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_EQUIP_MASTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EQUIP_MASTER_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_EQUIP_MASTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EQUIP_MASTER_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_EQUIP_MASTER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_MASTER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_MASTER_ACK);

	m_EncodeFuncArray[CLIGS_ACTIVATE_MASTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACTIVATE_MASTER_REQ;
	m_DecodeFuncArray[CLIGS_ACTIVATE_MASTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACTIVATE_MASTER_REQ;
	m_vecMsgList.push_back(CLIGS_ACTIVATE_MASTER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ACTIVATE_MASTER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACTIVATE_MASTER_REQ);

	m_EncodeFuncArray[CLIGS_ACTIVATE_MASTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACTIVATE_MASTER_ACK;
	m_DecodeFuncArray[CLIGS_ACTIVATE_MASTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACTIVATE_MASTER_ACK;
	m_vecMsgList.push_back(CLIGS_ACTIVATE_MASTER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ACTIVATE_MASTER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACTIVATE_MASTER_ACK);

	m_EncodeFuncArray[CLIGS_BREAK_MASTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BREAK_MASTER_REQ;
	m_DecodeFuncArray[CLIGS_BREAK_MASTER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BREAK_MASTER_REQ;
	m_vecMsgList.push_back(CLIGS_BREAK_MASTER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BREAK_MASTER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BREAK_MASTER_REQ);

	m_EncodeFuncArray[CLIGS_BREAK_MASTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BREAK_MASTER_ACK;
	m_DecodeFuncArray[CLIGS_BREAK_MASTER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BREAK_MASTER_ACK;
	m_vecMsgList.push_back(CLIGS_BREAK_MASTER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BREAK_MASTER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BREAK_MASTER_ACK);

	m_EncodeFuncArray[CLIGS_GET_MASTER_BOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_MASTER_BOOK_REQ;
	m_DecodeFuncArray[CLIGS_GET_MASTER_BOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_MASTER_BOOK_REQ;
	m_vecMsgList.push_back(CLIGS_GET_MASTER_BOOK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_MASTER_BOOK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_MASTER_BOOK_REQ);

	m_EncodeFuncArray[CLIGS_GET_MASTER_BOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_MASTER_BOOK_ACK;
	m_DecodeFuncArray[CLIGS_GET_MASTER_BOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_MASTER_BOOK_ACK;
	m_vecMsgList.push_back(CLIGS_GET_MASTER_BOOK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_MASTER_BOOK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_MASTER_BOOK_ACK);

	m_EncodeFuncArray[CLIGS_WIPE_MASTER_BOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_WIPE_MASTER_BOOK_REQ;
	m_DecodeFuncArray[CLIGS_WIPE_MASTER_BOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_WIPE_MASTER_BOOK_REQ;
	m_vecMsgList.push_back(CLIGS_WIPE_MASTER_BOOK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_WIPE_MASTER_BOOK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_WIPE_MASTER_BOOK_REQ);

	m_EncodeFuncArray[CLIGS_WIPE_MASTER_BOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_WIPE_MASTER_BOOK_ACK;
	m_DecodeFuncArray[CLIGS_WIPE_MASTER_BOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_WIPE_MASTER_BOOK_ACK;
	m_vecMsgList.push_back(CLIGS_WIPE_MASTER_BOOK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_WIPE_MASTER_BOOK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_WIPE_MASTER_BOOK_ACK);

	m_EncodeFuncArray[CLIGS_MASTER_CHEAT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MASTER_CHEAT_REQ;
	m_DecodeFuncArray[CLIGS_MASTER_CHEAT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MASTER_CHEAT_REQ;
	m_vecMsgList.push_back(CLIGS_MASTER_CHEAT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_MASTER_CHEAT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MASTER_CHEAT_REQ);

	m_EncodeFuncArray[CLIGS_MASTER_CHEAT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MASTER_CHEAT_ACK;
	m_DecodeFuncArray[CLIGS_MASTER_CHEAT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MASTER_CHEAT_ACK;
	m_vecMsgList.push_back(CLIGS_MASTER_CHEAT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_MASTER_CHEAT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MASTER_CHEAT_ACK);

	m_EncodeFuncArray[CLIGS_CONFIRM_MASTER_BOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CONFIRM_MASTER_BOOK_REQ;
	m_DecodeFuncArray[CLIGS_CONFIRM_MASTER_BOOK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CONFIRM_MASTER_BOOK_REQ;
	m_vecMsgList.push_back(CLIGS_CONFIRM_MASTER_BOOK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CONFIRM_MASTER_BOOK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CONFIRM_MASTER_BOOK_REQ);

	m_EncodeFuncArray[CLIGS_CONFIRM_MASTER_BOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CONFIRM_MASTER_BOOK_ACK;
	m_DecodeFuncArray[CLIGS_CONFIRM_MASTER_BOOK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CONFIRM_MASTER_BOOK_ACK;
	m_vecMsgList.push_back(CLIGS_CONFIRM_MASTER_BOOK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CONFIRM_MASTER_BOOK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CONFIRM_MASTER_BOOK_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_BAD_REWARD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BAD_REWARD_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_BAD_REWARD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BAD_REWARD_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_BAD_REWARD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BAD_REWARD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BAD_REWARD_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_BAD_REWARD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BAD_REWARD_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_BAD_REWARD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BAD_REWARD_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_BAD_REWARD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BAD_REWARD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BAD_REWARD_ACK);

	m_EncodeFuncArray[CLIGS_GET_BAD_REWARD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_BAD_REWARD_REQ;
	m_DecodeFuncArray[CLIGS_GET_BAD_REWARD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_BAD_REWARD_REQ;
	m_vecMsgList.push_back(CLIGS_GET_BAD_REWARD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_BAD_REWARD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_BAD_REWARD_REQ);

	m_EncodeFuncArray[CLIGS_GET_BAD_REWARD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_BAD_REWARD_ACK;
	m_DecodeFuncArray[CLIGS_GET_BAD_REWARD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_BAD_REWARD_ACK;
	m_vecMsgList.push_back(CLIGS_GET_BAD_REWARD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_BAD_REWARD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_BAD_REWARD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_COURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_COURAGE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_COURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_COURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_COURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_COURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_COURAGE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_COURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_COURAGE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_COURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_COURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_COURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_COURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_COURAGE_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_OPEN_CREATE_GROUP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_OPEN_CREATE_GROUP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_OPEN_CREATE_GROUP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_OPEN_CREATE_GROUP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_OPEN_CREATE_GROUP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_OPEN_CREATE_GROUP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_CREATE_GROUP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_CREATE_GROUP_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_CREATE_GROUP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_CREATE_GROUP_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_CREATE_GROUP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_CREATE_GROUP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_CREATE_GROUP_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_CREATE_GROUP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_CREATE_GROUP_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_CREATE_GROUP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_CREATE_GROUP_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_CREATE_GROUP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_CREATE_GROUP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_CREATE_GROUP_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_JOIN_GROUP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_JOIN_GROUP_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_JOIN_GROUP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_JOIN_GROUP_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_JOIN_GROUP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_JOIN_GROUP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_JOIN_GROUP_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_JOIN_GROUP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_JOIN_GROUP_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_JOIN_GROUP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_JOIN_GROUP_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_JOIN_GROUP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_JOIN_GROUP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_JOIN_GROUP_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_OPERATE_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_OPERATE_HERO_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_OPERATE_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_OPERATE_HERO_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_OPERATE_HERO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_OPERATE_HERO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_OPERATE_HERO_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_OPERATE_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_OPERATE_HERO_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_OPERATE_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_OPERATE_HERO_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_OPERATE_HERO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_OPERATE_HERO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_OPERATE_HERO_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_CONFIRM_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_CONFIRM_HERO_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_CONFIRM_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_CONFIRM_HERO_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_CONFIRM_HERO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_CONFIRM_HERO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_CONFIRM_HERO_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_CONFIRM_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_CONFIRM_HERO_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_CONFIRM_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_CONFIRM_HERO_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_CONFIRM_HERO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_CONFIRM_HERO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_CONFIRM_HERO_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_FIRE_GROUP_MEMBER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_FIRE_GROUP_MEMBER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_FIRE_GROUP_MEMBER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_FIRE_GROUP_MEMBER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_FIRE_GROUP_MEMBER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_FIRE_GROUP_MEMBER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_BUY_PRACTISE_TIMES_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_BUY_PRACTISE_TIMES_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_BUY_PRACTISE_TIMES_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_BUY_PRACTISE_TIMES_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_BUY_PRACTISE_TIMES_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_BUY_PRACTISE_TIMES_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_PLAYER_READY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_PLAYER_READY_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_PLAYER_READY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_PLAYER_READY_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_PLAYER_READY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_READY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_READY_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_PLAYER_READY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_PLAYER_READY_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_PLAYER_READY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_PLAYER_READY_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_PLAYER_READY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_READY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_READY_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_PLAYER_START_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_PLAYER_START_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_PLAYER_START_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_PLAYER_START_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_PLAYER_START_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_START_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_START_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_JOIN_GROUP_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_JOIN_GROUP_NTF;
	m_DecodeFuncArray[CLIGS_COURAGE_JOIN_GROUP_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_JOIN_GROUP_NTF;
	m_vecMsgList.push_back(CLIGS_COURAGE_JOIN_GROUP_NTF);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_JOIN_GROUP_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_JOIN_GROUP_NTF);

	m_EncodeFuncArray[CLIGS_COURAGE_QUIT_GROUP_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_QUIT_GROUP_NTF;
	m_DecodeFuncArray[CLIGS_COURAGE_QUIT_GROUP_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_QUIT_GROUP_NTF;
	m_vecMsgList.push_back(CLIGS_COURAGE_QUIT_GROUP_NTF);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_QUIT_GROUP_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_QUIT_GROUP_NTF);

	m_EncodeFuncArray[CLIGS_COURAGE_OPERATE_HERO_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_OPERATE_HERO_NTF;
	m_DecodeFuncArray[CLIGS_COURAGE_OPERATE_HERO_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_OPERATE_HERO_NTF;
	m_vecMsgList.push_back(CLIGS_COURAGE_OPERATE_HERO_NTF);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_OPERATE_HERO_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_OPERATE_HERO_NTF);

	m_EncodeFuncArray[CLIGS_COURAGE_PLAYER_READY_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_PLAYER_READY_NTF;
	m_DecodeFuncArray[CLIGS_COURAGE_PLAYER_READY_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_PLAYER_READY_NTF;
	m_vecMsgList.push_back(CLIGS_COURAGE_PLAYER_READY_NTF);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_READY_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_READY_NTF);

	m_EncodeFuncArray[CLIGS_COURAGE_PLAYER_FIRED_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_PLAYER_FIRED_NTF;
	m_DecodeFuncArray[CLIGS_COURAGE_PLAYER_FIRED_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_PLAYER_FIRED_NTF;
	m_vecMsgList.push_back(CLIGS_COURAGE_PLAYER_FIRED_NTF);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_FIRED_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_FIRED_NTF);

	m_EncodeFuncArray[CLIGS_COURAGE_LEAVE_GROUP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_LEAVE_GROUP_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_LEAVE_GROUP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_LEAVE_GROUP_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_LEAVE_GROUP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_LEAVE_GROUP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_LEAVE_GROUP_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_LEAVE_GROUP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_LEAVE_GROUP_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_LEAVE_GROUP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_LEAVE_GROUP_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_LEAVE_GROUP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_LEAVE_GROUP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_LEAVE_GROUP_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_COURAGE_SHOP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_COURAGE_SHOP_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_COURAGE_SHOP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_COURAGE_SHOP_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_COURAGE_SHOP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_COURAGE_SHOP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_COURAGE_SHOP_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_COURAGE_SHOP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_COURAGE_SHOP_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_COURAGE_SHOP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_COURAGE_SHOP_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_COURAGE_SHOP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_COURAGE_SHOP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_COURAGE_SHOP_ACK);

	m_EncodeFuncArray[CLIGS_PLAYER_FACTION_BATTLELOG_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_FACTION_BATTLELOG_NTF;
	m_DecodeFuncArray[CLIGS_PLAYER_FACTION_BATTLELOG_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_FACTION_BATTLELOG_NTF;
	m_vecMsgList.push_back(CLIGS_PLAYER_FACTION_BATTLELOG_NTF);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_FACTION_BATTLELOG_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_FACTION_BATTLELOG_NTF);

	m_EncodeFuncArray[CLIGS_PLAYER_FACTION_READ_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_FACTION_READ_REQ;
	m_DecodeFuncArray[CLIGS_PLAYER_FACTION_READ_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_FACTION_READ_REQ;
	m_vecMsgList.push_back(CLIGS_PLAYER_FACTION_READ_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_FACTION_READ_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_FACTION_READ_REQ);

	m_EncodeFuncArray[CLIGS_PLAYER_FACTION_READ_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_FACTION_READ_ACK;
	m_DecodeFuncArray[CLIGS_PLAYER_FACTION_READ_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_FACTION_READ_ACK;
	m_vecMsgList.push_back(CLIGS_PLAYER_FACTION_READ_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_FACTION_READ_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_FACTION_READ_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_FIND_DRINK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FIND_DRINK_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_FIND_DRINK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FIND_DRINK_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_FIND_DRINK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FIND_DRINK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FIND_DRINK_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_FIND_DRINK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FIND_DRINK_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_FIND_DRINK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FIND_DRINK_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_FIND_DRINK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FIND_DRINK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FIND_DRINK_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_LOG_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_LOG_FACTION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_LOG_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_LOG_FACTION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_LOG_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_LOG_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_LOG_FACTION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_LOG_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_LOG_FACTION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_LOG_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_LOG_FACTION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_LOG_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_LOG_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_LOG_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_BATTLE_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_BATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_BATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_BATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_BATTLE_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_BATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_BATTLE_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_BATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_BATTLE_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_BATTLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_BATTLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_BATTLE_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_BATTLE_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_BATTLE_NTF;
	m_DecodeFuncArray[CLIGS_COURAGE_BATTLE_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_BATTLE_NTF;
	m_vecMsgList.push_back(CLIGS_COURAGE_BATTLE_NTF);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_BATTLE_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_BATTLE_NTF);

	m_EncodeFuncArray[CLIGS_OPEN_FACTION_BUILD_GROUP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FACTION_BUILD_GROUP_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_FACTION_BUILD_GROUP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FACTION_BUILD_GROUP_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_FACTION_BUILD_GROUP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_BUILD_GROUP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_BUILD_GROUP_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_FACTION_BUILD_GROUP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FACTION_BUILD_GROUP_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_FACTION_BUILD_GROUP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FACTION_BUILD_GROUP_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_FACTION_BUILD_GROUP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_BUILD_GROUP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_BUILD_GROUP_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_GROUP_DISMISS_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_GROUP_DISMISS_NTF;
	m_DecodeFuncArray[CLIGS_COURAGE_GROUP_DISMISS_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_GROUP_DISMISS_NTF;
	m_vecMsgList.push_back(CLIGS_COURAGE_GROUP_DISMISS_NTF);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_GROUP_DISMISS_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_GROUP_DISMISS_NTF);

	m_EncodeFuncArray[CLIGS_HOT_SPRING_REWARD_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HOT_SPRING_REWARD_NTF;
	m_DecodeFuncArray[CLIGS_HOT_SPRING_REWARD_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HOT_SPRING_REWARD_NTF;
	m_vecMsgList.push_back(CLIGS_HOT_SPRING_REWARD_NTF);
	if( (INT32)sizeof(PKT_CLIGS_HOT_SPRING_REWARD_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HOT_SPRING_REWARD_NTF);

	m_EncodeFuncArray[CLIGS_COURAGE_GROUP_REFRESH_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_GROUP_REFRESH_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_GROUP_REFRESH_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_GROUP_REFRESH_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_GROUP_REFRESH_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_GROUP_REFRESH_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_GROUP_REFRESH_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_GROUP_REFRESH_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_GROUP_REFRESH_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_GROUP_REFRESH_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_GROUP_REFRESH_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_GROUP_REFRESH_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_GROUP_REFRESH_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_GROUP_REFRESH_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_ENTER_GROUP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_ENTER_GROUP_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_ENTER_GROUP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_ENTER_GROUP_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_ENTER_GROUP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_ENTER_GROUP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_ENTER_GROUP_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_ENTER_GROUP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_ENTER_GROUP_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_ENTER_GROUP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_ENTER_GROUP_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_ENTER_GROUP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_ENTER_GROUP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_ENTER_GROUP_ACK);

	m_EncodeFuncArray[CLIGS_LEAVE_COURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEAVE_COURAGE_REQ;
	m_DecodeFuncArray[CLIGS_LEAVE_COURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEAVE_COURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_LEAVE_COURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_LEAVE_COURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEAVE_COURAGE_REQ);

	m_EncodeFuncArray[CLIGS_LEAVE_COURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEAVE_COURAGE_ACK;
	m_DecodeFuncArray[CLIGS_LEAVE_COURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEAVE_COURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_LEAVE_COURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_LEAVE_COURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEAVE_COURAGE_ACK);

	m_EncodeFuncArray[CLIGS_HOT_SPRING_OVER_REWARD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HOT_SPRING_OVER_REWARD_REQ;
	m_DecodeFuncArray[CLIGS_HOT_SPRING_OVER_REWARD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HOT_SPRING_OVER_REWARD_REQ;
	m_vecMsgList.push_back(CLIGS_HOT_SPRING_OVER_REWARD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_HOT_SPRING_OVER_REWARD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HOT_SPRING_OVER_REWARD_REQ);

	m_EncodeFuncArray[CLIGS_HOT_SPRING_OVER_REWARD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HOT_SPRING_OVER_REWARD_ACK;
	m_DecodeFuncArray[CLIGS_HOT_SPRING_OVER_REWARD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HOT_SPRING_OVER_REWARD_ACK;
	m_vecMsgList.push_back(CLIGS_HOT_SPRING_OVER_REWARD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_HOT_SPRING_OVER_REWARD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HOT_SPRING_OVER_REWARD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GOLD_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GOLD_NTF;
	m_DecodeFuncArray[CLIGS_OPEN_GOLD_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GOLD_NTF;
	m_vecMsgList.push_back(CLIGS_OPEN_GOLD_NTF);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GOLD_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GOLD_NTF);

	m_EncodeFuncArray[CLIGS_HUNTING_ITEGRAL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HUNTING_ITEGRAL_REQ;
	m_DecodeFuncArray[CLIGS_HUNTING_ITEGRAL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HUNTING_ITEGRAL_REQ;
	m_vecMsgList.push_back(CLIGS_HUNTING_ITEGRAL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_HUNTING_ITEGRAL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HUNTING_ITEGRAL_REQ);

	m_EncodeFuncArray[CLIGS_HUNTING_ITEGRAL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HUNTING_ITEGRAL_ACK;
	m_DecodeFuncArray[CLIGS_HUNTING_ITEGRAL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HUNTING_ITEGRAL_ACK;
	m_vecMsgList.push_back(CLIGS_HUNTING_ITEGRAL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_HUNTING_ITEGRAL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HUNTING_ITEGRAL_ACK);

	m_EncodeFuncArray[CLIGS_ACTIVITY_END_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACTIVITY_END_NTF;
	m_DecodeFuncArray[CLIGS_ACTIVITY_END_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACTIVITY_END_NTF;
	m_vecMsgList.push_back(CLIGS_ACTIVITY_END_NTF);
	if( (INT32)sizeof(PKT_CLIGS_ACTIVITY_END_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACTIVITY_END_NTF);

	m_EncodeFuncArray[CLIGS_PROMPT_IGNORE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PROMPT_IGNORE_REQ;
	m_DecodeFuncArray[CLIGS_PROMPT_IGNORE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PROMPT_IGNORE_REQ;
	m_vecMsgList.push_back(CLIGS_PROMPT_IGNORE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PROMPT_IGNORE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PROMPT_IGNORE_REQ);

	m_EncodeFuncArray[CLIGS_PROMPT_IGNORE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PROMPT_IGNORE_ACK;
	m_DecodeFuncArray[CLIGS_PROMPT_IGNORE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PROMPT_IGNORE_ACK;
	m_vecMsgList.push_back(CLIGS_PROMPT_IGNORE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PROMPT_IGNORE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PROMPT_IGNORE_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_GROUP_REFRESH_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_GROUP_REFRESH_NTF;
	m_DecodeFuncArray[CLIGS_COURAGE_GROUP_REFRESH_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_GROUP_REFRESH_NTF;
	m_vecMsgList.push_back(CLIGS_COURAGE_GROUP_REFRESH_NTF);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_GROUP_REFRESH_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_GROUP_REFRESH_NTF);

	m_EncodeFuncArray[CLIGS_HOME_BUILD_PROMPT_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HOME_BUILD_PROMPT_NTF;
	m_DecodeFuncArray[CLIGS_HOME_BUILD_PROMPT_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HOME_BUILD_PROMPT_NTF;
	m_vecMsgList.push_back(CLIGS_HOME_BUILD_PROMPT_NTF);
	if( (INT32)sizeof(PKT_CLIGS_HOME_BUILD_PROMPT_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HOME_BUILD_PROMPT_NTF);

	m_EncodeFuncArray[CLIGS_OPEN_LEAVE_HOT_SPRING_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_LEAVE_HOT_SPRING_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_LEAVE_HOT_SPRING_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_LEAVE_HOT_SPRING_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_LEAVE_HOT_SPRING_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_LEAVE_HOT_SPRING_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_LEAVE_HOT_SPRING_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_LEAVE_HOT_SPRING_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_LEAVE_HOT_SPRING_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_LEAVE_HOT_SPRING_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_LEAVE_HOT_SPRING_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_LEAVE_HOT_SPRING_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_LEAVE_HOT_SPRING_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_LEAVE_HOT_SPRING_ACK);

	m_EncodeFuncArray[CLIGS_FACTION_OPERATE_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FACTION_OPERATE_NTF;
	m_DecodeFuncArray[CLIGS_FACTION_OPERATE_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FACTION_OPERATE_NTF;
	m_vecMsgList.push_back(CLIGS_FACTION_OPERATE_NTF);
	if( (INT32)sizeof(PKT_CLIGS_FACTION_OPERATE_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FACTION_OPERATE_NTF);

	m_EncodeFuncArray[CLIGS_FACTION_PROMPT_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FACTION_PROMPT_NTF;
	m_DecodeFuncArray[CLIGS_FACTION_PROMPT_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FACTION_PROMPT_NTF;
	m_vecMsgList.push_back(CLIGS_FACTION_PROMPT_NTF);
	if( (INT32)sizeof(PKT_CLIGS_FACTION_PROMPT_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FACTION_PROMPT_NTF);

	m_EncodeFuncArray[CLIGS_COURAGE_GET_AWARD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_GET_AWARD_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_GET_AWARD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_GET_AWARD_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_GET_AWARD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_GET_AWARD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_GET_AWARD_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_GET_AWARD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_GET_AWARD_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_GET_AWARD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_GET_AWARD_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_GET_AWARD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_GET_AWARD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_GET_AWARD_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_GET_BATTLE_RESULT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_GET_BATTLE_RESULT_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_GET_BATTLE_RESULT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_GET_BATTLE_RESULT_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_GET_BATTLE_RESULT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_GET_BATTLE_RESULT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_GET_BATTLE_RESULT_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_GET_BATTLE_RESULT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_GET_BATTLE_RESULT_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_GET_BATTLE_RESULT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_GET_BATTLE_RESULT_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_GET_BATTLE_RESULT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_GET_BATTLE_RESULT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_GET_BATTLE_RESULT_ACK);

	m_EncodeFuncArray[CLIGS_DOORSTRIBUTE_SYNC_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DOORSTRIBUTE_SYNC_NTF;
	m_DecodeFuncArray[CLIGS_DOORSTRIBUTE_SYNC_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DOORSTRIBUTE_SYNC_NTF;
	m_vecMsgList.push_back(CLIGS_DOORSTRIBUTE_SYNC_NTF);
	if( (INT32)sizeof(PKT_CLIGS_DOORSTRIBUTE_SYNC_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DOORSTRIBUTE_SYNC_NTF);

	m_EncodeFuncArray[CLIGS_AUDIT_FACTION_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AUDIT_FACTION_REQ2;
	m_DecodeFuncArray[CLIGS_AUDIT_FACTION_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AUDIT_FACTION_REQ2;
	m_vecMsgList.push_back(CLIGS_AUDIT_FACTION_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_AUDIT_FACTION_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AUDIT_FACTION_REQ2);

	m_EncodeFuncArray[CLIGS_AUDIT_FACTION_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AUDIT_FACTION_ACK2;
	m_DecodeFuncArray[CLIGS_AUDIT_FACTION_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AUDIT_FACTION_ACK2;
	m_vecMsgList.push_back(CLIGS_AUDIT_FACTION_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_AUDIT_FACTION_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AUDIT_FACTION_ACK2);

	m_EncodeFuncArray[CLIGS_AUDIT_ALL_REFUSE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AUDIT_ALL_REFUSE_REQ;
	m_DecodeFuncArray[CLIGS_AUDIT_ALL_REFUSE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AUDIT_ALL_REFUSE_REQ;
	m_vecMsgList.push_back(CLIGS_AUDIT_ALL_REFUSE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_AUDIT_ALL_REFUSE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AUDIT_ALL_REFUSE_REQ);

	m_EncodeFuncArray[CLIGS_AUDIT_ALL_REFUSE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_AUDIT_ALL_REFUSE_ACK;
	m_DecodeFuncArray[CLIGS_AUDIT_ALL_REFUSE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_AUDIT_ALL_REFUSE_ACK;
	m_vecMsgList.push_back(CLIGS_AUDIT_ALL_REFUSE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_AUDIT_ALL_REFUSE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_AUDIT_ALL_REFUSE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_AUDIT_FACTION_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AUDIT_FACTION_REQ2;
	m_DecodeFuncArray[CLIGS_OPEN_AUDIT_FACTION_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AUDIT_FACTION_REQ2;
	m_vecMsgList.push_back(CLIGS_OPEN_AUDIT_FACTION_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AUDIT_FACTION_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AUDIT_FACTION_REQ2);

	m_EncodeFuncArray[CLIGS_OPEN_AUDIT_FACTION_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_AUDIT_FACTION_ACK2;
	m_DecodeFuncArray[CLIGS_OPEN_AUDIT_FACTION_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_AUDIT_FACTION_ACK2;
	m_vecMsgList.push_back(CLIGS_OPEN_AUDIT_FACTION_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_AUDIT_FACTION_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_AUDIT_FACTION_ACK2);

	m_EncodeFuncArray[CLIGS_OPEN_VIP_GIFT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_VIP_GIFT_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_VIP_GIFT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_VIP_GIFT_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_VIP_GIFT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_VIP_GIFT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_VIP_GIFT_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_VIP_GIFT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_VIP_GIFT_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_VIP_GIFT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_VIP_GIFT_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_VIP_GIFT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_VIP_GIFT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_VIP_GIFT_ACK);

	m_EncodeFuncArray[CLIGS_GET_VIP_GIFT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_VIP_GIFT_REQ;
	m_DecodeFuncArray[CLIGS_GET_VIP_GIFT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_VIP_GIFT_REQ;
	m_vecMsgList.push_back(CLIGS_GET_VIP_GIFT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_VIP_GIFT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_VIP_GIFT_REQ);

	m_EncodeFuncArray[CLIGS_GET_VIP_GIFT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_VIP_GIFT_ACK;
	m_DecodeFuncArray[CLIGS_GET_VIP_GIFT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_VIP_GIFT_ACK;
	m_vecMsgList.push_back(CLIGS_GET_VIP_GIFT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_VIP_GIFT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_VIP_GIFT_ACK);

	m_EncodeFuncArray[CLIGS_UPGRADE_CROP_FIELD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_CROP_FIELD_REQ;
	m_DecodeFuncArray[CLIGS_UPGRADE_CROP_FIELD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_CROP_FIELD_REQ;
	m_vecMsgList.push_back(CLIGS_UPGRADE_CROP_FIELD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_CROP_FIELD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_CROP_FIELD_REQ);

	m_EncodeFuncArray[CLIGS_UPGRADE_CROP_FIELD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_CROP_FIELD_ACK;
	m_DecodeFuncArray[CLIGS_UPGRADE_CROP_FIELD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_CROP_FIELD_ACK;
	m_vecMsgList.push_back(CLIGS_UPGRADE_CROP_FIELD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_CROP_FIELD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_CROP_FIELD_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_CROP_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CROP_REQ2;
	m_DecodeFuncArray[CLIGS_OPEN_CROP_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CROP_REQ2;
	m_vecMsgList.push_back(CLIGS_OPEN_CROP_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CROP_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CROP_REQ2);

	m_EncodeFuncArray[CLIGS_OPEN_CROP_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CROP_ACK2;
	m_DecodeFuncArray[CLIGS_OPEN_CROP_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CROP_ACK2;
	m_vecMsgList.push_back(CLIGS_OPEN_CROP_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CROP_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CROP_ACK2);

	m_EncodeFuncArray[CLIGS_OPEN_CROP_FIELD_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CROP_FIELD_REQ2;
	m_DecodeFuncArray[CLIGS_OPEN_CROP_FIELD_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CROP_FIELD_REQ2;
	m_vecMsgList.push_back(CLIGS_OPEN_CROP_FIELD_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CROP_FIELD_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CROP_FIELD_REQ2);

	m_EncodeFuncArray[CLIGS_OPEN_CROP_FIELD_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CROP_FIELD_ACK2;
	m_DecodeFuncArray[CLIGS_OPEN_CROP_FIELD_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CROP_FIELD_ACK2;
	m_vecMsgList.push_back(CLIGS_OPEN_CROP_FIELD_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CROP_FIELD_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CROP_FIELD_ACK2);

	m_EncodeFuncArray[CLIGS_CROP_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CROP_REQ2;
	m_DecodeFuncArray[CLIGS_CROP_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CROP_REQ2;
	m_vecMsgList.push_back(CLIGS_CROP_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_CROP_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CROP_REQ2);

	m_EncodeFuncArray[CLIGS_CROP_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CROP_ACK2;
	m_DecodeFuncArray[CLIGS_CROP_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CROP_ACK2;
	m_vecMsgList.push_back(CLIGS_CROP_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_CROP_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CROP_ACK2);

	m_EncodeFuncArray[CLIGS_GAIN_CROP_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GAIN_CROP_REQ2;
	m_DecodeFuncArray[CLIGS_GAIN_CROP_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GAIN_CROP_REQ2;
	m_vecMsgList.push_back(CLIGS_GAIN_CROP_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_GAIN_CROP_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GAIN_CROP_REQ2);

	m_EncodeFuncArray[CLIGS_GAIN_CROP_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GAIN_CROP_ACK2;
	m_DecodeFuncArray[CLIGS_GAIN_CROP_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GAIN_CROP_ACK2;
	m_vecMsgList.push_back(CLIGS_GAIN_CROP_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_GAIN_CROP_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GAIN_CROP_ACK2);

	m_EncodeFuncArray[CLIGS_CLR_CROP_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_CROP_REQ2;
	m_DecodeFuncArray[CLIGS_CLR_CROP_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_CROP_REQ2;
	m_vecMsgList.push_back(CLIGS_CLR_CROP_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_CLR_CROP_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_CROP_REQ2);

	m_EncodeFuncArray[CLIGS_CLR_CROP_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CLR_CROP_ACK2;
	m_DecodeFuncArray[CLIGS_CLR_CROP_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CLR_CROP_ACK2;
	m_vecMsgList.push_back(CLIGS_CLR_CROP_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_CLR_CROP_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CLR_CROP_ACK2);

	m_EncodeFuncArray[CLIGS_OPEN_RECV_FLOWER_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RECV_FLOWER_TAB_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_RECV_FLOWER_TAB_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RECV_FLOWER_TAB_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_RECV_FLOWER_TAB_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RECV_FLOWER_TAB_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RECV_FLOWER_TAB_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_RECV_FLOWER_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RECV_FLOWER_TAB_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_RECV_FLOWER_TAB_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RECV_FLOWER_TAB_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_RECV_FLOWER_TAB_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RECV_FLOWER_TAB_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RECV_FLOWER_TAB_ACK);

	m_EncodeFuncArray[CLIGS_ACCEPT_FLOWER_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACCEPT_FLOWER_REQ;
	m_DecodeFuncArray[CLIGS_ACCEPT_FLOWER_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACCEPT_FLOWER_REQ;
	m_vecMsgList.push_back(CLIGS_ACCEPT_FLOWER_REQ);
	if( (INT32)sizeof(PKT_CLIGS_ACCEPT_FLOWER_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACCEPT_FLOWER_REQ);

	m_EncodeFuncArray[CLIGS_ACCEPT_FLOWER_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_ACCEPT_FLOWER_ACK;
	m_DecodeFuncArray[CLIGS_ACCEPT_FLOWER_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_ACCEPT_FLOWER_ACK;
	m_vecMsgList.push_back(CLIGS_ACCEPT_FLOWER_ACK);
	if( (INT32)sizeof(PKT_CLIGS_ACCEPT_FLOWER_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_ACCEPT_FLOWER_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_SEND_FLOWER_TAB_EX_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_SEND_FLOWER_TAB_EX_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_SEND_FLOWER_TAB_EX_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_SEND_FLOWER_TAB_EX_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_SEND_FLOWER_TAB_EX_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_SEND_FLOWER_TAB_EX_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_ACK);

	m_EncodeFuncArray[CLIGS_BUY_RAREITEM_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_RAREITEM_REQ2;
	m_DecodeFuncArray[CLIGS_BUY_RAREITEM_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_RAREITEM_REQ2;
	m_vecMsgList.push_back(CLIGS_BUY_RAREITEM_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_BUY_RAREITEM_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_RAREITEM_REQ2);

	m_EncodeFuncArray[CLIGS_BUY_RAREITEM_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_RAREITEM_ACK2;
	m_DecodeFuncArray[CLIGS_BUY_RAREITEM_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_RAREITEM_ACK2;
	m_vecMsgList.push_back(CLIGS_BUY_RAREITEM_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_BUY_RAREITEM_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_RAREITEM_ACK2);

	m_EncodeFuncArray[CLIGS_LEARN_GYMNASIUM_SKILL_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ2;
	m_DecodeFuncArray[CLIGS_LEARN_GYMNASIUM_SKILL_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ2;
	m_vecMsgList.push_back(CLIGS_LEARN_GYMNASIUM_SKILL_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ2);

	m_EncodeFuncArray[CLIGS_LEARN_GYMNASIUM_SKILL_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK2;
	m_DecodeFuncArray[CLIGS_LEARN_GYMNASIUM_SKILL_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK2;
	m_vecMsgList.push_back(CLIGS_LEARN_GYMNASIUM_SKILL_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK2);

	m_EncodeFuncArray[CLIGS_SEND_FLOWER_EX_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEND_FLOWER_EX_REQ;
	m_DecodeFuncArray[CLIGS_SEND_FLOWER_EX_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEND_FLOWER_EX_REQ;
	m_vecMsgList.push_back(CLIGS_SEND_FLOWER_EX_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SEND_FLOWER_EX_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEND_FLOWER_EX_REQ);

	m_EncodeFuncArray[CLIGS_SEND_FLOWER_EX_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEND_FLOWER_EX_ACK;
	m_DecodeFuncArray[CLIGS_SEND_FLOWER_EX_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEND_FLOWER_EX_ACK;
	m_vecMsgList.push_back(CLIGS_SEND_FLOWER_EX_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SEND_FLOWER_EX_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEND_FLOWER_EX_ACK);

	m_EncodeFuncArray[CLIGS_FACTION_PLAYERS_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FACTION_PLAYERS_INFO_REQ;
	m_DecodeFuncArray[CLIGS_FACTION_PLAYERS_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FACTION_PLAYERS_INFO_REQ;
	m_vecMsgList.push_back(CLIGS_FACTION_PLAYERS_INFO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_FACTION_PLAYERS_INFO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FACTION_PLAYERS_INFO_REQ);

	m_EncodeFuncArray[CLIGS_FACTION_PLAYERS_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FACTION_PLAYERS_INFO_ACK;
	m_DecodeFuncArray[CLIGS_FACTION_PLAYERS_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FACTION_PLAYERS_INFO_ACK;
	m_vecMsgList.push_back(CLIGS_FACTION_PLAYERS_INFO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_FACTION_PLAYERS_INFO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FACTION_PLAYERS_INFO_ACK);

	m_EncodeFuncArray[CLIGS_CHANGE_FACTION_ICON_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHANGE_FACTION_ICON_REQ;
	m_DecodeFuncArray[CLIGS_CHANGE_FACTION_ICON_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHANGE_FACTION_ICON_REQ;
	m_vecMsgList.push_back(CLIGS_CHANGE_FACTION_ICON_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CHANGE_FACTION_ICON_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHANGE_FACTION_ICON_REQ);

	m_EncodeFuncArray[CLIGS_CHANGE_FACTION_ICON_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHANGE_FACTION_ICON_ACK;
	m_DecodeFuncArray[CLIGS_CHANGE_FACTION_ICON_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHANGE_FACTION_ICON_ACK;
	m_vecMsgList.push_back(CLIGS_CHANGE_FACTION_ICON_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CHANGE_FACTION_ICON_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHANGE_FACTION_ICON_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_CHANGE_FACTION_ICON_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CHANGE_FACTION_ICON_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_CHANGE_FACTION_ICON_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CHANGE_FACTION_ICON_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_CHANGE_FACTION_ICON_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CHANGE_FACTION_ICON_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CHANGE_FACTION_ICON_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_CHANGE_FACTION_ICON_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_CHANGE_FACTION_ICON_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_CHANGE_FACTION_ICON_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_CHANGE_FACTION_ICON_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_CHANGE_FACTION_ICON_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_CHANGE_FACTION_ICON_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_CHANGE_FACTION_ICON_ACK);

	m_EncodeFuncArray[CLIGS_FIND_BACK_DOORSTRIBUTE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FIND_BACK_DOORSTRIBUTE_REQ;
	m_DecodeFuncArray[CLIGS_FIND_BACK_DOORSTRIBUTE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FIND_BACK_DOORSTRIBUTE_REQ;
	m_vecMsgList.push_back(CLIGS_FIND_BACK_DOORSTRIBUTE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_FIND_BACK_DOORSTRIBUTE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FIND_BACK_DOORSTRIBUTE_REQ);

	m_EncodeFuncArray[CLIGS_FIND_BACK_DOORSTRIBUTE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FIND_BACK_DOORSTRIBUTE_ACK;
	m_DecodeFuncArray[CLIGS_FIND_BACK_DOORSTRIBUTE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FIND_BACK_DOORSTRIBUTE_ACK;
	m_vecMsgList.push_back(CLIGS_FIND_BACK_DOORSTRIBUTE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_FIND_BACK_DOORSTRIBUTE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FIND_BACK_DOORSTRIBUTE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_ACK);

	m_EncodeFuncArray[CLIGS_LEAVE_COURAGE_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEAVE_COURAGE_BATTLE_REQ;
	m_DecodeFuncArray[CLIGS_LEAVE_COURAGE_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEAVE_COURAGE_BATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_LEAVE_COURAGE_BATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_LEAVE_COURAGE_BATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEAVE_COURAGE_BATTLE_REQ);

	m_EncodeFuncArray[CLIGS_LEAVE_COURAGE_BATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_LEAVE_COURAGE_BATTLE_ACK;
	m_DecodeFuncArray[CLIGS_LEAVE_COURAGE_BATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_LEAVE_COURAGE_BATTLE_ACK;
	m_vecMsgList.push_back(CLIGS_LEAVE_COURAGE_BATTLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_LEAVE_COURAGE_BATTLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_LEAVE_COURAGE_BATTLE_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_RANDOM_JOIN_GROUP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_REQ;
	m_DecodeFuncArray[CLIGS_COURAGE_RANDOM_JOIN_GROUP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_REQ;
	m_vecMsgList.push_back(CLIGS_COURAGE_RANDOM_JOIN_GROUP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_REQ);

	m_EncodeFuncArray[CLIGS_COURAGE_RANDOM_JOIN_GROUP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_ACK;
	m_DecodeFuncArray[CLIGS_COURAGE_RANDOM_JOIN_GROUP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_ACK;
	m_vecMsgList.push_back(CLIGS_COURAGE_RANDOM_JOIN_GROUP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_ACK);

	m_EncodeFuncArray[CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ2;
	m_DecodeFuncArray[CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ2;
	m_vecMsgList.push_back(CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ2);

	m_EncodeFuncArray[CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK2;
	m_DecodeFuncArray[CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK2;
	m_vecMsgList.push_back(CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK2);

	m_EncodeFuncArray[CLIGS_SEARCH_PLAYER_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEARCH_PLAYER_REQ2;
	m_DecodeFuncArray[CLIGS_SEARCH_PLAYER_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEARCH_PLAYER_REQ2;
	m_vecMsgList.push_back(CLIGS_SEARCH_PLAYER_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_SEARCH_PLAYER_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEARCH_PLAYER_REQ2);

	m_EncodeFuncArray[CLIGS_SEARCH_PLAYER_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEARCH_PLAYER_ACK2;
	m_DecodeFuncArray[CLIGS_SEARCH_PLAYER_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEARCH_PLAYER_ACK2;
	m_vecMsgList.push_back(CLIGS_SEARCH_PLAYER_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_SEARCH_PLAYER_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEARCH_PLAYER_ACK2);

	m_EncodeFuncArray[CLIGS_OPEN_EMBATTLE_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EMBATTLE_REQ2;
	m_DecodeFuncArray[CLIGS_OPEN_EMBATTLE_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EMBATTLE_REQ2;
	m_vecMsgList.push_back(CLIGS_OPEN_EMBATTLE_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EMBATTLE_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EMBATTLE_REQ2);

	m_EncodeFuncArray[CLIGS_OPEN_EMBATTLE_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EMBATTLE_ACK2;
	m_DecodeFuncArray[CLIGS_OPEN_EMBATTLE_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EMBATTLE_ACK2;
	m_vecMsgList.push_back(CLIGS_OPEN_EMBATTLE_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EMBATTLE_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EMBATTLE_ACK2);

	m_EncodeFuncArray[CLIGS_UPGRADE_FORMATION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_FORMATION_REQ;
	m_DecodeFuncArray[CLIGS_UPGRADE_FORMATION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_FORMATION_REQ;
	m_vecMsgList.push_back(CLIGS_UPGRADE_FORMATION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_FORMATION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_FORMATION_REQ);

	m_EncodeFuncArray[CLIGS_UPGRADE_FORMATION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_FORMATION_ACK;
	m_DecodeFuncArray[CLIGS_UPGRADE_FORMATION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_FORMATION_ACK;
	m_vecMsgList.push_back(CLIGS_UPGRADE_FORMATION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_FORMATION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_FORMATION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_FORMATION_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FORMATION_SCIENCE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_FORMATION_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FORMATION_SCIENCE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_FORMATION_SCIENCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FORMATION_SCIENCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FORMATION_SCIENCE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_FORMATION_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FORMATION_SCIENCE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_FORMATION_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FORMATION_SCIENCE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_FORMATION_SCIENCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FORMATION_SCIENCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FORMATION_SCIENCE_ACK);

	m_EncodeFuncArray[CLILS_REGISTER_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_REGISTER_FACTION_REQ;
	m_DecodeFuncArray[CLILS_REGISTER_FACTION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_REGISTER_FACTION_REQ;
	m_vecMsgList.push_back(CLILS_REGISTER_FACTION_REQ);
	if( (INT32)sizeof(PKT_CLILS_REGISTER_FACTION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_REGISTER_FACTION_REQ);

	m_EncodeFuncArray[CLILS_REGISTER_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLILS_REGISTER_FACTION_ACK;
	m_DecodeFuncArray[CLILS_REGISTER_FACTION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLILS_REGISTER_FACTION_ACK;
	m_vecMsgList.push_back(CLILS_REGISTER_FACTION_ACK);
	if( (INT32)sizeof(PKT_CLILS_REGISTER_FACTION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLILS_REGISTER_FACTION_ACK);

	m_EncodeFuncArray[CLIGS_UPGRADE_FORMATION_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_FORMATION_SCIENCE_REQ;
	m_DecodeFuncArray[CLIGS_UPGRADE_FORMATION_SCIENCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_FORMATION_SCIENCE_REQ;
	m_vecMsgList.push_back(CLIGS_UPGRADE_FORMATION_SCIENCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_FORMATION_SCIENCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_FORMATION_SCIENCE_REQ);

	m_EncodeFuncArray[CLIGS_UPGRADE_FORMATION_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_FORMATION_SCIENCE_ACK;
	m_DecodeFuncArray[CLIGS_UPGRADE_FORMATION_SCIENCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_FORMATION_SCIENCE_ACK;
	m_vecMsgList.push_back(CLIGS_UPGRADE_FORMATION_SCIENCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_FORMATION_SCIENCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_FORMATION_SCIENCE_ACK);

	m_EncodeFuncArray[CLIGS_GET_BLUE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_BLUE_ENCOURAGE_REQ;
	m_DecodeFuncArray[CLIGS_GET_BLUE_ENCOURAGE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_BLUE_ENCOURAGE_REQ;
	m_vecMsgList.push_back(CLIGS_GET_BLUE_ENCOURAGE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_BLUE_ENCOURAGE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_BLUE_ENCOURAGE_REQ);

	m_EncodeFuncArray[CLIGS_GET_BLUE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_BLUE_ENCOURAGE_ACK;
	m_DecodeFuncArray[CLIGS_GET_BLUE_ENCOURAGE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_BLUE_ENCOURAGE_ACK;
	m_vecMsgList.push_back(CLIGS_GET_BLUE_ENCOURAGE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_BLUE_ENCOURAGE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_BLUE_ENCOURAGE_ACK);

	m_EncodeFuncArray[CLIGS_GET_EXPRIENCE_HOT_SPRING_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_REQ;
	m_DecodeFuncArray[CLIGS_GET_EXPRIENCE_HOT_SPRING_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_REQ;
	m_vecMsgList.push_back(CLIGS_GET_EXPRIENCE_HOT_SPRING_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_REQ);

	m_EncodeFuncArray[CLIGS_GET_EXPRIENCE_HOT_SPRING_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_ACK;
	m_DecodeFuncArray[CLIGS_GET_EXPRIENCE_HOT_SPRING_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_ACK;
	m_vecMsgList.push_back(CLIGS_GET_EXPRIENCE_HOT_SPRING_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_FACTION_SKILL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FACTION_SKILL_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_FACTION_SKILL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FACTION_SKILL_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_FACTION_SKILL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_SKILL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_SKILL_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_FACTION_SKILL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FACTION_SKILL_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_FACTION_SKILL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FACTION_SKILL_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_FACTION_SKILL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_SKILL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_SKILL_ACK);

	m_EncodeFuncArray[CLIGS_RESOURCE_SYNC_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RESOURCE_SYNC_NTF;
	m_DecodeFuncArray[CLIGS_RESOURCE_SYNC_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RESOURCE_SYNC_NTF;
	m_vecMsgList.push_back(CLIGS_RESOURCE_SYNC_NTF);
	if( (INT32)sizeof(PKT_CLIGS_RESOURCE_SYNC_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RESOURCE_SYNC_NTF);

	m_EncodeFuncArray[CLIGS_OPEN_PLAYER_PANEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PLAYER_PANEL_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_PLAYER_PANEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PLAYER_PANEL_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_PLAYER_PANEL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PLAYER_PANEL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PLAYER_PANEL_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_PLAYER_PANEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PLAYER_PANEL_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_PLAYER_PANEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PLAYER_PANEL_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_PLAYER_PANEL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PLAYER_PANEL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PLAYER_PANEL_ACK);

	m_EncodeFuncArray[CLIGS_PLAYER_INFO_AWAKEN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_INFO_AWAKEN_REQ;
	m_DecodeFuncArray[CLIGS_PLAYER_INFO_AWAKEN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_INFO_AWAKEN_REQ;
	m_vecMsgList.push_back(CLIGS_PLAYER_INFO_AWAKEN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_AWAKEN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_AWAKEN_REQ);

	m_EncodeFuncArray[CLIGS_PLAYER_INFO_AWAKEN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_INFO_AWAKEN_ACK;
	m_DecodeFuncArray[CLIGS_PLAYER_INFO_AWAKEN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_INFO_AWAKEN_ACK;
	m_vecMsgList.push_back(CLIGS_PLAYER_INFO_AWAKEN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_AWAKEN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_AWAKEN_ACK);

	m_EncodeFuncArray[CLIGS_PLAYER_INFO_GODWEAPON_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_INFO_GODWEAPON_REQ;
	m_DecodeFuncArray[CLIGS_PLAYER_INFO_GODWEAPON_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_INFO_GODWEAPON_REQ;
	m_vecMsgList.push_back(CLIGS_PLAYER_INFO_GODWEAPON_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_GODWEAPON_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_GODWEAPON_REQ);

	m_EncodeFuncArray[CLIGS_PLAYER_INFO_GODWEAPON_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_INFO_GODWEAPON_ACK;
	m_DecodeFuncArray[CLIGS_PLAYER_INFO_GODWEAPON_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_INFO_GODWEAPON_ACK;
	m_vecMsgList.push_back(CLIGS_PLAYER_INFO_GODWEAPON_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_GODWEAPON_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_GODWEAPON_ACK);

	m_EncodeFuncArray[CLIGS_PLAYER_INFO_JEWELRY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_INFO_JEWELRY_REQ;
	m_DecodeFuncArray[CLIGS_PLAYER_INFO_JEWELRY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_INFO_JEWELRY_REQ;
	m_vecMsgList.push_back(CLIGS_PLAYER_INFO_JEWELRY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_JEWELRY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_JEWELRY_REQ);

	m_EncodeFuncArray[CLIGS_PLAYER_INFO_JEWELRY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_INFO_JEWELRY_ACK;
	m_DecodeFuncArray[CLIGS_PLAYER_INFO_JEWELRY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_INFO_JEWELRY_ACK;
	m_vecMsgList.push_back(CLIGS_PLAYER_INFO_JEWELRY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_JEWELRY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_JEWELRY_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_RESOLVE_TRIGRAM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RESOLVE_TRIGRAM_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_RESOLVE_TRIGRAM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RESOLVE_TRIGRAM_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_RESOLVE_TRIGRAM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RESOLVE_TRIGRAM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RESOLVE_TRIGRAM_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_RESOLVE_TRIGRAM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RESOLVE_TRIGRAM_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_RESOLVE_TRIGRAM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RESOLVE_TRIGRAM_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_RESOLVE_TRIGRAM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RESOLVE_TRIGRAM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RESOLVE_TRIGRAM_ACK);

	m_EncodeFuncArray[CLIGS_RESOLVE_TRIGRAM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RESOLVE_TRIGRAM_REQ;
	m_DecodeFuncArray[CLIGS_RESOLVE_TRIGRAM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RESOLVE_TRIGRAM_REQ;
	m_vecMsgList.push_back(CLIGS_RESOLVE_TRIGRAM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RESOLVE_TRIGRAM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RESOLVE_TRIGRAM_REQ);

	m_EncodeFuncArray[CLIGS_RESOLVE_TRIGRAM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RESOLVE_TRIGRAM_ACK;
	m_DecodeFuncArray[CLIGS_RESOLVE_TRIGRAM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RESOLVE_TRIGRAM_ACK;
	m_vecMsgList.push_back(CLIGS_RESOLVE_TRIGRAM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RESOLVE_TRIGRAM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RESOLVE_TRIGRAM_ACK);

	m_EncodeFuncArray[CLIGS_DRESS_JEWELRY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRESS_JEWELRY_REQ;
	m_DecodeFuncArray[CLIGS_DRESS_JEWELRY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRESS_JEWELRY_REQ;
	m_vecMsgList.push_back(CLIGS_DRESS_JEWELRY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DRESS_JEWELRY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRESS_JEWELRY_REQ);

	m_EncodeFuncArray[CLIGS_DRESS_JEWELRY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRESS_JEWELRY_ACK;
	m_DecodeFuncArray[CLIGS_DRESS_JEWELRY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRESS_JEWELRY_ACK;
	m_vecMsgList.push_back(CLIGS_DRESS_JEWELRY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DRESS_JEWELRY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRESS_JEWELRY_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_HERO_SELECT_PANEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_HERO_SELECT_PANEL_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_HERO_SELECT_PANEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_HERO_SELECT_PANEL_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_HERO_SELECT_PANEL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_HERO_SELECT_PANEL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_HERO_SELECT_PANEL_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_HERO_SELECT_PANEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_HERO_SELECT_PANEL_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_HERO_SELECT_PANEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_HERO_SELECT_PANEL_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_HERO_SELECT_PANEL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_HERO_SELECT_PANEL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_HERO_SELECT_PANEL_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_JEWELRY_GENERATE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_JEWELRY_GENERATE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_JEWELRY_GENERATE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_JEWELRY_GENERATE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_JEWELRY_GENERATE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_JEWELRY_GENERATE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_JEWELRY_GENERATE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_JEWELRY_GENERATE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_JEWELRY_GENERATE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_JEWELRY_GENERATE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_JEWELRY_GENERATE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_JEWELRY_GENERATE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_JEWELRY_GENERATE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_JEWELRY_GENERATE_ACK);

	m_EncodeFuncArray[CLIGS_JEWELRY_GENERATE_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JEWELRY_GENERATE_INFO_REQ;
	m_DecodeFuncArray[CLIGS_JEWELRY_GENERATE_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JEWELRY_GENERATE_INFO_REQ;
	m_vecMsgList.push_back(CLIGS_JEWELRY_GENERATE_INFO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_JEWELRY_GENERATE_INFO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JEWELRY_GENERATE_INFO_REQ);

	m_EncodeFuncArray[CLIGS_JEWELRY_GENERATE_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JEWELRY_GENERATE_INFO_ACK;
	m_DecodeFuncArray[CLIGS_JEWELRY_GENERATE_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JEWELRY_GENERATE_INFO_ACK;
	m_vecMsgList.push_back(CLIGS_JEWELRY_GENERATE_INFO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_JEWELRY_GENERATE_INFO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JEWELRY_GENERATE_INFO_ACK);

	m_EncodeFuncArray[CLIGS_JEWELRY_GENERATE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JEWELRY_GENERATE_REQ;
	m_DecodeFuncArray[CLIGS_JEWELRY_GENERATE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JEWELRY_GENERATE_REQ;
	m_vecMsgList.push_back(CLIGS_JEWELRY_GENERATE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_JEWELRY_GENERATE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JEWELRY_GENERATE_REQ);

	m_EncodeFuncArray[CLIGS_JEWELRY_GENERATE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JEWELRY_GENERATE_ACK;
	m_DecodeFuncArray[CLIGS_JEWELRY_GENERATE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JEWELRY_GENERATE_ACK;
	m_vecMsgList.push_back(CLIGS_JEWELRY_GENERATE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_JEWELRY_GENERATE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JEWELRY_GENERATE_ACK);

	m_EncodeFuncArray[CLIGS_JEWELRY_STRENGTH_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JEWELRY_STRENGTH_REQ;
	m_DecodeFuncArray[CLIGS_JEWELRY_STRENGTH_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JEWELRY_STRENGTH_REQ;
	m_vecMsgList.push_back(CLIGS_JEWELRY_STRENGTH_REQ);
	if( (INT32)sizeof(PKT_CLIGS_JEWELRY_STRENGTH_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JEWELRY_STRENGTH_REQ);

	m_EncodeFuncArray[CLIGS_JEWELRY_STRENGTH_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JEWELRY_STRENGTH_ACK;
	m_DecodeFuncArray[CLIGS_JEWELRY_STRENGTH_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JEWELRY_STRENGTH_ACK;
	m_vecMsgList.push_back(CLIGS_JEWELRY_STRENGTH_ACK);
	if( (INT32)sizeof(PKT_CLIGS_JEWELRY_STRENGTH_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JEWELRY_STRENGTH_ACK);

	m_EncodeFuncArray[CLIGS_JEWELRY_RESOLVE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JEWELRY_RESOLVE_REQ;
	m_DecodeFuncArray[CLIGS_JEWELRY_RESOLVE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JEWELRY_RESOLVE_REQ;
	m_vecMsgList.push_back(CLIGS_JEWELRY_RESOLVE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_JEWELRY_RESOLVE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JEWELRY_RESOLVE_REQ);

	m_EncodeFuncArray[CLIGS_JEWELRY_RESOLVE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JEWELRY_RESOLVE_ACK;
	m_DecodeFuncArray[CLIGS_JEWELRY_RESOLVE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JEWELRY_RESOLVE_ACK;
	m_vecMsgList.push_back(CLIGS_JEWELRY_RESOLVE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_JEWELRY_RESOLVE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JEWELRY_RESOLVE_ACK);

	m_EncodeFuncArray[CLIGS_PLAYER_INFO_SKILL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_INFO_SKILL_REQ;
	m_DecodeFuncArray[CLIGS_PLAYER_INFO_SKILL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_INFO_SKILL_REQ;
	m_vecMsgList.push_back(CLIGS_PLAYER_INFO_SKILL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_SKILL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_SKILL_REQ);

	m_EncodeFuncArray[CLIGS_PLAYER_INFO_SKILL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_INFO_SKILL_ACK;
	m_DecodeFuncArray[CLIGS_PLAYER_INFO_SKILL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_INFO_SKILL_ACK;
	m_vecMsgList.push_back(CLIGS_PLAYER_INFO_SKILL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_SKILL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_SKILL_ACK);

	m_EncodeFuncArray[CLIGS_PLAYER_INFO_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_INFO_EQUIP_REQ;
	m_DecodeFuncArray[CLIGS_PLAYER_INFO_EQUIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_INFO_EQUIP_REQ;
	m_vecMsgList.push_back(CLIGS_PLAYER_INFO_EQUIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_EQUIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_EQUIP_REQ);

	m_EncodeFuncArray[CLIGS_PLAYER_INFO_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_INFO_EQUIP_ACK;
	m_DecodeFuncArray[CLIGS_PLAYER_INFO_EQUIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_INFO_EQUIP_ACK;
	m_vecMsgList.push_back(CLIGS_PLAYER_INFO_EQUIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_EQUIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_EQUIP_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_JEWELRY_STRENGTH_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_JEWELRY_STRENGTH_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_JEWELRY_STRENGTH_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_JEWELRY_STRENGTH_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_JEWELRY_STRENGTH_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_JEWELRY_STRENGTH_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_JEWELRY_STRENGTH_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_JEWELRY_STRENGTH_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_JEWELRY_STRENGTH_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_JEWELRY_STRENGTH_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_JEWELRY_STRENGTH_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_JEWELRY_STRENGTH_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_JEWELRY_STRENGTH_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_JEWELRY_STRENGTH_ACK);

	m_EncodeFuncArray[CLIGS_JEWELRY_COMPARE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JEWELRY_COMPARE_REQ;
	m_DecodeFuncArray[CLIGS_JEWELRY_COMPARE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JEWELRY_COMPARE_REQ;
	m_vecMsgList.push_back(CLIGS_JEWELRY_COMPARE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_JEWELRY_COMPARE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JEWELRY_COMPARE_REQ);

	m_EncodeFuncArray[CLIGS_JEWELRY_COMPARE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JEWELRY_COMPARE_ACK;
	m_DecodeFuncArray[CLIGS_JEWELRY_COMPARE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JEWELRY_COMPARE_ACK;
	m_vecMsgList.push_back(CLIGS_JEWELRY_COMPARE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_JEWELRY_COMPARE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JEWELRY_COMPARE_ACK);

	m_EncodeFuncArray[CLIGS_JEWELRY_EXT_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JEWELRY_EXT_UPGRADE_REQ;
	m_DecodeFuncArray[CLIGS_JEWELRY_EXT_UPGRADE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JEWELRY_EXT_UPGRADE_REQ;
	m_vecMsgList.push_back(CLIGS_JEWELRY_EXT_UPGRADE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_JEWELRY_EXT_UPGRADE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JEWELRY_EXT_UPGRADE_REQ);

	m_EncodeFuncArray[CLIGS_JEWELRY_EXT_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JEWELRY_EXT_UPGRADE_ACK;
	m_DecodeFuncArray[CLIGS_JEWELRY_EXT_UPGRADE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JEWELRY_EXT_UPGRADE_ACK;
	m_vecMsgList.push_back(CLIGS_JEWELRY_EXT_UPGRADE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_JEWELRY_EXT_UPGRADE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JEWELRY_EXT_UPGRADE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_JEWELRY_RESOLVE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_JEWELRY_RESOLVE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_JEWELRY_RESOLVE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_JEWELRY_RESOLVE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_JEWELRY_RESOLVE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_JEWELRY_RESOLVE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_JEWELRY_RESOLVE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_JEWELRY_RESOLVE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_JEWELRY_RESOLVE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_JEWELRY_RESOLVE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_JEWELRY_RESOLVE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_JEWELRY_RESOLVE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_JEWELRY_RESOLVE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_JEWELRY_RESOLVE_ACK);

	m_EncodeFuncArray[CLIGS_COURAGE_GROUP_OVERTIME_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_GROUP_OVERTIME_NTF;
	m_DecodeFuncArray[CLIGS_COURAGE_GROUP_OVERTIME_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_GROUP_OVERTIME_NTF;
	m_vecMsgList.push_back(CLIGS_COURAGE_GROUP_OVERTIME_NTF);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_GROUP_OVERTIME_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_GROUP_OVERTIME_NTF);

	m_EncodeFuncArray[CLIGS_BATTLE_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BATTLE_ACK3;
	m_DecodeFuncArray[CLIGS_BATTLE_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BATTLE_ACK3;
	m_vecMsgList.push_back(CLIGS_BATTLE_ACK3);
	if( (INT32)sizeof(PKT_CLIGS_BATTLE_ACK3) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BATTLE_ACK3);

	m_EncodeFuncArray[CLIGS_CHALLENGE_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHALLENGE_ACK3;
	m_DecodeFuncArray[CLIGS_CHALLENGE_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHALLENGE_ACK3;
	m_vecMsgList.push_back(CLIGS_CHALLENGE_ACK3);
	if( (INT32)sizeof(PKT_CLIGS_CHALLENGE_ACK3) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHALLENGE_ACK3);

	m_EncodeFuncArray[CLIGS_PLUNDER_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLUNDER_ACK3;
	m_DecodeFuncArray[CLIGS_PLUNDER_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLUNDER_ACK3;
	m_vecMsgList.push_back(CLIGS_PLUNDER_ACK3);
	if( (INT32)sizeof(PKT_CLIGS_PLUNDER_ACK3) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLUNDER_ACK3);

	m_EncodeFuncArray[CLIGS_PKBATTLE_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PKBATTLE_ACK3;
	m_DecodeFuncArray[CLIGS_PKBATTLE_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PKBATTLE_ACK3;
	m_vecMsgList.push_back(CLIGS_PKBATTLE_ACK3);
	if( (INT32)sizeof(PKT_CLIGS_PKBATTLE_ACK3) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PKBATTLE_ACK3);

	m_EncodeFuncArray[CLIGS_RDCHALLENGE_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RDCHALLENGE_ACK3;
	m_DecodeFuncArray[CLIGS_RDCHALLENGE_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RDCHALLENGE_ACK3;
	m_vecMsgList.push_back(CLIGS_RDCHALLENGE_ACK3);
	if( (INT32)sizeof(PKT_CLIGS_RDCHALLENGE_ACK3) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RDCHALLENGE_ACK3);

	m_EncodeFuncArray[CLIGS_HUNTING_BATTLE_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HUNTING_BATTLE_ACK2;
	m_DecodeFuncArray[CLIGS_HUNTING_BATTLE_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HUNTING_BATTLE_ACK2;
	m_vecMsgList.push_back(CLIGS_HUNTING_BATTLE_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_HUNTING_BATTLE_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HUNTING_BATTLE_ACK2);

	m_EncodeFuncArray[CLIGS_COURAGE_PLAYER_START_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_PLAYER_START_ACK2;
	m_DecodeFuncArray[CLIGS_COURAGE_PLAYER_START_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_PLAYER_START_ACK2;
	m_vecMsgList.push_back(CLIGS_COURAGE_PLAYER_START_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_START_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_START_ACK2);

	m_EncodeFuncArray[CLIGS_COURAGE_LEADER_START_NTF2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_LEADER_START_NTF2;
	m_DecodeFuncArray[CLIGS_COURAGE_LEADER_START_NTF2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_LEADER_START_NTF2;
	m_vecMsgList.push_back(CLIGS_COURAGE_LEADER_START_NTF2);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_LEADER_START_NTF2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_LEADER_START_NTF2);

	m_EncodeFuncArray[CLIGS_BEGIN_JIEBIAO_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BEGIN_JIEBIAO_ACK3;
	m_DecodeFuncArray[CLIGS_BEGIN_JIEBIAO_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BEGIN_JIEBIAO_ACK3;
	m_vecMsgList.push_back(CLIGS_BEGIN_JIEBIAO_ACK3);
	if( (INT32)sizeof(PKT_CLIGS_BEGIN_JIEBIAO_ACK3) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BEGIN_JIEBIAO_ACK3);

	m_EncodeFuncArray[CLIGS_QUERY_BATTLE_RECORD_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK3;
	m_DecodeFuncArray[CLIGS_QUERY_BATTLE_RECORD_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK3;
	m_vecMsgList.push_back(CLIGS_QUERY_BATTLE_RECORD_ACK3);
	if( (INT32)sizeof(PKT_CLIGS_QUERY_BATTLE_RECORD_ACK3) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUERY_BATTLE_RECORD_ACK3);

	m_EncodeFuncArray[CLIGS_OPEN_GVG_ACTIVITY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GVG_ACTIVITY_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GVG_ACTIVITY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GVG_ACTIVITY_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GVG_ACTIVITY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GVG_ACTIVITY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GVG_ACTIVITY_REQ);

	m_EncodeFuncArray[CLIGS_GVG_APPLAY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_APPLAY_ACK;
	m_DecodeFuncArray[CLIGS_GVG_APPLAY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_APPLAY_ACK;
	m_vecMsgList.push_back(CLIGS_GVG_APPLAY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GVG_APPLAY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_APPLAY_ACK);

	m_EncodeFuncArray[CLIGS_GVG_MONEY_CHAOS_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_MONEY_CHAOS_ACK;
	m_DecodeFuncArray[CLIGS_GVG_MONEY_CHAOS_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_MONEY_CHAOS_ACK;
	m_vecMsgList.push_back(CLIGS_GVG_MONEY_CHAOS_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GVG_MONEY_CHAOS_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_MONEY_CHAOS_ACK);

	m_EncodeFuncArray[CLIGS_16_TO_8_TO_4_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_16_TO_8_TO_4_ACK;
	m_DecodeFuncArray[CLIGS_16_TO_8_TO_4_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_16_TO_8_TO_4_ACK;
	m_vecMsgList.push_back(CLIGS_16_TO_8_TO_4_ACK);
	if( (INT32)sizeof(PKT_CLIGS_16_TO_8_TO_4_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_16_TO_8_TO_4_ACK);

	m_EncodeFuncArray[CLIGS_FINAL_WAR_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FINAL_WAR_ACK;
	m_DecodeFuncArray[CLIGS_FINAL_WAR_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FINAL_WAR_ACK;
	m_vecMsgList.push_back(CLIGS_FINAL_WAR_ACK);
	if( (INT32)sizeof(PKT_CLIGS_FINAL_WAR_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FINAL_WAR_ACK);

	m_EncodeFuncArray[CLIGS_GVG_CHAMPION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_CHAMPION_ACK;
	m_DecodeFuncArray[CLIGS_GVG_CHAMPION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_CHAMPION_ACK;
	m_vecMsgList.push_back(CLIGS_GVG_CHAMPION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GVG_CHAMPION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_CHAMPION_ACK);

	m_EncodeFuncArray[CLIGS_GVG_ERR_MSG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_ERR_MSG_ACK;
	m_DecodeFuncArray[CLIGS_GVG_ERR_MSG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_ERR_MSG_ACK;
	m_vecMsgList.push_back(CLIGS_GVG_ERR_MSG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GVG_ERR_MSG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_ERR_MSG_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GVG_FORMATION_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GVG_FORMATION_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GVG_FORMATION_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GVG_FORMATION_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GVG_FORMATION_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GVG_FORMATION_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GVG_FORMATION_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GVG_FORMATION_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GVG_FORMATION_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GVG_FORMATION_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GVG_FORMATION_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GVG_FORMATION_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GVG_FORMATION_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GVG_FORMATION_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_ALREAD_APPLAY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_ALREAD_APPLAY_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_ALREAD_APPLAY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_ALREAD_APPLAY_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_ALREAD_APPLAY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_ALREAD_APPLAY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_ALREAD_APPLAY_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_ALREAD_APPLAY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_ALREAD_APPLAY_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_ALREAD_APPLAY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_ALREAD_APPLAY_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_ALREAD_APPLAY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_ALREAD_APPLAY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_ALREAD_APPLAY_ACK);

	m_EncodeFuncArray[CLIGS_GVG_LAST_RESULT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_LAST_RESULT_REQ;
	m_DecodeFuncArray[CLIGS_GVG_LAST_RESULT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_LAST_RESULT_REQ;
	m_vecMsgList.push_back(CLIGS_GVG_LAST_RESULT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GVG_LAST_RESULT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_LAST_RESULT_REQ);

	m_EncodeFuncArray[CLIGS_GVG_LAST_RESULT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_LAST_RESULT_ACK;
	m_DecodeFuncArray[CLIGS_GVG_LAST_RESULT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_LAST_RESULT_ACK;
	m_vecMsgList.push_back(CLIGS_GVG_LAST_RESULT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GVG_LAST_RESULT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_LAST_RESULT_ACK);

	m_EncodeFuncArray[CLIGS_GVG_OPEN_MY_GAMBLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_OPEN_MY_GAMBLE_REQ;
	m_DecodeFuncArray[CLIGS_GVG_OPEN_MY_GAMBLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_OPEN_MY_GAMBLE_REQ;
	m_vecMsgList.push_back(CLIGS_GVG_OPEN_MY_GAMBLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GVG_OPEN_MY_GAMBLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_OPEN_MY_GAMBLE_REQ);

	m_EncodeFuncArray[CLIGS_GVG_OPEN_MY_GAMBLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_OPEN_MY_GAMBLE_ACK;
	m_DecodeFuncArray[CLIGS_GVG_OPEN_MY_GAMBLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_OPEN_MY_GAMBLE_ACK;
	m_vecMsgList.push_back(CLIGS_GVG_OPEN_MY_GAMBLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GVG_OPEN_MY_GAMBLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_OPEN_MY_GAMBLE_ACK);

	m_EncodeFuncArray[CLIGS_GVG_OPEN_GAMBLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_OPEN_GAMBLE_REQ;
	m_DecodeFuncArray[CLIGS_GVG_OPEN_GAMBLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_OPEN_GAMBLE_REQ;
	m_vecMsgList.push_back(CLIGS_GVG_OPEN_GAMBLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GVG_OPEN_GAMBLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_OPEN_GAMBLE_REQ);

	m_EncodeFuncArray[CLIGS_GVG_OPEN_GAMBLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_OPEN_GAMBLE_ACK;
	m_DecodeFuncArray[CLIGS_GVG_OPEN_GAMBLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_OPEN_GAMBLE_ACK;
	m_vecMsgList.push_back(CLIGS_GVG_OPEN_GAMBLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GVG_OPEN_GAMBLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_OPEN_GAMBLE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GVG_RULE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GVG_RULE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GVG_RULE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GVG_RULE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GVG_RULE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GVG_RULE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GVG_RULE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GVG_RULE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GVG_RULE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GVG_RULE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GVG_RULE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GVG_RULE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GVG_RULE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GVG_RULE_ACK);

	m_EncodeFuncArray[CLIGS_GVG_GAMBLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_GAMBLE_REQ;
	m_DecodeFuncArray[CLIGS_GVG_GAMBLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_GAMBLE_REQ;
	m_vecMsgList.push_back(CLIGS_GVG_GAMBLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GVG_GAMBLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_GAMBLE_REQ);

	m_EncodeFuncArray[CLIGS_GVG_GAMBLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_GAMBLE_ACK;
	m_DecodeFuncArray[CLIGS_GVG_GAMBLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_GAMBLE_ACK;
	m_vecMsgList.push_back(CLIGS_GVG_GAMBLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GVG_GAMBLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_GAMBLE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_FACTION_MONEY_RANK_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FACTION_MONEY_RANK_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_FACTION_MONEY_RANK_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FACTION_MONEY_RANK_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_FACTION_MONEY_RANK_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_MONEY_RANK_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_MONEY_RANK_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_FACTION_MONEY_RANK_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FACTION_MONEY_RANK_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_FACTION_MONEY_RANK_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FACTION_MONEY_RANK_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_FACTION_MONEY_RANK_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_MONEY_RANK_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FACTION_MONEY_RANK_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GVG_LOG_RESET_UNREAD_CNT_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GVG_LOG_RESET_UNREAD_CNT_NTF;
	m_DecodeFuncArray[CLIGS_OPEN_GVG_LOG_RESET_UNREAD_CNT_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GVG_LOG_RESET_UNREAD_CNT_NTF;
	m_vecMsgList.push_back(CLIGS_OPEN_GVG_LOG_RESET_UNREAD_CNT_NTF);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GVG_LOG_RESET_UNREAD_CNT_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GVG_LOG_RESET_UNREAD_CNT_NTF);

	m_EncodeFuncArray[CLIGS_OPEN_GVG_LOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GVG_LOG_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GVG_LOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GVG_LOG_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GVG_LOG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GVG_LOG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GVG_LOG_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GVG_LOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GVG_LOG_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GVG_LOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GVG_LOG_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GVG_LOG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GVG_LOG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GVG_LOG_ACK);

	m_EncodeFuncArray[CLIGS_SEE_GVG_VIDEO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEE_GVG_VIDEO_REQ;
	m_DecodeFuncArray[CLIGS_SEE_GVG_VIDEO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEE_GVG_VIDEO_REQ;
	m_vecMsgList.push_back(CLIGS_SEE_GVG_VIDEO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SEE_GVG_VIDEO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEE_GVG_VIDEO_REQ);

	m_EncodeFuncArray[CLIGS_SEE_GVG_VIDEO_ACK_v400 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEE_GVG_VIDEO_ACK_v400;
	m_DecodeFuncArray[CLIGS_SEE_GVG_VIDEO_ACK_v400 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEE_GVG_VIDEO_ACK_v400;
	m_vecMsgList.push_back(CLIGS_SEE_GVG_VIDEO_ACK_v400);
	if( (INT32)sizeof(PKT_CLIGS_SEE_GVG_VIDEO_ACK_v400) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEE_GVG_VIDEO_ACK_v400);

	m_EncodeFuncArray[CLIGS_END_GVG_VIDEO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_END_GVG_VIDEO_REQ;
	m_DecodeFuncArray[CLIGS_END_GVG_VIDEO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_END_GVG_VIDEO_REQ;
	m_vecMsgList.push_back(CLIGS_END_GVG_VIDEO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_END_GVG_VIDEO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_END_GVG_VIDEO_REQ);

	m_EncodeFuncArray[CLIGS_END_GVG_VIDEO_ACK_v400 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_END_GVG_VIDEO_ACK_v400;
	m_DecodeFuncArray[CLIGS_END_GVG_VIDEO_ACK_v400 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_END_GVG_VIDEO_ACK_v400;
	m_vecMsgList.push_back(CLIGS_END_GVG_VIDEO_ACK_v400);
	if( (INT32)sizeof(PKT_CLIGS_END_GVG_VIDEO_ACK_v400) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_END_GVG_VIDEO_ACK_v400);

	m_EncodeFuncArray[CLIGS_SHOW_GVG_MVP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SHOW_GVG_MVP_REQ;
	m_DecodeFuncArray[CLIGS_SHOW_GVG_MVP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SHOW_GVG_MVP_REQ;
	m_vecMsgList.push_back(CLIGS_SHOW_GVG_MVP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SHOW_GVG_MVP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SHOW_GVG_MVP_REQ);

	m_EncodeFuncArray[CLIGS_SHOW_GVG_MVP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SHOW_GVG_MVP_ACK;
	m_DecodeFuncArray[CLIGS_SHOW_GVG_MVP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SHOW_GVG_MVP_ACK;
	m_vecMsgList.push_back(CLIGS_SHOW_GVG_MVP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SHOW_GVG_MVP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SHOW_GVG_MVP_ACK);

	m_EncodeFuncArray[CLIGS_READ_FORMATION_PLAYER_TIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_READ_FORMATION_PLAYER_TIP_REQ;
	m_DecodeFuncArray[CLIGS_READ_FORMATION_PLAYER_TIP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_READ_FORMATION_PLAYER_TIP_REQ;
	m_vecMsgList.push_back(CLIGS_READ_FORMATION_PLAYER_TIP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_READ_FORMATION_PLAYER_TIP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_READ_FORMATION_PLAYER_TIP_REQ);

	m_EncodeFuncArray[CLIGS_READ_FORMATION_PLAYER_TIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_READ_FORMATION_PLAYER_TIP_ACK;
	m_DecodeFuncArray[CLIGS_READ_FORMATION_PLAYER_TIP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_READ_FORMATION_PLAYER_TIP_ACK;
	m_vecMsgList.push_back(CLIGS_READ_FORMATION_PLAYER_TIP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_READ_FORMATION_PLAYER_TIP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_READ_FORMATION_PLAYER_TIP_ACK);

	m_EncodeFuncArray[CLIGS_GVG_FACTION_EMBATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_FACTION_EMBATTLE_REQ;
	m_DecodeFuncArray[CLIGS_GVG_FACTION_EMBATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_FACTION_EMBATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_GVG_FACTION_EMBATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GVG_FACTION_EMBATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_FACTION_EMBATTLE_REQ);

	m_EncodeFuncArray[CLIGS_GVG_FACTION_EMBATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_FACTION_EMBATTLE_ACK;
	m_DecodeFuncArray[CLIGS_GVG_FACTION_EMBATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_FACTION_EMBATTLE_ACK;
	m_vecMsgList.push_back(CLIGS_GVG_FACTION_EMBATTLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GVG_FACTION_EMBATTLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_FACTION_EMBATTLE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_GVG_GIFT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GVG_GIFT_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_GVG_GIFT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GVG_GIFT_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_GVG_GIFT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GVG_GIFT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GVG_GIFT_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_GVG_GIFT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_GVG_GIFT_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_GVG_GIFT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_GVG_GIFT_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_GVG_GIFT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_GVG_GIFT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_GVG_GIFT_ACK);

	m_EncodeFuncArray[CLIGS_GET_GVG_GIFT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_GVG_GIFT_REQ;
	m_DecodeFuncArray[CLIGS_GET_GVG_GIFT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_GVG_GIFT_REQ;
	m_vecMsgList.push_back(CLIGS_GET_GVG_GIFT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GET_GVG_GIFT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_GVG_GIFT_REQ);

	m_EncodeFuncArray[CLIGS_GET_GVG_GIFT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_GVG_GIFT_ACK;
	m_DecodeFuncArray[CLIGS_GET_GVG_GIFT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_GVG_GIFT_ACK;
	m_vecMsgList.push_back(CLIGS_GET_GVG_GIFT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GET_GVG_GIFT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_GVG_GIFT_ACK);

	m_EncodeFuncArray[CLIGS_BATTLE_ACK4 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BATTLE_ACK4;
	m_DecodeFuncArray[CLIGS_BATTLE_ACK4 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BATTLE_ACK4;
	m_vecMsgList.push_back(CLIGS_BATTLE_ACK4);
	if( (INT32)sizeof(PKT_CLIGS_BATTLE_ACK4) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BATTLE_ACK4);

	m_EncodeFuncArray[CLIGS_CHALLENGE_ACK4 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHALLENGE_ACK4;
	m_DecodeFuncArray[CLIGS_CHALLENGE_ACK4 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHALLENGE_ACK4;
	m_vecMsgList.push_back(CLIGS_CHALLENGE_ACK4);
	if( (INT32)sizeof(PKT_CLIGS_CHALLENGE_ACK4) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHALLENGE_ACK4);

	m_EncodeFuncArray[CLIGS_PLUNDER_ACK4 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLUNDER_ACK4;
	m_DecodeFuncArray[CLIGS_PLUNDER_ACK4 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLUNDER_ACK4;
	m_vecMsgList.push_back(CLIGS_PLUNDER_ACK4);
	if( (INT32)sizeof(PKT_CLIGS_PLUNDER_ACK4) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLUNDER_ACK4);

	m_EncodeFuncArray[CLIGS_PKBATTLE_ACK4 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PKBATTLE_ACK4;
	m_DecodeFuncArray[CLIGS_PKBATTLE_ACK4 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PKBATTLE_ACK4;
	m_vecMsgList.push_back(CLIGS_PKBATTLE_ACK4);
	if( (INT32)sizeof(PKT_CLIGS_PKBATTLE_ACK4) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PKBATTLE_ACK4);

	m_EncodeFuncArray[CLIGS_RDCHALLENGE_ACK4 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RDCHALLENGE_ACK4;
	m_DecodeFuncArray[CLIGS_RDCHALLENGE_ACK4 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RDCHALLENGE_ACK4;
	m_vecMsgList.push_back(CLIGS_RDCHALLENGE_ACK4);
	if( (INT32)sizeof(PKT_CLIGS_RDCHALLENGE_ACK4) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RDCHALLENGE_ACK4);

	m_EncodeFuncArray[CLIGS_HUNTING_BATTLE_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HUNTING_BATTLE_ACK3;
	m_DecodeFuncArray[CLIGS_HUNTING_BATTLE_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HUNTING_BATTLE_ACK3;
	m_vecMsgList.push_back(CLIGS_HUNTING_BATTLE_ACK3);
	if( (INT32)sizeof(PKT_CLIGS_HUNTING_BATTLE_ACK3) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HUNTING_BATTLE_ACK3);

	m_EncodeFuncArray[CLIGS_COURAGE_PLAYER_START_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_PLAYER_START_ACK3;
	m_DecodeFuncArray[CLIGS_COURAGE_PLAYER_START_ACK3 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_PLAYER_START_ACK3;
	m_vecMsgList.push_back(CLIGS_COURAGE_PLAYER_START_ACK3);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_START_ACK3) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_START_ACK3);

	m_EncodeFuncArray[CLIGS_COURAGE_LEADER_START_NTF3 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_LEADER_START_NTF3;
	m_DecodeFuncArray[CLIGS_COURAGE_LEADER_START_NTF3 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_LEADER_START_NTF3;
	m_vecMsgList.push_back(CLIGS_COURAGE_LEADER_START_NTF3);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_LEADER_START_NTF3) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_LEADER_START_NTF3);

	m_EncodeFuncArray[CLIGS_BEGIN_JIEBIAO_ACK4 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BEGIN_JIEBIAO_ACK4;
	m_DecodeFuncArray[CLIGS_BEGIN_JIEBIAO_ACK4 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BEGIN_JIEBIAO_ACK4;
	m_vecMsgList.push_back(CLIGS_BEGIN_JIEBIAO_ACK4);
	if( (INT32)sizeof(PKT_CLIGS_BEGIN_JIEBIAO_ACK4) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BEGIN_JIEBIAO_ACK4);

	m_EncodeFuncArray[CLIGS_QUERY_BATTLE_RECORD_ACK4 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK4;
	m_DecodeFuncArray[CLIGS_QUERY_BATTLE_RECORD_ACK4 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK4;
	m_vecMsgList.push_back(CLIGS_QUERY_BATTLE_RECORD_ACK4);
	if( (INT32)sizeof(PKT_CLIGS_QUERY_BATTLE_RECORD_ACK4) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUERY_BATTLE_RECORD_ACK4);

	m_EncodeFuncArray[CLIGS_SELECT_GROUP_TYPE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SELECT_GROUP_TYPE_REQ;
	m_DecodeFuncArray[CLIGS_SELECT_GROUP_TYPE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SELECT_GROUP_TYPE_REQ;
	m_vecMsgList.push_back(CLIGS_SELECT_GROUP_TYPE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SELECT_GROUP_TYPE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SELECT_GROUP_TYPE_REQ);

	m_EncodeFuncArray[CLIGS_SELECT_GROUP_TYPE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SELECT_GROUP_TYPE_ACK;
	m_DecodeFuncArray[CLIGS_SELECT_GROUP_TYPE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SELECT_GROUP_TYPE_ACK;
	m_vecMsgList.push_back(CLIGS_SELECT_GROUP_TYPE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SELECT_GROUP_TYPE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SELECT_GROUP_TYPE_ACK);

	m_EncodeFuncArray[CLIGS_GVG_FACTION_APPLAY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_FACTION_APPLAY_REQ;
	m_DecodeFuncArray[CLIGS_GVG_FACTION_APPLAY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_FACTION_APPLAY_REQ;
	m_vecMsgList.push_back(CLIGS_GVG_FACTION_APPLAY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_GVG_FACTION_APPLAY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_FACTION_APPLAY_REQ);

	m_EncodeFuncArray[CLIGS_GVG_FACTION_APPLAY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GVG_FACTION_APPLAY_ACK;
	m_DecodeFuncArray[CLIGS_GVG_FACTION_APPLAY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GVG_FACTION_APPLAY_ACK;
	m_vecMsgList.push_back(CLIGS_GVG_FACTION_APPLAY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_GVG_FACTION_APPLAY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GVG_FACTION_APPLAY_ACK);

	m_EncodeFuncArray[CLIGS_READ_BATTLE_LOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_READ_BATTLE_LOG_REQ;
	m_DecodeFuncArray[CLIGS_READ_BATTLE_LOG_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_READ_BATTLE_LOG_REQ;
	m_vecMsgList.push_back(CLIGS_READ_BATTLE_LOG_REQ);
	if( (INT32)sizeof(PKT_CLIGS_READ_BATTLE_LOG_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_READ_BATTLE_LOG_REQ);

	m_EncodeFuncArray[CLIGS_READ_BATTLE_LOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_READ_BATTLE_LOG_ACK;
	m_DecodeFuncArray[CLIGS_READ_BATTLE_LOG_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_READ_BATTLE_LOG_ACK;
	m_vecMsgList.push_back(CLIGS_READ_BATTLE_LOG_ACK);
	if( (INT32)sizeof(PKT_CLIGS_READ_BATTLE_LOG_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_READ_BATTLE_LOG_ACK);

	m_EncodeFuncArray[CLIGS_UNREAD_BATTLE_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UNREAD_BATTLE_NTF;
	m_DecodeFuncArray[CLIGS_UNREAD_BATTLE_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UNREAD_BATTLE_NTF;
	m_vecMsgList.push_back(CLIGS_UNREAD_BATTLE_NTF);
	if( (INT32)sizeof(PKT_CLIGS_UNREAD_BATTLE_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UNREAD_BATTLE_NTF);

	m_EncodeFuncArray[CLIGS_OPEN_DEVOUR_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DEVOUR_SOUL_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_DEVOUR_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DEVOUR_SOUL_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_DEVOUR_SOUL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DEVOUR_SOUL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DEVOUR_SOUL_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_DEVOUR_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_DEVOUR_SOUL_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_DEVOUR_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_DEVOUR_SOUL_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_DEVOUR_SOUL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_DEVOUR_SOUL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_DEVOUR_SOUL_ACK);

	m_EncodeFuncArray[CLIGS_DEVOUR_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DEVOUR_SOUL_REQ;
	m_DecodeFuncArray[CLIGS_DEVOUR_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DEVOUR_SOUL_REQ;
	m_vecMsgList.push_back(CLIGS_DEVOUR_SOUL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DEVOUR_SOUL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DEVOUR_SOUL_REQ);

	m_EncodeFuncArray[CLIGS_DEVOUR_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DEVOUR_SOUL_ACK;
	m_DecodeFuncArray[CLIGS_DEVOUR_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DEVOUR_SOUL_ACK;
	m_vecMsgList.push_back(CLIGS_DEVOUR_SOUL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DEVOUR_SOUL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DEVOUR_SOUL_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_REFLASH_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_REFLASH_SOUL_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_REFLASH_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_REFLASH_SOUL_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_REFLASH_SOUL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_REFLASH_SOUL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_REFLASH_SOUL_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_REFLASH_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_REFLASH_SOUL_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_REFLASH_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_REFLASH_SOUL_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_REFLASH_SOUL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_REFLASH_SOUL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_REFLASH_SOUL_ACK);

	m_EncodeFuncArray[CLIGS_REFLASH_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REFLASH_SOUL_REQ;
	m_DecodeFuncArray[CLIGS_REFLASH_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REFLASH_SOUL_REQ;
	m_vecMsgList.push_back(CLIGS_REFLASH_SOUL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_REFLASH_SOUL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REFLASH_SOUL_REQ);

	m_EncodeFuncArray[CLIGS_REFLASH_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REFLASH_SOUL_ACK;
	m_DecodeFuncArray[CLIGS_REFLASH_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REFLASH_SOUL_ACK;
	m_vecMsgList.push_back(CLIGS_REFLASH_SOUL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_REFLASH_SOUL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REFLASH_SOUL_ACK);

	m_EncodeFuncArray[CLIGS_SAVE_REFLASH_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SAVE_REFLASH_SOUL_REQ;
	m_DecodeFuncArray[CLIGS_SAVE_REFLASH_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SAVE_REFLASH_SOUL_REQ;
	m_vecMsgList.push_back(CLIGS_SAVE_REFLASH_SOUL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SAVE_REFLASH_SOUL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SAVE_REFLASH_SOUL_REQ);

	m_EncodeFuncArray[CLIGS_SAVE_REFLASH_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SAVE_REFLASH_SOUL_ACK;
	m_DecodeFuncArray[CLIGS_SAVE_REFLASH_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SAVE_REFLASH_SOUL_ACK;
	m_vecMsgList.push_back(CLIGS_SAVE_REFLASH_SOUL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SAVE_REFLASH_SOUL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SAVE_REFLASH_SOUL_ACK);

	m_EncodeFuncArray[CLIGS_SOULREP_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SOULREP_INFO_REQ;
	m_DecodeFuncArray[CLIGS_SOULREP_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SOULREP_INFO_REQ;
	m_vecMsgList.push_back(CLIGS_SOULREP_INFO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SOULREP_INFO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SOULREP_INFO_REQ);

	m_EncodeFuncArray[CLIGS_SOULREP_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SOULREP_INFO_ACK;
	m_DecodeFuncArray[CLIGS_SOULREP_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SOULREP_INFO_ACK;
	m_vecMsgList.push_back(CLIGS_SOULREP_INFO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SOULREP_INFO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SOULREP_INFO_ACK);

	m_EncodeFuncArray[CLIGS_PRODUCT_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PRODUCT_SOUL_REQ;
	m_DecodeFuncArray[CLIGS_PRODUCT_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PRODUCT_SOUL_REQ;
	m_vecMsgList.push_back(CLIGS_PRODUCT_SOUL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PRODUCT_SOUL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PRODUCT_SOUL_REQ);

	m_EncodeFuncArray[CLIGS_PRODUCT_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PRODUCT_SOUL_ACK;
	m_DecodeFuncArray[CLIGS_PRODUCT_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PRODUCT_SOUL_ACK;
	m_vecMsgList.push_back(CLIGS_PRODUCT_SOUL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PRODUCT_SOUL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PRODUCT_SOUL_ACK);

	m_EncodeFuncArray[CLIGS_HERO_EQUIP_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HERO_EQUIP_SOUL_REQ;
	m_DecodeFuncArray[CLIGS_HERO_EQUIP_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HERO_EQUIP_SOUL_REQ;
	m_vecMsgList.push_back(CLIGS_HERO_EQUIP_SOUL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_HERO_EQUIP_SOUL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HERO_EQUIP_SOUL_REQ);

	m_EncodeFuncArray[CLIGS_HERO_EQUIP_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HERO_EQUIP_SOUL_ACK;
	m_DecodeFuncArray[CLIGS_HERO_EQUIP_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HERO_EQUIP_SOUL_ACK;
	m_vecMsgList.push_back(CLIGS_HERO_EQUIP_SOUL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_HERO_EQUIP_SOUL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HERO_EQUIP_SOUL_ACK);

	m_EncodeFuncArray[CLIGS_HERO_UNDRESS_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HERO_UNDRESS_SOUL_REQ;
	m_DecodeFuncArray[CLIGS_HERO_UNDRESS_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HERO_UNDRESS_SOUL_REQ;
	m_vecMsgList.push_back(CLIGS_HERO_UNDRESS_SOUL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_HERO_UNDRESS_SOUL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HERO_UNDRESS_SOUL_REQ);

	m_EncodeFuncArray[CLIGS_HERO_UNDRESS_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HERO_UNDRESS_SOUL_ACK;
	m_DecodeFuncArray[CLIGS_HERO_UNDRESS_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HERO_UNDRESS_SOUL_ACK;
	m_vecMsgList.push_back(CLIGS_HERO_UNDRESS_SOUL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_HERO_UNDRESS_SOUL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HERO_UNDRESS_SOUL_ACK);

	m_EncodeFuncArray[CLIGS_SOULEXCHANGE_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SOULEXCHANGE_INFO_REQ;
	m_DecodeFuncArray[CLIGS_SOULEXCHANGE_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SOULEXCHANGE_INFO_REQ;
	m_vecMsgList.push_back(CLIGS_SOULEXCHANGE_INFO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SOULEXCHANGE_INFO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SOULEXCHANGE_INFO_REQ);

	m_EncodeFuncArray[CLIGS_SOULEXCHANGE_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SOULEXCHANGE_INFO_ACK;
	m_DecodeFuncArray[CLIGS_SOULEXCHANGE_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SOULEXCHANGE_INFO_ACK;
	m_vecMsgList.push_back(CLIGS_SOULEXCHANGE_INFO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SOULEXCHANGE_INFO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SOULEXCHANGE_INFO_ACK);

	m_EncodeFuncArray[CLIGS_EXCHANGE_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXCHANGE_SOUL_REQ;
	m_DecodeFuncArray[CLIGS_EXCHANGE_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXCHANGE_SOUL_REQ;
	m_vecMsgList.push_back(CLIGS_EXCHANGE_SOUL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EXCHANGE_SOUL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXCHANGE_SOUL_REQ);

	m_EncodeFuncArray[CLIGS_EXCHANGE_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXCHANGE_SOUL_ACK;
	m_DecodeFuncArray[CLIGS_EXCHANGE_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXCHANGE_SOUL_ACK;
	m_vecMsgList.push_back(CLIGS_EXCHANGE_SOUL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EXCHANGE_SOUL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXCHANGE_SOUL_ACK);

	m_EncodeFuncArray[CLIGS_PLAYER_INFO_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_INFO_SOUL_REQ;
	m_DecodeFuncArray[CLIGS_PLAYER_INFO_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_INFO_SOUL_REQ;
	m_vecMsgList.push_back(CLIGS_PLAYER_INFO_SOUL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_SOUL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_SOUL_REQ);

	m_EncodeFuncArray[CLIGS_PLAYER_INFO_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_INFO_SOUL_ACK;
	m_DecodeFuncArray[CLIGS_PLAYER_INFO_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_INFO_SOUL_ACK;
	m_vecMsgList.push_back(CLIGS_PLAYER_INFO_SOUL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_SOUL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_SOUL_ACK);

	m_EncodeFuncArray[CLIGS_HERO_REPLACE_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HERO_REPLACE_SOUL_REQ;
	m_DecodeFuncArray[CLIGS_HERO_REPLACE_SOUL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HERO_REPLACE_SOUL_REQ;
	m_vecMsgList.push_back(CLIGS_HERO_REPLACE_SOUL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_HERO_REPLACE_SOUL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HERO_REPLACE_SOUL_REQ);

	m_EncodeFuncArray[CLIGS_HERO_REPLACE_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HERO_REPLACE_SOUL_ACK;
	m_DecodeFuncArray[CLIGS_HERO_REPLACE_SOUL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HERO_REPLACE_SOUL_ACK;
	m_vecMsgList.push_back(CLIGS_HERO_REPLACE_SOUL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_HERO_REPLACE_SOUL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HERO_REPLACE_SOUL_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_MY_MEDAL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_MY_MEDAL_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_MY_MEDAL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_MY_MEDAL_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_MY_MEDAL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_MY_MEDAL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_MY_MEDAL_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_MY_MEDAL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_MY_MEDAL_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_MY_MEDAL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_MY_MEDAL_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_MY_MEDAL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_MY_MEDAL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_MY_MEDAL_ACK);

	m_EncodeFuncArray[CLIGS_MEDAL_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MEDAL_NTF;
	m_DecodeFuncArray[CLIGS_MEDAL_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MEDAL_NTF;
	m_vecMsgList.push_back(CLIGS_MEDAL_NTF);
	if( (INT32)sizeof(PKT_CLIGS_MEDAL_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MEDAL_NTF);

	m_EncodeFuncArray[CLIGS_OPEN_PLAYER_PANEL_ACK_OLD - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PLAYER_PANEL_ACK_OLD;
	m_DecodeFuncArray[CLIGS_OPEN_PLAYER_PANEL_ACK_OLD - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PLAYER_PANEL_ACK_OLD;
	m_vecMsgList.push_back(CLIGS_OPEN_PLAYER_PANEL_ACK_OLD);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PLAYER_PANEL_ACK_OLD) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PLAYER_PANEL_ACK_OLD);

	m_EncodeFuncArray[CLIGS_VIEW_FACTION_MEMBERS_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_VIEW_FACTION_MEMBERS_REQ;
	m_DecodeFuncArray[CLIGS_VIEW_FACTION_MEMBERS_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_VIEW_FACTION_MEMBERS_REQ;
	m_vecMsgList.push_back(CLIGS_VIEW_FACTION_MEMBERS_REQ);
	if( (INT32)sizeof(PKT_CLIGS_VIEW_FACTION_MEMBERS_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_VIEW_FACTION_MEMBERS_REQ);

	m_EncodeFuncArray[CLIGS_VIEW_FACTION_MEMBERS_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_VIEW_FACTION_MEMBERS_ACK;
	m_DecodeFuncArray[CLIGS_VIEW_FACTION_MEMBERS_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_VIEW_FACTION_MEMBERS_ACK;
	m_vecMsgList.push_back(CLIGS_VIEW_FACTION_MEMBERS_ACK);
	if( (INT32)sizeof(PKT_CLIGS_VIEW_FACTION_MEMBERS_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_VIEW_FACTION_MEMBERS_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_OUT_BOUND_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_OUT_BOUND_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_OUT_BOUND_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_OUT_BOUND_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_OUT_BOUND_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_OUT_BOUND_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_OUT_BOUND_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_OUT_BOUND_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_OUT_BOUND_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_OUT_BOUND_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_OUT_BOUND_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_OUT_BOUND_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_OUT_BOUND_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_OUT_BOUND_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_OUT_BOUND_MAP_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_OUT_BOUND_MAP_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_OUT_BOUND_MAP_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_OUT_BOUND_MAP_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_OUT_BOUND_MAP_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_OUT_BOUND_MAP_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_OUT_BOUND_MAP_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_OUT_BOUND_MAP_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_OUT_BOUND_MAP_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_OUT_BOUND_MAP_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_OUT_BOUND_MAP_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_OUT_BOUND_MAP_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_OUT_BOUND_MAP_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_OUT_BOUND_MAP_ACK);

	m_EncodeFuncArray[CLIGS_OUT_BOUND_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OUT_BOUND_BATTLE_REQ;
	m_DecodeFuncArray[CLIGS_OUT_BOUND_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OUT_BOUND_BATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_OUT_BOUND_BATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OUT_BOUND_BATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OUT_BOUND_BATTLE_REQ);

	m_EncodeFuncArray[CLIGS_OUT_BOUND_BATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OUT_BOUND_BATTLE_ACK;
	m_DecodeFuncArray[CLIGS_OUT_BOUND_BATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OUT_BOUND_BATTLE_ACK;
	m_vecMsgList.push_back(CLIGS_OUT_BOUND_BATTLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OUT_BOUND_BATTLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OUT_BOUND_BATTLE_ACK);

	m_EncodeFuncArray[CLIGS_TEST_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_TEST_REQ;
	m_DecodeFuncArray[CLIGS_TEST_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_TEST_REQ;
	m_vecMsgList.push_back(CLIGS_TEST_REQ);
	if( (INT32)sizeof(PKT_CLIGS_TEST_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_TEST_REQ);

	m_EncodeFuncArray[CLIGS_TEST_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_TEST_ACK;
	m_DecodeFuncArray[CLIGS_TEST_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_TEST_ACK;
	m_vecMsgList.push_back(CLIGS_TEST_ACK);
	if( (INT32)sizeof(PKT_CLIGS_TEST_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_TEST_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_BAG_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_BAG_ACK2;
	m_DecodeFuncArray[CLIGS_OPEN_BAG_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_BAG_ACK2;
	m_vecMsgList.push_back(CLIGS_OPEN_BAG_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_BAG_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_BAG_ACK2);

	m_EncodeFuncArray[CLIGS_OPEN_PLAYER_PANEL_ACK_v410 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PLAYER_PANEL_ACK_v410;
	m_DecodeFuncArray[CLIGS_OPEN_PLAYER_PANEL_ACK_v410 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PLAYER_PANEL_ACK_v410;
	m_vecMsgList.push_back(CLIGS_OPEN_PLAYER_PANEL_ACK_v410);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PLAYER_PANEL_ACK_v410) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PLAYER_PANEL_ACK_v410);

	m_EncodeFuncArray[CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ2;
	m_DecodeFuncArray[CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ2;
	m_vecMsgList.push_back(CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ2);

	m_EncodeFuncArray[CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK2;
	m_DecodeFuncArray[CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK2;
	m_vecMsgList.push_back(CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK2);

	m_EncodeFuncArray[CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ2;
	m_DecodeFuncArray[CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ2;
	m_vecMsgList.push_back(CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ2);
	if( (INT32)sizeof(PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ2);

	m_EncodeFuncArray[CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK2;
	m_DecodeFuncArray[CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK2;
	m_vecMsgList.push_back(CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK2);

	m_EncodeFuncArray[CLIGS_BATTLE_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BATTLE_ACK5;
	m_DecodeFuncArray[CLIGS_BATTLE_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BATTLE_ACK5;
	m_vecMsgList.push_back(CLIGS_BATTLE_ACK5);
	if( (INT32)sizeof(PKT_CLIGS_BATTLE_ACK5) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BATTLE_ACK5);

	m_EncodeFuncArray[CLIGS_CHALLENGE_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHALLENGE_ACK5;
	m_DecodeFuncArray[CLIGS_CHALLENGE_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHALLENGE_ACK5;
	m_vecMsgList.push_back(CLIGS_CHALLENGE_ACK5);
	if( (INT32)sizeof(PKT_CLIGS_CHALLENGE_ACK5) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHALLENGE_ACK5);

	m_EncodeFuncArray[CLIGS_PLUNDER_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLUNDER_ACK5;
	m_DecodeFuncArray[CLIGS_PLUNDER_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLUNDER_ACK5;
	m_vecMsgList.push_back(CLIGS_PLUNDER_ACK5);
	if( (INT32)sizeof(PKT_CLIGS_PLUNDER_ACK5) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLUNDER_ACK5);

	m_EncodeFuncArray[CLIGS_PKBATTLE_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PKBATTLE_ACK5;
	m_DecodeFuncArray[CLIGS_PKBATTLE_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PKBATTLE_ACK5;
	m_vecMsgList.push_back(CLIGS_PKBATTLE_ACK5);
	if( (INT32)sizeof(PKT_CLIGS_PKBATTLE_ACK5) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PKBATTLE_ACK5);

	m_EncodeFuncArray[CLIGS_RDCHALLENGE_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RDCHALLENGE_ACK5;
	m_DecodeFuncArray[CLIGS_RDCHALLENGE_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RDCHALLENGE_ACK5;
	m_vecMsgList.push_back(CLIGS_RDCHALLENGE_ACK5);
	if( (INT32)sizeof(PKT_CLIGS_RDCHALLENGE_ACK5) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RDCHALLENGE_ACK5);

	m_EncodeFuncArray[CLIGS_CHALLENGE_MYSELF_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHALLENGE_MYSELF_ACK5;
	m_DecodeFuncArray[CLIGS_CHALLENGE_MYSELF_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHALLENGE_MYSELF_ACK5;
	m_vecMsgList.push_back(CLIGS_CHALLENGE_MYSELF_ACK5);
	if( (INT32)sizeof(PKT_CLIGS_CHALLENGE_MYSELF_ACK5) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHALLENGE_MYSELF_ACK5);

	m_EncodeFuncArray[CLIGS_HUNTING_BATTLE_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_HUNTING_BATTLE_ACK5;
	m_DecodeFuncArray[CLIGS_HUNTING_BATTLE_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_HUNTING_BATTLE_ACK5;
	m_vecMsgList.push_back(CLIGS_HUNTING_BATTLE_ACK5);
	if( (INT32)sizeof(PKT_CLIGS_HUNTING_BATTLE_ACK5) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_HUNTING_BATTLE_ACK5);

	m_EncodeFuncArray[CLIGS_COURAGE_PLAYER_START_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_PLAYER_START_ACK5;
	m_DecodeFuncArray[CLIGS_COURAGE_PLAYER_START_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_PLAYER_START_ACK5;
	m_vecMsgList.push_back(CLIGS_COURAGE_PLAYER_START_ACK5);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_START_ACK5) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_PLAYER_START_ACK5);

	m_EncodeFuncArray[CLIGS_COURAGE_LEADER_START_NTF5 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_COURAGE_LEADER_START_NTF5;
	m_DecodeFuncArray[CLIGS_COURAGE_LEADER_START_NTF5 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_COURAGE_LEADER_START_NTF5;
	m_vecMsgList.push_back(CLIGS_COURAGE_LEADER_START_NTF5);
	if( (INT32)sizeof(PKT_CLIGS_COURAGE_LEADER_START_NTF5) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_COURAGE_LEADER_START_NTF5);

	m_EncodeFuncArray[CLIGS_BEGIN_JIEBIAO_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BEGIN_JIEBIAO_ACK5;
	m_DecodeFuncArray[CLIGS_BEGIN_JIEBIAO_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BEGIN_JIEBIAO_ACK5;
	m_vecMsgList.push_back(CLIGS_BEGIN_JIEBIAO_ACK5);
	if( (INT32)sizeof(PKT_CLIGS_BEGIN_JIEBIAO_ACK5) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BEGIN_JIEBIAO_ACK5);

	m_EncodeFuncArray[CLIGS_QUERY_BATTLE_RECORD_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK5;
	m_DecodeFuncArray[CLIGS_QUERY_BATTLE_RECORD_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK5;
	m_vecMsgList.push_back(CLIGS_QUERY_BATTLE_RECORD_ACK5);
	if( (INT32)sizeof(PKT_CLIGS_QUERY_BATTLE_RECORD_ACK5) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_QUERY_BATTLE_RECORD_ACK5);

	m_EncodeFuncArray[CLIGS_OPERATING_ACTIVITY_BATTLE_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPERATING_ACTIVITY_BATTLE_ACK5;
	m_DecodeFuncArray[CLIGS_OPERATING_ACTIVITY_BATTLE_ACK5 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPERATING_ACTIVITY_BATTLE_ACK5;
	m_vecMsgList.push_back(CLIGS_OPERATING_ACTIVITY_BATTLE_ACK5);
	if( (INT32)sizeof(PKT_CLIGS_OPERATING_ACTIVITY_BATTLE_ACK5) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPERATING_ACTIVITY_BATTLE_ACK5);

	m_EncodeFuncArray[CLIGS_OPEN_STORE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_STORE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_STORE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_STORE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_STORE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_STORE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_STORE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_STORE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_STORE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_STORE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_STORE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_STORE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_STORE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_STORE_ACK);

	m_EncodeFuncArray[CLIGS_EXCHANGE_GOODS_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXCHANGE_GOODS_REQ;
	m_DecodeFuncArray[CLIGS_EXCHANGE_GOODS_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXCHANGE_GOODS_REQ;
	m_vecMsgList.push_back(CLIGS_EXCHANGE_GOODS_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EXCHANGE_GOODS_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXCHANGE_GOODS_REQ);

	m_EncodeFuncArray[CLIGS_EXCHANGE_GOODS_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EXCHANGE_GOODS_ACK;
	m_DecodeFuncArray[CLIGS_EXCHANGE_GOODS_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EXCHANGE_GOODS_ACK;
	m_vecMsgList.push_back(CLIGS_EXCHANGE_GOODS_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EXCHANGE_GOODS_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EXCHANGE_GOODS_ACK);

	m_EncodeFuncArray[CLIGS_NOTICE_NEW_NTF - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_NOTICE_NEW_NTF;
	m_DecodeFuncArray[CLIGS_NOTICE_NEW_NTF - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_NOTICE_NEW_NTF;
	m_vecMsgList.push_back(CLIGS_NOTICE_NEW_NTF);
	if( (INT32)sizeof(PKT_CLIGS_NOTICE_NEW_NTF) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_NOTICE_NEW_NTF);

	m_EncodeFuncArray[CLIGS_OPEN_PET_RULE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PET_RULE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_PET_RULE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PET_RULE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_PET_RULE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PET_RULE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PET_RULE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_PET_RULE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PET_RULE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_PET_RULE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PET_RULE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_PET_RULE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PET_RULE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PET_RULE_ACK);

	m_EncodeFuncArray[CLIGS_PETREP_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PETREP_INFO_REQ;
	m_DecodeFuncArray[CLIGS_PETREP_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PETREP_INFO_REQ;
	m_vecMsgList.push_back(CLIGS_PETREP_INFO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PETREP_INFO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PETREP_INFO_REQ);

	m_EncodeFuncArray[CLIGS_PETREP_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PETREP_INFO_ACK;
	m_DecodeFuncArray[CLIGS_PETREP_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PETREP_INFO_ACK;
	m_vecMsgList.push_back(CLIGS_PETREP_INFO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PETREP_INFO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PETREP_INFO_ACK);

	m_EncodeFuncArray[CLIGS_PRODUCT_PET_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PRODUCT_PET_REQ;
	m_DecodeFuncArray[CLIGS_PRODUCT_PET_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PRODUCT_PET_REQ;
	m_vecMsgList.push_back(CLIGS_PRODUCT_PET_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PRODUCT_PET_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PRODUCT_PET_REQ);

	m_EncodeFuncArray[CLIGS_PRODUCT_PET_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PRODUCT_PET_ACK;
	m_DecodeFuncArray[CLIGS_PRODUCT_PET_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PRODUCT_PET_ACK;
	m_vecMsgList.push_back(CLIGS_PRODUCT_PET_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PRODUCT_PET_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PRODUCT_PET_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_REFINEPET_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_REFINEPET_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_REFINEPET_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_REFINEPET_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_REFINEPET_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_REFINEPET_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_REFINEPET_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_REFINEPET_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_REFINEPET_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_REFINEPET_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_REFINEPET_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_REFINEPET_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_REFINEPET_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_REFINEPET_ACK);

	m_EncodeFuncArray[CLIGS_REFINEPET_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REFINEPET_REQ;
	m_DecodeFuncArray[CLIGS_REFINEPET_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REFINEPET_REQ;
	m_vecMsgList.push_back(CLIGS_REFINEPET_REQ);
	if( (INT32)sizeof(PKT_CLIGS_REFINEPET_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REFINEPET_REQ);

	m_EncodeFuncArray[CLIGS_REFINEPET_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REFINEPET_ACK;
	m_DecodeFuncArray[CLIGS_REFINEPET_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REFINEPET_ACK;
	m_vecMsgList.push_back(CLIGS_REFINEPET_ACK);
	if( (INT32)sizeof(PKT_CLIGS_REFINEPET_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REFINEPET_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_STAR_PANEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_STAR_PANEL_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_STAR_PANEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_STAR_PANEL_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_STAR_PANEL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_STAR_PANEL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_STAR_PANEL_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_STAR_PANEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_STAR_PANEL_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_STAR_PANEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_STAR_PANEL_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_STAR_PANEL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_STAR_PANEL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_STAR_PANEL_ACK);

	m_EncodeFuncArray[CLIGS_UP_STAR_LV_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UP_STAR_LV_REQ;
	m_DecodeFuncArray[CLIGS_UP_STAR_LV_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UP_STAR_LV_REQ;
	m_vecMsgList.push_back(CLIGS_UP_STAR_LV_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UP_STAR_LV_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UP_STAR_LV_REQ);

	m_EncodeFuncArray[CLIGS_UP_STAR_LV_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UP_STAR_LV_ACK;
	m_DecodeFuncArray[CLIGS_UP_STAR_LV_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UP_STAR_LV_ACK;
	m_vecMsgList.push_back(CLIGS_UP_STAR_LV_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UP_STAR_LV_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UP_STAR_LV_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_PET_PANEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PET_PANEL_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_PET_PANEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PET_PANEL_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_PET_PANEL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PET_PANEL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PET_PANEL_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_PET_PANEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PET_PANEL_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_PET_PANEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PET_PANEL_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_PET_PANEL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PET_PANEL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PET_PANEL_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_PETFEED_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PETFEED_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_PETFEED_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PETFEED_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_PETFEED_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PETFEED_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PETFEED_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_PETFEED_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PETFEED_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_PETFEED_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PETFEED_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_PETFEED_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PETFEED_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PETFEED_ACK);

	m_EncodeFuncArray[CLIGS_FIRST_DRAW_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FIRST_DRAW_REQ;
	m_DecodeFuncArray[CLIGS_FIRST_DRAW_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FIRST_DRAW_REQ;
	m_vecMsgList.push_back(CLIGS_FIRST_DRAW_REQ);
	if( (INT32)sizeof(PKT_CLIGS_FIRST_DRAW_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FIRST_DRAW_REQ);

	m_EncodeFuncArray[CLIGS_FIRST_DRAW_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FIRST_DRAW_ACK;
	m_DecodeFuncArray[CLIGS_FIRST_DRAW_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FIRST_DRAW_ACK;
	m_vecMsgList.push_back(CLIGS_FIRST_DRAW_ACK);
	if( (INT32)sizeof(PKT_CLIGS_FIRST_DRAW_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FIRST_DRAW_ACK);

	m_EncodeFuncArray[CLIGS_RESET_DRAW_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RESET_DRAW_REQ;
	m_DecodeFuncArray[CLIGS_RESET_DRAW_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RESET_DRAW_REQ;
	m_vecMsgList.push_back(CLIGS_RESET_DRAW_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RESET_DRAW_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RESET_DRAW_REQ);

	m_EncodeFuncArray[CLIGS_RESET_DRAW_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RESET_DRAW_ACK;
	m_DecodeFuncArray[CLIGS_RESET_DRAW_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RESET_DRAW_ACK;
	m_vecMsgList.push_back(CLIGS_RESET_DRAW_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RESET_DRAW_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RESET_DRAW_ACK);

	m_EncodeFuncArray[CLIGS_CONFIRM_FEED_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CONFIRM_FEED_REQ;
	m_DecodeFuncArray[CLIGS_CONFIRM_FEED_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CONFIRM_FEED_REQ;
	m_vecMsgList.push_back(CLIGS_CONFIRM_FEED_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CONFIRM_FEED_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CONFIRM_FEED_REQ);

	m_EncodeFuncArray[CLIGS_CONFIRM_FEED_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CONFIRM_FEED_ACK;
	m_DecodeFuncArray[CLIGS_CONFIRM_FEED_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CONFIRM_FEED_ACK;
	m_vecMsgList.push_back(CLIGS_CONFIRM_FEED_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CONFIRM_FEED_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CONFIRM_FEED_ACK);

	m_EncodeFuncArray[CLIGS_MERGE_PET_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MERGE_PET_REQ;
	m_DecodeFuncArray[CLIGS_MERGE_PET_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MERGE_PET_REQ;
	m_vecMsgList.push_back(CLIGS_MERGE_PET_REQ);
	if( (INT32)sizeof(PKT_CLIGS_MERGE_PET_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MERGE_PET_REQ);

	m_EncodeFuncArray[CLIGS_MERGE_PET_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_MERGE_PET_ACK;
	m_DecodeFuncArray[CLIGS_MERGE_PET_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_MERGE_PET_ACK;
	m_vecMsgList.push_back(CLIGS_MERGE_PET_ACK);
	if( (INT32)sizeof(PKT_CLIGS_MERGE_PET_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_MERGE_PET_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_PET_STORE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PET_STORE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_PET_STORE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PET_STORE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_PET_STORE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PET_STORE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PET_STORE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_PET_STORE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PET_STORE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_PET_STORE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PET_STORE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_PET_STORE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PET_STORE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PET_STORE_ACK);

	m_EncodeFuncArray[CLIGS_BUY_PET_STORE_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_PET_STORE_ITEM_REQ;
	m_DecodeFuncArray[CLIGS_BUY_PET_STORE_ITEM_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_PET_STORE_ITEM_REQ;
	m_vecMsgList.push_back(CLIGS_BUY_PET_STORE_ITEM_REQ);
	if( (INT32)sizeof(PKT_CLIGS_BUY_PET_STORE_ITEM_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_PET_STORE_ITEM_REQ);

	m_EncodeFuncArray[CLIGS_BUY_PET_STORE_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_BUY_PET_STORE_ITEM_ACK;
	m_DecodeFuncArray[CLIGS_BUY_PET_STORE_ITEM_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_BUY_PET_STORE_ITEM_ACK;
	m_vecMsgList.push_back(CLIGS_BUY_PET_STORE_ITEM_ACK);
	if( (INT32)sizeof(PKT_CLIGS_BUY_PET_STORE_ITEM_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_BUY_PET_STORE_ITEM_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_WASH_QUALITY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_WASH_QUALITY_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_WASH_QUALITY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_WASH_QUALITY_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_WASH_QUALITY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_WASH_QUALITY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_WASH_QUALITY_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_WASH_QUALITY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_WASH_QUALITY_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_WASH_QUALITY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_WASH_QUALITY_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_WASH_QUALITY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_WASH_QUALITY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_WASH_QUALITY_ACK);

	m_EncodeFuncArray[CLIGS_WASH_QUALITY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_WASH_QUALITY_REQ;
	m_DecodeFuncArray[CLIGS_WASH_QUALITY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_WASH_QUALITY_REQ;
	m_vecMsgList.push_back(CLIGS_WASH_QUALITY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_WASH_QUALITY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_WASH_QUALITY_REQ);

	m_EncodeFuncArray[CLIGS_WASH_QUALITY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_WASH_QUALITY_ACK;
	m_DecodeFuncArray[CLIGS_WASH_QUALITY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_WASH_QUALITY_ACK;
	m_vecMsgList.push_back(CLIGS_WASH_QUALITY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_WASH_QUALITY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_WASH_QUALITY_ACK);

	m_EncodeFuncArray[CLIGS_CHANGE_PET_STATE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHANGE_PET_STATE_REQ;
	m_DecodeFuncArray[CLIGS_CHANGE_PET_STATE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHANGE_PET_STATE_REQ;
	m_vecMsgList.push_back(CLIGS_CHANGE_PET_STATE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_CHANGE_PET_STATE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHANGE_PET_STATE_REQ);

	m_EncodeFuncArray[CLIGS_CHANGE_PET_STATE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_CHANGE_PET_STATE_ACK;
	m_DecodeFuncArray[CLIGS_CHANGE_PET_STATE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_CHANGE_PET_STATE_ACK;
	m_vecMsgList.push_back(CLIGS_CHANGE_PET_STATE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_CHANGE_PET_STATE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_CHANGE_PET_STATE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_PET_INHERIT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PET_INHERIT_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_PET_INHERIT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PET_INHERIT_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_PET_INHERIT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PET_INHERIT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PET_INHERIT_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_PET_INHERIT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PET_INHERIT_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_PET_INHERIT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PET_INHERIT_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_PET_INHERIT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PET_INHERIT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PET_INHERIT_ACK);

	m_EncodeFuncArray[CLIGS_PET_INHERIT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PET_INHERIT_REQ;
	m_DecodeFuncArray[CLIGS_PET_INHERIT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PET_INHERIT_REQ;
	m_vecMsgList.push_back(CLIGS_PET_INHERIT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PET_INHERIT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PET_INHERIT_REQ);

	m_EncodeFuncArray[CLIGS_PET_INHERIT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PET_INHERIT_ACK;
	m_DecodeFuncArray[CLIGS_PET_INHERIT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PET_INHERIT_ACK;
	m_vecMsgList.push_back(CLIGS_PET_INHERIT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PET_INHERIT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PET_INHERIT_ACK);

	m_EncodeFuncArray[CLIGS_EQUIP_ENCHANT_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_ENCHANT_REQ;
	m_DecodeFuncArray[CLIGS_EQUIP_ENCHANT_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_ENCHANT_REQ;
	m_vecMsgList.push_back(CLIGS_EQUIP_ENCHANT_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_ENCHANT_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_ENCHANT_REQ);

	m_EncodeFuncArray[CLIGS_EQUIP_ENCHANT_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_ENCHANT_ACK;
	m_DecodeFuncArray[CLIGS_EQUIP_ENCHANT_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_ENCHANT_ACK;
	m_vecMsgList.push_back(CLIGS_EQUIP_ENCHANT_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_ENCHANT_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_ENCHANT_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_SMITHY_ACK_v410 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SMITHY_ACK_v410;
	m_DecodeFuncArray[CLIGS_OPEN_SMITHY_ACK_v410 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SMITHY_ACK_v410;
	m_vecMsgList.push_back(CLIGS_OPEN_SMITHY_ACK_v410);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SMITHY_ACK_v410) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SMITHY_ACK_v410);

	m_EncodeFuncArray[CLIGS_OPEN_RECRUIT_ACK_v410 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_RECRUIT_ACK_v410;
	m_DecodeFuncArray[CLIGS_OPEN_RECRUIT_ACK_v410 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_RECRUIT_ACK_v410;
	m_vecMsgList.push_back(CLIGS_OPEN_RECRUIT_ACK_v410);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_RECRUIT_ACK_v410) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_RECRUIT_ACK_v410);

	m_EncodeFuncArray[CLIGS_UPGRADE_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_HERO_REQ;
	m_DecodeFuncArray[CLIGS_UPGRADE_HERO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_HERO_REQ;
	m_vecMsgList.push_back(CLIGS_UPGRADE_HERO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_HERO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_HERO_REQ);

	m_EncodeFuncArray[CLIGS_UPGRADE_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPGRADE_HERO_ACK;
	m_DecodeFuncArray[CLIGS_UPGRADE_HERO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPGRADE_HERO_ACK;
	m_vecMsgList.push_back(CLIGS_UPGRADE_HERO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPGRADE_HERO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPGRADE_HERO_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_EQUIP_MAKE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EQUIP_MAKE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_EQUIP_MAKE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EQUIP_MAKE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_EQUIP_MAKE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_MAKE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_MAKE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_EQUIP_MAKE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_EQUIP_MAKE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_EQUIP_MAKE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_EQUIP_MAKE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_EQUIP_MAKE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_MAKE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_EQUIP_MAKE_ACK);

	m_EncodeFuncArray[CLIGS_EQUIP_MAKE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_MAKE_REQ;
	m_DecodeFuncArray[CLIGS_EQUIP_MAKE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_MAKE_REQ;
	m_vecMsgList.push_back(CLIGS_EQUIP_MAKE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_MAKE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_MAKE_REQ);

	m_EncodeFuncArray[CLIGS_EQUIP_MAKE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_EQUIP_MAKE_ACK;
	m_DecodeFuncArray[CLIGS_EQUIP_MAKE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_EQUIP_MAKE_ACK;
	m_vecMsgList.push_back(CLIGS_EQUIP_MAKE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_EQUIP_MAKE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_EQUIP_MAKE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_FLY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FLY_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_FLY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FLY_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_FLY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FLY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FLY_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_FLY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_FLY_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_FLY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_FLY_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_FLY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_FLY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_FLY_ACK);

	m_EncodeFuncArray[CLIGS_FLY_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FLY_REQ;
	m_DecodeFuncArray[CLIGS_FLY_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FLY_REQ;
	m_vecMsgList.push_back(CLIGS_FLY_REQ);
	if( (INT32)sizeof(PKT_CLIGS_FLY_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FLY_REQ);

	m_EncodeFuncArray[CLIGS_FLY_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_FLY_ACK;
	m_DecodeFuncArray[CLIGS_FLY_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_FLY_ACK;
	m_vecMsgList.push_back(CLIGS_FLY_ACK);
	if( (INT32)sizeof(PKT_CLIGS_FLY_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_FLY_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_PLAYERPET_PANEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PLAYERPET_PANEL_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_PLAYERPET_PANEL_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PLAYERPET_PANEL_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_PLAYERPET_PANEL_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PLAYERPET_PANEL_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PLAYERPET_PANEL_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_PLAYERPET_PANEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_PLAYERPET_PANEL_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_PLAYERPET_PANEL_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_PLAYERPET_PANEL_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_PLAYERPET_PANEL_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_PLAYERPET_PANEL_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_PLAYERPET_PANEL_ACK);

	m_EncodeFuncArray[CLIGS_PLAYER_INFO_PET_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_INFO_PET_REQ;
	m_DecodeFuncArray[CLIGS_PLAYER_INFO_PET_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_INFO_PET_REQ;
	m_vecMsgList.push_back(CLIGS_PLAYER_INFO_PET_REQ);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_PET_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_PET_REQ);

	m_EncodeFuncArray[CLIGS_PLAYER_INFO_PET_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_PLAYER_INFO_PET_ACK;
	m_DecodeFuncArray[CLIGS_PLAYER_INFO_PET_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_PLAYER_INFO_PET_ACK;
	m_vecMsgList.push_back(CLIGS_PLAYER_INFO_PET_ACK);
	if( (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_PET_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_PLAYER_INFO_PET_ACK);

	m_EncodeFuncArray[CLIGS_SEE_GVG_VIDEO_ACK_v410 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SEE_GVG_VIDEO_ACK_v410;
	m_DecodeFuncArray[CLIGS_SEE_GVG_VIDEO_ACK_v410 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SEE_GVG_VIDEO_ACK_v410;
	m_vecMsgList.push_back(CLIGS_SEE_GVG_VIDEO_ACK_v410);
	if( (INT32)sizeof(PKT_CLIGS_SEE_GVG_VIDEO_ACK_v410) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SEE_GVG_VIDEO_ACK_v410);

	m_EncodeFuncArray[CLIGS_END_GVG_VIDEO_ACK_v410 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_END_GVG_VIDEO_ACK_v410;
	m_DecodeFuncArray[CLIGS_END_GVG_VIDEO_ACK_v410 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_END_GVG_VIDEO_ACK_v410;
	m_vecMsgList.push_back(CLIGS_END_GVG_VIDEO_ACK_v410);
	if( (INT32)sizeof(PKT_CLIGS_END_GVG_VIDEO_ACK_v410) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_END_GVG_VIDEO_ACK_v410);

	m_EncodeFuncArray[BOSSB_HURT_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_HURT_ACK2;
	m_DecodeFuncArray[BOSSB_HURT_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_HURT_ACK2;
	m_vecMsgList.push_back(BOSSB_HURT_ACK2);
	if( (INT32)sizeof(PKT_BOSSB_HURT_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_HURT_ACK2);

	m_EncodeFuncArray[ENTER_BOSSB_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_ENTER_BOSSB_ACK2;
	m_DecodeFuncArray[ENTER_BOSSB_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_ENTER_BOSSB_ACK2;
	m_vecMsgList.push_back(ENTER_BOSSB_ACK2);
	if( (INT32)sizeof(PKT_ENTER_BOSSB_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_ENTER_BOSSB_ACK2);

	m_EncodeFuncArray[BOSSB_INFO_SYNC_NTF2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_INFO_SYNC_NTF2;
	m_DecodeFuncArray[BOSSB_INFO_SYNC_NTF2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_INFO_SYNC_NTF2;
	m_vecMsgList.push_back(BOSSB_INFO_SYNC_NTF2);
	if( (INT32)sizeof(PKT_BOSSB_INFO_SYNC_NTF2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_INFO_SYNC_NTF2);

	m_EncodeFuncArray[BOSSB_OVER_NTF2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_OVER_NTF2;
	m_DecodeFuncArray[BOSSB_OVER_NTF2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_OVER_NTF2;
	m_vecMsgList.push_back(BOSSB_OVER_NTF2);
	if( (INT32)sizeof(PKT_BOSSB_OVER_NTF2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_OVER_NTF2);

	m_EncodeFuncArray[BOSSB_GET_LAST_BOSSB_INFO_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_BOSSB_GET_LAST_BOSSB_INFO_ACK2;
	m_DecodeFuncArray[BOSSB_GET_LAST_BOSSB_INFO_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_BOSSB_GET_LAST_BOSSB_INFO_ACK2;
	m_vecMsgList.push_back(BOSSB_GET_LAST_BOSSB_INFO_ACK2);
	if( (INT32)sizeof(PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK2);

	m_EncodeFuncArray[CLIGS_REQUEST_ALL_PET_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REQUEST_ALL_PET_INFO_REQ;
	m_DecodeFuncArray[CLIGS_REQUEST_ALL_PET_INFO_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REQUEST_ALL_PET_INFO_REQ;
	m_vecMsgList.push_back(CLIGS_REQUEST_ALL_PET_INFO_REQ);
	if( (INT32)sizeof(PKT_CLIGS_REQUEST_ALL_PET_INFO_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REQUEST_ALL_PET_INFO_REQ);

	m_EncodeFuncArray[CLIGS_REQUEST_ALL_PET_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_REQUEST_ALL_PET_INFO_ACK;
	m_DecodeFuncArray[CLIGS_REQUEST_ALL_PET_INFO_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_REQUEST_ALL_PET_INFO_ACK;
	m_vecMsgList.push_back(CLIGS_REQUEST_ALL_PET_INFO_ACK);
	if( (INT32)sizeof(PKT_CLIGS_REQUEST_ALL_PET_INFO_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_REQUEST_ALL_PET_INFO_ACK);

	m_EncodeFuncArray[CLIGS_JEWELRY_RESOLVE_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_JEWELRY_RESOLVE_ACK2;
	m_DecodeFuncArray[CLIGS_JEWELRY_RESOLVE_ACK2 - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_JEWELRY_RESOLVE_ACK2;
	m_vecMsgList.push_back(CLIGS_JEWELRY_RESOLVE_ACK2);
	if( (INT32)sizeof(PKT_CLIGS_JEWELRY_RESOLVE_ACK2) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_JEWELRY_RESOLVE_ACK2);

	m_EncodeFuncArray[CLIGS_OPEN_SOUL_UPDATE_TYPE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_SOUL_UPDATE_TYPE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_SOUL_UPDATE_TYPE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_SOUL_UPDATE_TYPE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_SOUL_UPDATE_TYPE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_SOUL_UPDATE_TYPE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_ACK);

	m_EncodeFuncArray[CLIGS_SOUL_UPDATE_TYPE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SOUL_UPDATE_TYPE_REQ;
	m_DecodeFuncArray[CLIGS_SOUL_UPDATE_TYPE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SOUL_UPDATE_TYPE_REQ;
	m_vecMsgList.push_back(CLIGS_SOUL_UPDATE_TYPE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SOUL_UPDATE_TYPE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SOUL_UPDATE_TYPE_REQ);

	m_EncodeFuncArray[CLIGS_SOUL_UPDATE_TYPE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SOUL_UPDATE_TYPE_ACK;
	m_DecodeFuncArray[CLIGS_SOUL_UPDATE_TYPE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SOUL_UPDATE_TYPE_ACK;
	m_vecMsgList.push_back(CLIGS_SOUL_UPDATE_TYPE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SOUL_UPDATE_TYPE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SOUL_UPDATE_TYPE_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_NEIDAN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_NEIDAN_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_NEIDAN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_NEIDAN_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_NEIDAN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_NEIDAN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_NEIDAN_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_NEIDAN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_NEIDAN_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_NEIDAN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_NEIDAN_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_NEIDAN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_NEIDAN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_NEIDAN_ACK);

	m_EncodeFuncArray[CLIGS_DRESS_NEIDAN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRESS_NEIDAN_REQ;
	m_DecodeFuncArray[CLIGS_DRESS_NEIDAN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRESS_NEIDAN_REQ;
	m_vecMsgList.push_back(CLIGS_DRESS_NEIDAN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_DRESS_NEIDAN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRESS_NEIDAN_REQ);

	m_EncodeFuncArray[CLIGS_DRESS_NEIDAN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_DRESS_NEIDAN_ACK;
	m_DecodeFuncArray[CLIGS_DRESS_NEIDAN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_DRESS_NEIDAN_ACK;
	m_vecMsgList.push_back(CLIGS_DRESS_NEIDAN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_DRESS_NEIDAN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_DRESS_NEIDAN_ACK);

	m_EncodeFuncArray[CLIGS_UPDATA_NEIDAN_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPDATA_NEIDAN_REQ;
	m_DecodeFuncArray[CLIGS_UPDATA_NEIDAN_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPDATA_NEIDAN_REQ;
	m_vecMsgList.push_back(CLIGS_UPDATA_NEIDAN_REQ);
	if( (INT32)sizeof(PKT_CLIGS_UPDATA_NEIDAN_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPDATA_NEIDAN_REQ);

	m_EncodeFuncArray[CLIGS_UPDATA_NEIDAN_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_UPDATA_NEIDAN_ACK;
	m_DecodeFuncArray[CLIGS_UPDATA_NEIDAN_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_UPDATA_NEIDAN_ACK;
	m_vecMsgList.push_back(CLIGS_UPDATA_NEIDAN_ACK);
	if( (INT32)sizeof(PKT_CLIGS_UPDATA_NEIDAN_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_UPDATA_NEIDAN_ACK);

	m_EncodeFuncArray[CLIGS_OPEN_NEIDAN_ALL_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_REQ;
	m_DecodeFuncArray[CLIGS_OPEN_NEIDAN_ALL_INSTANCE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_REQ;
	m_vecMsgList.push_back(CLIGS_OPEN_NEIDAN_ALL_INSTANCE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_REQ);

	m_EncodeFuncArray[CLIGS_OPEN_NEIDAN_ALL_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_ACK;
	m_DecodeFuncArray[CLIGS_OPEN_NEIDAN_ALL_INSTANCE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_ACK;
	m_vecMsgList.push_back(CLIGS_OPEN_NEIDAN_ALL_INSTANCE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_ACK);

	m_EncodeFuncArray[CLIGS_NEIDAN_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_NEIDAN_BATTLE_REQ;
	m_DecodeFuncArray[CLIGS_NEIDAN_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_NEIDAN_BATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_NEIDAN_BATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_NEIDAN_BATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_NEIDAN_BATTLE_REQ);

	m_EncodeFuncArray[CLIGS_NEIDAN_BATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_NEIDAN_BATTLE_ACK;
	m_DecodeFuncArray[CLIGS_NEIDAN_BATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_NEIDAN_BATTLE_ACK;
	m_vecMsgList.push_back(CLIGS_NEIDAN_BATTLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_NEIDAN_BATTLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_NEIDAN_BATTLE_ACK);

	m_EncodeFuncArray[CLIGS_RECV_NEIDAN_AWARD_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_NEIDAN_AWARD_REQ;
	m_DecodeFuncArray[CLIGS_RECV_NEIDAN_AWARD_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_NEIDAN_AWARD_REQ;
	m_vecMsgList.push_back(CLIGS_RECV_NEIDAN_AWARD_REQ);
	if( (INT32)sizeof(PKT_CLIGS_RECV_NEIDAN_AWARD_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_NEIDAN_AWARD_REQ);

	m_EncodeFuncArray[CLIGS_RECV_NEIDAN_AWARD_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_RECV_NEIDAN_AWARD_ACK;
	m_DecodeFuncArray[CLIGS_RECV_NEIDAN_AWARD_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_RECV_NEIDAN_AWARD_ACK;
	m_vecMsgList.push_back(CLIGS_RECV_NEIDAN_AWARD_ACK);
	if( (INT32)sizeof(PKT_CLIGS_RECV_NEIDAN_AWARD_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_RECV_NEIDAN_AWARD_ACK);

	m_EncodeFuncArray[CLIGS_SKIP_NEIDAN_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SKIP_NEIDAN_BATTLE_REQ;
	m_DecodeFuncArray[CLIGS_SKIP_NEIDAN_BATTLE_REQ - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SKIP_NEIDAN_BATTLE_REQ;
	m_vecMsgList.push_back(CLIGS_SKIP_NEIDAN_BATTLE_REQ);
	if( (INT32)sizeof(PKT_CLIGS_SKIP_NEIDAN_BATTLE_REQ) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SKIP_NEIDAN_BATTLE_REQ);

	m_EncodeFuncArray[CLIGS_SKIP_NEIDAN_BATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &EncodePKT_CLIGS_SKIP_NEIDAN_BATTLE_ACK;
	m_DecodeFuncArray[CLIGS_SKIP_NEIDAN_BATTLE_ACK - PROTOCLIGS_MSGID_OFFSET] = &DecodePKT_CLIGS_SKIP_NEIDAN_BATTLE_ACK;
	m_vecMsgList.push_back(CLIGS_SKIP_NEIDAN_BATTLE_ACK);
	if( (INT32)sizeof(PKT_CLIGS_SKIP_NEIDAN_BATTLE_ACK) > m_iMaxPkgSize)
		m_iMaxPkgSize = (INT32)sizeof(PKT_CLIGS_SKIP_NEIDAN_BATTLE_ACK);

	return true;
}

INT32 EncodeDT_POWER_CHANGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_POWER_CHANGE_DATA *pstIn = (DT_POWER_CHANGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwOldPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurPower))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_POWER_CHANGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_POWER_CHANGE_DATA *pstOut = (DT_POWER_CHANGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwOldPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurPower))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_BUFF_DATA(void *pHost, CNetData* poNetData)
{
	DT_SKILL_BUFF_DATA *pstIn = (DT_SKILL_BUFF_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuffKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBuffRound))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTriggerRate))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEffectParam))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_BUFF_DATA(void *pHost, CNetData* poNetData)
{
	DT_SKILL_BUFF_DATA *pstOut = (DT_SKILL_BUFF_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuffKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBuffRound))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTriggerRate))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEffectParam))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_ACTION_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_ACTION_DATA_CLI *pstIn = (DT_SKILL_ACTION_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wActionID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wActionLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEffectHurtRate))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExtHurtValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurExp))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeExp))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_ACTION_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_ACTION_DATA_CLI *pstOut = (DT_SKILL_ACTION_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wActionID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wActionLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEffectHurtRate))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExtHurtValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurExp))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeExp))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_EFFECT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_EFFECT_DATA_CLI *pstIn = (DT_SKILL_EFFECT_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEffectID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOnceEffectKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOnceEffectParam))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBuffNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_BUFF_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBuffNum)
			break;
		if(-1 == EncodeDT_SKILL_BUFF_DATA(&pstIn->astBuffInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wUnlockLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_EFFECT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_EFFECT_DATA_CLI *pstOut = (DT_SKILL_EFFECT_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEffectID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOnceEffectKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOnceEffectParam))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBuffNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_BUFF_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBuffNum)
			break;
		if(-1 == DecodeDT_SKILL_BUFF_DATA(&pstOut->astBuffInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wUnlockLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EFFECT_RECOMMEND_CLI(void *pHost, CNetData* poNetData)
{
	DT_EFFECT_RECOMMEND_CLI *pstIn = (DT_EFFECT_RECOMMEND_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRecommendEffectKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecommendHeroRangKind))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecommendHeroRangBuff))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EFFECT_RECOMMEND_CLI(void *pHost, CNetData* poNetData)
{
	DT_EFFECT_RECOMMEND_CLI *pstOut = (DT_EFFECT_RECOMMEND_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRecommendEffectKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecommendHeroRangKind))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecommendHeroRangBuff))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_EFFECT_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_SKILL_EFFECT_DATA_CLI2 *pstIn = (DT_SKILL_EFFECT_DATA_CLI2*)pHost;

	if(-1 == EncodeDT_SKILL_EFFECT_DATA_CLI(&pstIn->stEffectInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < 2; i++)
	{
		if(-1 == EncodeDT_EFFECT_RECOMMEND_CLI(&pstIn->astRecommendInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_EFFECT_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_SKILL_EFFECT_DATA_CLI2 *pstOut = (DT_SKILL_EFFECT_DATA_CLI2*)pHost;

	if(-1 == DecodeDT_SKILL_EFFECT_DATA_CLI(&pstOut->stEffectInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < 2; i++)
		{
			if(-1 == DecodeDT_EFFECT_RECOMMEND_CLI(&pstOut->astRecommendInfo[i], poNetData))
				return -1;
		}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ATTACK_RANG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ATTACK_RANG_DATA_CLI *pstIn = (DT_ATTACK_RANG_DATA_CLI*)pHost;

	if(-1 == EncodeDT_ATTACK_RANG_DATA(&pstIn->stRangInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUnlockLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAttackRangHurtRate))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ATTACK_RANG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ATTACK_RANG_DATA_CLI *pstOut = (DT_ATTACK_RANG_DATA_CLI*)pHost;

	if(-1 == DecodeDT_ATTACK_RANG_DATA(&pstOut->stRangInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUnlockLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAttackRangHurtRate))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_DATA_CLI *pstIn = (DT_SKILL_DATA_CLI*)pHost;

	if(-1 == EncodeDT_SKILL_ACTION_DATA_CLI(&pstIn->stActionInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_SKILL_EFFECT_DATA_CLI(&pstIn->stEffectInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ATTACK_RANG_DATA_CLI(&pstIn->stRangInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_DATA_CLI *pstOut = (DT_SKILL_DATA_CLI*)pHost;

	if(-1 == DecodeDT_SKILL_ACTION_DATA_CLI(&pstOut->stActionInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_SKILL_EFFECT_DATA_CLI(&pstOut->stEffectInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ATTACK_RANG_DATA_CLI(&pstOut->stRangInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_BASE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_BASE_DATA_CLI *pstIn = (DT_HERO_BASE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCareerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCoach))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPos))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFormationIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTalent))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeExperience))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecuitedFlag))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttribute, poNetData))
		return -1;

	if(-1 == EncodeDT_HIDE_BATTLE_ATTRIBUTE(&pstIn->stHideBattleAttribute, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGodweaponQuality))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGodweaponLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxAbsorbNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAbsorbNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ABSORB_NUM; i++)
	{
		if(i >= (INT32)pstIn->byAbsorbNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awKindIDLst[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byColor))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAbsorbKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_BASE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_BASE_DATA_CLI *pstOut = (DT_HERO_BASE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCareerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCoach))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPos))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFormationIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTalent))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeExperience))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecuitedFlag))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttribute, poNetData))
		return -1;

	if(-1 == DecodeDT_HIDE_BATTLE_ATTRIBUTE(&pstOut->stHideBattleAttribute, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGodweaponQuality))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGodweaponLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxAbsorbNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAbsorbNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ABSORB_NUM; i++)
	{
		if(i >= (INT32)pstOut->byAbsorbNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awKindIDLst[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byColor))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAbsorbKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_DATA_STRENGTHEN_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_STRENGTHEN_CLI *pstIn = (DT_EQUIP_DATA_STRENGTHEN_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanStrengthenFlag))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStrengthenCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStrengthenGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStrengthenRate))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stNextBattleAttribute, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_DATA_STRENGTHEN_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_STRENGTHEN_CLI *pstOut = (DT_EQUIP_DATA_STRENGTHEN_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanStrengthenFlag))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStrengthenCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStrengthenGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStrengthenRate))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stNextBattleAttribute, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_XIANGQIAN_DES(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_XIANGQIAN_DES *pstIn = (DT_EQUIP_XIANGQIAN_DES*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszAttrType, sizeof(pstIn->aszAttrType)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_XIANGQIAN_DES(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_XIANGQIAN_DES *pstOut = (DT_EQUIP_XIANGQIAN_DES*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszAttrType, sizeof(pstOut->aszAttrType)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ALL_EQUIP_XIANGQIAN_DES(void *pHost, CNetData* poNetData)
{
	DT_ALL_EQUIP_XIANGQIAN_DES *pstIn = (DT_ALL_EQUIP_XIANGQIAN_DES*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszEquipPos1Des, sizeof(pstIn->aszEquipPos1Des)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEquipPos2Des, sizeof(pstIn->aszEquipPos2Des)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEquipPos3Des, sizeof(pstIn->aszEquipPos3Des)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEquipPos4Des, sizeof(pstIn->aszEquipPos4Des)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ALL_EQUIP_XIANGQIAN_DES(void *pHost, CNetData* poNetData)
{
	DT_ALL_EQUIP_XIANGQIAN_DES *pstOut = (DT_ALL_EQUIP_XIANGQIAN_DES*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszEquipPos1Des, sizeof(pstOut->aszEquipPos1Des)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEquipPos2Des, sizeof(pstOut->aszEquipPos2Des)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEquipPos3Des, sizeof(pstOut->aszEquipPos3Des)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEquipPos4Des, sizeof(pstOut->aszEquipPos4Des)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_XIANGQIAN_ATTR_DATA(void *pHost, CNetData* poNetData)
{
	DT_XIANGQIAN_ATTR_DATA *pstIn = (DT_XIANGQIAN_ATTR_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAttrType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddPercentValue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_XIANGQIAN_ATTR_DATA(void *pHost, CNetData* poNetData)
{
	DT_XIANGQIAN_ATTR_DATA *pstOut = (DT_XIANGQIAN_ATTR_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAttrType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddPercentValue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_CLI *pstIn = (DT_EQUIP_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDressPos))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressLevel))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttribute, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRecoverPrice))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMinScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxScience))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byXiangqianNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_XIANGQIAN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byXiangqianNum)
			break;
		if(-1 == EncodeDT_XIANGQIAN_ATTR_DATA(&pstIn->astXiangqianList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_CLI *pstOut = (DT_EQUIP_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDressPos))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressLevel))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttribute, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRecoverPrice))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMinScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxScience))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byXiangqianNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_XIANGQIAN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byXiangqianNum)
			break;
		if(-1 == DecodeDT_XIANGQIAN_ATTR_DATA(&pstOut->astXiangqianList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_MELT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_MELT_DATA_CLI *pstIn = (DT_EQUIP_MELT_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDressPos))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMinScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxScience))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMeltTip))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMeltGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_MELT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_MELT_DATA_CLI *pstOut = (DT_EQUIP_MELT_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDressPos))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMinScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxScience))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMeltTip))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMeltGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GOOD_MELT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOOD_MELT_DATA_CLI *pstIn = (DT_GOOD_MELT_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMinScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMeltGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GOOD_MELT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOOD_MELT_DATA_CLI *pstOut = (DT_GOOD_MELT_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMinScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMeltGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_LST_CLI *pstIn = (DT_EQUIP_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->astEquipList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_LST_CLI *pstOut = (DT_EQUIP_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->astEquipList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_MELT_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_MELT_DATA_LST_CLI *pstIn = (DT_EQUIP_MELT_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_MELT_DATA_CLI(&pstIn->astEquipList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_MELT_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_MELT_DATA_LST_CLI *pstOut = (DT_EQUIP_MELT_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_MELT_DATA_CLI(&pstOut->astEquipList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_GOOD_MELT_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOOD_MELT_DATA_LST_CLI *pstIn = (DT_GOOD_MELT_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wGoodNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wGoodNum)
			break;
		if(-1 == EncodeDT_GOOD_MELT_DATA_CLI(&pstIn->astGoodList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GOOD_MELT_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOOD_MELT_DATA_LST_CLI *pstOut = (DT_GOOD_MELT_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wGoodNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wGoodNum)
			break;
		if(-1 == DecodeDT_GOOD_MELT_DATA_CLI(&pstOut->astGoodList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_EQUIP_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_EQUIP_DATA_LST_CLI *pstIn = (DT_HERO_EQUIP_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->astEquipList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_EQUIP_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_EQUIP_DATA_LST_CLI *pstOut = (DT_HERO_EQUIP_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->astEquipList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_DATA_CLI_v410(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_CLI_v410 *pstIn = (DT_EQUIP_DATA_CLI_v410*)pHost;

	if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->stEquipData, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE2(&pstIn->stBasicAttr, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE2(&pstIn->stStrengthenAttr, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE2(&pstIn->stEnchantAttr, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE2(&pstIn->stTotalAttr, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEnchantLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_DATA_CLI_v410(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_DATA_CLI_v410 *pstOut = (DT_EQUIP_DATA_CLI_v410*)pHost;

	if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->stEquipData, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE2(&pstOut->stBasicAttr, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE2(&pstOut->stStrengthenAttr, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE2(&pstOut->stEnchantAttr, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE2(&pstOut->stTotalAttr, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEnchantLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_EQUIP_DATA_LST_CLI_v410(void *pHost, CNetData* poNetData)
{
	DT_HERO_EQUIP_DATA_LST_CLI_v410 *pstIn = (DT_HERO_EQUIP_DATA_LST_CLI_v410*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_DATA_CLI_v410(&pstIn->astEquipList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_EQUIP_DATA_LST_CLI_v410(void *pHost, CNetData* poNetData)
{
	DT_HERO_EQUIP_DATA_LST_CLI_v410 *pstOut = (DT_HERO_EQUIP_DATA_LST_CLI_v410*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_DATA_CLI_v410(&pstOut->astEquipList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_NEED_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEED_ITEM_DATA *pstIn = (DT_NEED_ITEM_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurNum))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stBurstInstance, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_NEED_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEED_ITEM_DATA *pstOut = (DT_NEED_ITEM_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurNum))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stBurstInstance, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ESTIMATE_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_ESTIMATE_EQUIP_DATA *pstIn = (DT_ESTIMATE_EQUIP_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressLevel))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttribute, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ESTIMATE_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_ESTIMATE_EQUIP_DATA *pstOut = (DT_ESTIMATE_EQUIP_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressLevel))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttribute, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ESTIMATE_DRUG_DATA(void *pHost, CNetData* poNetData)
{
	DT_ESTIMATE_DRUG_DATA *pstIn = (DT_ESTIMATE_DRUG_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBaseTalent))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDecTalent))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ESTIMATE_DRUG_DATA(void *pHost, CNetData* poNetData)
{
	DT_ESTIMATE_DRUG_DATA *pstOut = (DT_ESTIMATE_DRUG_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBaseTalent))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDecTalent))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeUnDT_ESTIMATE_ITEM_DATA_UNOIN(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case EEIK_EQUIP:
		return EncodeDT_ESTIMATE_EQUIP_DATA(pHost, poNetData);
	case EEIK_DRUG:
		return EncodeDT_ESTIMATE_DRUG_DATA(pHost, poNetData);
	default: return -1;
	}
}

INT32 DecodeUnDT_ESTIMATE_ITEM_DATA_UNOIN(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case EEIK_EQUIP:
		return DecodeDT_ESTIMATE_EQUIP_DATA(pHost, poNetData);
	case EEIK_DRUG:
		return DecodeDT_ESTIMATE_DRUG_DATA(pHost, poNetData);
	default: return -1;
	}
}

INT32 EncodeDT_ESTIMATE_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_ESTIMATE_ITEM_DATA *pstIn = (DT_ESTIMATE_ITEM_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemType))
		return -1;

	if(-1 == EncodeUnDT_ESTIMATE_ITEM_DATA_UNOIN(&pstIn->stItemInfo, pstIn->byItemType, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ESTIMATE_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_ESTIMATE_ITEM_DATA *pstOut = (DT_ESTIMATE_ITEM_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemType))
		return -1;

	if(-1 == DecodeUnDT_ESTIMATE_ITEM_DATA_UNOIN(&pstOut->stItemInfo, pstOut->byItemType, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_COMPOSE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_COMPOSE_DATA_CLI *pstIn = (DT_EQUIP_COMPOSE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ITEM_MAKER_NEED_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_NEED_ITEM_DATA(&pstIn->astItemInfoList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_ESTIMATE_EQUIP_DATA(&pstIn->stEstimateEquip, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySuccessRate))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSuccessGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_COMPOSE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_COMPOSE_DATA_CLI *pstOut = (DT_EQUIP_COMPOSE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ITEM_MAKER_NEED_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_NEED_ITEM_DATA(&pstOut->astItemInfoList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_ESTIMATE_EQUIP_DATA(&pstOut->stEstimateEquip, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySuccessRate))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSuccessGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI *pstIn = (DT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->astEquipInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstIn->astEquipStrengthenInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI *pstOut = (DT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->astEquipInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstOut->astEquipStrengthenInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_SEED_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SEED_DATA_CLI *pstIn = (DT_SEED_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwValue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SEED_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SEED_DATA_CLI *pstOut = (DT_SEED_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwValue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GOODS_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOODS_DATA_CLI *pstIn = (DT_GOODS_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoodsMainKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUseLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPileCount))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRecoverPrice))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParam1))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParam2))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParam3))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwValue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wComposeCount))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wComposeKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byComposeItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COMPOSE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byComposeItemNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awComposeItem[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->bySeedFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->bySeedFlag)
			break;
		if(-1 == EncodeDT_SEED_DATA_CLI(&pstIn->astSeedData[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwParam4))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GOODS_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOODS_DATA_CLI *pstOut = (DT_GOODS_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoodsMainKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUseLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPileCount))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRecoverPrice))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParam1))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParam2))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParam3))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwValue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wComposeCount))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wComposeKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byComposeItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COMPOSE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byComposeItemNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awComposeItem[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->bySeedFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->bySeedFlag)
			break;
		if(-1 == DecodeDT_SEED_DATA_CLI(&pstOut->astSeedData[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwParam4))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GOODS_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOODS_DATA_LST_CLI *pstIn = (DT_GOODS_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wGoodsNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wGoodsNum)
			break;
		if(-1 == EncodeDT_GOODS_DATA_CLI(&pstIn->astGoodsList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GOODS_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_GOODS_DATA_LST_CLI *pstOut = (DT_GOODS_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wGoodsNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wGoodsNum)
			break;
		if(-1 == DecodeDT_GOODS_DATA_CLI(&pstOut->astGoodsList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_CLI *pstIn = (DT_ITEM_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoodsMainKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPileNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_CLI *pstOut = (DT_ITEM_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoodsMainKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPileNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_DATA_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_LIST_CLI *pstIn = (DT_ITEM_DATA_LIST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_DATA_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_LIST_CLI *pstOut = (DT_ITEM_DATA_LIST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeUnDT_ITEM_DATA_UNOIN(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case EIK_EQUIP:
		return EncodeDT_EQUIP_DATA_CLI(pHost, poNetData);
	case EIK_GOODS:
		return EncodeDT_GOODS_DATA_CLI(pHost, poNetData);
	default: return -1;
	}
}

INT32 DecodeUnDT_ITEM_DATA_UNOIN(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case EIK_EQUIP:
		return DecodeDT_EQUIP_DATA_CLI(pHost, poNetData);
	case EIK_GOODS:
		return DecodeDT_GOODS_DATA_CLI(pHost, poNetData);
	default: return -1;
	}
}

INT32 EncodeDT_ITEM_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_CLI2 *pstIn = (DT_ITEM_DATA_CLI2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemType))
		return -1;

	if(-1 == EncodeUnDT_ITEM_DATA_UNOIN(&pstIn->stItemInfo, pstIn->byItemType, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_CLI2 *pstOut = (DT_ITEM_DATA_CLI2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemType))
		return -1;

	if(-1 == DecodeUnDT_ITEM_DATA_UNOIN(&pstOut->stItemInfo, pstOut->byItemType, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PHYSTRENGTH_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_PHYSTRENGTH_DATA_CLI *pstIn = (DT_PHYSTRENGTH_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrength))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxPhyStrength))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrengthRefreshCD))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrengthCountDown))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PHYSTRENGTH_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_PHYSTRENGTH_DATA_CLI *pstOut = (DT_PHYSTRENGTH_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrength))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxPhyStrength))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrengthRefreshCD))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrengthCountDown))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_NEW_EQUIP_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEW_EQUIP_PROMPT_DATA *pstIn = (DT_NEW_EQUIP_PROMPT_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEquipNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awEquipIDInfo[i]))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_NEW_EQUIP_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEW_EQUIP_PROMPT_DATA *pstOut = (DT_NEW_EQUIP_PROMPT_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEquipNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awEquipIDInfo[i]))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FUNC_COMMON_PROMPT(void *pHost, CNetData* poNetData)
{
	DT_FUNC_COMMON_PROMPT *pstIn = (DT_FUNC_COMMON_PROMPT*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuildKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFuncFlag))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFuncCountDown))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAheadTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FUNC_COMMON_PROMPT(void *pHost, CNetData* poNetData)
{
	DT_FUNC_COMMON_PROMPT *pstOut = (DT_FUNC_COMMON_PROMPT*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuildKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFuncFlag))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFuncCountDown))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAheadTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FUNC_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_FUNC_PROMPT_DATA *pstIn = (DT_FUNC_PROMPT_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuildNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BUILD_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBuildNum)
			break;
		if(-1 == EncodeDT_FUNC_COMMON_PROMPT(&pstIn->astBuildPromptInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FUNC_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_FUNC_PROMPT_DATA *pstOut = (DT_FUNC_PROMPT_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuildNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BUILD_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBuildNum)
			break;
		if(-1 == DecodeDT_FUNC_COMMON_PROMPT(&pstOut->astBuildPromptInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_OTHER_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_OTHER_PROMPT_DATA *pstIn = (DT_OTHER_PROMPT_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byHaveBetterHeroFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_OTHER_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_OTHER_PROMPT_DATA *pstOut = (DT_OTHER_PROMPT_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byHaveBetterHeroFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RES_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_RES_ITEM_DATA *pstIn = (DT_RES_ITEM_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byResNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstIn->byResNum)
			break;
		if(-1 == EncodeDT_RES_DATA(&pstIn->astResList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RES_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_RES_ITEM_DATA *pstOut = (DT_RES_ITEM_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byResNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstOut->byResNum)
			break;
		if(-1 == DecodeDT_RES_DATA(&pstOut->astResList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_RSYNC_RES_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_RSYNC_RES_ITEM_DATA *pstIn = (DT_RSYNC_RES_ITEM_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byResNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstIn->byResNum)
			break;
		if(-1 == EncodeDT_RES_DATA(&pstIn->astResList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stCurPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RSYNC_RES_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_RSYNC_RES_ITEM_DATA *pstOut = (DT_RSYNC_RES_ITEM_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byResNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstOut->byResNum)
			break;
		if(-1 == DecodeDT_RES_DATA(&pstOut->astResList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stCurPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_DATA_LIST_CLI2(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_LIST_CLI2 *pstIn = (DT_ITEM_DATA_LIST_CLI2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_DATA_LIST_CLI2(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_LIST_CLI2 *pstOut = (DT_ITEM_DATA_LIST_CLI2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_TASK_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_TASK_ENCOURAGE_DATA *pstIn = (DT_TASK_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrength))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStory))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBlueGas))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPurpleGas))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI(&pstIn->astItemInfoList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_TASK_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_TASK_ENCOURAGE_DATA *pstOut = (DT_TASK_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrength))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStory))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBlueGas))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPurpleGas))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI(&pstOut->astItemInfoList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_TASK_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_TASK_BASE_DATA *pstIn = (DT_TASK_BASE_DATA*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszTaskDispName, sizeof(pstIn->aszTaskDispName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszTaskDesc, sizeof(pstIn->aszTaskDesc)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTaskType))
		return -1;

	if(-1 == EncodeUnDT_TASK_CONDITION(&pstIn->stTaskConditionInfo, pstIn->byTaskType, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_ENCOURAGE_DATA(&pstIn->stTaskEncourage, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_TASK_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_TASK_BASE_DATA *pstOut = (DT_TASK_BASE_DATA*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszTaskDispName, sizeof(pstOut->aszTaskDispName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszTaskDesc, sizeof(pstOut->aszTaskDesc)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTaskType))
		return -1;

	if(-1 == DecodeUnDT_TASK_CONDITION(&pstOut->stTaskConditionInfo, pstOut->byTaskType, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_ENCOURAGE_DATA(&pstOut->stTaskEncourage, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GIVEN_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_GIVEN_TASK_DATA *pstIn = (DT_GIVEN_TASK_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStateUpdateTime))
		return -1;

	if(-1 == EncodeDT_TASK_BASE_DATA(&pstIn->stTaskBaseData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanAccept))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlayerLevel))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GIVEN_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_GIVEN_TASK_DATA *pstOut = (DT_GIVEN_TASK_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStateUpdateTime))
		return -1;

	if(-1 == DecodeDT_TASK_BASE_DATA(&pstOut->stTaskBaseData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanAccept))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlayerLevel))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACCEPT_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACCEPT_TASK_DATA *pstIn = (DT_ACCEPT_TASK_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStateUpdateTime))
		return -1;

	if(-1 == EncodeDT_TASK_BASE_DATA(&pstIn->stTaskBaseData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACCEPT_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACCEPT_TASK_DATA *pstOut = (DT_ACCEPT_TASK_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStateUpdateTime))
		return -1;

	if(-1 == DecodeDT_TASK_BASE_DATA(&pstOut->stTaskBaseData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ENCOURAGE_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENCOURAGE_TASK_DATA *pstIn = (DT_ENCOURAGE_TASK_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStateUpdateTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveBaseData))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveBaseData)
			break;
		if(-1 == EncodeDT_TASK_BASE_DATA(&pstIn->astTaskBaseData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ENCOURAGE_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENCOURAGE_TASK_DATA *pstOut = (DT_ENCOURAGE_TASK_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStateUpdateTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveBaseData))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveBaseData)
			break;
		if(-1 == DecodeDT_TASK_BASE_DATA(&pstOut->astTaskBaseData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_INVALID_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_INVALID_TASK_DATA *pstIn = (DT_INVALID_TASK_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_INVALID_TASK_DATA(void *pHost, CNetData* poNetData)
{
	DT_INVALID_TASK_DATA *pstOut = (DT_INVALID_TASK_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeUnDT_TASK_UNION(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case ETS_GIVEN:
		return EncodeDT_GIVEN_TASK_DATA(pHost, poNetData);
	case ETS_ACCEPTED:
		return EncodeDT_ACCEPT_TASK_DATA(pHost, poNetData);
	case ETS_ENCOURAGE:
		return EncodeDT_ENCOURAGE_TASK_DATA(pHost, poNetData);
	case ETS_INVALID:
		return EncodeDT_INVALID_TASK_DATA(pHost, poNetData);
	default: return -1;
	}
}

INT32 DecodeUnDT_TASK_UNION(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case ETS_GIVEN:
		return DecodeDT_GIVEN_TASK_DATA(pHost, poNetData);
	case ETS_ACCEPTED:
		return DecodeDT_ACCEPT_TASK_DATA(pHost, poNetData);
	case ETS_ENCOURAGE:
		return DecodeDT_ENCOURAGE_TASK_DATA(pHost, poNetData);
	case ETS_INVALID:
		return DecodeDT_INVALID_TASK_DATA(pHost, poNetData);
	default: return -1;
	}
}

INT32 EncodeDT_TASK_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_TASK_DATA_CLI *pstIn = (DT_TASK_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskState))
		return -1;

	if(-1 == EncodeUnDT_TASK_UNION(&pstIn->stTaskInfo, pstIn->byTaskState, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_TASK_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_TASK_DATA_CLI *pstOut = (DT_TASK_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskState))
		return -1;

	if(-1 == DecodeUnDT_TASK_UNION(&pstOut->stTaskInfo, pstOut->byTaskState, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_TASK_DATA_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_TASK_DATA_LIST_CLI *pstIn = (DT_TASK_DATA_LIST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TASK_LINE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byTaskNum)
			break;
		if(-1 == EncodeDT_TASK_DATA_CLI(&pstIn->astTaskInfoList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_TASK_DATA_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_TASK_DATA_LIST_CLI *pstOut = (DT_TASK_DATA_LIST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TASK_LINE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byTaskNum)
			break;
		if(-1 == DecodeDT_TASK_DATA_CLI(&pstOut->astTaskInfoList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACCEPT_TASK_COND_RECORD(void *pHost, CNetData* poNetData)
{
	DT_ACCEPT_TASK_COND_RECORD *pstIn = (DT_ACCEPT_TASK_COND_RECORD*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTaskType))
		return -1;

	if(-1 == EncodeUnDT_TASK_CONDITION(&pstIn->stTaskCondRecord, pstIn->byTaskType, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACCEPT_TASK_COND_RECORD(void *pHost, CNetData* poNetData)
{
	DT_ACCEPT_TASK_COND_RECORD *pstOut = (DT_ACCEPT_TASK_COND_RECORD*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTaskType))
		return -1;

	if(-1 == DecodeUnDT_TASK_CONDITION(&pstOut->stTaskCondRecord, pstOut->byTaskType, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_TASK_COND_RECORD_LIST(void *pHost, CNetData* poNetData)
{
	DT_TASK_COND_RECORD_LIST *pstIn = (DT_TASK_COND_RECORD_LIST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TASK_LINE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byTaskNum)
			break;
		if(-1 == EncodeDT_ACCEPT_TASK_COND_RECORD(&pstIn->astTaskConRecordList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_TASK_COND_RECORD_LIST(void *pHost, CNetData* poNetData)
{
	DT_TASK_COND_RECORD_LIST *pstOut = (DT_TASK_COND_RECORD_LIST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TASK_LINE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byTaskNum)
			break;
		if(-1 == DecodeDT_ACCEPT_TASK_COND_RECORD(&pstOut->astTaskConRecordList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_EXPERIENCE_DATA(void *pHost, CNetData* poNetData)
{
	DT_EXPERIENCE_DATA *pstIn = (DT_EXPERIENCE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeExperience))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EXPERIENCE_DATA(void *pHost, CNetData* poNetData)
{
	DT_EXPERIENCE_DATA *pstOut = (DT_EXPERIENCE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeExperience))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLAYER_BASE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_BASE_DATA_CLI *pstIn = (DT_PLAYER_BASE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == EncodeDT_EXPERIENCE_DATA(&pstIn->stExperienceInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == EncodeDT_LOCALE_DATA(&pstIn->stLocaleData, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyGuide[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byVipLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLAYER_BASE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_BASE_DATA_CLI *pstOut = (DT_PLAYER_BASE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == DecodeDT_EXPERIENCE_DATA(&pstOut->stExperienceInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == DecodeDT_LOCALE_DATA(&pstOut->stLocaleData, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyGuide[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byVipLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BUILD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BUILD_DATA_CLI *pstIn = (DT_BUILD_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySort))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveOpenFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BUILD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BUILD_DATA_CLI *pstOut = (DT_BUILD_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySort))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveOpenFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ONLINE_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_ONLINE_ENCOURAGE_DATA *pstIn = (DT_ONLINE_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrength))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI(&pstIn->astItemInfoList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ONLINE_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_ONLINE_ENCOURAGE_DATA *pstOut = (DT_ONLINE_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrength))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI(&pstOut->astItemInfoList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_DATA_AFTER_ONLINE_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_ONLINE_ENCOURAGE *pstIn = (DT_DATA_AFTER_ONLINE_ENCOURAGE*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrength))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DATA_AFTER_ONLINE_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_ONLINE_ENCOURAGE *pstOut = (DT_DATA_AFTER_ONLINE_ENCOURAGE*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrength))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_VIP_NUM_FUNC_DATA(void *pHost, CNetData* poNetData)
{
	DT_VIP_NUM_FUNC_DATA *pstIn = (DT_VIP_NUM_FUNC_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNumFuncKind))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCommonNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwIncNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_VIP_NUM_FUNC_DATA(void *pHost, CNetData* poNetData)
{
	DT_VIP_NUM_FUNC_DATA *pstOut = (DT_VIP_NUM_FUNC_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNumFuncKind))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCommonNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwIncNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_VIP_LEVEL_DATA(void *pHost, CNetData* poNetData)
{
	DT_VIP_LEVEL_DATA *pstIn = (DT_VIP_LEVEL_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byVipLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedRechargeGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byExtNumFuncNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_VIP_FUNC; i++)
	{
		if(i >= (INT32)pstIn->byExtNumFuncNum)
			break;
		if(-1 == EncodeDT_VIP_NUM_FUNC_DATA(&pstIn->astVipNumFuncInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byOpenVipFuncNum))
		return -1;

	for(i = 0; i < MAX_VIP_FUNC; i++)
	{
		if(i >= (INT32)pstIn->byOpenVipFuncNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyOpenVipFuncInfo[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_VIP_LEVEL_DATA(void *pHost, CNetData* poNetData)
{
	DT_VIP_LEVEL_DATA *pstOut = (DT_VIP_LEVEL_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byVipLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedRechargeGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byExtNumFuncNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_VIP_FUNC; i++)
	{
		if(i >= (INT32)pstOut->byExtNumFuncNum)
			break;
		if(-1 == DecodeDT_VIP_NUM_FUNC_DATA(&pstOut->astVipNumFuncInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byOpenVipFuncNum))
		return -1;

	for(i = 0; i < MAX_VIP_FUNC; i++)
	{
		if(i >= (INT32)pstOut->byOpenVipFuncNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyOpenVipFuncInfo[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_VIP_TAB_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_VIP_TAB_DATA_CLI *pstIn = (DT_VIP_TAB_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byCurVipLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHaveRechargeGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVipLevelNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_VIP_LEVEL; i++)
	{
		if(i >= (INT32)pstIn->byVipLevelNum)
			break;
		if(-1 == EncodeDT_VIP_LEVEL_DATA(&pstIn->astVipLevelInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_VIP_TAB_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_VIP_TAB_DATA_CLI *pstOut = (DT_VIP_TAB_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byCurVipLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHaveRechargeGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVipLevelNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_VIP_LEVEL; i++)
	{
		if(i >= (INT32)pstOut->byVipLevelNum)
			break;
		if(-1 == DecodeDT_VIP_LEVEL_DATA(&pstOut->astVipLevelInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_UNREAD_BATTLE_LOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_UNREAD_BATTLE_LOG_DATA_CLI *pstIn = (DT_UNREAD_BATTLE_LOG_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBattleLogType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnreadNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_UNREAD_BATTLE_LOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_UNREAD_BATTLE_LOG_DATA_CLI *pstOut = (DT_UNREAD_BATTLE_LOG_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBattleLogType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnreadNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENCOURAGE_DATA *pstIn = (DT_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrength))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStory))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBlueGas))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPurpleGas))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->astItemInfoList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENCOURAGE_DATA *pstOut = (DT_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrength))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStory))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBlueGas))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPurpleGas))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->astItemInfoList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_RSYNC_RECV_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_RSYNC_RECV_ENCOURAGE_DATA *pstIn = (DT_RSYNC_RECV_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stCurPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RSYNC_RECV_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_RSYNC_RECV_ENCOURAGE_DATA *pstOut = (DT_RSYNC_RECV_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stCurPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ENTERGS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTERGS_REQ *pstIn = (PKT_CLIGS_ENTERGS_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wZoneID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDeviceID, sizeof(pstIn->aszDeviceID)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszNotifyID, sizeof(pstIn->aszNotifyID)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszUserName, sizeof(pstIn->aszUserName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCareerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCliVer))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ENTERGS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTERGS_REQ *pstOut = (PKT_CLIGS_ENTERGS_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wZoneID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDeviceID, sizeof(pstOut->aszDeviceID)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszNotifyID, sizeof(pstOut->aszNotifyID)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszUserName, sizeof(pstOut->aszUserName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCareerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCliVer))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_OPERATING_ACTIVITY_DATA(void *pHost, CNetData* poNetData)
{
	DT_OPERATING_ACTIVITY_DATA *pstIn = (DT_OPERATING_ACTIVITY_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwVersionID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDesc, sizeof(pstIn->aszDesc)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszUrl, sizeof(pstIn->aszUrl)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byWebTabType))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszExtContext, sizeof(pstIn->aszExtContext)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_OPERATING_ACTIVITY_DATA(void *pHost, CNetData* poNetData)
{
	DT_OPERATING_ACTIVITY_DATA *pstOut = (DT_OPERATING_ACTIVITY_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwVersionID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDesc, sizeof(pstOut->aszDesc)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszUrl, sizeof(pstOut->aszUrl)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byWebTabType))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszExtContext, sizeof(pstOut->aszExtContext)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ENTERGS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTERGS_ACK *pstIn = (PKT_CLIGS_ENTERGS_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCliVer))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwResVer))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUIVer))
		return -1;

	if(-1 == EncodeDT_PLAYER_BASE_DATA_CLI(&pstIn->stPlayerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wBuildNum))
		return -1;

	for(i = 0; i < MAX_BUILD_NUM; i++)
	{
		if(i >= (INT32)pstIn->wBuildNum)
			break;
		if(-1 == EncodeDT_BUILD_DATA_CLI(&pstIn->astBuildInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byOnlineEncourageFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byOnlineEncourageFlag)
			break;
		if(-1 == EncodeDT_ONLINE_ENCOURAGE_DATA(&pstIn->astOnlineEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byOnlineEncourageFlag)
			break;
		if(-1 == poNetData->AddWord(pstIn->awRecvCountDown[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byBattleLogTypeNum))
		return -1;

	for(i = 0; i < MAX_BATTLE_LOG_TYPE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBattleLogTypeNum)
			break;
		if(-1 == EncodeDT_UNREAD_BATTLE_LOG_DATA_CLI(&pstIn->astUnreadBattleLogInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wJuniorLevel))
		return -1;

	if(-1 == EncodeDT_VIP_TAB_DATA_CLI(&pstIn->stVipTabInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EXT_FUNC_PARAM_LST(&pstIn->stExtFuncParamLst, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwServerTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanUseBoxGoodsID))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NOTICE_DATA(&pstIn->stNoticeInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_OPERATING_ACTIVITY_DATA(&pstIn->stOperatingActivityInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUnreadOfflineMsgNum))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszResVer, sizeof(pstIn->aszResVer)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveFaction))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveVipGift))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEditDspName))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEditDspName, sizeof(pstIn->aszEditDspName)))
		return -1;

	if(-1 == EncodeDT_NOTICE_DATA_NEW(&pstIn->stNoticeNewInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsFly))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ENTERGS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTERGS_ACK *pstOut = (PKT_CLIGS_ENTERGS_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCliVer))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwResVer))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUIVer))
		return -1;

	if(-1 == DecodeDT_PLAYER_BASE_DATA_CLI(&pstOut->stPlayerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wBuildNum))
		return -1;

	for(i = 0; i < MAX_BUILD_NUM; i++)
	{
		if(i >= (INT32)pstOut->wBuildNum)
			break;
		if(-1 == DecodeDT_BUILD_DATA_CLI(&pstOut->astBuildInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byOnlineEncourageFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byOnlineEncourageFlag)
			break;
		if(-1 == DecodeDT_ONLINE_ENCOURAGE_DATA(&pstOut->astOnlineEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byOnlineEncourageFlag)
			break;
		if(-1 == poNetData->DelWord(pstOut->awRecvCountDown[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byBattleLogTypeNum))
		return -1;

	for(i = 0; i < MAX_BATTLE_LOG_TYPE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBattleLogTypeNum)
			break;
		if(-1 == DecodeDT_UNREAD_BATTLE_LOG_DATA_CLI(&pstOut->astUnreadBattleLogInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wJuniorLevel))
		return -1;

	if(-1 == DecodeDT_VIP_TAB_DATA_CLI(&pstOut->stVipTabInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EXT_FUNC_PARAM_LST(&pstOut->stExtFuncParamLst, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwServerTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanUseBoxGoodsID))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NOTICE_DATA(&pstOut->stNoticeInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_OPERATING_ACTIVITY_DATA(&pstOut->stOperatingActivityInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUnreadOfflineMsgNum))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszResVer, sizeof(pstOut->aszResVer)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveFaction))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveVipGift))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEditDspName))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEditDspName, sizeof(pstOut->aszEditDspName)))
		return -1;

	if(-1 == DecodeDT_NOTICE_DATA_NEW(&pstOut->stNoticeNewInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsFly))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BAG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BAG_DATA_CLI *pstIn = (DT_BAG_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byMaxOpenNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byInitOpenNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurOpenNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBaseOpenCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOpenCoinIncrease))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBaseOpenGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOpenGoldIncrease))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BAG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BAG_DATA_CLI *pstOut = (DT_BAG_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byMaxOpenNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byInitOpenNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurOpenNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBaseOpenCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOpenCoinIncrease))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBaseOpenGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOpenGoldIncrease))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BAG_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_BAG_DATA_CLI2 *pstIn = (DT_BAG_DATA_CLI2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wMaxOpenNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wInitOpenNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurOpenNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBaseOpenCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOpenCoinIncrease))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBaseOpenGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOpenGoldIncrease))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BAG_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_BAG_DATA_CLI2 *pstOut = (DT_BAG_DATA_CLI2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wMaxOpenNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wInitOpenNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurOpenNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBaseOpenCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOpenCoinIncrease))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBaseOpenGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOpenGoldIncrease))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_BAG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_BAG_DATA_CLI *pstIn = (DT_EQUIP_BAG_DATA_CLI*)pHost;

	if(-1 == EncodeDT_BAG_DATA_CLI(&pstIn->stBagInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_LST_CLI(&pstIn->stBagEquipDataList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_BAG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_BAG_DATA_CLI *pstOut = (DT_EQUIP_BAG_DATA_CLI*)pHost;

	if(-1 == DecodeDT_BAG_DATA_CLI(&pstOut->stBagInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_LST_CLI(&pstOut->stBagEquipDataList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_HERO_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_HERO_INFO_REQ *pstIn = (PKT_CLIGS_GET_HERO_INFO_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipBagFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_HERO_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_HERO_INFO_REQ *pstOut = (PKT_CLIGS_GET_HERO_INFO_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipBagFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ATTR_ENABLE_UPDATE_INFO(void *pHost, CNetData* poNetData)
{
	DT_ATTR_ENABLE_UPDATE_INFO *pstIn = (DT_ATTR_ENABLE_UPDATE_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byEnableAttrHPUpdate))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnableAttrAttackUpdate))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ATTR_ENABLE_UPDATE_INFO(void *pHost, CNetData* poNetData)
{
	DT_ATTR_ENABLE_UPDATE_INFO *pstOut = (DT_ATTR_ENABLE_UPDATE_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byEnableAttrHPUpdate))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnableAttrAttackUpdate))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_DATA_CLI *pstIn = (DT_HERO_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->astHeroBaseData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_EQUIP_DATA_LST_CLI(&pstIn->astEquipDataList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_ATTR_ENABLE_UPDATE_INFO(&pstIn->astEnableAttrUpdate[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_SKILL_DATA_CLI(&pstIn->astSkillInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_DATA_CLI *pstOut = (DT_HERO_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->astHeroBaseData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_EQUIP_DATA_LST_CLI(&pstOut->astEquipDataList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_ATTR_ENABLE_UPDATE_INFO(&pstOut->astEnableAttrUpdate[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_SKILL_DATA_CLI(&pstOut->astSkillInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLAYER_BATTLE_INFO(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_BATTLE_INFO *pstIn = (DT_PLAYER_BATTLE_INFO*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszDisplayName, sizeof(pstIn->aszDisplayName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLAYER_BATTLE_INFO(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_BATTLE_INFO *pstOut = (DT_PLAYER_BATTLE_INFO*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszDisplayName, sizeof(pstOut->aszDisplayName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_HERO_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_HERO_INFO_ACK *pstIn = (PKT_CLIGS_GET_HERO_INFO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCoachExpRate))
		return -1;

	if(-1 == EncodeDT_PLAYER_BATTLE_INFO(&pstIn->stPlayerBattleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_DATA_CLI(&pstIn->stHeroInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipBagFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byEquipBagFlag)
			break;
		if(-1 == EncodeDT_EQUIP_BAG_DATA_CLI(&pstIn->astEquipBagDataInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byGoodsCellNum))
		return -1;

	if(-1 == EncodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstIn->stEquipXiangqianDes, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVipLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_HERO_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_HERO_INFO_ACK *pstOut = (PKT_CLIGS_GET_HERO_INFO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCoachExpRate))
		return -1;

	if(-1 == DecodeDT_PLAYER_BATTLE_INFO(&pstOut->stPlayerBattleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_DATA_CLI(&pstOut->stHeroInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipBagFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byEquipBagFlag)
			break;
		if(-1 == DecodeDT_EQUIP_BAG_DATA_CLI(&pstOut->astEquipBagDataInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byGoodsCellNum))
		return -1;

	if(-1 == DecodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstOut->stEquipXiangqianDes, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVipLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACTIVI_SIDE_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACTIVI_SIDE_PROMPT_DATA *pstIn = (DT_ACTIVI_SIDE_PROMPT_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byActiviID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwActiviCountDown))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACTIVI_SIDE_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACTIVI_SIDE_PROMPT_DATA *pstOut = (DT_ACTIVI_SIDE_PROMPT_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byActiviID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwActiviCountDown))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACTIVI_SIDE_PROMPT_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_ACTIVI_SIDE_PROMPT_DATA_LST *pstIn = (DT_ACTIVI_SIDE_PROMPT_DATA_LST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byActiviNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVI_SIDE_PROMPT_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActiviNum)
			break;
		if(-1 == EncodeDT_ACTIVI_SIDE_PROMPT_DATA(&pstIn->astActiviPrompt[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACTIVI_SIDE_PROMPT_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_ACTIVI_SIDE_PROMPT_DATA_LST *pstOut = (DT_ACTIVI_SIDE_PROMPT_DATA_LST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byActiviNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVI_SIDE_PROMPT_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActiviNum)
			break;
		if(-1 == DecodeDT_ACTIVI_SIDE_PROMPT_DATA(&pstOut->astActiviPrompt[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ENTER_HOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_HOME_REQ *pstIn = (PKT_CLIGS_ENTER_HOME_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKind))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ENTER_HOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_HOME_REQ *pstOut = (PKT_CLIGS_ENTER_HOME_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKind))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ENTER_HOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_HOME_ACK *pstIn = (PKT_CLIGS_ENTER_HOME_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byKind))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBuildNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BUILD_NUM; i++)
	{
		if(i >= (INT32)pstIn->wBuildNum)
			break;
		if(-1 == EncodeDT_BUILD_DATA_CLI(&pstIn->astBuildInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byLoginEncourageState))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBattleLogTypeNum))
		return -1;

	for(i = 0; i < MAX_BATTLE_LOG_TYPE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBattleLogTypeNum)
			break;
		if(-1 == EncodeDT_UNREAD_BATTLE_LOG_DATA_CLI(&pstIn->astUnreadBattleLogInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_UNLOCK_HERO_NUM; i++)
	{
		if(-1 == poNetData->AddWord(pstIn->awUnlockHeroID[i]))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wUnlockEquipLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUnlockElite))
		return -1;

	if(-1 == EncodeUnlockScienceInfo(&pstIn->stUnlockScienceList, poNetData))
		return -1;

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyGuide[i]))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_OTHER_PROMPT_DATA(&pstIn->stOtherPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEliteUnBattleNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveFactionState))
		return -1;

	if(-1 == EncodeDT_ACTIVI_SIDE_PROMPT_DATA_LST(&pstIn->stActiveSidePrompt, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ENTER_HOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_HOME_ACK *pstOut = (PKT_CLIGS_ENTER_HOME_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byKind))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBuildNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BUILD_NUM; i++)
	{
		if(i >= (INT32)pstOut->wBuildNum)
			break;
		if(-1 == DecodeDT_BUILD_DATA_CLI(&pstOut->astBuildInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byLoginEncourageState))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBattleLogTypeNum))
		return -1;

	for(i = 0; i < MAX_BATTLE_LOG_TYPE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBattleLogTypeNum)
			break;
		if(-1 == DecodeDT_UNREAD_BATTLE_LOG_DATA_CLI(&pstOut->astUnreadBattleLogInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_UNLOCK_HERO_NUM; i++)
	{
		if(-1 == poNetData->DelWord(pstOut->awUnlockHeroID[i]))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wUnlockEquipLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUnlockElite))
		return -1;

	if(-1 == DecodeUnlockScienceInfo(&pstOut->stUnlockScienceList, poNetData))
		return -1;

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyGuide[i]))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_OTHER_PROMPT_DATA(&pstOut->stOtherPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEliteUnBattleNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveFactionState))
		return -1;

	if(-1 == DecodeDT_ACTIVI_SIDE_PROMPT_DATA_LST(&pstOut->stActiveSidePrompt, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BATTLE_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_BATTLE_ENCOURAGE_DATA *pstIn = (DT_BATTLE_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStory))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJingJie))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BATTLE_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_BATTLE_ENCOURAGE_DATA *pstOut = (DT_BATTLE_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStory))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJingJie))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DATA_AFTER_BATTLE_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_BATTLE_ENCOURAGE *pstIn = (DT_DATA_AFTER_BATTLE_ENCOURAGE*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_DATA(&pstIn->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DATA_AFTER_BATTLE_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_BATTLE_ENCOURAGE *pstOut = (DT_DATA_AFTER_BATTLE_ENCOURAGE*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_DATA(&pstOut->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_RACE_CHALLENGE_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_RACE_CHALLENGE_ENCOURAGE_DATA *pstIn = (DT_RACE_CHALLENGE_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJingJie))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RACE_CHALLENGE_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_RACE_CHALLENGE_ENCOURAGE_DATA *pstOut = (DT_RACE_CHALLENGE_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJingJie))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RACE_RANK_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_RACE_RANK_ENCOURAGE_DATA *pstIn = (DT_RACE_RANK_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJingJie))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RACE_RANK_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_RACE_RANK_ENCOURAGE_DATA *pstOut = (DT_RACE_RANK_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJingJie))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ENTER_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_INSTANCE_REQ *pstIn = (PKT_CLIGS_ENTER_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSceneIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byInstanceIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNewFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ENTER_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_INSTANCE_REQ *pstOut = (PKT_CLIGS_ENTER_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSceneIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byInstanceIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNewFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PASS_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_PASS_ENCOURAGE_DATA *pstIn = (DT_PASS_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwStory))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoachExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PASS_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_PASS_ENCOURAGE_DATA *pstOut = (DT_PASS_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwStory))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoachExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DATA_AFTER_PASS_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_PASS_ENCOURAGE *pstIn = (DT_DATA_AFTER_PASS_ENCOURAGE*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_DATA(&pstIn->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DATA_AFTER_PASS_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_PASS_ENCOURAGE *pstOut = (DT_DATA_AFTER_PASS_ENCOURAGE*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_DATA(&pstOut->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_PASS_ENCOURAGE_BOX_GROUP_DATA(void *pHost, CNetData* poNetData)
{
	DT_PASS_ENCOURAGE_BOX_GROUP_DATA *pstIn = (DT_PASS_ENCOURAGE_BOX_GROUP_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHitItemIdx))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PASS_ENCOURAGE_BOX_GROUP_DATA(void *pHost, CNetData* poNetData)
{
	DT_PASS_ENCOURAGE_BOX_GROUP_DATA *pstOut = (DT_PASS_ENCOURAGE_BOX_GROUP_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHitItemIdx))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PASS_ENCOURAGE_BOX_DATA(void *pHost, CNetData* poNetData)
{
	DT_PASS_ENCOURAGE_BOX_DATA *pstIn = (DT_PASS_ENCOURAGE_BOX_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGroupNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_BOX_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstIn->byGroupNum)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_GROUP_DATA(&pstIn->astBoxGroupInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PASS_ENCOURAGE_BOX_DATA(void *pHost, CNetData* poNetData)
{
	DT_PASS_ENCOURAGE_BOX_DATA *pstOut = (DT_PASS_ENCOURAGE_BOX_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGroupNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_BOX_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstOut->byGroupNum)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_GROUP_DATA(&pstOut->astBoxGroupInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_PASS_ENCOURAGE_BOX_DATA2(void *pHost, CNetData* poNetData)
{
	DT_PASS_ENCOURAGE_BOX_DATA2 *pstIn = (DT_PASS_ENCOURAGE_BOX_DATA2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGroupNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GVE_ENCOURAGE_BOX_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstIn->byGroupNum)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_GROUP_DATA(&pstIn->astBoxGroupInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PASS_ENCOURAGE_BOX_DATA2(void *pHost, CNetData* poNetData)
{
	DT_PASS_ENCOURAGE_BOX_DATA2 *pstOut = (DT_PASS_ENCOURAGE_BOX_DATA2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGroupNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GVE_ENCOURAGE_BOX_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstOut->byGroupNum)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_GROUP_DATA(&pstOut->astBoxGroupInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_UPGRADE_DATA_LIST(void *pHost, CNetData* poNetData)
{
	DT_HERO_UPGRADE_DATA_LIST *pstIn = (DT_HERO_UPGRADE_DATA_LIST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byUpgradeHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byUpgradeHeroNum)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_DATA(&pstIn->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_UPGRADE_DATA_LIST(void *pHost, CNetData* poNetData)
{
	DT_HERO_UPGRADE_DATA_LIST *pstOut = (DT_HERO_UPGRADE_DATA_LIST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byUpgradeHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byUpgradeHeroNum)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_DATA(&pstOut->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ENTER_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_INSTANCE_ACK *pstIn = (PKT_CLIGS_ENTER_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCliVer))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwResVer))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUIVer))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurHP))
		return -1;

	if(-1 == EncodeDT_MONSTER_DATA_LIST(&pstIn->stMonsterInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveBoxFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveBoxFlag)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_DATA(&pstIn->astBoxInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveBoxFlag)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_DATA_LIST(&pstIn->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wDoubleExpNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byScore))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszResVer, sizeof(pstIn->aszResVer)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ENTER_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ENTER_INSTANCE_ACK *pstOut = (PKT_CLIGS_ENTER_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCliVer))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwResVer))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUIVer))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurHP))
		return -1;

	if(-1 == DecodeDT_MONSTER_DATA_LIST(&pstOut->stMonsterInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveBoxFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveBoxFlag)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_DATA(&pstOut->astBoxInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveBoxFlag)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_DATA_LIST(&pstOut->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wDoubleExpNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byScore))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszResVer, sizeof(pstOut->aszResVer)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BATTLE_REQ *pstIn = (PKT_CLIGS_BATTLE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBattleIndex))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSceneIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byInstanceIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BATTLE_REQ *pstOut = (PKT_CLIGS_BATTLE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBattleIndex))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSceneIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byInstanceIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BURST_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_BURST_ITEM_DATA *pstIn = (DT_BURST_ITEM_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBurstItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBurstItemNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awBurstItemList[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BURST_ITEM_DATA(void *pHost, CNetData* poNetData)
{
	DT_BURST_ITEM_DATA *pstOut = (DT_BURST_ITEM_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBurstItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBurstItemNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awBurstItemList[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_NEXT_INSTANCE_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEXT_INSTANCE_DATA *pstIn = (DT_NEXT_INSTANCE_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSceneIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byInstanceIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEnterLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEnterPhyStrength))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_NEXT_INSTANCE_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEXT_INSTANCE_DATA *pstOut = (DT_NEXT_INSTANCE_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSceneIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byInstanceIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEnterLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEnterPhyStrength))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_UNLOCK_DATA(void *pHost, CNetData* poNetData)
{
	DT_UNLOCK_DATA *pstIn = (DT_UNLOCK_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wUnlockMainTownLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnlockBuildKindID))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_UNLOCK_HERO_NUM; i++)
	{
		if(-1 == poNetData->AddWord(pstIn->awUnlockHeroID[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_UNLOCK_DATA(void *pHost, CNetData* poNetData)
{
	DT_UNLOCK_DATA *pstOut = (DT_UNLOCK_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wUnlockMainTownLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnlockBuildKindID))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_UNLOCK_HERO_NUM; i++)
	{
		if(-1 == poNetData->DelWord(pstOut->awUnlockHeroID[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BATTLE_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BATTLE_ACK3 *pstIn = (PKT_CLIGS_BATTLE_ACK3*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA3(&pstIn->stBattleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_ENCOURAGE_DATA(&pstIn->stBattleEncourage, poNetData))
		return -1;

	if(-1 == EncodeDT_DATA_AFTER_BATTLE_ENCOURAGE(&pstIn->stAfterBattleEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPassFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_DATA(&pstIn->astPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_DATA_AFTER_PASS_ENCOURAGE(&pstIn->astAfterPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_DATA(&pstIn->astPassEncourageBox[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_UNLOCK_DATA(&pstIn->astUnlockInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHaveNextInstance))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveNextInstance)
			break;
		if(-1 == EncodeDT_NEXT_INSTANCE_DATA(&pstIn->astNextInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stPhyStrengthInfo, poNetData))
		return -1;

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyGuide[i]))
			return -1;
	}

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszExtContext, sizeof(pstIn->aszExtContext)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BATTLE_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BATTLE_ACK3 *pstOut = (PKT_CLIGS_BATTLE_ACK3*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA3(&pstOut->stBattleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_ENCOURAGE_DATA(&pstOut->stBattleEncourage, poNetData))
		return -1;

	if(-1 == DecodeDT_DATA_AFTER_BATTLE_ENCOURAGE(&pstOut->stAfterBattleEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPassFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_DATA(&pstOut->astPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_DATA_AFTER_PASS_ENCOURAGE(&pstOut->astAfterPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_DATA(&pstOut->astPassEncourageBox[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_UNLOCK_DATA(&pstOut->astUnlockInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHaveNextInstance))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveNextInstance)
			break;
		if(-1 == DecodeDT_NEXT_INSTANCE_DATA(&pstOut->astNextInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stPhyStrengthInfo, poNetData))
		return -1;

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyGuide[i]))
			return -1;
	}

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszExtContext, sizeof(pstOut->aszExtContext)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXIT_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXIT_INSTANCE_REQ *pstIn = (PKT_CLIGS_EXIT_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXIT_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXIT_INSTANCE_REQ *pstOut = (PKT_CLIGS_EXIT_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXIT_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXIT_INSTANCE_ACK *pstIn = (PKT_CLIGS_EXIT_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PLAYER_BASE_DATA_CLI(&pstIn->stPlayerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXIT_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXIT_INSTANCE_ACK *pstOut = (PKT_CLIGS_EXIT_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PLAYER_BASE_DATA_CLI(&pstOut->stPlayerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_INSTANCE_RECORD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_INSTANCE_RECORD_DATA_CLI *pstIn = (DT_INSTANCE_RECORD_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byScore))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEnterLevel))
		return -1;

	if(-1 == EncodeDT_BURST_ITEM_DATA(&pstIn->stBurstItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBurstExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxMonstorPower))
		return -1;

	if(-1 == EncodeDT_PASS_ENCOURAGE_DATA(&pstIn->stPassEncourage, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_INSTANCE_RECORD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_INSTANCE_RECORD_DATA_CLI *pstOut = (DT_INSTANCE_RECORD_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byScore))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEnterLevel))
		return -1;

	if(-1 == DecodeDT_BURST_ITEM_DATA(&pstOut->stBurstItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBurstExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxMonstorPower))
		return -1;

	if(-1 == DecodeDT_PASS_ENCOURAGE_DATA(&pstOut->stPassEncourage, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_TOWN_INSTANCE_RECORD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_TOWN_INSTANCE_RECORD_DATA_CLI *pstIn = (DT_TOWN_INSTANCE_RECORD_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMainMonsterKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanBattle))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_PER_TOWN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byInstanceNum)
			break;
		if(-1 == EncodeDT_INSTANCE_RECORD_DATA_CLI(&pstIn->astInstanceInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_TOWN_INSTANCE_RECORD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_TOWN_INSTANCE_RECORD_DATA_CLI *pstOut = (DT_TOWN_INSTANCE_RECORD_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMainMonsterKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanBattle))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_PER_TOWN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byInstanceNum)
			break;
		if(-1 == DecodeDT_INSTANCE_RECORD_DATA_CLI(&pstOut->astInstanceInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_SCENE_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_SCENE_INSTANCE_REQ *pstIn = (PKT_CLIGS_GET_SCENE_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wIndex))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_SCENE_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_SCENE_INSTANCE_REQ *pstOut = (PKT_CLIGS_GET_SCENE_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wIndex))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CHAPTER_SCORE(void *pHost, CNetData* poNetData)
{
	DT_CHAPTER_SCORE *pstIn = (DT_CHAPTER_SCORE*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	if(-1 == EncodeDT_ENCOURAGE_DATA(&pstIn->stChapterEncourage, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CHAPTER_SCORE(void *pHost, CNetData* poNetData)
{
	DT_CHAPTER_SCORE *pstOut = (DT_CHAPTER_SCORE*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	if(-1 == DecodeDT_ENCOURAGE_DATA(&pstOut->stChapterEncourage, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA *pstIn = (DT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGroupNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_BOX_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstIn->byGroupNum)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_GROUP_DATA(&pstIn->astBoxGroupInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA *pstOut = (DT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGroupNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_BOX_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstOut->byGroupNum)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_GROUP_DATA(&pstOut->astBoxGroupInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACCUMULATED_SCORE_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_ACCUMULATED_SCORE_ENCOURAGE *pstIn = (DT_ACCUMULATED_SCORE_ENCOURAGE*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCurSocre))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEncourageSocre))
		return -1;

	if(-1 == EncodeDT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA(&pstIn->stAccumulatedEncourageBox, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	if(-1 == EncodeDT_ENCOURAGE_DATA(&pstIn->stAccumulatedEncourage, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACCUMULATED_SCORE_ENCOURAGE(void *pHost, CNetData* poNetData)
{
	DT_ACCUMULATED_SCORE_ENCOURAGE *pstOut = (DT_ACCUMULATED_SCORE_ENCOURAGE*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCurSocre))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEncourageSocre))
		return -1;

	if(-1 == DecodeDT_ACCUMULATED_SCORE_ENCOURAGE_BOX_DATA(&pstOut->stAccumulatedEncourageBox, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	if(-1 == DecodeDT_ENCOURAGE_DATA(&pstOut->stAccumulatedEncourage, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_SCENE_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_SCENE_INSTANCE_ACK *pstIn = (PKT_CLIGS_GET_SCENE_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIndex))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnterPhyStrength))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stMaxInstanceData, poNetData))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stMaxUnlockInstance, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byTownNum)
			break;
		if(-1 == EncodeDT_TOWN_INSTANCE_RECORD_DATA_CLI(&pstIn->astTownInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszContent, sizeof(pstIn->aszContent)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byChapterNum))
		return -1;

	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byChapterNum)
			break;
		if(-1 == EncodeDT_CHAPTER_SCORE(&pstIn->astChapterInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_ACCUMULATED_SCORE_ENCOURAGE(&pstIn->stAccumulatedEncourage, poNetData))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stCurPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFlyExp))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_SCENE_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_SCENE_INSTANCE_ACK *pstOut = (PKT_CLIGS_GET_SCENE_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIndex))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnterPhyStrength))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stMaxInstanceData, poNetData))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stMaxUnlockInstance, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byTownNum)
			break;
		if(-1 == DecodeDT_TOWN_INSTANCE_RECORD_DATA_CLI(&pstOut->astTownInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszContent, sizeof(pstOut->aszContent)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byChapterNum))
		return -1;

	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byChapterNum)
			break;
		if(-1 == DecodeDT_CHAPTER_SCORE(&pstOut->astChapterInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_ACCUMULATED_SCORE_ENCOURAGE(&pstOut->stAccumulatedEncourage, poNetData))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stCurPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFlyExp))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_ENCHANT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_ENCHANT_DATA_CLI *pstIn = (DT_EQUIP_ENCHANT_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanEnchantFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEnchantStoneID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurEnchantStone))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCostEnchantStone))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE2(&pstIn->stNextBattleAttribute, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_ENCHANT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_ENCHANT_DATA_CLI *pstOut = (DT_EQUIP_ENCHANT_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanEnchantFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEnchantStoneID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurEnchantStone))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCostEnchantStone))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE2(&pstOut->stNextBattleAttribute, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_STRENGTHEN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_STRENGTHEN_REQ *pstIn = (PKT_CLIGS_EQUIP_STRENGTHEN_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStrengthenType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_STRENGTHEN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_STRENGTHEN_REQ *pstOut = (PKT_CLIGS_EQUIP_STRENGTHEN_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStrengthenType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_STRENGTHEN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_STRENGTHEN_ACK *pstIn = (PKT_CLIGS_EQUIP_STRENGTHEN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->stEquipInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstIn->stEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStrengthenCountDown))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerMaxHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerCurHP))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStrengthen10Coin))
		return -1;

	if(-1 == EncodeDT_EQUIP_ENCHANT_DATA_CLI(&pstIn->stEquipEnchantInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_STRENGTHEN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_STRENGTHEN_ACK *pstOut = (PKT_CLIGS_EQUIP_STRENGTHEN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->stEquipInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstOut->stEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStrengthenCountDown))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerMaxHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerCurHP))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStrengthen10Coin))
		return -1;

	if(-1 == DecodeDT_EQUIP_ENCHANT_DATA_CLI(&pstOut->stEquipEnchantInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SMITHY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SMITHY_REQ *pstIn = (PKT_CLIGS_OPEN_SMITHY_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuildKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SMITHY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SMITHY_REQ *pstOut = (PKT_CLIGS_OPEN_SMITHY_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuildKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BUY_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_BUY_EQUIP_DATA *pstIn = (DT_BUY_EQUIP_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyCoin))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BUY_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_BUY_EQUIP_DATA *pstOut = (DT_BUY_EQUIP_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyCoin))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SMITHY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SMITHY_ACK *pstIn = (PKT_CLIGS_OPEN_SMITHY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStrengthenCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStrengthenCD))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClrCDGold))
		return -1;

	if(-1 == EncodeDT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI(&pstIn->stEquipList, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(-1 == EncodeDT_BUY_EQUIP_DATA(&pstIn->astByEquipInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwBlueGas))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyEquipOpenLightFlagInfo[i]))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwStrengthen10CoinInfo[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SMITHY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SMITHY_ACK *pstOut = (PKT_CLIGS_OPEN_SMITHY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStrengthenCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStrengthenCD))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClrCDGold))
		return -1;

	if(-1 == DecodeDT_EQUIP_STRENGTHEN_COMPOSE_DATA_LST_CLI(&pstOut->stEquipList, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < EQUIP_POS_NUM; i++)
		{
			if(-1 == DecodeDT_BUY_EQUIP_DATA(&pstOut->astByEquipInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelUint64(pstOut->qwBlueGas))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyEquipOpenLightFlagInfo[i]))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwStrengthen10CoinInfo[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RECRUIT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RECRUIT_REQ *pstIn = (PKT_CLIGS_OPEN_RECRUIT_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuildKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RECRUIT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RECRUIT_REQ *pstOut = (PKT_CLIGS_OPEN_RECRUIT_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuildKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_ATTR_ADD_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_ATTR_ADD_CLI *pstIn = (DT_HERO_ATTR_ADD_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwAddAttack))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddTalent))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_ATTR_ADD_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_ATTR_ADD_CLI *pstOut = (DT_HERO_ATTR_ADD_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwAddAttack))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddTalent))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RECRUIT_HERO_DATA(void *pHost, CNetData* poNetData)
{
	DT_RECRUIT_HERO_DATA *pstIn = (DT_RECRUIT_HERO_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNeedVisitNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurVisitNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwVisitCoin))
		return -1;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stHeroBaseInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_ATTR_ADD_CLI(&pstIn->stHeroAttrAddInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_SKILL_DATA_CLI(&pstIn->stSkillInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVisitGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRecuitLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRequireJingjieLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecuitUnLock))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecommend))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RECRUIT_HERO_DATA(void *pHost, CNetData* poNetData)
{
	DT_RECRUIT_HERO_DATA *pstOut = (DT_RECRUIT_HERO_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNeedVisitNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurVisitNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwVisitCoin))
		return -1;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stHeroBaseInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_ATTR_ADD_CLI(&pstOut->stHeroAttrAddInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_SKILL_DATA_CLI(&pstOut->stSkillInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVisitGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRecuitLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRequireJingjieLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecuitUnLock))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecommend))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RECRUIT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RECRUIT_ACK *pstIn = (PKT_CLIGS_OPEN_RECRUIT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJingJieLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_RECRUIT_HERO_DATA(&pstIn->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RECRUIT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RECRUIT_ACK *pstOut = (PKT_CLIGS_OPEN_RECRUIT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJingJieLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_RECRUIT_HERO_DATA(&pstOut->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECRUIT_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECRUIT_HERO_REQ *pstIn = (PKT_CLIGS_RECRUIT_HERO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECRUIT_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECRUIT_HERO_REQ *pstOut = (PKT_CLIGS_RECRUIT_HERO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECRUIT_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECRUIT_HERO_ACK *pstIn = (PKT_CLIGS_RECRUIT_HERO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stHeroBaseInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerCoin))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyGuide[i]))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECRUIT_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECRUIT_HERO_ACK *pstOut = (PKT_CLIGS_RECRUIT_HERO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stHeroBaseInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerCoin))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyGuide[i]))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_VISIT_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VISIT_HERO_REQ *pstIn = (PKT_CLIGS_VISIT_HERO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySizeFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_VISIT_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VISIT_HERO_REQ *pstOut = (PKT_CLIGS_VISIT_HERO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySizeFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_VISIT_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VISIT_HERO_ACK *pstIn = (PKT_CLIGS_VISIT_HERO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byWinFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedVisitNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurVisitNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUpgradeVisitNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwReturnCoin))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_VISIT_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VISIT_HERO_ACK *pstOut = (PKT_CLIGS_VISIT_HERO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byWinFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedVisitNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurVisitNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUpgradeVisitNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwReturnCoin))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BATTLE_ATTR_EXT_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_BATTLE_ATTR_EXT_INFO_CLI *pstIn = (DT_BATTLE_ATTR_EXT_INFO_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwKindValue))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byExtLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExtValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwValueType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BATTLE_ATTR_EXT_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_BATTLE_ATTR_EXT_INFO_CLI *pstOut = (DT_BATTLE_ATTR_EXT_INFO_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwKindValue))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byExtLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExtValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwValueType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BATTLE_ATTR_EXT_LST_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_BATTLE_ATTR_EXT_LST_INFO_CLI *pstIn = (DT_BATTLE_ATTR_EXT_LST_INFO_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExtAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SCIENCE_ATTR_NUM; i++)
	{
		if(i >= (INT32)pstIn->byExtAttrNum)
			break;
		if(-1 == EncodeDT_BATTLE_ATTR_EXT_INFO_CLI(&pstIn->astExtAttrInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BATTLE_ATTR_EXT_LST_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_BATTLE_ATTR_EXT_LST_INFO_CLI *pstOut = (DT_BATTLE_ATTR_EXT_LST_INFO_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExtAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SCIENCE_ATTR_NUM; i++)
	{
		if(i >= (INT32)pstOut->byExtAttrNum)
			break;
		if(-1 == DecodeDT_BATTLE_ATTR_EXT_INFO_CLI(&pstOut->astExtAttrInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_JEWELRY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_JEWELRY_DATA_CLI *pstIn = (DT_JEWELRY_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wJewelryID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJewelryLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byJewelryDressPos))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTR_LST_INFO(&pstIn->stBaseAttrLst, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTR_EXT_LST_INFO_CLI(&pstIn->stExtAttrLst, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStrengLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byExtStrengNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStrengExtLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_JEWELRY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_JEWELRY_DATA_CLI *pstOut = (DT_JEWELRY_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wJewelryID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJewelryLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byJewelryDressPos))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTR_LST_INFO(&pstOut->stBaseAttrLst, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTR_EXT_LST_INFO_CLI(&pstOut->stExtAttrLst, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStrengLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byExtStrengNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStrengExtLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeUnDT_ITEM_DATA_UNOIN2(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case EIK_EQUIP:
		return EncodeDT_EQUIP_DATA_CLI(pHost, poNetData);
	case EIK_GOODS:
		return EncodeDT_GOODS_DATA_CLI(pHost, poNetData);
	case EIK_JEWELRY:
		return EncodeDT_JEWELRY_DATA_CLI(pHost, poNetData);
	default: return -1;
	}
}

INT32 DecodeUnDT_ITEM_DATA_UNOIN2(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case EIK_EQUIP:
		return DecodeDT_EQUIP_DATA_CLI(pHost, poNetData);
	case EIK_GOODS:
		return DecodeDT_GOODS_DATA_CLI(pHost, poNetData);
	case EIK_JEWELRY:
		return DecodeDT_JEWELRY_DATA_CLI(pHost, poNetData);
	default: return -1;
	}
}

INT32 EncodeDT_ITEM_DATA_CLI3(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_CLI3 *pstIn = (DT_ITEM_DATA_CLI3*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemType))
		return -1;

	if(-1 == EncodeUnDT_ITEM_DATA_UNOIN2(&pstIn->stItemInfo, pstIn->byItemType, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_DATA_CLI3(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_CLI3 *pstOut = (DT_ITEM_DATA_CLI3*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemType))
		return -1;

	if(-1 == DecodeUnDT_ITEM_DATA_UNOIN2(&pstOut->stItemInfo, pstOut->byItemType, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_DATA_LIST_CLI3(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_LIST_CLI3 *pstIn = (DT_ITEM_DATA_LIST_CLI3*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI3(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_DATA_LIST_CLI3(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_LIST_CLI3 *pstOut = (DT_ITEM_DATA_LIST_CLI3*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI3(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_DATA_LIST_CLI4(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_LIST_CLI4 *pstIn = (DT_ITEM_DATA_LIST_CLI4*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM_NEW; i++)
	{
		if(i >= (INT32)pstIn->wItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI3(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_DATA_LIST_CLI4(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_LIST_CLI4 *pstOut = (DT_ITEM_DATA_LIST_CLI4*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM_NEW; i++)
	{
		if(i >= (INT32)pstOut->wItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI3(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_NUM_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ITEM_NUM_DATA_CLI *pstIn = (DT_ITEM_NUM_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wItemNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wItemIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_NUM_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ITEM_NUM_DATA_CLI *pstOut = (DT_ITEM_NUM_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wItemNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wItemIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_NUM_DATA_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_ITEM_NUM_DATA_LIST_CLI *pstIn = (DT_ITEM_NUM_DATA_LIST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM_NEW; i++)
	{
		if(i >= (INT32)pstIn->wItemNum)
			break;
		if(-1 == EncodeDT_ITEM_NUM_DATA_CLI(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_NUM_DATA_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_ITEM_NUM_DATA_LIST_CLI *pstOut = (DT_ITEM_NUM_DATA_LIST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM_NEW; i++)
	{
		if(i >= (INT32)pstOut->wItemNum)
			break;
		if(-1 == DecodeDT_ITEM_NUM_DATA_CLI(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_DATA_LIST_LESS_CLI3(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_LIST_LESS_CLI3 *pstIn = (DT_ITEM_DATA_LIST_LESS_CLI3*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_DISPALY_GOODS_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI3(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_DATA_LIST_LESS_CLI3(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_LIST_LESS_CLI3 *pstOut = (DT_ITEM_DATA_LIST_LESS_CLI3*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_DISPALY_GOODS_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI3(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_RES_ITEM_DATA2(void *pHost, CNetData* poNetData)
{
	DT_RES_ITEM_DATA2 *pstIn = (DT_RES_ITEM_DATA2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byResNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstIn->byResNum)
			break;
		if(-1 == EncodeDT_RES_DATA(&pstIn->astResList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI3(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RES_ITEM_DATA2(void *pHost, CNetData* poNetData)
{
	DT_RES_ITEM_DATA2 *pstOut = (DT_RES_ITEM_DATA2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byResNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstOut->byResNum)
			break;
		if(-1 == DecodeDT_RES_DATA(&pstOut->astResList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI3(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BAG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BAG_REQ *pstIn = (PKT_CLIGS_OPEN_BAG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BAG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BAG_REQ *pstOut = (PKT_CLIGS_OPEN_BAG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BAG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BAG_ACK *pstIn = (PKT_CLIGS_OPEN_BAG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BAG_DATA_CLI(&pstIn->stBagInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->stBagItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstIn->stEquipXiangqianDes, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI3(&pstIn->stBagItemInfo2, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BAG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BAG_ACK *pstOut = (PKT_CLIGS_OPEN_BAG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BAG_DATA_CLI(&pstOut->stBagInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->stBagItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstOut->stEquipXiangqianDes, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI3(&pstOut->stBagItemInfo2, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BAG_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BAG_ACK2 *pstIn = (PKT_CLIGS_OPEN_BAG_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BAG_DATA_CLI2(&pstIn->stBagInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI4(&pstIn->stBagItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstIn->stEquipXiangqianDes, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BAG_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BAG_ACK2 *pstOut = (PKT_CLIGS_OPEN_BAG_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BAG_DATA_CLI2(&pstOut->stBagInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI4(&pstOut->stBagItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstOut->stEquipXiangqianDes, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACCEPT_TASK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACCEPT_TASK_REQ *pstIn = (PKT_CLIGS_ACCEPT_TASK_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACCEPT_TASK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACCEPT_TASK_REQ *pstOut = (PKT_CLIGS_ACCEPT_TASK_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_INSTANCE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_INSTANCE_DATA_CLI *pstIn = (DT_INSTANCE_DATA_CLI*)pHost;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEnterLevel))
		return -1;

	if(-1 == EncodeDT_BURST_ITEM_DATA(&pstIn->stBurstItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBurstExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxMonstorPower))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_INSTANCE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_INSTANCE_DATA_CLI *pstOut = (DT_INSTANCE_DATA_CLI*)pHost;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEnterLevel))
		return -1;

	if(-1 == DecodeDT_BURST_ITEM_DATA(&pstOut->stBurstItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBurstExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxMonstorPower))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACCEPT_TASK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACCEPT_TASK_ACK *pstIn = (PKT_CLIGS_ACCEPT_TASK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnlockNewInstanceFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byUnlockNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_ID(&pstIn->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_DATA_CLI(&pstIn->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACCEPT_TASK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACCEPT_TASK_ACK *pstOut = (PKT_CLIGS_ACCEPT_TASK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnlockNewInstanceFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byUnlockNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_ID(&pstOut->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_DATA_CLI(&pstOut->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GIVEUP_TASK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GIVEUP_TASK_REQ *pstIn = (PKT_CLIGS_GIVEUP_TASK_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GIVEUP_TASK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GIVEUP_TASK_REQ *pstOut = (PKT_CLIGS_GIVEUP_TASK_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GIVEUP_TASK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GIVEUP_TASK_ACK *pstIn = (PKT_CLIGS_GIVEUP_TASK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GIVEUP_TASK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GIVEUP_TASK_ACK *pstOut = (PKT_CLIGS_GIVEUP_TASK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_TASK_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_TASK_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_RECV_TASK_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_TASK_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_TASK_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_RECV_TASK_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_TASK_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_TASK_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_RECV_TASK_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTaskIdx))
		return -1;

	if(-1 == EncodeDT_HERO_UPGRADE_DATA(&pstIn->stMainHeroUpgradeInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUnlockEquipLevel))
		return -1;

	if(-1 == EncodeUnlockScienceInfo(&pstIn->stUnlockScienceList, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnlockNewInstanceFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byUnlockNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_ID(&pstIn->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_DATA_CLI(&pstIn->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyGuide[i]))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwBlueGas))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPurpleGas))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingJie))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_DATA(&pstIn->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_TASK_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_TASK_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_RECV_TASK_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTaskLineIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTaskIdx))
		return -1;

	if(-1 == DecodeDT_HERO_UPGRADE_DATA(&pstOut->stMainHeroUpgradeInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUnlockEquipLevel))
		return -1;

	if(-1 == DecodeUnlockScienceInfo(&pstOut->stUnlockScienceList, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnlockNewInstanceFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byUnlockNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_ID(&pstOut->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_DATA_CLI(&pstOut->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyGuide[i]))
			return -1;
	}

	if(-1 == poNetData->DelUint64(pstOut->qwStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwBlueGas))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPurpleGas))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingJie))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_DATA(&pstOut->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RACE_BUILD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RACE_BUILD_REQ *pstIn = (PKT_CLIGS_OPEN_RACE_BUILD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuildKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RACE_BUILD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RACE_BUILD_REQ *pstOut = (PKT_CLIGS_OPEN_RACE_BUILD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuildKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CHALLENGE_PLAYER_DATA(void *pHost, CNetData* poNetData)
{
	DT_CHALLENGE_PLAYER_DATA *pstIn = (DT_CHALLENGE_PLAYER_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFirstAttack))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CHALLENGE_PLAYER_DATA(void *pHost, CNetData* poNetData)
{
	DT_CHALLENGE_PLAYER_DATA *pstOut = (DT_CHALLENGE_PLAYER_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFirstAttack))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RACE_BUILD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RACE_BUILD_ACK *pstIn = (PKT_CLIGS_OPEN_RACE_BUILD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wContiWin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingJie))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFirstAttack))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveRecvEncourageFlag))
		return -1;

	if(-1 == EncodeDT_RACE_RANK_ENCOURAGE_DATA(&pstIn->stTodayRankEncourage, poNetData))
		return -1;

	if(-1 == EncodeDT_RACE_RANK_ENCOURAGE_DATA(&pstIn->stTomorrowRankEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalChallengeNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanChallengeNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipExtNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreeChallengeNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwChallengeNeedGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wChallengeCountDown))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClrCDGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byChallengeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHALLENGE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byChallengeNum)
			break;
		if(-1 == EncodeDT_CHALLENGE_PLAYER_DATA(&pstIn->astChallengePlayerList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveWorship))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecvEncCountDown))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RACE_BUILD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RACE_BUILD_ACK *pstOut = (PKT_CLIGS_OPEN_RACE_BUILD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wContiWin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingJie))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFirstAttack))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveRecvEncourageFlag))
		return -1;

	if(-1 == DecodeDT_RACE_RANK_ENCOURAGE_DATA(&pstOut->stTodayRankEncourage, poNetData))
		return -1;

	if(-1 == DecodeDT_RACE_RANK_ENCOURAGE_DATA(&pstOut->stTomorrowRankEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalChallengeNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanChallengeNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipExtNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreeChallengeNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwChallengeNeedGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wChallengeCountDown))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClrCDGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byChallengeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHALLENGE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byChallengeNum)
			break;
		if(-1 == DecodeDT_CHALLENGE_PLAYER_DATA(&pstOut->astChallengePlayerList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveWorship))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecvEncCountDown))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ENEMY_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_EQUIP_DATA *pstIn = (DT_ENEMY_EQUIP_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttribute, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ENEMY_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_EQUIP_DATA *pstOut = (DT_ENEMY_EQUIP_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttribute, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ENEMY_EQUIP_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_EQUIP_DATA_LST *pstIn = (DT_ENEMY_EQUIP_DATA_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_ENEMY_EQUIP_DATA(&pstIn->astEquipList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ENEMY_EQUIP_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_EQUIP_DATA_LST *pstOut = (DT_ENEMY_EQUIP_DATA_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_ENEMY_EQUIP_DATA(&pstOut->astEquipList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ENEMY_HERO_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_HERO_DATA *pstIn = (DT_ENEMY_HERO_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCoach))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTalent))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttribute, poNetData))
		return -1;

	if(-1 == EncodeDT_ENEMY_EQUIP_DATA_LST(&pstIn->stEquipList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ENEMY_HERO_DATA(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_HERO_DATA *pstOut = (DT_ENEMY_HERO_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCoach))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTalent))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttribute, poNetData))
		return -1;

	if(-1 == DecodeDT_ENEMY_EQUIP_DATA_LST(&pstOut->stEquipList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHALLENGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_REQ *pstIn = (PKT_CLIGS_CHALLENGE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHALLENGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_REQ *pstOut = (PKT_CLIGS_CHALLENGE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHALLENGE_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_ACK3 *pstIn = (PKT_CLIGS_CHALLENGE_ACK3*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_CHALLENGE_PLAYER_DATA(&pstIn->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEnemyHeroNum)
			break;
		if(-1 == EncodeDT_ENEMY_HERO_DATA(&pstIn->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_BATTLE_DATA3(&pstIn->stBattleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RACE_CHALLENGE_ENCOURAGE_DATA(&pstIn->stChallengeEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHALLENGE_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_ACK3 *pstOut = (PKT_CLIGS_CHALLENGE_ACK3*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_CHALLENGE_PLAYER_DATA(&pstOut->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEnemyHeroNum)
			break;
		if(-1 == DecodeDT_ENEMY_HERO_DATA(&pstOut->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_BATTLE_DATA3(&pstOut->stBattleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RACE_CHALLENGE_ENCOURAGE_DATA(&pstOut->stChallengeEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_RANK_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RANK_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_RECV_RANK_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_RANK_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RANK_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_RECV_RANK_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_RANK_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RANK_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_RECV_RANK_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RACE_RANK_ENCOURAGE_DATA(&pstIn->stRankEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingJie))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_RANK_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RANK_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_RECV_RANK_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RACE_RANK_ENCOURAGE_DATA(&pstOut->stRankEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingJie))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_RANK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANK_REQ *pstIn = (PKT_CLIGS_GET_RANK_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_RANK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANK_REQ *pstOut = (PKT_CLIGS_GET_RANK_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RANK_DATA(void *pHost, CNetData* poNetData)
{
	DT_RANK_DATA *pstIn = (DT_RANK_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == EncodeDT_RACE_RANK_ENCOURAGE_DATA(&pstIn->stRankEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RANK_DATA(void *pHost, CNetData* poNetData)
{
	DT_RANK_DATA *pstOut = (DT_RANK_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == DecodeDT_RACE_RANK_ENCOURAGE_DATA(&pstOut->stRankEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_RANK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANK_ACK *pstIn = (PKT_CLIGS_GET_RANK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byShowNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RANK_SHOW_NUM; i++)
	{
		if(i >= (INT32)pstIn->byShowNum)
			break;
		if(-1 == EncodeDT_RANK_DATA(&pstIn->astRankShowInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_RANK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANK_ACK *pstOut = (PKT_CLIGS_GET_RANK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byShowNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RANK_SHOW_NUM; i++)
	{
		if(i >= (INT32)pstOut->byShowNum)
			break;
		if(-1 == DecodeDT_RANK_DATA(&pstOut->astRankShowInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_RACE_BATTLELOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RACE_BATTLELOG_REQ *pstIn = (PKT_CLIGS_GET_RACE_BATTLELOG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_RACE_BATTLELOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RACE_BATTLELOG_REQ *pstOut = (PKT_CLIGS_GET_RACE_BATTLELOG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RACE_BATTLELOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_RACE_BATTLELOG_DATA_CLI *pstIn = (DT_RACE_BATTLELOG_DATA_CLI*)pHost;

	if(-1 == EncodeDT_RACE_BATTLELOG_DATA(&pstIn->stBattlelogInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEnemyDispName, sizeof(pstIn->aszEnemyDispName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RACE_BATTLELOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_RACE_BATTLELOG_DATA_CLI *pstOut = (DT_RACE_BATTLELOG_DATA_CLI*)pHost;

	if(-1 == DecodeDT_RACE_BATTLELOG_DATA(&pstOut->stBattlelogInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEnemyDispName, sizeof(pstOut->aszEnemyDispName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_RACE_BATTLELOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RACE_BATTLELOG_ACK *pstIn = (PKT_CLIGS_GET_RACE_BATTLELOG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byShowNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RACE_BATTLELOG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byShowNum)
			break;
		if(-1 == EncodeDT_RACE_BATTLELOG_DATA_CLI(&pstIn->astRankBattleLogInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_RACE_BATTLELOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RACE_BATTLELOG_ACK *pstOut = (PKT_CLIGS_GET_RACE_BATTLELOG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byShowNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RACE_BATTLELOG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byShowNum)
			break;
		if(-1 == DecodeDT_RACE_BATTLELOG_DATA_CLI(&pstOut->astRankBattleLogInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SHOP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHOP_REQ *pstIn = (PKT_CLIGS_OPEN_SHOP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTabID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SHOP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHOP_REQ *pstOut = (PKT_CLIGS_OPEN_SHOP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTabID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_DATA_SHOP(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_SHOP *pstIn = (DT_ITEM_DATA_SHOP*)pHost;

	if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_DATA_SHOP(void *pHost, CNetData* poNetData)
{
	DT_ITEM_DATA_SHOP *pstOut = (DT_ITEM_DATA_SHOP*)pHost;

	if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SHOP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHOP_ACK *pstIn = (PKT_CLIGS_OPEN_SHOP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTabID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SHOP_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_SHOP(&pstIn->astItemDataList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SHOP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHOP_ACK *pstOut = (PKT_CLIGS_OPEN_SHOP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTabID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SHOP_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_SHOP(&pstOut->astItemDataList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_ITEM_REQ *pstIn = (PKT_CLIGS_BUY_ITEM_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTabID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPileCount))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_ITEM_REQ *pstOut = (PKT_CLIGS_BUY_ITEM_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTabID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPileCount))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_ITEM_ACK *pstIn = (PKT_CLIGS_BUY_ITEM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTabID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPileCount))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_ITEM_ACK *pstOut = (PKT_CLIGS_BUY_ITEM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTabID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPileCount))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SELL_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELL_ITEM_REQ *pstIn = (PKT_CLIGS_SELL_ITEM_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SELL_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELL_ITEM_REQ *pstOut = (PKT_CLIGS_SELL_ITEM_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SELL_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELL_ITEM_ACK *pstIn = (PKT_CLIGS_SELL_ITEM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == EncodeDT_ITEM_NUM_DATA_LIST_CLI(&pstIn->stItemNumList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SELL_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELL_ITEM_ACK *pstOut = (PKT_CLIGS_SELL_ITEM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == DecodeDT_ITEM_NUM_DATA_LIST_CLI(&pstOut->stItemNumList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DISBAND_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISBAND_HERO_REQ *pstIn = (PKT_CLIGS_DISBAND_HERO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DISBAND_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISBAND_HERO_REQ *pstOut = (PKT_CLIGS_DISBAND_HERO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DISBAND_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISBAND_HERO_ACK *pstIn = (PKT_CLIGS_DISBAND_HERO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerHP))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DISBAND_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISBAND_HERO_ACK *pstOut = (PKT_CLIGS_DISBAND_HERO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerHP))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_REQ *pstIn = (PKT_CLIGS_EQUIP_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDressType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressItemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressItemIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUndressItemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUndressItemIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_REQ *pstOut = (PKT_CLIGS_EQUIP_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDressType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressItemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressItemIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUndressItemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUndressItemIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_PANEL_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_PANEL_CLI *pstIn = (DT_HERO_PANEL_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE2(&pstIn->stBattleAttribute, poNetData))
		return -1;

	if(-1 == EncodeDT_HIDE_BATTLE_ATTRIBUTE(&pstIn->stHideBattleAttribute, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPos))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTalent))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeExperience))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_PANEL_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_PANEL_CLI *pstOut = (DT_HERO_PANEL_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE2(&pstOut->stBattleAttribute, poNetData))
		return -1;

	if(-1 == DecodeDT_HIDE_BATTLE_ATTRIBUTE(&pstOut->stHideBattleAttribute, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPos))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTalent))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeExperience))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_PANEL_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_PANEL_LST_CLI *pstIn = (DT_HERO_PANEL_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_PANEL_CLI(&pstIn->astHeroPanelInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_PANEL_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_PANEL_LST_CLI *pstOut = (DT_HERO_PANEL_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_PANEL_CLI(&pstOut->astHeroPanelInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_ACK *pstIn = (PKT_CLIGS_EQUIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDressType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressItemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressItemIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUndressItemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUndressItemIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerHP))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stHeroPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_PANEL_LST_CLI(&pstIn->stHeroPanelInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_ACK *pstOut = (PKT_CLIGS_EQUIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDressType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressItemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressItemIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUndressItemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUndressItemIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerHP))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stHeroPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_PANEL_LST_CLI(&pstOut->stHeroPanelInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REGISTER_USERNAME_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REGISTER_USERNAME_NTF *pstIn = (PKT_CLIGS_REGISTER_USERNAME_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REGISTER_USERNAME_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REGISTER_USERNAME_NTF *pstOut = (PKT_CLIGS_REGISTER_USERNAME_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EMBATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EMBATTLE_REQ *pstIn = (PKT_CLIGS_OPEN_EMBATTLE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EMBATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EMBATTLE_REQ *pstOut = (PKT_CLIGS_OPEN_EMBATTLE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_EMBATLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_HERO_EMBATLE_DATA *pstIn = (DT_HERO_EMBATLE_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCareerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTalent))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttribute, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == EncodeDT_SKILL_DATA_CLI(&pstIn->stSkillInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_EMBATLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_HERO_EMBATLE_DATA *pstOut = (DT_HERO_EMBATLE_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCareerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTalent))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttribute, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == DecodeDT_SKILL_DATA_CLI(&pstOut->stSkillInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EMBATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EMBATTLE_ACK *pstIn = (PKT_CLIGS_OPEN_EMBATTLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_EMBATLE_DATA(&pstIn->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FORMATION_DATA(&pstIn->stFormationInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EMBATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EMBATTLE_ACK *pstOut = (PKT_CLIGS_OPEN_EMBATTLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_EMBATLE_DATA(&pstOut->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FORMATION_DATA(&pstOut->stFormationInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EMBATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EMBATTLE_REQ *pstIn = (PKT_CLIGS_EMBATTLE_REQ*)pHost;

	if(-1 == EncodeDT_FORMATION_DATA(&pstIn->stFormationInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EMBATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EMBATTLE_REQ *pstOut = (PKT_CLIGS_EMBATTLE_REQ*)pHost;

	if(-1 == DecodeDT_FORMATION_DATA(&pstOut->stFormationInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EMBATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EMBATTLE_ACK *pstIn = (PKT_CLIGS_EMBATTLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EMBATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EMBATTLE_ACK *pstOut = (PKT_CLIGS_EMBATTLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_PLAYER_DATA_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_PLAYER_DATA_REQ *pstIn = (PKT_CLIGS_CLR_PLAYER_DATA_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_PLAYER_DATA_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_PLAYER_DATA_REQ *pstOut = (PKT_CLIGS_CLR_PLAYER_DATA_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MAKE_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MAKE_ITEM_REQ *pstIn = (PKT_CLIGS_MAKE_ITEM_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MAKE_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MAKE_ITEM_REQ *pstOut = (PKT_CLIGS_MAKE_ITEM_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MAKE_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MAKE_ITEM_ACK *pstIn = (PKT_CLIGS_MAKE_ITEM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->stGoodsBagItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwBlueGas))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszErrInfo, sizeof(pstIn->aszErrInfo)))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI3(&pstIn->stGoodsBagItemInfo2, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_NUM_DATA_LIST_CLI(&pstIn->stBagItemNumInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MAKE_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MAKE_ITEM_ACK *pstOut = (PKT_CLIGS_MAKE_ITEM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->stGoodsBagItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwBlueGas))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszErrInfo, sizeof(pstOut->aszErrInfo)))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI3(&pstOut->stGoodsBagItemInfo2, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_NUM_DATA_LIST_CLI(&pstOut->stBagItemNumInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_RECV_ONLINE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRecvCountDown))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNextOnlineEncourageFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byNextOnlineEncourageFlag)
			break;
		if(-1 == EncodeDT_ONLINE_ENCOURAGE_DATA(&pstIn->astNextOnlineEncourage[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_DATA_AFTER_ONLINE_ENCOURAGE(&pstIn->stCurPlayerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stCurPhyStrengthInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_RECV_ONLINE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRecvCountDown))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNextOnlineEncourageFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byNextOnlineEncourageFlag)
			break;
		if(-1 == DecodeDT_ONLINE_ENCOURAGE_DATA(&pstOut->astNextOnlineEncourage[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_DATA_AFTER_ONLINE_ENCOURAGE(&pstOut->stCurPlayerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stCurPhyStrengthInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DATA_AFTER_PASS_ENCOURAGE_BOX(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_PASS_ENCOURAGE_BOX *pstIn = (DT_DATA_AFTER_PASS_ENCOURAGE_BOX*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DATA_AFTER_PASS_ENCOURAGE_BOX(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_PASS_ENCOURAGE_BOX *pstOut = (DT_DATA_AFTER_PASS_ENCOURAGE_BOX*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ *pstIn = (PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ *pstOut = (PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK *pstIn = (PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_DATA(&pstIn->stPassEncourage, poNetData))
		return -1;

	if(-1 == EncodeDT_DATA_AFTER_PASS_ENCOURAGE_BOX(&pstIn->stAfterPassEncourage, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyGuide[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK *pstOut = (PKT_CLIGS_OPEN_INSTANCE_ENCOURAGE_BOX_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_DATA(&pstOut->stPassEncourage, poNetData))
		return -1;

	if(-1 == DecodeDT_DATA_AFTER_PASS_ENCOURAGE_BOX(&pstOut->stAfterPassEncourage, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyGuide[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_INCREASE_BAG_SIZE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_INCREASE_BAG_SIZE_REQ *pstIn = (PKT_CLIGS_INCREASE_BAG_SIZE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byInc2Size))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_INCREASE_BAG_SIZE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_INCREASE_BAG_SIZE_REQ *pstOut = (PKT_CLIGS_INCREASE_BAG_SIZE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byInc2Size))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_INCREASE_BAG_SIZE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_INCREASE_BAG_SIZE_ACK *pstIn = (PKT_CLIGS_INCREASE_BAG_SIZE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_INCREASE_BAG_SIZE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_INCREASE_BAG_SIZE_ACK *pstOut = (PKT_CLIGS_INCREASE_BAG_SIZE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ONHOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_REQ *pstIn = (PKT_CLIGS_ONHOOK_REQ*)pHost;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRunTimes))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ONHOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_REQ *pstOut = (PKT_CLIGS_ONHOOK_REQ*)pHost;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRunTimes))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_UPGRADE_DATA2(void *pHost, CNetData* poNetData)
{
	DT_HERO_UPGRADE_DATA2 *pstIn = (DT_HERO_UPGRADE_DATA2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUpgradeFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStartLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEncExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeExperience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanUseBoxGoodsID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_UPGRADE_DATA2(void *pHost, CNetData* poNetData)
{
	DT_HERO_UPGRADE_DATA2 *pstOut = (DT_HERO_UPGRADE_DATA2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUpgradeFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStartLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEncExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeExperience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanUseBoxGoodsID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DATA_AFTER_ONHOOK(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_ONHOOK *pstIn = (DT_DATA_AFTER_ONHOOK*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byUpgradeHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byUpgradeHeroNum)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_DATA2(&pstIn->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stCurPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EXPERIENCE_DATA(&pstIn->stExperienceInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUnlockEquipLevel))
		return -1;

	if(-1 == EncodeUnlockScienceInfo(&pstIn->stUnlockScienceList, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnlockNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byUnlockNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_ID(&pstIn->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_DATA_CLI(&pstIn->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DATA_AFTER_ONHOOK(void *pHost, CNetData* poNetData)
{
	DT_DATA_AFTER_ONHOOK *pstOut = (DT_DATA_AFTER_ONHOOK*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byUpgradeHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byUpgradeHeroNum)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_DATA2(&pstOut->astHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stCurPhyStrengthInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EXPERIENCE_DATA(&pstOut->stExperienceInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUnlockEquipLevel))
		return -1;

	if(-1 == DecodeUnlockScienceInfo(&pstOut->stUnlockScienceList, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnlockNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byUnlockNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_ID(&pstOut->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_DATA_CLI(&pstOut->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLAYER_RES_DATA(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_RES_DATA *pstIn = (DT_PLAYER_RES_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byResKind))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwResValue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLAYER_RES_DATA(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_RES_DATA *pstOut = (DT_PLAYER_RES_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byResKind))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwResValue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLAYER_RES_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_RES_LST_DATA *pstIn = (DT_PLAYER_RES_LST_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byResNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstIn->byResNum)
			break;
		if(-1 == EncodeDT_PLAYER_RES_DATA(&pstIn->astPlayerRes[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLAYER_RES_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_RES_LST_DATA *pstOut = (DT_PLAYER_RES_LST_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byResNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstOut->byResNum)
			break;
		if(-1 == DecodeDT_PLAYER_RES_DATA(&pstOut->astPlayerRes[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ONHOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_ACK *pstIn = (PKT_CLIGS_ONHOOK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_ONHOOK_RESULT(&pstIn->stOnhookResult, poNetData))
		return -1;

	if(-1 == EncodeDT_DATA_AFTER_ONHOOK(&pstIn->stAfterOnhookData, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnlockNewInstanceFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byUnlockNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_ID(&pstIn->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_DATA_CLI(&pstIn->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFlyExp))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ONHOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_ACK *pstOut = (PKT_CLIGS_ONHOOK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_ONHOOK_RESULT(&pstOut->stOnhookResult, poNetData))
		return -1;

	if(-1 == DecodeDT_DATA_AFTER_ONHOOK(&pstOut->stAfterOnhookData, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnlockNewInstanceFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byUnlockNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_ID(&pstOut->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_DATA_CLI(&pstOut->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFlyExp))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_CHALLENGE_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CHALLENGE_CD_REQ *pstIn = (PKT_CLIGS_CLR_CHALLENGE_CD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_CHALLENGE_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CHALLENGE_CD_REQ *pstOut = (PKT_CLIGS_CLR_CHALLENGE_CD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_CHALLENGE_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CHALLENGE_CD_ACK *pstIn = (PKT_CLIGS_CLR_CHALLENGE_CD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_CHALLENGE_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CHALLENGE_CD_ACK *pstOut = (PKT_CLIGS_CLR_CHALLENGE_CD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SYNC_TIME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SYNC_TIME_REQ *pstIn = (PKT_CLIGS_SYNC_TIME_REQ*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCliTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SYNC_TIME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SYNC_TIME_REQ *pstOut = (PKT_CLIGS_SYNC_TIME_REQ*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCliTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SYNC_TIME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SYNC_TIME_ACK *pstIn = (PKT_CLIGS_SYNC_TIME_ACK*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCliTime))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwServTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SYNC_TIME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SYNC_TIME_ACK *pstOut = (PKT_CLIGS_SYNC_TIME_ACK*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCliTime))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwServTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_REGISTER_DSPNAME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_REGISTER_DSPNAME_REQ *pstIn = (PKT_CLILS_REGISTER_DSPNAME_REQ*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszDspName, sizeof(pstIn->aszDspName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_REGISTER_DSPNAME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_REGISTER_DSPNAME_REQ *pstOut = (PKT_CLILS_REGISTER_DSPNAME_REQ*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszDspName, sizeof(pstOut->aszDspName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_REGISTER_DSPNAME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_REGISTER_DSPNAME_ACK *pstIn = (PKT_CLILS_REGISTER_DSPNAME_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDspName, sizeof(pstIn->aszDspName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_REGISTER_DSPNAME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_REGISTER_DSPNAME_ACK *pstOut = (PKT_CLILS_REGISTER_DSPNAME_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDspName, sizeof(pstOut->aszDspName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_USE_GOODS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_USE_GOODS_REQ *pstIn = (PKT_CLILS_USE_GOODS_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wGoodsKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGetBagInfoFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUseNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_USE_GOODS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_USE_GOODS_REQ *pstOut = (PKT_CLILS_USE_GOODS_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wGoodsKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGetBagInfoFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUseNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_USE_GOODS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_USE_GOODS_ACK *pstIn = (PKT_CLILS_USE_GOODS_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPhyStrength))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMainHeroUpgradeFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byMainHeroUpgradeFlag)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_DATA(&pstIn->astMainHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byUseBoxFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byUseBoxFlag)
			break;
		if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->astBoxItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwBlueGas))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPurpleGas))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGetBagInfoFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byGetBagInfoFlag)
			break;
		if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->astBagInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wGoodsKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUseNum))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stCurPhyStrengthInfo, poNetData))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byGetBagInfoFlag)
			break;
		if(-1 == EncodeDT_ITEM_DATA_LIST_CLI3(&pstIn->astBagInfo2[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_ITEM_NUM_DATA_LIST_CLI(&pstIn->stBagItemNumInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_USE_GOODS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_USE_GOODS_ACK *pstOut = (PKT_CLILS_USE_GOODS_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPhyStrength))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMainHeroUpgradeFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byMainHeroUpgradeFlag)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_DATA(&pstOut->astMainHeroUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byUseBoxFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byUseBoxFlag)
			break;
		if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->astBoxItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwBlueGas))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPurpleGas))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGetBagInfoFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byGetBagInfoFlag)
			break;
		if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->astBagInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wGoodsKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUseNum))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stCurPhyStrengthInfo, poNetData))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byGetBagInfoFlag)
			break;
		if(-1 == DecodeDT_ITEM_DATA_LIST_CLI3(&pstOut->astBagInfo2[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_ITEM_NUM_DATA_LIST_CLI(&pstOut->stBagItemNumInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ *pstIn = (PKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ *pstOut = (PKT_CLILS_OPEN_LOGIN_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_LOGIN_ENCOURAG_DATA(void *pHost, CNetData* poNetData)
{
	DT_LOGIN_ENCOURAG_DATA *pstIn = (DT_LOGIN_ENCOURAG_DATA*)pHost;

	INT32 i;
	for(i = 0; i < MAX_LOGIN_ENCOURAGE_ITEM_NUM; i++)
	{
		if(-1 == EncodeDT_ITEM_DATA_CLI(&pstIn->astItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHitIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveSelectFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKeepDays))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanRecvNumToday))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_LOGIN_ENCOURAG_DATA(void *pHost, CNetData* poNetData)
{
	DT_LOGIN_ENCOURAG_DATA *pstOut = (DT_LOGIN_ENCOURAG_DATA*)pHost;

	INT32 i;
		for(i = 0; i < MAX_LOGIN_ENCOURAGE_ITEM_NUM; i++)
		{
			if(-1 == DecodeDT_ITEM_DATA_CLI(&pstOut->astItemInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelByte(pstOut->byHitIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveSelectFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKeepDays))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanRecvNumToday))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK *pstIn = (PKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_LOGIN_ENCOURAG_DATA(&pstIn->stLoginEncourageInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK *pstOut = (PKT_CLILS_OPEN_LOGIN_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_LOGIN_ENCOURAG_DATA(&pstOut->stLoginEncourageInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ *pstIn = (PKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ *pstOut = (PKT_CLILS_RATE_LOGIN_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK *pstIn = (PKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK *pstOut = (PKT_CLILS_RATE_LOGIN_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ *pstIn = (PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ *pstOut = (PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK *pstIn = (PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveEncourageFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveEncourageFlag)
			break;
		if(-1 == EncodeDT_LOGIN_ENCOURAG_DATA(&pstIn->astLoginEncourageInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK *pstOut = (PKT_CLILS_PUT_LOGIN_ENCOURAGE_INTO_BAG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveEncourageFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveEncourageFlag)
			break;
		if(-1 == DecodeDT_LOGIN_ENCOURAG_DATA(&pstOut->astLoginEncourageInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_CAPTURE_WORK_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_CAPTURE_WORK_DATA_CLI *pstIn = (DT_CAPTURE_WORK_DATA_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwWorkCountdown))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIncomeType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCaptureWorkSecond))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCollectIncome))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUncollectIncome))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAllCollectIncome))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CAPTURE_WORK_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_CAPTURE_WORK_DATA_CLI *pstOut = (DT_CAPTURE_WORK_DATA_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwWorkCountdown))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIncomeType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCaptureWorkSecond))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCollectIncome))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUncollectIncome))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAllCollectIncome))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CAPTURE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_CAPTURE_DATA_CLI *pstIn = (DT_CAPTURE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszCaptureDispName, sizeof(pstIn->aszCaptureDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCaptureCareerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCaptureLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureGridIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwReleaseCountdown))
		return -1;

	if(-1 == EncodeDT_CAPTURE_WORK_DATA_CLI(&pstIn->stWorkInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CAPTURE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_CAPTURE_DATA_CLI *pstOut = (DT_CAPTURE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszCaptureDispName, sizeof(pstOut->aszCaptureDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCaptureCareerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCaptureLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureGridIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwReleaseCountdown))
		return -1;

	if(-1 == DecodeDT_CAPTURE_WORK_DATA_CLI(&pstOut->stWorkInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLUNDER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_REQ *pstIn = (PKT_CLIGS_PLUNDER_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwEnemyID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCaptureID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUseItemFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byResistFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureGridIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLUNDER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_REQ *pstOut = (PKT_CLIGS_PLUNDER_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwEnemyID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCaptureID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUseItemFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byResistFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureGridIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLUNDER_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_PLUNDER_ENCOURAGE_DATA *pstIn = (DT_PLUNDER_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLUNDER_ENCOURAGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_PLUNDER_ENCOURAGE_DATA *pstOut = (DT_PLUNDER_ENCOURAGE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BECAPTURE_DATA(void *pHost, CNetData* poNetData)
{
	DT_BECAPTURE_DATA *pstIn = (DT_BECAPTURE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwOwnerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszOwnerDispName, sizeof(pstIn->aszOwnerDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOwnerLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOwnerPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwReleaseCountdown))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BECAPTURE_DATA(void *pHost, CNetData* poNetData)
{
	DT_BECAPTURE_DATA *pstOut = (DT_BECAPTURE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwOwnerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszOwnerDispName, sizeof(pstOut->aszOwnerDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOwnerLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOwnerPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwReleaseCountdown))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLUNDER_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_ACK3 *pstIn = (PKT_CLIGS_PLUNDER_ACK3*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEnemyID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCaptureID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUseItemFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byResistFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureGridIdx))
		return -1;

	if(-1 == EncodeDT_BECAPTURE_DATA(&pstIn->stBeCaptureInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CHALLENGE_PLAYER_DATA(&pstIn->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEnemyHeroNum)
			break;
		if(-1 == EncodeDT_ENEMY_HERO_DATA(&pstIn->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_BATTLE_DATA3(&pstIn->stBattleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_PLUNDER_ENCOURAGE_DATA(&pstIn->stPlunderEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipExtNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreePlunderNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlunderGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlunderItemNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byCaptureFlag)
			break;
		if(-1 == EncodeDT_CAPTURE_DATA_CLI(&pstIn->astCaptureInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLUNDER_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_ACK3 *pstOut = (PKT_CLIGS_PLUNDER_ACK3*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEnemyID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCaptureID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUseItemFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byResistFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureGridIdx))
		return -1;

	if(-1 == DecodeDT_BECAPTURE_DATA(&pstOut->stBeCaptureInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CHALLENGE_PLAYER_DATA(&pstOut->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEnemyHeroNum)
			break;
		if(-1 == DecodeDT_ENEMY_HERO_DATA(&pstOut->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_BATTLE_DATA3(&pstOut->stBattleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_PLUNDER_ENCOURAGE_DATA(&pstOut->stPlunderEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipExtNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreePlunderNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlunderGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlunderItemNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byCaptureFlag)
			break;
		if(-1 == DecodeDT_CAPTURE_DATA_CLI(&pstOut->astCaptureInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLUNDER_BATTLELOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_PLUNDER_BATTLELOG_DATA_CLI *pstIn = (DT_PLUNDER_BATTLELOG_DATA_CLI*)pHost;

	if(-1 == EncodeDT_PLUNDER_BATTLELOG_DATA(&pstIn->stBattelogInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszActiveDispName, sizeof(pstIn->aszActiveDispName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszPassiveDispName, sizeof(pstIn->aszPassiveDispName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszCaptureDispName, sizeof(pstIn->aszCaptureDispName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLUNDER_BATTLELOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_PLUNDER_BATTLELOG_DATA_CLI *pstOut = (DT_PLUNDER_BATTLELOG_DATA_CLI*)pHost;

	if(-1 == DecodeDT_PLUNDER_BATTLELOG_DATA(&pstOut->stBattelogInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszActiveDispName, sizeof(pstOut->aszActiveDispName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszPassiveDispName, sizeof(pstOut->aszPassiveDispName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszCaptureDispName, sizeof(pstOut->aszCaptureDispName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CAPTURE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CAPTURE_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_CAPTURE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CAPTURE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CAPTURE_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_CAPTURE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CAPTURE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CAPTURE_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_CAPTURE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurPower))
		return -1;

	if(-1 == EncodeDT_BECAPTURE_DATA(&pstIn->stOwner, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlunderNumPerDay))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipExtNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreeCanPlunderNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CAPTURE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byCaptureNum)
			break;
		if(-1 == EncodeDT_CAPTURE_DATA_CLI(&pstIn->astCaptureInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_CAPTURE_NUM; i++)
	{
		if(-1 == poNetData->AddWord(pstIn->awUnlockGridLevel[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byUnreadPlunderBattleLogNum))
		return -1;

	if(-1 == EncodeDT_PLUNDER_BATTLELOG_DATA_CLI(&pstIn->stLastBattleLog, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBleedPerGoldClrMin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDriveAwayGold))
		return -1;

	for(i = 0; i < MAX_CAPTURE_NUM; i++)
	{
		if(-1 == EncodeDT_PLUNDER_GRID_DATA(&pstIn->astCaptureGridInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwPlunderGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CAPTURE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CAPTURE_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_CAPTURE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurPower))
		return -1;

	if(-1 == DecodeDT_BECAPTURE_DATA(&pstOut->stOwner, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlunderNumPerDay))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipExtNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreeCanPlunderNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CAPTURE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byCaptureNum)
			break;
		if(-1 == DecodeDT_CAPTURE_DATA_CLI(&pstOut->astCaptureInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_CAPTURE_NUM; i++)
	{
		if(-1 == poNetData->DelWord(pstOut->awUnlockGridLevel[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byUnreadPlunderBattleLogNum))
		return -1;

	if(-1 == DecodeDT_PLUNDER_BATTLELOG_DATA_CLI(&pstOut->stLastBattleLog, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBleedPerGoldClrMin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDriveAwayGold))
		return -1;

		for(i = 0; i < MAX_CAPTURE_NUM; i++)
		{
			if(-1 == DecodeDT_PLUNDER_GRID_DATA(&pstOut->astCaptureGridInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelDword(pstOut->dwPlunderGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ENEMY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_DATA_CLI *pstIn = (DT_ENEMY_DATA_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwEnemyPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEnemyDispName, sizeof(pstIn->aszEnemyDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCareerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEnemyLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBattleNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveOwnerFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveOwnerFlag)
			break;
		if(-1 == EncodeDT_BECAPTURE_DATA(&pstIn->astOwnerInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ENEMY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ENEMY_DATA_CLI *pstOut = (DT_ENEMY_DATA_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwEnemyPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEnemyDispName, sizeof(pstOut->aszEnemyDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCareerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEnemyLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBattleNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveOwnerFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveOwnerFlag)
			break;
		if(-1 == DecodeDT_BECAPTURE_DATA(&pstOut->astOwnerInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_ENEMY_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ENEMY_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_ENEMY_TAB_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wStartIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_ENEMY_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ENEMY_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_ENEMY_TAB_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wStartIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_ENEMY_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ENEMY_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_ENEMY_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStartIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstIn->wCurNum)
			break;
		if(-1 == EncodeDT_ENEMY_DATA_CLI(&pstIn->astEnemyInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_ENEMY_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ENEMY_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_ENEMY_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStartIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstOut->wCurNum)
			break;
		if(-1 == DecodeDT_ENEMY_DATA_CLI(&pstOut->astEnemyInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DEL_ENEMY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_ENEMY_REQ *pstIn = (PKT_CLIGS_DEL_ENEMY_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwEnemyID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStartIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DEL_ENEMY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_ENEMY_REQ *pstOut = (PKT_CLIGS_DEL_ENEMY_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwEnemyID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStartIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DEL_ENEMY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_ENEMY_ACK *pstIn = (PKT_CLIGS_DEL_ENEMY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEnemyID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStartIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstIn->wCurNum)
			break;
		if(-1 == EncodeDT_ENEMY_DATA_CLI(&pstIn->astEnemyInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DEL_ENEMY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_ENEMY_ACK *pstOut = (PKT_CLIGS_DEL_ENEMY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEnemyID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStartIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstOut->wCurNum)
			break;
		if(-1 == DecodeDT_ENEMY_DATA_CLI(&pstOut->astEnemyInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLUNDER_BATTLELOG_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_BATTLELOG_NTF *pstIn = (PKT_CLIGS_PLUNDER_BATTLELOG_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byUnreadNum))
		return -1;

	if(-1 == EncodeDT_PLUNDER_BATTLELOG_DATA_CLI(&pstIn->stBattleLog, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerScience))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLUNDER_BATTLELOG_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_BATTLELOG_NTF *pstOut = (PKT_CLIGS_PLUNDER_BATTLELOG_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byUnreadNum))
		return -1;

	if(-1 == DecodeDT_PLUNDER_BATTLELOG_DATA_CLI(&pstOut->stBattleLog, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerScience))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ *pstIn = (PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ *pstOut = (PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLUNDER_PLAYER_DATA(void *pHost, CNetData* poNetData)
{
	DT_PLUNDER_PLAYER_DATA *pstIn = (DT_PLUNDER_PLAYER_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMainHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRobotFunc))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveOwnerFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveOwnerFlag)
			break;
		if(-1 == EncodeDT_BECAPTURE_DATA(&pstIn->astOwnerInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLUNDER_PLAYER_DATA(void *pHost, CNetData* poNetData)
{
	DT_PLUNDER_PLAYER_DATA *pstOut = (DT_PLUNDER_PLAYER_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMainHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRobotFunc))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveOwnerFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveOwnerFlag)
			break;
		if(-1 == DecodeDT_BECAPTURE_DATA(&pstOut->astOwnerInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK *pstIn = (PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreePlunderNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlunderGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUseItemGapLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlunderItemNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlunderItemID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlunderItemPrice))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClrCDGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPlunderPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_PLUNDER_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byPlunderPlayerNum)
			break;
		if(-1 == EncodeDT_PLUNDER_PLAYER_DATA(&pstIn->astPlunderPlayerInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK *pstOut = (PKT_CLIGS_OPEN_PLUNDER_RECOMMEND_PLAYER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreePlunderNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlunderGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUseItemGapLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlunderItemNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlunderItemID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlunderItemPrice))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClrCDGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPlunderPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_PLUNDER_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byPlunderPlayerNum)
			break;
		if(-1 == DecodeDT_PLUNDER_PLAYER_DATA(&pstOut->astPlunderPlayerInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ *pstIn = (PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ *pstOut = (PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK *pstIn = (PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPlunderPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_PLUNDER_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byPlunderPlayerNum)
			break;
		if(-1 == EncodeDT_PLUNDER_PLAYER_DATA(&pstIn->astPlunderPlayerInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK *pstOut = (PKT_CLIGS_REFRESH_PLUNDER_RECOMMEND_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPlunderPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_PLUNDER_ENEMY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byPlunderPlayerNum)
			break;
		if(-1 == DecodeDT_PLUNDER_PLAYER_DATA(&pstOut->astPlunderPlayerInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FREE_CAPTURE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_CAPTURE_REQ *pstIn = (PKT_CLIGS_FREE_CAPTURE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FREE_CAPTURE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_CAPTURE_REQ *pstOut = (PKT_CLIGS_FREE_CAPTURE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FREE_CAPTURE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_CAPTURE_ACK *pstIn = (PKT_CLIGS_FREE_CAPTURE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoinIncome))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScienceIncome))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FREE_CAPTURE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_CAPTURE_ACK *pstOut = (PKT_CLIGS_FREE_CAPTURE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoinIncome))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScienceIncome))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COLLECT_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_INCOME_REQ *pstIn = (PKT_CLIGS_COLLECT_INCOME_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwIncomeValue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COLLECT_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_INCOME_REQ *pstOut = (PKT_CLIGS_COLLECT_INCOME_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwIncomeValue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COLLECT_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_INCOME_ACK *pstIn = (PKT_CLIGS_COLLECT_INCOME_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwIncomeValue))
		return -1;

	if(-1 == EncodeDT_CAPTURE_WORK_DATA_CLI(&pstIn->stWorkInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHalved))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureReleaseFlag))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COLLECT_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_INCOME_ACK *pstOut = (PKT_CLIGS_COLLECT_INCOME_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwIncomeValue))
		return -1;

	if(-1 == DecodeDT_CAPTURE_WORK_DATA_CLI(&pstOut->stWorkInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHalved))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureReleaseFlag))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BLEED_CAPTURE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLEED_CAPTURE_REQ *pstIn = (PKT_CLIGS_BLEED_CAPTURE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BLEED_CAPTURE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLEED_CAPTURE_REQ *pstOut = (PKT_CLIGS_BLEED_CAPTURE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BLEED_CAPTURE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLEED_CAPTURE_ACK *pstIn = (PKT_CLIGS_BLEED_CAPTURE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIncomeType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwIncomeValue))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BLEED_CAPTURE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLEED_CAPTURE_ACK *pstOut = (PKT_CLIGS_BLEED_CAPTURE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIncomeType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwIncomeValue))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SET_WORK_TYPE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_WORK_TYPE_REQ *pstIn = (PKT_CLIGS_SET_WORK_TYPE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIncomeType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SET_WORK_TYPE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_WORK_TYPE_REQ *pstOut = (PKT_CLIGS_SET_WORK_TYPE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIncomeType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SET_WORK_TYPE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_WORK_TYPE_ACK *pstIn = (PKT_CLIGS_SET_WORK_TYPE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIncomeType))
		return -1;

	if(-1 == EncodeDT_CAPTURE_WORK_DATA_CLI(&pstIn->stWorkInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SET_WORK_TYPE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_WORK_TYPE_ACK *pstOut = (PKT_CLIGS_SET_WORK_TYPE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCapturePlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIncomeType))
		return -1;

	if(-1 == DecodeDT_CAPTURE_WORK_DATA_CLI(&pstOut->stWorkInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MONEY_TREE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_MONEY_TREE_DATA_CLI *pstIn = (DT_MONEY_TREE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCanRockNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipExtNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalCanRockNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRockNeedGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMoodValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRockBaseCoin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGetCoinRate))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMoodKeepTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMoodOverCountDown))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MONEY_TREE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_MONEY_TREE_DATA_CLI *pstOut = (DT_MONEY_TREE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCanRockNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipExtNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalCanRockNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRockNeedGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMoodValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRockBaseCoin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGetCoinRate))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMoodKeepTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMoodOverCountDown))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_MONEY_TREE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MONEY_TREE_REQ *pstIn = (PKT_CLIGS_OPEN_MONEY_TREE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_MONEY_TREE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MONEY_TREE_REQ *pstOut = (PKT_CLIGS_OPEN_MONEY_TREE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_MONEY_TREE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MONEY_TREE_ACK *pstIn = (PKT_CLIGS_OPEN_MONEY_TREE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_MONEY_TREE_DATA_CLI(&pstIn->stMoneyTreeInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGetCoinRate2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_MONEY_TREE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MONEY_TREE_ACK *pstOut = (PKT_CLIGS_OPEN_MONEY_TREE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_MONEY_TREE_DATA_CLI(&pstOut->stMoneyTreeInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGetCoinRate2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ROCK_MONEY_TREE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ROCK_MONEY_TREE_REQ *pstIn = (PKT_CLIGS_ROCK_MONEY_TREE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGuideFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ROCK_MONEY_TREE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ROCK_MONEY_TREE_REQ *pstOut = (PKT_CLIGS_ROCK_MONEY_TREE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGuideFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ROCK_MONEY_TREE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ROCK_MONEY_TREE_ACK *pstIn = (PKT_CLIGS_ROCK_MONEY_TREE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGuideFlag))
		return -1;

	if(-1 == EncodeDT_MONEY_TREE_DATA_CLI(&pstIn->stMoneyTreeInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGetCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerGold))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGetCoinRate2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ROCK_MONEY_TREE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ROCK_MONEY_TREE_ACK *pstOut = (PKT_CLIGS_ROCK_MONEY_TREE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGuideFlag))
		return -1;

	if(-1 == DecodeDT_MONEY_TREE_DATA_CLI(&pstOut->stMoneyTreeInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGetCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerGold))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGetCoinRate2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ *pstIn = (PKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ *pstOut = (PKT_CLIGS_GET_PLUNDER_BATTLELOG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK *pstIn = (PKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCaptureOwnerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byShowNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PLUNDER_BATTLELOG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byShowNum)
			break;
		if(-1 == EncodeDT_PLUNDER_BATTLELOG_DATA_CLI(&pstIn->astBattleLogInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK *pstOut = (PKT_CLIGS_GET_PLUNDER_BATTLELOG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCaptureOwnerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byShowNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PLUNDER_BATTLELOG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byShowNum)
			break;
		if(-1 == DecodeDT_PLUNDER_BATTLELOG_DATA_CLI(&pstOut->astBattleLogInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_GODWEAPON_ATTR_DATA(void *pHost, CNetData* poNetData)
{
	DT_GODWEAPON_ATTR_DATA *pstIn = (DT_GODWEAPON_ATTR_DATA*)pHost;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttr, poNetData))
		return -1;

	if(-1 == EncodeDT_HIDE_BATTLE_ATTRIBUTE(&pstIn->stHideBattleAttr, poNetData))
		return -1;

	if(-1 == EncodeDT_EXT_BATTLE_ATTRIBUTE(&pstIn->stExtBattleAttr, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GODWEAPON_ATTR_DATA(void *pHost, CNetData* poNetData)
{
	DT_GODWEAPON_ATTR_DATA *pstOut = (DT_GODWEAPON_ATTR_DATA*)pHost;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttr, poNetData))
		return -1;

	if(-1 == DecodeDT_HIDE_BATTLE_ATTRIBUTE(&pstOut->stHideBattleAttr, poNetData))
		return -1;

	if(-1 == DecodeDT_EXT_BATTLE_ATTRIBUTE(&pstOut->stExtBattleAttr, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GODWEAPON_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GODWEAPON_DATA_CLI *pstIn = (DT_GODWEAPON_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxQuality))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wQuality))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == EncodeDT_GODWEAPON_ATTR_DATA(&pstIn->stIncAttr, poNetData))
		return -1;

	if(-1 == EncodeDT_ATTR_INC_DATA(&pstIn->stNextLevelIncAttr, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wQualityRequireLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgrageScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwRecoverScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPerfectRecoverScience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUpgradeQualityNeedItemNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxLevelFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEncAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GODWEAPON_QUALITY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEncAttrNum)
			break;
		if(-1 == EncodeDT_ATTR_INC_DATA(&pstIn->astQualityUpgradeEncAttr[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GODWEAPON_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GODWEAPON_DATA_CLI *pstOut = (DT_GODWEAPON_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxQuality))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wQuality))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == DecodeDT_GODWEAPON_ATTR_DATA(&pstOut->stIncAttr, poNetData))
		return -1;

	if(-1 == DecodeDT_ATTR_INC_DATA(&pstOut->stNextLevelIncAttr, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wQualityRequireLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgrageScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwRecoverScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPerfectRecoverScience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUpgradeQualityNeedItemNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxLevelFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEncAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GODWEAPON_QUALITY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEncAttrNum)
			break;
		if(-1 == DecodeDT_ATTR_INC_DATA(&pstOut->astQualityUpgradeEncAttr[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GODWEAPON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GODWEAPON_REQ *pstIn = (PKT_CLIGS_OPEN_GODWEAPON_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GODWEAPON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GODWEAPON_REQ *pstOut = (PKT_CLIGS_OPEN_GODWEAPON_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GODWEAPON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GODWEAPON_ACK *pstIn = (PKT_CLIGS_OPEN_GODWEAPON_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUpgradeQualityItemNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeQualityItemPrice))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUpgradeQualityItemID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwActiveCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerScience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGodweaponNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wGodweaponNum)
			break;
		if(-1 == EncodeDT_GODWEAPON_DATA_CLI(&pstIn->astGodweaponLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byOpenNeedVipLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPerfectFreeGodweapon))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPerfectFreeGodweaponCost))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszExtContext, sizeof(pstIn->aszExtContext)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GODWEAPON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GODWEAPON_ACK *pstOut = (PKT_CLIGS_OPEN_GODWEAPON_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUpgradeQualityItemNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeQualityItemPrice))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUpgradeQualityItemID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwActiveCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerScience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGodweaponNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wGodweaponNum)
			break;
		if(-1 == DecodeDT_GODWEAPON_DATA_CLI(&pstOut->astGodweaponLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byOpenNeedVipLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPerfectFreeGodweapon))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPerfectFreeGodweaponCost))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszExtContext, sizeof(pstOut->aszExtContext)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_GODWEAPON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_GODWEAPON_REQ *pstIn = (PKT_CLIGS_UPGRADE_GODWEAPON_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wQuality))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_GODWEAPON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_GODWEAPON_REQ *pstOut = (PKT_CLIGS_UPGRADE_GODWEAPON_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wQuality))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_GODWEAPON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_GODWEAPON_ACK *pstIn = (PKT_CLIGS_UPGRADE_GODWEAPON_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerScience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUpgradeQualityItemNum))
		return -1;

	if(-1 == EncodeDT_GODWEAPON_DATA_CLI(&pstIn->stGodweaponInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_GODWEAPON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_GODWEAPON_ACK *pstOut = (PKT_CLIGS_UPGRADE_GODWEAPON_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerScience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUpgradeQualityItemNum))
		return -1;

	if(-1 == DecodeDT_GODWEAPON_DATA_CLI(&pstOut->stGodweaponInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FREE_GODWEAPON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_GODWEAPON_REQ *pstIn = (PKT_CLIGS_FREE_GODWEAPON_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUseGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FREE_GODWEAPON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_GODWEAPON_REQ *pstOut = (PKT_CLIGS_FREE_GODWEAPON_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUseGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FREE_GODWEAPON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_GODWEAPON_ACK *pstIn = (PKT_CLIGS_FREE_GODWEAPON_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerScience))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_GODWEAPON_DATA_CLI(&pstIn->stGodweaponInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FREE_GODWEAPON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FREE_GODWEAPON_ACK *pstOut = (PKT_CLIGS_FREE_GODWEAPON_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerScience))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_GODWEAPON_DATA_CLI(&pstOut->stGodweaponInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_AWAKEN_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_AWAKEN_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_STUDY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_STUDY_DATA_CLI *pstIn = (DT_STUDY_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byStudyColorKind))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyAttrKind))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStudyAttrValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStudyExp))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextLevelAttrValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeNeedExp))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_STUDY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_STUDY_DATA_CLI *pstOut = (DT_STUDY_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byStudyColorKind))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyAttrKind))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStudyAttrValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStudyExp))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextLevelAttrValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeNeedExp))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_AWAKEN_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_TAB_DATA *pstIn = (DT_AWAKEN_TAB_DATA*)pHost;

	if(-1 == EncodeDT_AWAKEN_BASE_DATA1(&pstIn->stBaseInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wMaxStudyLevel))
		return -1;

	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(-1 == poNetData->AddDword(pstIn->adwAwakenCoin[i]))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwAwakenGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTatalCallNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanCallNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_AWAKEN_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_TAB_DATA *pstOut = (DT_AWAKEN_TAB_DATA*)pHost;

	if(-1 == DecodeDT_AWAKEN_BASE_DATA1(&pstOut->stBaseInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelWord(pstOut->wMaxStudyLevel))
		return -1;

	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(-1 == poNetData->DelDword(pstOut->adwAwakenCoin[i]))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwAwakenGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTatalCallNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanCallNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_AWAKEN_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_AWAKEN_TAB_DATA(&pstIn->stAwakenInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_AWAKEN_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_AWAKEN_TAB_DATA(&pstOut->stAwakenInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AWAKEN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_REQ *pstIn = (PKT_CLIGS_AWAKEN_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byQuickFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AWAKEN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_REQ *pstOut = (PKT_CLIGS_AWAKEN_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byQuickFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_AWAKEN_GET_DATA(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_GET_DATA *pstIn = (DT_AWAKEN_GET_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwGetCoin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyBagIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAwakenLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_AWAKEN_GET_DATA(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_GET_DATA *pstOut = (DT_AWAKEN_GET_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwGetCoin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyBagIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAwakenLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AWAKEN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_ACK *pstIn = (PKT_CLIGS_AWAKEN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byQuickFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAwakenNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byAwakenNum)
			break;
		if(-1 == EncodeDT_AWAKEN_GET_DATA(&pstIn->astAwakenGetInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_AWAKEN_TAB_DATA(&pstIn->stAwakenTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AWAKEN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_ACK *pstOut = (PKT_CLIGS_AWAKEN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byQuickFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAwakenNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byAwakenNum)
			break;
		if(-1 == DecodeDT_AWAKEN_GET_DATA(&pstOut->astAwakenGetInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_AWAKEN_TAB_DATA(&pstOut->stAwakenTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_STUDY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_STUDY_DATA_CLI *pstIn = (DT_HERO_STUDY_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI(&pstIn->astStudyInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_STUDY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_STUDY_DATA_CLI *pstOut = (DT_HERO_STUDY_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI(&pstOut->astStudyInfo[i], poNetData))
				return -1;
		}

	return sizeof(*pstOut);
}

INT32 EncodeDT_DRESS_STUDY_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_DRESS_STUDY_TAB_DATA *pstIn = (DT_DRESS_STUDY_TAB_DATA*)pHost;

	INT32 i;
	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
	{
		if(-1 == poNetData->AddWord(pstIn->awStudyUnlockLevelInfo[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_STUDY_DATA_CLI(&pstIn->astHeroStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwStudyExp))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DRESS_STUDY_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_DRESS_STUDY_TAB_DATA *pstOut = (DT_DRESS_STUDY_TAB_DATA*)pHost;

	INT32 i;
		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
	{
		if(-1 == poNetData->DelWord(pstOut->awStudyUnlockLevelInfo[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_STUDY_DATA_CLI(&pstOut->astHeroStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelUint64(pstOut->qwStudyExp))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_DRESS_STUDY_TAB_DATA(&pstIn->stDressStudyTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_DRESS_STUDY_TAB_DATA(&pstOut->stDressStudyTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRESS_STUDY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_REQ *pstIn = (PKT_CLIGS_DRESS_STUDY_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroGridIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRESS_STUDY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_REQ *pstOut = (PKT_CLIGS_DRESS_STUDY_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroGridIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRESS_STUDY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_ACK *pstIn = (PKT_CLIGS_DRESS_STUDY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroGridIdx))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_HERO_STUDY_DATA_CLI(&pstIn->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRESS_STUDY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_ACK *pstOut = (PKT_CLIGS_DRESS_STUDY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroGridIdx))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_HERO_STUDY_DATA_CLI(&pstOut->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_TO_EXP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_REQ *pstIn = (PKT_CLIGS_STUDY_TO_EXP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAllFlag))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abySelectConvertColor[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_TO_EXP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_REQ *pstOut = (PKT_CLIGS_STUDY_TO_EXP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAllFlag))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abySelectConvertColor[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_TO_EXP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_ACK *pstIn = (PKT_CLIGS_STUDY_TO_EXP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abySelectConvertColor[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAllFlag))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGenStudyExp))
		return -1;

	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwCurStudyExp))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_TO_EXP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_ACK *pstOut = (PKT_CLIGS_STUDY_TO_EXP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abySelectConvertColor[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAllFlag))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGenStudyExp))
		return -1;

		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelUint64(pstOut->qwCurStudyExp))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_REQ *pstIn = (PKT_CLIGS_STUDY_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_REQ *pstOut = (PKT_CLIGS_STUDY_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_ACK *pstIn = (PKT_CLIGS_STUDY_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevel))
		return -1;

	if(-1 == EncodeDT_HERO_STUDY_DATA_CLI(&pstIn->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStudyExp))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_ACK *pstOut = (PKT_CLIGS_STUDY_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevel))
		return -1;

	if(-1 == DecodeDT_HERO_STUDY_DATA_CLI(&pstOut->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStudyExp))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RACE_BATTLELOG_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RACE_BATTLELOG_NTF *pstIn = (PKT_CLIGS_RACE_BATTLELOG_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byUnreadNum))
		return -1;

	if(-1 == EncodeDT_RACE_BATTLELOG_DATA_CLI(&pstIn->stBattleLog, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwPlayerScience))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RACE_BATTLELOG_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RACE_BATTLELOG_NTF *pstOut = (PKT_CLIGS_RACE_BATTLELOG_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byUnreadNum))
		return -1;

	if(-1 == DecodeDT_RACE_BATTLELOG_DATA_CLI(&pstOut->stBattleLog, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwPlayerScience))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_PHYSTRENGTH_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_PHYSTRENGTH_REQ *pstIn = (PKT_CLIGS_BUY_PHYSTRENGTH_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_PHYSTRENGTH_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_PHYSTRENGTH_REQ *pstOut = (PKT_CLIGS_BUY_PHYSTRENGTH_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_PHYSTRENGTH_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_PHYSTRENGTH_ACK *pstIn = (PKT_CLIGS_BUY_PHYSTRENGTH_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurPhyStrength))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanBuyNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipExtNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextBuyGold))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stCurPhyStrengthInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_PHYSTRENGTH_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_PHYSTRENGTH_ACK *pstOut = (PKT_CLIGS_BUY_PHYSTRENGTH_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurPhyStrength))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanBuyNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipExtNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextBuyGold))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stCurPhyStrengthInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_PLUNDER_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_PLUNDER_CD_REQ *pstIn = (PKT_CLIGS_CLR_PLUNDER_CD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_PLUNDER_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_PLUNDER_CD_REQ *pstOut = (PKT_CLIGS_CLR_PLUNDER_CD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_PLUNDER_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_PLUNDER_CD_ACK *pstIn = (PKT_CLIGS_CLR_PLUNDER_CD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_PLUNDER_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_PLUNDER_CD_ACK *pstOut = (PKT_CLIGS_CLR_PLUNDER_CD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_MAINTOWN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MAINTOWN_REQ *pstIn = (PKT_CLIGS_OPEN_MAINTOWN_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_MAINTOWN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MAINTOWN_REQ *pstOut = (PKT_CLIGS_OPEN_MAINTOWN_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_MAINTOWN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MAINTOWN_ACK *pstIn = (PKT_CLIGS_OPEN_MAINTOWN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanCrowFlag))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCrownCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCrownGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCrownJingJie))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLevyCountDown))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLevyCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLevyJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevyNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTotalLevyNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_MAINTOWN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MAINTOWN_ACK *pstOut = (PKT_CLIGS_OPEN_MAINTOWN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanCrowFlag))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCrownCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCrownGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCrownJingJie))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLevyCountDown))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLevyCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLevyJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevyNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTotalLevyNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_MAINTOWN_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_MAINTOWN_INCOME_REQ *pstIn = (PKT_CLIGS_RECV_MAINTOWN_INCOME_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_MAINTOWN_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_MAINTOWN_INCOME_REQ *pstOut = (PKT_CLIGS_RECV_MAINTOWN_INCOME_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_MAINTOWN_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_MAINTOWN_INCOME_ACK *pstIn = (PKT_CLIGS_RECV_MAINTOWN_INCOME_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanCrowFlag))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_MAINTOWN_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_MAINTOWN_INCOME_ACK *pstOut = (PKT_CLIGS_RECV_MAINTOWN_INCOME_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanCrowFlag))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ *pstIn = (PKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ *pstOut = (PKT_CLIGS_LEVY_MAINTOWN_INCOME_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK *pstIn = (PKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLevyCountDown))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevyNum))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK *pstOut = (PKT_CLIGS_LEVY_MAINTOWN_INCOME_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLevyCountDown))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevyNum))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRIVE_AWAY_OWNER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRIVE_AWAY_OWNER_REQ *pstIn = (PKT_CLIGS_DRIVE_AWAY_OWNER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRIVE_AWAY_OWNER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRIVE_AWAY_OWNER_REQ *pstOut = (PKT_CLIGS_DRIVE_AWAY_OWNER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRIVE_AWAY_OWNER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRIVE_AWAY_OWNER_ACK *pstIn = (PKT_CLIGS_DRIVE_AWAY_OWNER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDriveAwayGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRIVE_AWAY_OWNER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRIVE_AWAY_OWNER_ACK *pstOut = (PKT_CLIGS_DRIVE_AWAY_OWNER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDriveAwayGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COMPOSE_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_EQUIP_REQ *pstIn = (PKT_CLIGS_COMPOSE_EQUIP_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipItemID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldComposeFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COMPOSE_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_EQUIP_REQ *pstOut = (PKT_CLIGS_COMPOSE_EQUIP_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipItemID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldComposeFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COMPOSE_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_EQUIP_ACK *pstIn = (PKT_CLIGS_COMPOSE_EQUIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSrcEquipItemID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSrcEquipIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySrcItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ITEM_MAKER_NEED_NUM; i++)
	{
		if(i >= (INT32)pstIn->bySrcItemNum)
			break;
		if(-1 == EncodeDT_NEED_ITEM_DATA(&pstIn->astStrItemInfoList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->stEquipInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstIn->stEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COMPOSE_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_EQUIP_ACK *pstOut = (PKT_CLIGS_COMPOSE_EQUIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSrcEquipItemID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSrcEquipIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySrcItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ITEM_MAKER_NEED_NUM; i++)
	{
		if(i >= (INT32)pstOut->bySrcItemNum)
			break;
		if(-1 == DecodeDT_NEED_ITEM_DATA(&pstOut->astStrItemInfoList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->stEquipInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstOut->stEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACTIVITY_TIME_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACTIVITY_TIME_DATA *pstIn = (DT_ACTIVITY_TIME_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byStartHour))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStartMin))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKeepTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEndCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAheadTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveFinishFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACTIVITY_TIME_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACTIVITY_TIME_DATA *pstOut = (DT_ACTIVITY_TIME_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byStartHour))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStartMin))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKeepTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEndCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAheadTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveFinishFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACTIVITY_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACTIVITY_BASE_DATA *pstIn = (DT_ACTIVITY_BASE_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byActivityTimeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_TIME_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityTimeNum)
			break;
		if(-1 == EncodeDT_ACTIVITY_TIME_DATA(&pstIn->astActivityTimeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byNotity))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACTIVITY_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_ACTIVITY_BASE_DATA *pstOut = (DT_ACTIVITY_BASE_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byActivityTimeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_TIME_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityTimeNum)
			break;
		if(-1 == DecodeDT_ACTIVITY_TIME_DATA(&pstOut->astActivityTimeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byNotity))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PHYSTRENGTH_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PHYSTRENGTH_REQ *pstIn = (PKT_CLIGS_OPEN_PHYSTRENGTH_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PHYSTRENGTH_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PHYSTRENGTH_REQ *pstOut = (PKT_CLIGS_OPEN_PHYSTRENGTH_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PHYSTRENGTH_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PHYSTRENGTH_ACK *pstIn = (PKT_CLIGS_OPEN_PHYSTRENGTH_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStrength))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTotalBuyTimes))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBuyTimes))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipExtNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byActivityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityNum)
			break;
		if(-1 == EncodeDT_ACTIVITY_BASE_DATA(&pstIn->astActivityInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PHYSTRENGTH_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PHYSTRENGTH_ACK *pstOut = (PKT_CLIGS_OPEN_PHYSTRENGTH_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStrength))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTotalBuyTimes))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBuyTimes))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipExtNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byActivityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityNum)
			break;
		if(-1 == DecodeDT_ACTIVITY_BASE_DATA(&pstOut->astActivityInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_LEFT_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_LEFT_INCOME_REQ *pstIn = (PKT_CLIGS_RECV_LEFT_INCOME_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGridIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_LEFT_INCOME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_LEFT_INCOME_REQ *pstOut = (PKT_CLIGS_RECV_LEFT_INCOME_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGridIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_LEFT_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_LEFT_INCOME_ACK *pstIn = (PKT_CLIGS_RECV_LEFT_INCOME_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIncomeType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwIncomeValue))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_LEFT_INCOME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_LEFT_INCOME_ACK *pstOut = (PKT_CLIGS_RECV_LEFT_INCOME_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIncomeType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwIncomeValue))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SMITHY_BUY_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SMITHY_BUY_EQUIP_REQ *pstIn = (PKT_CLIGS_SMITHY_BUY_EQUIP_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipPos))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SMITHY_BUY_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SMITHY_BUY_EQUIP_REQ *pstOut = (PKT_CLIGS_SMITHY_BUY_EQUIP_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipPos))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SMITHY_BUY_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SMITHY_BUY_EQUIP_ACK *pstIn = (PKT_CLIGS_SMITHY_BUY_EQUIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->stEquipInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstIn->stEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStrengthen10Coin))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SMITHY_BUY_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SMITHY_BUY_EQUIP_ACK *pstOut = (PKT_CLIGS_SMITHY_BUY_EQUIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->stEquipInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstOut->stEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStrengthen10Coin))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_STRENGTHEN_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_STRENGTHEN_CD_REQ *pstIn = (PKT_CLIGS_CLR_STRENGTHEN_CD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_STRENGTHEN_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_STRENGTHEN_CD_REQ *pstOut = (PKT_CLIGS_CLR_STRENGTHEN_CD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_STRENGTHEN_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_STRENGTHEN_CD_ACK *pstIn = (PKT_CLIGS_CLR_STRENGTHEN_CD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_STRENGTHEN_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_STRENGTHEN_CD_ACK *pstOut = (PKT_CLIGS_CLR_STRENGTHEN_CD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CROP_SEED_INFO_DATA(void *pHost, CNetData* poNetData)
{
	DT_CROP_SEED_INFO_DATA *pstIn = (DT_CROP_SEED_INFO_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCropKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCropSeedNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCropType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCropTime))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCropValue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCropGainKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wComposeCount))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wComposeKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CROP_SEED_INFO_DATA(void *pHost, CNetData* poNetData)
{
	DT_CROP_SEED_INFO_DATA *pstOut = (DT_CROP_SEED_INFO_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCropKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCropSeedNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCropType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCropTime))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCropValue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCropGainKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wComposeCount))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wComposeKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CROP_FIELD_INFO_DATA(void *pHost, CNetData* poNetData)
{
	DT_CROP_FIELD_INFO_DATA *pstIn = (DT_CROP_FIELD_INFO_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byOpen))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CROP_FIELD_INFO_DATA(void *pHost, CNetData* poNetData)
{
	DT_CROP_FIELD_INFO_DATA *pstOut = (DT_CROP_FIELD_INFO_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byOpen))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CROP_MORE_INFO_DATA(void *pHost, CNetData* poNetData)
{
	DT_CROP_MORE_INFO_DATA *pstIn = (DT_CROP_MORE_INFO_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCropKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCropTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCropType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCropValue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCropGainKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CROP_MORE_INFO_DATA(void *pHost, CNetData* poNetData)
{
	DT_CROP_MORE_INFO_DATA *pstOut = (DT_CROP_MORE_INFO_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCropKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCropTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCropType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCropValue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCropGainKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_REQ *pstIn = (PKT_CLIGS_OPEN_CROP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_REQ *pstOut = (PKT_CLIGS_OPEN_CROP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_ACK *pstIn = (PKT_CLIGS_OPEN_CROP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCropSeedNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CROP_SEED_NUM; i++)
	{
		if(i >= (INT32)pstIn->byCropSeedNum)
			break;
		if(-1 == EncodeDT_CROP_SEED_INFO_DATA(&pstIn->astCropSeedInfoList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_CROP_NUM; i++)
	{
		if(-1 == EncodeDT_CROP_FIELD_INFO_DATA(&pstIn->astCropFieldInfoList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_CROP_NUM; i++)
	{
		if(-1 == EncodeDT_CROP_MORE_INFO_DATA(&pstIn->astCropMoreInfoList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wNoCDGoldPerMin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagFullFlag))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingJie))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_ACK *pstOut = (PKT_CLIGS_OPEN_CROP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCropSeedNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CROP_SEED_NUM; i++)
	{
		if(i >= (INT32)pstOut->byCropSeedNum)
			break;
		if(-1 == DecodeDT_CROP_SEED_INFO_DATA(&pstOut->astCropSeedInfoList[i], poNetData))
			return -1;
	}

		for(i = 0; i < MAX_CROP_NUM; i++)
		{
			if(-1 == DecodeDT_CROP_FIELD_INFO_DATA(&pstOut->astCropFieldInfoList[i], poNetData))
				return -1;
		}

		for(i = 0; i < MAX_CROP_NUM; i++)
		{
			if(-1 == DecodeDT_CROP_MORE_INFO_DATA(&pstOut->astCropMoreInfoList[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelWord(pstOut->wNoCDGoldPerMin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagFullFlag))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingJie))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CROP_FIELD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_FIELD_REQ *pstIn = (PKT_CLIGS_OPEN_CROP_FIELD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CROP_FIELD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_FIELD_REQ *pstOut = (PKT_CLIGS_OPEN_CROP_FIELD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CROP_FIELD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_FIELD_ACK *pstIn = (PKT_CLIGS_OPEN_CROP_FIELD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == EncodeDT_CROP_FIELD_INFO_DATA(&pstIn->stCropFieldInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CROP_FIELD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_FIELD_ACK *pstOut = (PKT_CLIGS_OPEN_CROP_FIELD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == DecodeDT_CROP_FIELD_INFO_DATA(&pstOut->stCropFieldInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROP_REQ *pstIn = (PKT_CLIGS_CROP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCropKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROP_REQ *pstOut = (PKT_CLIGS_CROP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCropKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROP_ACK *pstIn = (PKT_CLIGS_CROP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	if(-1 == EncodeDT_CROP_MORE_INFO_DATA(&pstIn->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CROP_FIELD_INFO_DATA(&pstIn->stCropFieldInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROP_ACK *pstOut = (PKT_CLIGS_CROP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	if(-1 == DecodeDT_CROP_MORE_INFO_DATA(&pstOut->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CROP_FIELD_INFO_DATA(&pstOut->stCropFieldInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GAIN_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GAIN_CROP_REQ *pstIn = (PKT_CLIGS_GAIN_CROP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GAIN_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GAIN_CROP_REQ *pstOut = (PKT_CLIGS_GAIN_CROP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GAIN_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GAIN_CROP_ACK *pstIn = (PKT_CLIGS_GAIN_CROP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCropType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCropValue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCropKindID))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CROP_MORE_INFO_DATA(&pstIn->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CROP_FIELD_INFO_DATA(&pstIn->stCropFieldInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GAIN_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GAIN_CROP_ACK *pstOut = (PKT_CLIGS_GAIN_CROP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCropType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCropValue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCropKindID))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CROP_MORE_INFO_DATA(&pstOut->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CROP_FIELD_INFO_DATA(&pstOut->stCropFieldInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CROP_REQ *pstIn = (PKT_CLIGS_CLR_CROP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_CROP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CROP_REQ *pstOut = (PKT_CLIGS_CLR_CROP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CROP_ACK *pstIn = (PKT_CLIGS_CLR_CROP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == EncodeDT_CROP_MORE_INFO_DATA(&pstIn->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_CROP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CROP_ACK *pstOut = (PKT_CLIGS_CLR_CROP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == DecodeDT_CROP_MORE_INFO_DATA(&pstOut->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EXPERIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_REQ *pstIn = (PKT_CLIGS_OPEN_EXPERIENCE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EXPERIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_REQ *pstOut = (PKT_CLIGS_OPEN_EXPERIENCE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EXPERIENCE_DRUG_DATA(void *pHost, CNetData* poNetData)
{
	DT_EXPERIENCE_DRUG_DATA *pstIn = (DT_EXPERIENCE_DRUG_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wExperienceDrugID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBagNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EXPERIENCE_DRUG_DATA(void *pHost, CNetData* poNetData)
{
	DT_EXPERIENCE_DRUG_DATA *pstOut = (DT_EXPERIENCE_DRUG_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wExperienceDrugID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBagNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GOLD_EXPERIENCE_DRUG_DATA(void *pHost, CNetData* poNetData)
{
	DT_GOLD_EXPERIENCE_DRUG_DATA *pstIn = (DT_GOLD_EXPERIENCE_DRUG_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wExperienceDrugID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRemainNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOpenVipLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNextVipLevelMaxNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GOLD_EXPERIENCE_DRUG_DATA(void *pHost, CNetData* poNetData)
{
	DT_GOLD_EXPERIENCE_DRUG_DATA *pstOut = (DT_GOLD_EXPERIENCE_DRUG_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wExperienceDrugID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRemainNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOpenVipLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNextVipLevelMaxNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EXPERIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_ACK *pstIn = (PKT_CLIGS_OPEN_EXPERIENCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeExperience))
		return -1;

	INT32 i;
	for(i = 0; i < 3; i++)
	{
		if(-1 == EncodeDT_EXPERIENCE_DRUG_DATA(&pstIn->astExperienceDrugDataList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_GOLD_EXPERIENCE_DRUG_DATA(&pstIn->stGoldExperienceDrugData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EXPERIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_ACK *pstOut = (PKT_CLIGS_OPEN_EXPERIENCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeExperience))
		return -1;

	INT32 i;
		for(i = 0; i < 3; i++)
		{
			if(-1 == DecodeDT_EXPERIENCE_DRUG_DATA(&pstOut->astExperienceDrugDataList[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_GOLD_EXPERIENCE_DRUG_DATA(&pstOut->stGoldExperienceDrugData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_USER_EXPERIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_USER_EXPERIENCE_REQ *pstIn = (PKT_CLIGS_USER_EXPERIENCE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wExperienceDrugID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRemainGoldExperienceDrugCnt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_USER_EXPERIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_USER_EXPERIENCE_REQ *pstOut = (PKT_CLIGS_USER_EXPERIENCE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wExperienceDrugID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRemainGoldExperienceDrugCnt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_USER_EXPERIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_USER_EXPERIENCE_ACK *pstIn = (PKT_CLIGS_USER_EXPERIENCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_EXPERIENCE_DRUG_DATA(&pstIn->stExperienceDrugData, poNetData))
		return -1;

	if(-1 == EncodeDT_GOLD_EXPERIENCE_DRUG_DATA(&pstIn->stGoldExperienceDrugData, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerChangeData, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stHeroBaseDataCli, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_USER_EXPERIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_USER_EXPERIENCE_ACK *pstOut = (PKT_CLIGS_USER_EXPERIENCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_EXPERIENCE_DRUG_DATA(&pstOut->stExperienceDrugData, poNetData))
		return -1;

	if(-1 == DecodeDT_GOLD_EXPERIENCE_DRUG_DATA(&pstOut->stGoldExperienceDrugData, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerChangeData, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stHeroBaseDataCli, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SCIENCE_BUILD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SCIENCE_BUILD_REQ *pstIn = (PKT_CLIGS_OPEN_SCIENCE_BUILD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SCIENCE_BUILD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SCIENCE_BUILD_REQ *pstOut = (PKT_CLIGS_OPEN_SCIENCE_BUILD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SCIENCE_ALREADY_OPEN_DATA(void *pHost, CNetData* poNetData)
{
	DT_SCIENCE_ALREADY_OPEN_DATA *pstIn = (DT_SCIENCE_ALREADY_OPEN_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKind))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostStory))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNeedPlayerLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SCIENCE_ALREADY_OPEN_DATA(void *pHost, CNetData* poNetData)
{
	DT_SCIENCE_ALREADY_OPEN_DATA *pstOut = (DT_SCIENCE_ALREADY_OPEN_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKind))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostStory))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNeedPlayerLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SCIENCE_WILL_OPEN_DATA(void *pHost, CNetData* poNetData)
{
	DT_SCIENCE_WILL_OPEN_DATA *pstIn = (DT_SCIENCE_WILL_OPEN_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKind))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOpenLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLv1Value))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostStory))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SCIENCE_WILL_OPEN_DATA(void *pHost, CNetData* poNetData)
{
	DT_SCIENCE_WILL_OPEN_DATA *pstOut = (DT_SCIENCE_WILL_OPEN_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKind))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOpenLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLv1Value))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostStory))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SCIENCE_BUILD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SCIENCE_BUILD_ACK *pstIn = (PKT_CLIGS_OPEN_SCIENCE_BUILD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAlreadyOpenScienceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SCIENCE_KIND_NUM; i++)
	{
		if(i >= (INT32)pstIn->byAlreadyOpenScienceNum)
			break;
		if(-1 == EncodeDT_SCIENCE_ALREADY_OPEN_DATA(&pstIn->astAlreadyOpenScienceList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byWillOpenScienceNum))
		return -1;

	for(i = 0; i < MAX_SCIENCE_KIND_NUM; i++)
	{
		if(i >= (INT32)pstIn->byWillOpenScienceNum)
			break;
		if(-1 == EncodeDT_SCIENCE_WILL_OPEN_DATA(&pstIn->astWillOpenScienceList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SCIENCE_BUILD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SCIENCE_BUILD_ACK *pstOut = (PKT_CLIGS_OPEN_SCIENCE_BUILD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAlreadyOpenScienceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SCIENCE_KIND_NUM; i++)
	{
		if(i >= (INT32)pstOut->byAlreadyOpenScienceNum)
			break;
		if(-1 == DecodeDT_SCIENCE_ALREADY_OPEN_DATA(&pstOut->astAlreadyOpenScienceList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byWillOpenScienceNum))
		return -1;

	for(i = 0; i < MAX_SCIENCE_KIND_NUM; i++)
	{
		if(i >= (INT32)pstOut->byWillOpenScienceNum)
			break;
		if(-1 == DecodeDT_SCIENCE_WILL_OPEN_DATA(&pstOut->astWillOpenScienceList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPDATE_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_SCIENCE_REQ *pstIn = (PKT_CLIGS_UPDATE_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCurLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byKind))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPDATE_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_SCIENCE_REQ *pstOut = (PKT_CLIGS_UPDATE_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCurLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byKind))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPDATE_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_SCIENCE_ACK *pstIn = (PKT_CLIGS_UPDATE_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrorCode))
		return -1;

	if(-1 == EncodeDT_SCIENCE_ALREADY_OPEN_DATA(&pstIn->stUpdatedData, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPower, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPDATE_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_SCIENCE_ACK *pstOut = (PKT_CLIGS_UPDATE_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrorCode))
		return -1;

	if(-1 == DecodeDT_SCIENCE_ALREADY_OPEN_DATA(&pstOut->stUpdatedData, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPower, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_MELT_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MELT_EQUIP_REQ *pstIn = (PKT_CLIGS_OPEN_MELT_EQUIP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_MELT_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MELT_EQUIP_REQ *pstOut = (PKT_CLIGS_OPEN_MELT_EQUIP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_MELT_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MELT_EQUIP_ACK *pstIn = (PKT_CLIGS_OPEN_MELT_EQUIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrorCode))
		return -1;

	if(-1 == EncodeDT_EQUIP_MELT_DATA_LST_CLI(&pstIn->stEquipInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_GOOD_MELT_DATA_LST_CLI(&pstIn->stGoodInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_MELT_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MELT_EQUIP_ACK *pstOut = (PKT_CLIGS_OPEN_MELT_EQUIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrorCode))
		return -1;

	if(-1 == DecodeDT_EQUIP_MELT_DATA_LST_CLI(&pstOut->stEquipInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_GOOD_MELT_DATA_LST_CLI(&pstOut->stGoodInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MELT_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_MELT_EQUIP_DATA *pstIn = (DT_MELT_EQUIP_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MELT_EQUIP_DATA(void *pHost, CNetData* poNetData)
{
	DT_MELT_EQUIP_DATA *pstOut = (DT_MELT_EQUIP_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MELT_GOOD_DATA(void *pHost, CNetData* poNetData)
{
	DT_MELT_GOOD_DATA *pstIn = (DT_MELT_GOOD_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MELT_GOOD_DATA(void *pHost, CNetData* poNetData)
{
	DT_MELT_GOOD_DATA *pstOut = (DT_MELT_GOOD_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MELT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MELT_REQ *pstIn = (PKT_CLIGS_MELT_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_MELT_EQUIP_DATA(&pstIn->astMeltEquipDataList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoodNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wGoodNum)
			break;
		if(-1 == EncodeDT_MELT_GOOD_DATA(&pstIn->astMeltGoodDataList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MELT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MELT_REQ *pstOut = (PKT_CLIGS_MELT_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_MELT_EQUIP_DATA(&pstOut->astMeltEquipDataList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoodNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wGoodNum)
			break;
		if(-1 == DecodeDT_MELT_GOOD_DATA(&pstOut->astMeltGoodDataList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MELT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MELT_ACK *pstIn = (PKT_CLIGS_MELT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrorCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == EncodeDT_EQUIP_MELT_DATA_LST_CLI(&pstIn->stEquipInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_GOOD_MELT_DATA_LST_CLI(&pstIn->stGoodInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MELT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MELT_ACK *pstOut = (PKT_CLIGS_MELT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrorCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == DecodeDT_EQUIP_MELT_DATA_LST_CLI(&pstOut->stEquipInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_GOOD_MELT_DATA_LST_CLI(&pstOut->stGoodInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ *pstIn = (PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAttrKind))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ *pstOut = (PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAttrKind))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_UPDATE_ATTR_DATA(void *pHost, CNetData* poNetData)
{
	DT_UPDATE_ATTR_DATA *pstIn = (DT_UPDATE_ATTR_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byAttrKind))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurCount))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalCount))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurLevelValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextLevelValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostItemNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoinNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwItemID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwItemNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_UPDATE_ATTR_DATA(void *pHost, CNetData* poNetData)
{
	DT_UPDATE_ATTR_DATA *pstOut = (DT_UPDATE_ATTR_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byAttrKind))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurCount))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalCount))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurLevelValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextLevelValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostItemNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoinNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwItemID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwItemNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK *pstIn = (PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrorCode))
		return -1;

	if(-1 == EncodeDT_UPDATE_ATTR_DATA(&pstIn->stUpdateAttr, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK *pstOut = (PKT_CLIGS_OPEN_UPDATE_ATTR_PANNEL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrorCode))
		return -1;

	if(-1 == DecodeDT_UPDATE_ATTR_DATA(&pstOut->stUpdateAttr, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPDATE_ATTR_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_ATTR_REQ *pstIn = (PKT_CLIGS_UPDATE_ATTR_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurCount))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAttrType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUpdateType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPDATE_ATTR_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_ATTR_REQ *pstOut = (PKT_CLIGS_UPDATE_ATTR_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurCount))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAttrType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUpdateType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_UPDATED_ATTR_BATTLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_UPDATED_ATTR_BATTLE_DATA *pstIn = (DT_UPDATED_ATTR_BATTLE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwOldTotalPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSelfOldPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSelfPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHPValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAttackValue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_UPDATED_ATTR_BATTLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_UPDATED_ATTR_BATTLE_DATA *pstOut = (DT_UPDATED_ATTR_BATTLE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwOldTotalPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSelfOldPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSelfPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHPValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAttackValue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPDATE_ATTR_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_ATTR_ACK *pstIn = (PKT_CLIGS_UPDATE_ATTR_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrorCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == EncodeDT_UPDATE_ATTR_DATA(&pstIn->stAttrRet, poNetData))
		return -1;

	if(-1 == EncodeDT_UPDATED_ATTR_BATTLE_DATA(&pstIn->stBattleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPDATE_ATTR_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATE_ATTR_ACK *pstOut = (PKT_CLIGS_UPDATE_ATTR_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrorCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == DecodeDT_UPDATE_ATTR_DATA(&pstOut->stAttrRet, poNetData))
		return -1;

	if(-1 == DecodeDT_UPDATED_ATTR_BATTLE_DATA(&pstOut->stBattleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COMPOSE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_REQ *pstIn = (PKT_CLIGS_COMPOSE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byComposeFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COMPOSE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_REQ *pstOut = (PKT_CLIGS_COMPOSE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byComposeFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COMPOSE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_ACK *pstIn = (PKT_CLIGS_COMPOSE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->stGoodsBagItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI3(&pstIn->stGoodsBagItemInfo2, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_NUM_DATA_LIST_CLI(&pstIn->stBagItemNumInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COMPOSE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMPOSE_ACK *pstOut = (PKT_CLIGS_COMPOSE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->stGoodsBagItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI3(&pstOut->stGoodsBagItemInfo2, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_NUM_DATA_LIST_CLI(&pstOut->stBagItemNumInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REFRESH_ELITE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_ELITE_REQ *pstIn = (PKT_CLIGS_REFRESH_ELITE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REFRESH_ELITE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_ELITE_REQ *pstOut = (PKT_CLIGS_REFRESH_ELITE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REFRESH_ELITE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_ELITE_ACK *pstIn = (PKT_CLIGS_REFRESH_ELITE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REFRESH_ELITE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_ELITE_ACK *pstOut = (PKT_CLIGS_REFRESH_ELITE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ONHOOK_ELITE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_ELITE_REQ *pstIn = (PKT_CLIGS_ONHOOK_ELITE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ONHOOK_ELITE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_ELITE_REQ *pstOut = (PKT_CLIGS_ONHOOK_ELITE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ONHOOK_ELITE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_ELITE_ACK *pstIn = (PKT_CLIGS_ONHOOK_ELITE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ONHOOK_ELITE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONHOOK_ELITE_ACK *pstOut = (PKT_CLIGS_ONHOOK_ELITE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ITEM_REQ *pstIn = (PKT_CLIGS_GET_ITEM_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ITEM_REQ *pstOut = (PKT_CLIGS_GET_ITEM_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ITEM_ACK *pstIn = (PKT_CLIGS_GET_ITEM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wItemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wItemNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byshop))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTab))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stBurstInstance, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ITEM_ACK *pstOut = (PKT_CLIGS_GET_ITEM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wItemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wItemNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byshop))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTab))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stBurstInstance, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ORDER_ID_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ORDER_ID_REQ *pstIn = (PKT_CLIGS_GET_ORDER_ID_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ORDER_ID_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ORDER_ID_REQ *pstOut = (PKT_CLIGS_GET_ORDER_ID_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ORDER_ID_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ORDER_ID_ACK *pstIn = (PKT_CLIGS_GET_ORDER_ID_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszOrderID, sizeof(pstIn->aszOrderID)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ORDER_ID_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ORDER_ID_ACK *pstOut = (PKT_CLIGS_GET_ORDER_ID_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszOrderID, sizeof(pstOut->aszOrderID)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXCHANGE_RESULT(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_RESULT *pstIn = (PKT_CLIGS_EXCHANGE_RESULT*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExchangeGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVipLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalExchangeGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXCHANGE_RESULT(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_RESULT *pstOut = (PKT_CLIGS_EXCHANGE_RESULT*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExchangeGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVipLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalExchangeGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ *pstIn = (PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ*)pHost;

	if(-1 == poNetData->AddString(pstIn->szTransactionID, sizeof(pstIn->szTransactionID)))
		return -1;

	if(-1 == poNetData->AddString(pstIn->szReceiptData, sizeof(pstIn->szReceiptData)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ *pstOut = (PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_REQ*)pHost;

	if(-1 == poNetData->DelString(pstOut->szTransactionID, sizeof(pstOut->szTransactionID)))
		return -1;

	if(-1 == poNetData->DelString(pstOut->szReceiptData, sizeof(pstOut->szReceiptData)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK *pstIn = (PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExchangeGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVipLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalExchangeGold))
		return -1;

	if(-1 == poNetData->AddString(pstIn->szTransactionID, sizeof(pstIn->szTransactionID)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK *pstOut = (PKT_CLIGS_CHECK_APPSTORE_ORDER_ID_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExchangeGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVipLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalExchangeGold))
		return -1;

	if(-1 == poNetData->DelString(pstOut->szTransactionID, sizeof(pstOut->szTransactionID)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEED_COMPOSE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEED_COMPOSE_REQ *pstIn = (PKT_CLIGS_SEED_COMPOSE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEED_COMPOSE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEED_COMPOSE_REQ *pstOut = (PKT_CLIGS_SEED_COMPOSE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEED_COMPOSE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEED_COMPOSE_ACK *pstIn = (PKT_CLIGS_SEED_COMPOSE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCropSeedNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CROP_SEED_NUM; i++)
	{
		if(i >= (INT32)pstIn->byCropSeedNum)
			break;
		if(-1 == EncodeDT_CROP_SEED_INFO_DATA(&pstIn->astCropSeedInfoList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEED_COMPOSE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEED_COMPOSE_ACK *pstOut = (PKT_CLIGS_SEED_COMPOSE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCropSeedNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CROP_SEED_NUM; i++)
	{
		if(i >= (INT32)pstOut->byCropSeedNum)
			break;
		if(-1 == DecodeDT_CROP_SEED_INFO_DATA(&pstOut->astCropSeedInfoList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeCHAT_DATA(void *pHost, CNetData* poNetData)
{
	CHAT_DATA *pstIn = (CHAT_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwSerialNumber))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszUserName, sizeof(pstIn->aszUserName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byChatType))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwChatTime))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwChatLen))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_CONTENT_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwChatLen)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyChatContent[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeCHAT_DATA(void *pHost, CNetData* poNetData)
{
	CHAT_DATA *pstOut = (CHAT_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwSerialNumber))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszUserName, sizeof(pstOut->aszUserName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byChatType))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwChatTime))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwChatLen))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_CONTENT_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwChatLen)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyChatContent[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CHAT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CHAT_REQ *pstIn = (PKT_CLIGS_OPEN_CHAT_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwSerialNumber))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CHAT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CHAT_REQ *pstOut = (PKT_CLIGS_OPEN_CHAT_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwSerialNumber))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CHAT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CHAT_ACK *pstIn = (PKT_CLIGS_OPEN_CHAT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byChatNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstIn->byChatNum)
			break;
		if(-1 == EncodeCHAT_DATA(&pstIn->astChatData[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddTString(pstIn->aszErrInfo, sizeof(pstIn->aszErrInfo)))
		return -1;

	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstIn->byChatNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyVipLevel[i]))
			return -1;
	}

	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstIn->byChatNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyFactionIconIDList[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CHAT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CHAT_ACK *pstOut = (PKT_CLIGS_OPEN_CHAT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byChatNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstOut->byChatNum)
			break;
		if(-1 == DecodeCHAT_DATA(&pstOut->astChatData[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelTString(pstOut->aszErrInfo, sizeof(pstOut->aszErrInfo)))
		return -1;

	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstOut->byChatNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyVipLevel[i]))
			return -1;
	}

	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstOut->byChatNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyFactionIconIDList[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHAT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHAT_REQ *pstIn = (PKT_CLIGS_CHAT_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byChatType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwChatLen))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_CONTENT_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwChatLen)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyChatContent[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHAT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHAT_REQ *pstOut = (PKT_CLIGS_CHAT_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byChatType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwChatLen))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_CONTENT_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwChatLen)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyChatContent[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHAT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHAT_ACK *pstIn = (PKT_CLIGS_CHAT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeCHAT_DATA(&pstIn->stChatData, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszErrInfo, sizeof(pstIn->aszErrInfo)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVipLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFactionIconID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHAT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHAT_ACK *pstOut = (PKT_CLIGS_CHAT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeCHAT_DATA(&pstOut->stChatData, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszErrInfo, sizeof(pstOut->aszErrInfo)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVipLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFactionIconID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHAT_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHAT_NTF *pstIn = (PKT_CLIGS_CHAT_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byChatNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstIn->byChatNum)
			break;
		if(-1 == EncodeCHAT_DATA(&pstIn->astChatData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstIn->byChatNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyVipLevel[i]))
			return -1;
	}

	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstIn->byChatNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyFactionIconIDList[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHAT_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHAT_NTF *pstOut = (PKT_CLIGS_CHAT_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byChatNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstOut->byChatNum)
			break;
		if(-1 == DecodeCHAT_DATA(&pstOut->astChatData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstOut->byChatNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyVipLevel[i]))
			return -1;
	}

	for(i = 0; i < MAX_CHAT_NUM; i++)
	{
		if(i >= (INT32)pstOut->byChatNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyFactionIconIDList[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CROSS_DAY_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROSS_DAY_NTF *pstIn = (PKT_CLIGS_CROSS_DAY_NTF*)pHost;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOnlineEncourageFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byOnlineEncourageFlag)
			break;
		if(-1 == EncodeDT_ONLINE_ENCOURAGE_DATA(&pstIn->astOnlineEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byOnlineEncourageFlag)
			break;
		if(-1 == poNetData->AddWord(pstIn->awRecvCountDown[i]))
			return -1;
	}

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stCurPhyStrengthInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CROSS_DAY_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROSS_DAY_NTF *pstOut = (PKT_CLIGS_CROSS_DAY_NTF*)pHost;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOnlineEncourageFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byOnlineEncourageFlag)
			break;
		if(-1 == DecodeDT_ONLINE_ENCOURAGE_DATA(&pstOut->astOnlineEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byOnlineEncourageFlag)
			break;
		if(-1 == poNetData->DelWord(pstOut->awRecvCountDown[i]))
			return -1;
	}

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stCurPhyStrengthInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ *pstIn = (PKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ *pstOut = (PKT_CLIGS_OPNE_ACTIVITY_CENTER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK *pstIn = (PKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byActivityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityNum)
			break;
		if(-1 == EncodeDT_ACTIVITY_BASE_DATA(&pstIn->astActivityInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyActivityStartCountDown[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK *pstOut = (PKT_CLIGS_OPNE_ACTIVITY_CENTER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byActivityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityNum)
			break;
		if(-1 == DecodeDT_ACTIVITY_BASE_DATA(&pstOut->astActivityInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyActivityStartCountDown[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ACTIVITY_PROMPT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_PROMPT_REQ *pstIn = (PKT_CLIGS_GET_ACTIVITY_PROMPT_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ACTIVITY_PROMPT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_PROMPT_REQ *pstOut = (PKT_CLIGS_GET_ACTIVITY_PROMPT_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ACTIVITY_PROMPT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_PROMPT_ACK *pstIn = (PKT_CLIGS_GET_ACTIVITY_PROMPT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FUNC_COMMON_PROMPT(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ACTIVITY_PROMPT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_PROMPT_ACK *pstOut = (PKT_CLIGS_GET_ACTIVITY_PROMPT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FUNC_COMMON_PROMPT(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPNE_EAT_BREAD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_EAT_BREAD_REQ *pstIn = (PKT_CLIGS_OPNE_EAT_BREAD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPNE_EAT_BREAD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_EAT_BREAD_REQ *pstOut = (PKT_CLIGS_OPNE_EAT_BREAD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPNE_EAT_BREAD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_EAT_BREAD_ACK *pstIn = (PKT_CLIGS_OPNE_EAT_BREAD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEndCountDown))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTimePerPhyStrengthen))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOarNumPerPhyStrengthen))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOnceSpeedCoin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHaveObtainCoin))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHaveUseTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurPhyStrength))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stCurPhyStrengthInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPNE_EAT_BREAD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPNE_EAT_BREAD_ACK *pstOut = (PKT_CLIGS_OPNE_EAT_BREAD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEndCountDown))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTimePerPhyStrengthen))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOarNumPerPhyStrengthen))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOnceSpeedCoin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHaveObtainCoin))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHaveUseTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurPhyStrength))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stCurPhyStrengthInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ *pstIn = (PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byHaveObtainPhyStrengthenCli))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHaveObtainCoinCli))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ *pstOut = (PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byHaveObtainPhyStrengthenCli))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHaveObtainCoinCli))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK *pstIn = (PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveObtainPhyStrengthenCli))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHaveObtainCoinCli))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHaveObtainCoin))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHaveUseTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK *pstOut = (PKT_CLIGS_OBTAIN_PHYSTRENGTHEN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveObtainPhyStrengthenCli))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHaveObtainCoinCli))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHaveObtainCoin))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHaveUseTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEAVE_EAT_BREAD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_EAT_BREAD_REQ *pstIn = (PKT_CLIGS_LEAVE_EAT_BREAD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byHaveObtainPhyStrengthenCli))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHaveObtainCoinCli))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEAVE_EAT_BREAD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_EAT_BREAD_REQ *pstOut = (PKT_CLIGS_LEAVE_EAT_BREAD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byHaveObtainPhyStrengthenCli))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHaveObtainCoinCli))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEAVE_EAT_BREAD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_EAT_BREAD_ACK *pstIn = (PKT_CLIGS_LEAVE_EAT_BREAD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHaveObtainCoin))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurPhyStrength))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stCurPhyStrengthInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEAVE_EAT_BREAD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_EAT_BREAD_ACK *pstOut = (PKT_CLIGS_LEAVE_EAT_BREAD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveObtainPhyStrengthen))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHaveObtainCoin))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurPhyStrength))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stCurPhyStrengthInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ *pstIn = (PKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ *pstOut = (PKT_CLIGS_OPEN_PAOSHANG_BUILD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BIAO_INFO(void *pHost, CNetData* poNetData)
{
	DT_BIAO_INFO *pstIn = (DT_BIAO_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byQualityLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJingjie))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCostTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BIAO_INFO(void *pHost, CNetData* poNetData)
{
	DT_BIAO_INFO *pstOut = (DT_BIAO_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byQualityLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJingjie))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCostTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeBIAO_OPERATE_INFO(void *pHost, CNetData* poNetData)
{
	BIAO_OPERATE_INFO *pstIn = (BIAO_OPERATE_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byRemianOperateCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTotalOperateCnt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeBIAO_OPERATE_INFO(void *pHost, CNetData* poNetData)
{
	BIAO_OPERATE_INFO *pstOut = (BIAO_OPERATE_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byRemianOperateCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTotalOperateCnt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK *pstIn = (PKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byYabiaoFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAlreadyYabiaoTime))
		return -1;

	if(-1 == EncodeDT_BIAO_INFO(&pstIn->stBiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRemainYabiaoCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRemainJiebiaoCnt))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAllPlayerYabiaoCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnemyYabiaoCnt))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJiebiaoCD))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wClearCDCostGoldPerMin))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK *pstOut = (PKT_CLIGS_OPEN_PAOSHANG_BUILD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byYabiaoFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAlreadyYabiaoTime))
		return -1;

	if(-1 == DecodeDT_BIAO_INFO(&pstOut->stBiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRemainYabiaoCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRemainJiebiaoCnt))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAllPlayerYabiaoCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnemyYabiaoCnt))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJiebiaoCD))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wClearCDCostGoldPerMin))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_YABIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_YABIAO_REQ *pstIn = (PKT_CLIGS_OPEN_YABIAO_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_YABIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_YABIAO_REQ *pstOut = (PKT_CLIGS_OPEN_YABIAO_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_YABIAO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_YABIAO_ACK *pstIn = (PKT_CLIGS_OPEN_YABIAO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byYabiaoing))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurBiaoIndex))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFlushCount))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFlushCostGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDirectMaxLevelCostGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBiaoQualityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BIAO_QUALITY; i++)
	{
		if(i >= (INT32)pstIn->wBiaoQualityNum)
			break;
		if(-1 == EncodeDT_BIAO_INFO(&pstIn->astBiaoInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byFreeFlushCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFreeFlushRemainCnt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_YABIAO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_YABIAO_ACK *pstOut = (PKT_CLIGS_OPEN_YABIAO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byYabiaoing))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurBiaoIndex))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFlushCount))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFlushCostGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDirectMaxLevelCostGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBiaoQualityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BIAO_QUALITY; i++)
	{
		if(i >= (INT32)pstOut->wBiaoQualityNum)
			break;
		if(-1 == DecodeDT_BIAO_INFO(&pstOut->astBiaoInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byFreeFlushCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFreeFlushRemainCnt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FLUSH_BIAO_QUALITY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FLUSH_BIAO_QUALITY_REQ *pstIn = (PKT_CLIGS_FLUSH_BIAO_QUALITY_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wQuality))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDirectMaxLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FLUSH_BIAO_QUALITY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FLUSH_BIAO_QUALITY_REQ *pstOut = (PKT_CLIGS_FLUSH_BIAO_QUALITY_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wQuality))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDirectMaxLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FLUSH_BIAO_QUALITY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FLUSH_BIAO_QUALITY_ACK *pstIn = (PKT_CLIGS_FLUSH_BIAO_QUALITY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BIAO_INFO(&pstIn->stBiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFlushCount))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFlushCostGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDirectMaxLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFreeFlushCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFreeFlushRemainCnt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FLUSH_BIAO_QUALITY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FLUSH_BIAO_QUALITY_ACK *pstOut = (PKT_CLIGS_FLUSH_BIAO_QUALITY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BIAO_INFO(&pstOut->stBiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFlushCount))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFlushCostGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDirectMaxLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFreeFlushCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFreeFlushRemainCnt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BEGIN_YABIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_YABIAO_REQ *pstIn = (PKT_CLIGS_BEGIN_YABIAO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wQuality))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BEGIN_YABIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_YABIAO_REQ *pstOut = (PKT_CLIGS_BEGIN_YABIAO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wQuality))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BEGIN_YABIAO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_YABIAO_ACK *pstIn = (PKT_CLIGS_BEGIN_YABIAO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAlreadyYabiaoTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalYabiaoTime))
		return -1;

	if(-1 == EncodeBIAO_OPERATE_INFO(&pstIn->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwBeJiebiaoCoinEncourage))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBeJiebiaoScienceEncourage))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFactionIconID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BEGIN_YABIAO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_YABIAO_ACK *pstOut = (PKT_CLIGS_BEGIN_YABIAO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAlreadyYabiaoTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalYabiaoTime))
		return -1;

	if(-1 == DecodeBIAO_OPERATE_INFO(&pstOut->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwBeJiebiaoCoinEncourage))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBeJiebiaoScienceEncourage))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFactionIconID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_JIEBIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JIEBIAO_REQ *pstIn = (PKT_CLIGS_OPEN_JIEBIAO_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byViewYabiaoType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLongestYabiaoEndTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedPlayerNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_JIEBIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JIEBIAO_REQ *pstOut = (PKT_CLIGS_OPEN_JIEBIAO_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byViewYabiaoType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLongestYabiaoEndTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedPlayerNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_YABIAO_PLAYER_INFO(void *pHost, CNetData* poNetData)
{
	DT_YABIAO_PLAYER_INFO *pstIn = (DT_YABIAO_PLAYER_INFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byQuality))
		return -1;

	if(-1 == EncodeBIAO_OPERATE_INFO(&pstIn->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAlreadyYabiaoTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalYabiaoTime))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanJiebiao))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_YABIAO_PLAYER_INFO(void *pHost, CNetData* poNetData)
{
	DT_YABIAO_PLAYER_INFO *pstOut = (DT_YABIAO_PLAYER_INFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byQuality))
		return -1;

	if(-1 == DecodeBIAO_OPERATE_INFO(&pstOut->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAlreadyYabiaoTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalYabiaoTime))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanJiebiao))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_YABIAO_PLAYER_INFO_FACTION_NAME(void *pHost, CNetData* poNetData)
{
	DT_YABIAO_PLAYER_INFO_FACTION_NAME *pstIn = (DT_YABIAO_PLAYER_INFO_FACTION_NAME*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySameFaction))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_YABIAO_PLAYER_INFO_FACTION_NAME(void *pHost, CNetData* poNetData)
{
	DT_YABIAO_PLAYER_INFO_FACTION_NAME *pstOut = (DT_YABIAO_PLAYER_INFO_FACTION_NAME*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySameFaction))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_JIEBIAO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JIEBIAO_ACK *pstIn = (PKT_CLIGS_OPEN_JIEBIAO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byYabiaoPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_YABIAO_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byYabiaoPlayerNum)
			break;
		if(-1 == EncodeDT_YABIAO_PLAYER_INFO(&pstIn->astYabiaoPlayerInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wLongestYabiaoEndTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJiebiaoCD))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRemainJiebiaoCnt))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wClearCDCostGoldPerMin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byYabiaoFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAlreadyYabiaoTime))
		return -1;

	if(-1 == EncodeDT_BIAO_INFO(&pstIn->stBiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingjie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRemainYabiaoCnt))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScienceEncourage))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingjieEncourage))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJiebiaoReduceCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJiebiaoReduceScience))
		return -1;

	for(i = 0; i < MAX_YABIAO_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byYabiaoPlayerNum)
			break;
		if(-1 == EncodeDT_YABIAO_PLAYER_INFO_FACTION_NAME(&pstIn->astYaBiaoFactionName[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_YABIAO_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byYabiaoPlayerNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyFactionIconID[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byDisPlayJieBiao))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_JIEBIAO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JIEBIAO_ACK *pstOut = (PKT_CLIGS_OPEN_JIEBIAO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byYabiaoPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_YABIAO_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byYabiaoPlayerNum)
			break;
		if(-1 == DecodeDT_YABIAO_PLAYER_INFO(&pstOut->astYabiaoPlayerInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wLongestYabiaoEndTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJiebiaoCD))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRemainJiebiaoCnt))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wClearCDCostGoldPerMin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byYabiaoFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAlreadyYabiaoTime))
		return -1;

	if(-1 == DecodeDT_BIAO_INFO(&pstOut->stBiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingjie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRemainYabiaoCnt))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScienceEncourage))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingjieEncourage))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJiebiaoReduceCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJiebiaoReduceScience))
		return -1;

	for(i = 0; i < MAX_YABIAO_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byYabiaoPlayerNum)
			break;
		if(-1 == DecodeDT_YABIAO_PLAYER_INFO_FACTION_NAME(&pstOut->astYaBiaoFactionName[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_YABIAO_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byYabiaoPlayerNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyFactionIconID[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byDisPlayJieBiao))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BEGIN_JIEBIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_JIEBIAO_REQ *pstIn = (PKT_CLIGS_BEGIN_JIEBIAO_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurCount))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BEGIN_JIEBIAO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_JIEBIAO_REQ *pstOut = (PKT_CLIGS_BEGIN_JIEBIAO_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurCount))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BEGIN_JIEBIAO_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_JIEBIAO_ACK3 *pstIn = (PKT_CLIGS_BEGIN_JIEBIAO_ACK3*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byYabiaoFlag))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA3(&pstIn->stBattleData, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBeJiebiaoPlayerID))
		return -1;

	if(-1 == EncodeBIAO_OPERATE_INFO(&pstIn->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJiebiaoPlayerID))
		return -1;

	if(-1 == EncodeBIAO_OPERATE_INFO(&pstIn->stJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJiebiaoCD))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BEGIN_JIEBIAO_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_JIEBIAO_ACK3 *pstOut = (PKT_CLIGS_BEGIN_JIEBIAO_ACK3*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byYabiaoFlag))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA3(&pstOut->stBattleData, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBeJiebiaoPlayerID))
		return -1;

	if(-1 == DecodeBIAO_OPERATE_INFO(&pstOut->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJiebiaoPlayerID))
		return -1;

	if(-1 == DecodeBIAO_OPERATE_INFO(&pstOut->stJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJiebiaoCD))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLEAR_JIEBIAO_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLEAR_JIEBIAO_CD_REQ *pstIn = (PKT_CLIGS_CLEAR_JIEBIAO_CD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLEAR_JIEBIAO_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLEAR_JIEBIAO_CD_REQ *pstOut = (PKT_CLIGS_CLEAR_JIEBIAO_CD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLEAR_JIEBIAO_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLEAR_JIEBIAO_CD_ACK *pstIn = (PKT_CLIGS_CLEAR_JIEBIAO_CD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJiebiaoCD))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLEAR_JIEBIAO_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLEAR_JIEBIAO_CD_ACK *pstOut = (PKT_CLIGS_CLEAR_JIEBIAO_CD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJiebiaoCD))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BE_JIEBIAO_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BE_JIEBIAO_NTF *pstIn = (PKT_CLIGS_BE_JIEBIAO_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byResult))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwIndex))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinDec))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScienceDec))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEnemyDispName, sizeof(pstIn->aszEnemyDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEnemyLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEnemyPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnreadBattleLogNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BE_JIEBIAO_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BE_JIEBIAO_NTF *pstOut = (PKT_CLIGS_BE_JIEBIAO_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byResult))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwIndex))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinDec))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScienceDec))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEnemyDispName, sizeof(pstOut->aszEnemyDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEnemyLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEnemyPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnreadBattleLogNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ *pstIn = (PKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ *pstOut = (PKT_CLIGS_QUERY_YABIAO_BATTLELOG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_YABIAO_BATTLELOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_YABIAO_BATTLELOG_DATA_CLI *pstIn = (DT_YABIAO_BATTLELOG_DATA_CLI*)pHost;

	if(-1 == EncodeDT_YABIAO_BATTLELOG_DATA(&pstIn->stBattleLogData, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEnemyDispName, sizeof(pstIn->aszEnemyDispName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_YABIAO_BATTLELOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_YABIAO_BATTLELOG_DATA_CLI *pstOut = (DT_YABIAO_BATTLELOG_DATA_CLI*)pHost;

	if(-1 == DecodeDT_YABIAO_BATTLELOG_DATA(&pstOut->stBattleLogData, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEnemyDispName, sizeof(pstOut->aszEnemyDispName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK *pstIn = (PKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_YABIAO_BATTLELOG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byLogNum)
			break;
		if(-1 == EncodeDT_YABIAO_BATTLELOG_DATA_CLI(&pstIn->astYabiaoBattleLog[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK *pstOut = (PKT_CLIGS_QUERY_YABIAO_BATTLELOG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_YABIAO_BATTLELOG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byLogNum)
			break;
		if(-1 == DecodeDT_YABIAO_BATTLELOG_DATA_CLI(&pstOut->astYabiaoBattleLog[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScienceEncourage))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingjieEncourage))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingjie))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_QUERY_YABIAO_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScienceEncourage))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingjieEncourage))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingjie))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUERY_BATTLE_RECORD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_BATTLE_RECORD_REQ *pstIn = (PKT_CLIGS_QUERY_BATTLE_RECORD_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwIndex))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUERY_BATTLE_RECORD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_BATTLE_RECORD_REQ *pstOut = (PKT_CLIGS_QUERY_BATTLE_RECORD_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwIndex))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_BATTLE_RECORD_ACK3 *pstIn = (PKT_CLIGS_QUERY_BATTLE_RECORD_ACK3*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA3(&pstIn->stBattleData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_BATTLE_RECORD_ACK3 *pstOut = (PKT_CLIGS_QUERY_BATTLE_RECORD_ACK3*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA3(&pstOut->stBattleData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CLIMB_TOWER_INFO(void *pHost, CNetData* poNetData)
{
	DT_CLIMB_TOWER_INFO *pstIn = (DT_CLIMB_TOWER_INFO*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wIndex))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnterPhyStrength))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxInstanceNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxUnlockInstanceNum))
		return -1;

	if(-1 == EncodeDT_INSTANCE_RECORD_DATA_CLI(&pstIn->stCurInstanceInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanResetClimbTownNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wResetClimbTownNumPerDay))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBuyResetClimbTownGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CLIMB_TOWER_INFO(void *pHost, CNetData* poNetData)
{
	DT_CLIMB_TOWER_INFO *pstOut = (DT_CLIMB_TOWER_INFO*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wIndex))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnterPhyStrength))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxInstanceNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxUnlockInstanceNum))
		return -1;

	if(-1 == DecodeDT_INSTANCE_RECORD_DATA_CLI(&pstOut->stCurInstanceInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanResetClimbTownNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wResetClimbTownNumPerDay))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBuyResetClimbTownGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CLIMB_TOWER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CLIMB_TOWER_REQ *pstIn = (PKT_CLIGS_OPEN_CLIMB_TOWER_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wIndex))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CLIMB_TOWER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CLIMB_TOWER_REQ *pstOut = (PKT_CLIGS_OPEN_CLIMB_TOWER_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wIndex))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CLIMB_TOWER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CLIMB_TOWER_ACK *pstIn = (PKT_CLIGS_OPEN_CLIMB_TOWER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_CLIMB_TOWER_INFO(&pstIn->stClimbTowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CLIMB_TOWER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CLIMB_TOWER_ACK *pstOut = (PKT_CLIGS_OPEN_CLIMB_TOWER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_CLIMB_TOWER_INFO(&pstOut->stClimbTowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLIMB_TOWER_RESET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_RESET_REQ *pstIn = (PKT_CLIGS_CLIMB_TOWER_RESET_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSceneIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLIMB_TOWER_RESET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_RESET_REQ *pstOut = (PKT_CLIGS_CLIMB_TOWER_RESET_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSceneIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLIMB_TOWER_RESET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_RESET_ACK *pstIn = (PKT_CLIGS_CLIMB_TOWER_RESET_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == EncodeDT_CLIMB_TOWER_INFO(&pstIn->stClimbTowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLIMB_TOWER_RESET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_RESET_ACK *pstOut = (PKT_CLIGS_CLIMB_TOWER_RESET_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == DecodeDT_CLIMB_TOWER_INFO(&pstOut->stClimbTowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ *pstIn = (PKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSceneIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ *pstOut = (PKT_CLIGS_CLIMB_TOWER_ONHOOK_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSceneIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK *pstIn = (PKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOnhookResultNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_CLIMB_TOWER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byOnhookResultNum)
			break;
		if(-1 == EncodeDT_ONHOOK_RESULT(&pstIn->astOnhookResult[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_DATA_AFTER_ONHOOK(&pstIn->stAfterOnhookData, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnlockNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byUnlockNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_ID(&pstIn->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveNewInstanceFlag)
			break;
		if(-1 == EncodeDT_INSTANCE_DATA_CLI(&pstIn->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_CLIMB_TOWER_INFO(&pstIn->stClimbTowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK *pstOut = (PKT_CLIGS_CLIMB_TOWER_ONHOOK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOnhookResultNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_CLIMB_TOWER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byOnhookResultNum)
			break;
		if(-1 == DecodeDT_ONHOOK_RESULT(&pstOut->astOnhookResult[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_DATA_AFTER_ONHOOK(&pstOut->stAfterOnhookData, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnlockNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byUnlockNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_ID(&pstOut->astUnlockCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHaveNewInstanceFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveNewInstanceFlag)
			break;
		if(-1 == DecodeDT_INSTANCE_DATA_CLI(&pstOut->astNewCommonInstanceID[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_CLIMB_TOWER_INFO(&pstOut->stClimbTowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ *pstIn = (PKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuyNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ *pstOut = (PKT_CLIGS_BUY_CLIMB_TOWER_RESET_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuyNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK *pstIn = (PKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanResetClimbTownNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanBuyResetClimbTownNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBuyResetClimbTownGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK *pstOut = (PKT_CLIGS_BUY_CLIMB_TOWER_RESET_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanResetClimbTownNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanBuyResetClimbTownNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBuyResetClimbTownGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_JINGJIE_PER_LEVEL_DATA(void *pHost, CNetData* poNetData)
{
	DT_JINGJIE_PER_LEVEL_DATA *pstIn = (DT_JINGJIE_PER_LEVEL_DATA*)pHost;

	INT32 i;
	for(i = 0; i < MAX_JINGJIE_SUBLEVEL_NUM; i++)
	{
		if(-1 == EncodeDT_ATTR_INC_DATA(&pstIn->astSubLevelIncAttrInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_JINGJIE_SUBLEVEL_NUM; i++)
	{
		if(-1 == poNetData->AddDword(pstIn->adwSubLevelCostJingJieInfo[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_JINGJIE_PER_LEVEL_DATA(void *pHost, CNetData* poNetData)
{
	DT_JINGJIE_PER_LEVEL_DATA *pstOut = (DT_JINGJIE_PER_LEVEL_DATA*)pHost;

	INT32 i;
		for(i = 0; i < MAX_JINGJIE_SUBLEVEL_NUM; i++)
		{
			if(-1 == DecodeDT_ATTR_INC_DATA(&pstOut->astSubLevelIncAttrInfo[i], poNetData))
				return -1;
		}

	for(i = 0; i < MAX_JINGJIE_SUBLEVEL_NUM; i++)
	{
		if(-1 == poNetData->DelDword(pstOut->adwSubLevelCostJingJieInfo[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_JINGJIE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_JINGJIE_DATA_CLI *pstIn = (DT_JINGJIE_DATA_CLI*)pHost;

	if(-1 == EncodeDT_JINGJIE_BASE_DATA(&pstIn->stBaseData, poNetData))
		return -1;

	if(-1 == EncodeDT_JINGJIE_PER_LEVEL_DATA(&pstIn->stJingJiePerLevelData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIncAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_JINGJIE_ATTR_INC_NUM; i++)
	{
		if(i >= (INT32)pstIn->byIncAttrNum)
			break;
		if(-1 == EncodeDT_ATTR_INC_DATA(&pstIn->astIncAttrInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wCurCoachTalent))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_JINGJIE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_JINGJIE_DATA_CLI *pstOut = (DT_JINGJIE_DATA_CLI*)pHost;

	if(-1 == DecodeDT_JINGJIE_BASE_DATA(&pstOut->stBaseData, poNetData))
		return -1;

	if(-1 == DecodeDT_JINGJIE_PER_LEVEL_DATA(&pstOut->stJingJiePerLevelData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIncAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_JINGJIE_ATTR_INC_NUM; i++)
	{
		if(i >= (INT32)pstOut->byIncAttrNum)
			break;
		if(-1 == DecodeDT_ATTR_INC_DATA(&pstOut->astIncAttrInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wCurCoachTalent))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_JINGJIE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_JINGJIE_REQ *pstIn = (PKT_CLIGS_UPGRADE_JINGJIE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_JINGJIE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_JINGJIE_REQ *pstOut = (PKT_CLIGS_UPGRADE_JINGJIE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_JINGJIE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_JINGJIE_ACK *pstIn = (PKT_CLIGS_UPGRADE_JINGJIE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_JINGJIE_DATA_CLI(&pstIn->stJingJieInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byColor))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_JINGJIE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_JINGJIE_ACK *pstOut = (PKT_CLIGS_UPGRADE_JINGJIE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_JINGJIE_DATA_CLI(&pstOut->stJingJieInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byColor))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GEN_GAS_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GEN_GAS_DATA_CLI *pstIn = (DT_GEN_GAS_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byCollectState))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GAS_BALL_NUM; i++)
	{
		if(-1 == EncodeDT_GAS_BALL_DATA(&pstIn->astGasBollInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwGenGasCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGenGasGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCommonUpGasGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFullLevelUpGasGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalGenNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanGenNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTotalFreeCommonUpGasNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanFreeCommonUpGasNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GEN_GAS_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GEN_GAS_DATA_CLI *pstOut = (DT_GEN_GAS_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byCollectState))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_GAS_BALL_NUM; i++)
		{
			if(-1 == DecodeDT_GAS_BALL_DATA(&pstOut->astGasBollInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelDword(pstOut->dwGenGasCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGenGasGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCommonUpGasGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFullLevelUpGasGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalGenNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanGenNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTotalFreeCommonUpGasNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanFreeCommonUpGasNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GEN_GAS_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEN_GAS_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_GEN_GAS_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GEN_GAS_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEN_GAS_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_GEN_GAS_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GEN_GAS_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEN_GAS_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_GEN_GAS_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GEN_GAS_DATA_CLI(&pstIn->stGenGasInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszTipsInfo, sizeof(pstIn->aszTipsInfo)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GEN_GAS_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEN_GAS_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_GEN_GAS_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GEN_GAS_DATA_CLI(&pstOut->stGenGasInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszTipsInfo, sizeof(pstOut->aszTipsInfo)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GEN_GAS_BALL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GEN_GAS_BALL_REQ *pstIn = (PKT_CLIGS_GEN_GAS_BALL_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GEN_GAS_BALL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GEN_GAS_BALL_REQ *pstOut = (PKT_CLIGS_GEN_GAS_BALL_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GEN_GAS_BALL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GEN_GAS_BALL_ACK *pstIn = (PKT_CLIGS_GEN_GAS_BALL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GEN_GAS_DATA_CLI(&pstIn->stGenGasInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GEN_GAS_BALL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GEN_GAS_BALL_ACK *pstOut = (PKT_CLIGS_GEN_GAS_BALL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GEN_GAS_DATA_CLI(&pstOut->stGenGasInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UP_GAS_BALL_LEVEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UP_GAS_BALL_LEVEL_REQ *pstIn = (PKT_CLIGS_UP_GAS_BALL_LEVEL_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFullLevelFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UP_GAS_BALL_LEVEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UP_GAS_BALL_LEVEL_REQ *pstOut = (PKT_CLIGS_UP_GAS_BALL_LEVEL_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFullLevelFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UP_GAS_BALL_LEVEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UP_GAS_BALL_LEVEL_ACK *pstIn = (PKT_CLIGS_UP_GAS_BALL_LEVEL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GEN_GAS_DATA_CLI(&pstIn->stGenGasInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UP_GAS_BALL_LEVEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UP_GAS_BALL_LEVEL_ACK *pstOut = (PKT_CLIGS_UP_GAS_BALL_LEVEL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GEN_GAS_DATA_CLI(&pstOut->stGenGasInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COLLECT_GAS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_GAS_REQ *pstIn = (PKT_CLIGS_COLLECT_GAS_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COLLECT_GAS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_GAS_REQ *pstOut = (PKT_CLIGS_COLLECT_GAS_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COLLECT_GAS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_GAS_ACK *pstIn = (PKT_CLIGS_COLLECT_GAS_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GEN_GAS_DATA_CLI(&pstIn->stGenGasInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COLLECT_GAS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COLLECT_GAS_ACK *pstOut = (PKT_CLIGS_COLLECT_GAS_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GEN_GAS_DATA_CLI(&pstOut->stGenGasInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ *pstIn = (PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wActionID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wActionLevelCli))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ *pstOut = (PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wActionID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wActionLevelCli))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ATTACK_RANG_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_ATTACK_RANG_DATA_LST *pstIn = (DT_ATTACK_RANG_DATA_LST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_ACTION_LEVEL_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_ATTACK_RANG_DATA_CLI(&pstIn->astInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ATTACK_RANG_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_ATTACK_RANG_DATA_LST *pstOut = (DT_ATTACK_RANG_DATA_LST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_ACTION_LEVEL_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_ATTACK_RANG_DATA_CLI(&pstOut->astInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_EFFECT_DATA_LST2(void *pHost, CNetData* poNetData)
{
	DT_EFFECT_DATA_LST2 *pstIn = (DT_EFFECT_DATA_LST2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_ACTION_LEVEL_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_SKILL_EFFECT_DATA_CLI2(&pstIn->astInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EFFECT_DATA_LST2(void *pHost, CNetData* poNetData)
{
	DT_EFFECT_DATA_LST2 *pstOut = (DT_EFFECT_DATA_LST2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_ACTION_LEVEL_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_SKILL_EFFECT_DATA_CLI2(&pstOut->astInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_TAB_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_TAB_DATA_CLI *pstIn = (DT_SKILL_TAB_DATA_CLI*)pHost;

	if(-1 == EncodeDT_SKILL_DATA_CLI(&pstIn->stSkillInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ATTACK_RANG_DATA_LST(&pstIn->stAttackRangInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EFFECT_DATA_LST2(&pstIn->stEffectInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAddExpPerUpgrade))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCostGasPerUpgrade))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurPlayerLevel))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_TAB_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_TAB_DATA_CLI *pstOut = (DT_SKILL_TAB_DATA_CLI*)pHost;

	if(-1 == DecodeDT_SKILL_DATA_CLI(&pstOut->stSkillInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ATTACK_RANG_DATA_LST(&pstOut->stAttackRangInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EFFECT_DATA_LST2(&pstOut->stEffectInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAddExpPerUpgrade))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCostGasPerUpgrade))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurPlayerLevel))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK *pstIn = (PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SKILL_TAB_DATA_CLI(&pstIn->stSkillTabInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK *pstOut = (PKT_CLIGS_UPGRADE_SKILL_ACTION_LEVEL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SKILL_TAB_DATA_CLI(&pstOut->stSkillTabInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ *pstIn = (PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wActionID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEffectID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAttackRangKind))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTraceBuffKind))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ *pstOut = (PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wActionID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEffectID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAttackRangKind))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTraceBuffKind))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK *pstIn = (PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SKILL_TAB_DATA_CLI(&pstIn->stSkillTabInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK *pstOut = (PKT_CLIGS_SELECT_SKILL_ACTION_EFFECT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SKILL_TAB_DATA_CLI(&pstOut->stSkillTabInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_JINGJIE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JINGJIE_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_JINGJIE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_JINGJIE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JINGJIE_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_JINGJIE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_JINGJIE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JINGJIE_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_JINGJIE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_JINGJIE_DATA_CLI(&pstIn->stJingJieInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxQualityLevel))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_JINGJIE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JINGJIE_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_JINGJIE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_JINGJIE_DATA_CLI(&pstOut->stJingJieInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxQualityLevel))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SKILL_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SKILL_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_SKILL_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SKILL_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SKILL_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_SKILL_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SKILL_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SKILL_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_SKILL_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SKILL_TAB_DATA_CLI(&pstIn->stSkillTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SKILL_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SKILL_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_SKILL_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SKILL_TAB_DATA_CLI(&pstOut->stSkillTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BLUE_TO_PURPLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLUE_TO_PURPLE_REQ *pstIn = (PKT_CLIGS_BLUE_TO_PURPLE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BLUE_TO_PURPLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLUE_TO_PURPLE_REQ *pstOut = (PKT_CLIGS_BLUE_TO_PURPLE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BLUE_TO_PURPLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLUE_TO_PURPLE_ACK *pstIn = (PKT_CLIGS_BLUE_TO_PURPLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BLUE_TO_PURPLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BLUE_TO_PURPLE_ACK *pstOut = (PKT_CLIGS_BLUE_TO_PURPLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_VIP_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_VIP_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_VIP_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_VIP_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_VIP_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_VIP_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BUY_GOLD_INFO(void *pHost, CNetData* poNetData)
{
	DT_BUY_GOLD_INFO *pstIn = (DT_BUY_GOLD_INFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwGoldNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRMB))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwProductID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BUY_GOLD_INFO(void *pHost, CNetData* poNetData)
{
	DT_BUY_GOLD_INFO *pstOut = (DT_BUY_GOLD_INFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwGoldNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRMB))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwProductID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BUY_GOLD_INFO_EX(void *pHost, CNetData* poNetData)
{
	DT_BUY_GOLD_INFO_EX *pstIn = (DT_BUY_GOLD_INFO_EX*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwGoldNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRMB))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszProductID, sizeof(pstIn->aszProductID)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BUY_GOLD_INFO_EX(void *pHost, CNetData* poNetData)
{
	DT_BUY_GOLD_INFO_EX *pstOut = (DT_BUY_GOLD_INFO_EX*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwGoldNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRMB))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszProductID, sizeof(pstOut->aszProductID)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BUY_GOLD_TXT(void *pHost, CNetData* poNetData)
{
	DT_BUY_GOLD_TXT *pstIn = (DT_BUY_GOLD_TXT*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszBuyGoldInfo, sizeof(pstIn->aszBuyGoldInfo)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BUY_GOLD_TXT(void *pHost, CNetData* poNetData)
{
	DT_BUY_GOLD_TXT *pstOut = (DT_BUY_GOLD_TXT*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszBuyGoldInfo, sizeof(pstOut->aszBuyGoldInfo)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_VIP_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_VIP_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_VIP_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_VIP_TAB_DATA_CLI(&pstIn->stVipTabInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBuyGoldInfoNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BUY_GOLD_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBuyGoldInfoNum)
			break;
		if(-1 == EncodeDT_BUY_GOLD_INFO(&pstIn->astBuyGoldLst[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BUY_GOLD_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBuyGoldInfoNum)
			break;
		if(-1 == EncodeDT_BUY_GOLD_TXT(&pstIn->astBuyGoldTxtLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddTString(pstIn->aszProContextHead, sizeof(pstIn->aszProContextHead)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszVipProContext, sizeof(pstIn->aszVipProContext)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszBuyUrl, sizeof(pstIn->aszBuyUrl)))
		return -1;

	for(i = 0; i < MAX_BUY_GOLD_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBuyGoldInfoNum)
			break;
		if(-1 == EncodeDT_BUY_GOLD_INFO_EX(&pstIn->astBuyGoldLstEx[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_VIP_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_VIP_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_VIP_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_VIP_TAB_DATA_CLI(&pstOut->stVipTabInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBuyGoldInfoNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BUY_GOLD_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBuyGoldInfoNum)
			break;
		if(-1 == DecodeDT_BUY_GOLD_INFO(&pstOut->astBuyGoldLst[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BUY_GOLD_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBuyGoldInfoNum)
			break;
		if(-1 == DecodeDT_BUY_GOLD_TXT(&pstOut->astBuyGoldTxtLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelTString(pstOut->aszProContextHead, sizeof(pstOut->aszProContextHead)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszVipProContext, sizeof(pstOut->aszVipProContext)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszBuyUrl, sizeof(pstOut->aszBuyUrl)))
		return -1;

	for(i = 0; i < MAX_BUY_GOLD_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBuyGoldInfoNum)
			break;
		if(-1 == DecodeDT_BUY_GOLD_INFO_EX(&pstOut->astBuyGoldLstEx[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_XIANGQIAN_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->stBagItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstIn->stEquipXiangqianDes, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_XIANGQIAN_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->stBagItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstOut->stEquipXiangqianDes, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_XIANGQIAN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_XIANGQIAN_REQ *pstIn = (PKT_CLIGS_XIANGQIAN_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wItemID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPos))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_XIANGQIAN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_XIANGQIAN_REQ *pstOut = (PKT_CLIGS_XIANGQIAN_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wItemID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPos))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_XIANGQIAN_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_XIANGQIAN_DATA_CLI *pstIn = (DT_XIANGQIAN_DATA_CLI*)pHost;

	if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->stEquip, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->stBagItemInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_XIANGQIAN_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_XIANGQIAN_DATA_CLI *pstOut = (DT_XIANGQIAN_DATA_CLI*)pHost;

	if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->stEquip, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->stBagItemInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_XIANGQIAN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_XIANGQIAN_ACK *pstIn = (PKT_CLIGS_XIANGQIAN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_XIANGQIAN_DATA_CLI(&pstIn->stXiangqianData, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_XIANGQIAN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_XIANGQIAN_ACK *pstOut = (PKT_CLIGS_XIANGQIAN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_XIANGQIAN_DATA_CLI(&pstOut->stXiangqianData, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REMOVE_XIANGQIAN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REMOVE_XIANGQIAN_REQ *pstIn = (PKT_CLIGS_REMOVE_XIANGQIAN_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRemoveAll))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPos))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REMOVE_XIANGQIAN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REMOVE_XIANGQIAN_REQ *pstOut = (PKT_CLIGS_REMOVE_XIANGQIAN_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRemoveAll))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPos))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REMOVE_XIANGQIAN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REMOVE_XIANGQIAN_ACK *pstIn = (PKT_CLIGS_REMOVE_XIANGQIAN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == EncodeDT_XIANGQIAN_DATA_CLI(&pstIn->stXiangqianData, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REMOVE_XIANGQIAN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REMOVE_XIANGQIAN_ACK *pstOut = (PKT_CLIGS_REMOVE_XIANGQIAN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == DecodeDT_XIANGQIAN_DATA_CLI(&pstOut->stXiangqianData, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RESET_ELITE_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESET_ELITE_INSTANCE_REQ *pstIn = (PKT_CLIGS_RESET_ELITE_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRemainResetNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RESET_ELITE_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESET_ELITE_INSTANCE_REQ *pstOut = (PKT_CLIGS_RESET_ELITE_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRemainResetNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ELITE_INSTANCE_VIP_EXT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_VIP_EXT_DATA_CLI *pstIn = (DT_ELITE_INSTANCE_VIP_EXT_DATA_CLI*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNextVipLevelNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ELITE_INSTANCE_VIP_EXT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_VIP_EXT_DATA_CLI *pstOut = (DT_ELITE_INSTANCE_VIP_EXT_DATA_CLI*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNextVipLevelNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RESET_ELITE_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESET_ELITE_INSTANCE_ACK *pstIn = (PKT_CLIGS_RESET_ELITE_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRemainResetNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxResetNum))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ELITE_INSTANCE_VIP_EXT_DATA_CLI(&pstIn->stEliteInstanceVipExt, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCostGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RESET_ELITE_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESET_ELITE_INSTANCE_ACK *pstOut = (PKT_CLIGS_RESET_ELITE_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRemainResetNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxResetNum))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ELITE_INSTANCE_VIP_EXT_DATA_CLI(&pstOut->stEliteInstanceVipExt, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCostGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ *pstIn = (PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ *pstOut = (PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ELITE_INSTANCE_RECORD_DATA(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_RECORD_DATA *pstIn = (DT_ELITE_INSTANCE_RECORD_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	if(-1 == EncodeDT_BURST_ITEM_DATA(&pstIn->stBurstItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMainMonsterKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanBattle))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ELITE_INSTANCE_RECORD_DATA(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_RECORD_DATA *pstOut = (DT_ELITE_INSTANCE_RECORD_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	if(-1 == DecodeDT_BURST_ITEM_DATA(&pstOut->stBurstItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMainMonsterKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanBattle))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ELITE_INSTANCE_RECORD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_RECORD_DATA_CLI *pstIn = (DT_ELITE_INSTANCE_RECORD_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_PER_TOWN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byInstanceNum)
			break;
		if(-1 == EncodeDT_ELITE_INSTANCE_RECORD_DATA(&pstIn->astInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wRemainResetNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCostGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOnhookLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ELITE_INSTANCE_RECORD_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_RECORD_DATA_CLI *pstOut = (DT_ELITE_INSTANCE_RECORD_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_PER_TOWN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byInstanceNum)
			break;
		if(-1 == DecodeDT_ELITE_INSTANCE_RECORD_DATA(&pstOut->astInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wRemainResetNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCostGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOnhookLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI *pstIn = (DT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_PER_TOWN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byInstanceNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyScore[i]))
			return -1;
	}

	if(-1 == EncodeDT_CHAPTER_SCORE(&pstIn->stChapterInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI *pstOut = (DT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_PER_TOWN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byInstanceNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyScore[i]))
			return -1;
	}

	if(-1 == DecodeDT_CHAPTER_SCORE(&pstOut->stChapterInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK *pstIn = (PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOnhookResultNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_CLIMB_TOWER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byOnhookResultNum)
			break;
		if(-1 == EncodeDT_ONHOOK_RESULT(&pstIn->astOnhookResult[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_DATA_AFTER_ONHOOK(&pstIn->stAfterOnhookData, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAllOnhookNum))
		return -1;

	if(-1 == EncodeDT_ELITE_INSTANCE_RECORD_DATA_CLI(&pstIn->stInstanceData, poNetData))
		return -1;

	if(-1 == EncodeDT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI(&pstIn->stInstanceScoreData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK *pstOut = (PKT_CLIGS_ELITE_INSTANCE_ON_HOOK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOnhookResultNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_CLIMB_TOWER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byOnhookResultNum)
			break;
		if(-1 == DecodeDT_ONHOOK_RESULT(&pstOut->astOnhookResult[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_DATA_AFTER_ONHOOK(&pstOut->stAfterOnhookData, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAllOnhookNum))
		return -1;

	if(-1 == DecodeDT_ELITE_INSTANCE_RECORD_DATA_CLI(&pstOut->stInstanceData, poNetData))
		return -1;

	if(-1 == DecodeDT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI(&pstOut->stInstanceScoreData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ELITE_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ELITE_INSTANCE_REQ *pstIn = (PKT_CLIGS_GET_ELITE_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ELITE_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ELITE_INSTANCE_REQ *pstOut = (PKT_CLIGS_GET_ELITE_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ELITE_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ELITE_INSTANCE_ACK *pstIn = (PKT_CLIGS_GET_ELITE_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stMaxInstanceData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byTownNum)
			break;
		if(-1 == EncodeDT_ELITE_INSTANCE_RECORD_DATA_CLI(&pstIn->astTownInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wNextUnlockInstanceTownID))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ELITE_INSTANCE_VIP_EXT_DATA_CLI(&pstIn->stEliteInstanceVipExt, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxResetNum))
		return -1;

	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byTownNum)
			break;
		if(-1 == EncodeDT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI(&pstIn->astTownInstanceScoreInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_ACCUMULATED_SCORE_ENCOURAGE(&pstIn->stAccumulatedEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRemainResetNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ELITE_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ELITE_INSTANCE_ACK *pstOut = (PKT_CLIGS_GET_ELITE_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stMaxInstanceData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byTownNum)
			break;
		if(-1 == DecodeDT_ELITE_INSTANCE_RECORD_DATA_CLI(&pstOut->astTownInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wNextUnlockInstanceTownID))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ELITE_INSTANCE_VIP_EXT_DATA_CLI(&pstOut->stEliteInstanceVipExt, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxResetNum))
		return -1;

	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byTownNum)
			break;
		if(-1 == DecodeDT_ELITE_INSTANCE_RECORD_SCORE_DATA_CLI(&pstOut->astTownInstanceScoreInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_ACCUMULATED_SCORE_ENCOURAGE(&pstOut->stAccumulatedEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRemainResetNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_ID(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_ID *pstIn = (DT_EQUIP_ID*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_ID(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_ID *pstOut = (DT_EQUIP_ID*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUICK_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUICK_EQUIP_REQ *pstIn = (PKT_CLIGS_QUICK_EQUIP_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_ID(&pstIn->astEquipIDLst[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUICK_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUICK_EQUIP_REQ *pstOut = (PKT_CLIGS_QUICK_EQUIP_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_ID(&pstOut->astEquipIDLst[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUICK_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUICK_EQUIP_ACK *pstIn = (PKT_CLIGS_QUICK_EQUIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_ID(&pstIn->astEquipIDLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwPlayerHP))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stHeroPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_PANEL_LST_CLI(&pstIn->stHeroPanelInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUICK_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUICK_EQUIP_ACK *pstOut = (PKT_CLIGS_QUICK_EQUIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_ID(&pstOut->astEquipIDLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwPlayerHP))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stHeroPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_PANEL_LST_CLI(&pstOut->stHeroPanelInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PKBATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PKBATTLE_REQ *pstIn = (PKT_CLIGS_PKBATTLE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PKBATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PKBATTLE_REQ *pstOut = (PKT_CLIGS_PKBATTLE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PKBATTLE_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PKBATTLE_ACK3 *pstIn = (PKT_CLIGS_PKBATTLE_ACK3*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA3(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PKBATTLE_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PKBATTLE_ACK3 *pstOut = (PKT_CLIGS_PKBATTLE_ACK3*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA3(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RESOURCES_PROMPT(void *pHost, CNetData* poNetData)
{
	DT_RESOURCES_PROMPT *pstIn = (DT_RESOURCES_PROMPT*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RESOURCES_PROMPT(void *pHost, CNetData* poNetData)
{
	DT_RESOURCES_PROMPT *pstOut = (DT_RESOURCES_PROMPT*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RESOURCES_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_RESOURCES_PROMPT_DATA *pstIn = (DT_RESOURCES_PROMPT_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byRsNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RESOURCES_NUM; i++)
	{
		if(i >= (INT32)pstIn->byRsNum)
			break;
		if(-1 == EncodeDT_RESOURCES_PROMPT(&pstIn->astRsPromptInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RESOURCES_PROMPT_DATA(void *pHost, CNetData* poNetData)
{
	DT_RESOURCES_PROMPT_DATA *pstOut = (DT_RESOURCES_PROMPT_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byRsNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RESOURCES_NUM; i++)
	{
		if(i >= (INT32)pstOut->byRsNum)
			break;
		if(-1 == DecodeDT_RESOURCES_PROMPT(&pstOut->astRsPromptInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RESOURCES_PROMPT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESOURCES_PROMPT_REQ *pstIn = (PKT_CLIGS_RESOURCES_PROMPT_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwRsID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RESOURCES_PROMPT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESOURCES_PROMPT_REQ *pstOut = (PKT_CLIGS_RESOURCES_PROMPT_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwRsID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RESOURCES_PROMPT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESOURCES_PROMPT_ACK *pstIn = (PKT_CLIGS_RESOURCES_PROMPT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RESOURCES_PROMPT_DATA(&pstIn->stRsPromptData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RESOURCES_PROMPT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESOURCES_PROMPT_ACK *pstOut = (PKT_CLIGS_RESOURCES_PROMPT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RESOURCES_PROMPT_DATA(&pstOut->stRsPromptData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_PLAYER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_PLAYER_DATA_CLI *pstIn = (DT_BOSSB_PLAYER_DATA_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_PLAYER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_PLAYER_DATA_CLI *pstOut = (DT_BOSSB_PLAYER_DATA_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_PLAYER_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_PLAYER_DATA_CLI_LST *pstIn = (DT_BOSSB_PLAYER_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_BOSSB_PLAYER_DATA_CLI(&pstIn->astInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_PLAYER_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_PLAYER_DATA_CLI_LST *pstOut = (DT_BOSSB_PLAYER_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_BOSSB_PLAYER_DATA_CLI(&pstOut->astInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_DATA_CLI *pstIn = (DT_BOSSB_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wBossID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBossLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurBossHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHPPerGrid))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wReadyCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStopCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wReliveGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_DATA_CLI *pstOut = (DT_BOSSB_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wBossID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBossLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurBossHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHPPerGrid))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wReadyCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStopCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wReliveGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_DATA_CLI2 *pstIn = (DT_BOSSB_DATA_CLI2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wBossID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBossLevel))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwTotalBossHP))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBossHP))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwHPPerGrid))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wReadyCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStopCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wReliveGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_DATA_CLI2 *pstOut = (DT_BOSSB_DATA_CLI2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wBossID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBossLevel))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwTotalBossHP))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBossHP))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwHPPerGrid))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wReadyCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStopCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wReliveGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_MY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_MY_DATA_CLI *pstIn = (DT_BOSSB_MY_DATA_CLI*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIncPowerRate))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wReliveCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldReliveCountDown))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHurtValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHurtRate))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_MY_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_MY_DATA_CLI *pstOut = (DT_BOSSB_MY_DATA_CLI*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIncPowerRate))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wReliveCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldReliveCountDown))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHurtValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHurtRate))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HURT_ENC_DATA(void *pHost, CNetData* poNetData)
{
	DT_HURT_ENC_DATA *pstIn = (DT_HURT_ENC_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwEncCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEncJingJie))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HURT_ENC_DATA(void *pHost, CNetData* poNetData)
{
	DT_HURT_ENC_DATA *pstOut = (DT_HURT_ENC_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwEncCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEncJingJie))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_ENTER_BOSSB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_ENTER_BOSSB_REQ *pstIn = (PKT_ENTER_BOSSB_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_ENTER_BOSSB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_ENTER_BOSSB_REQ *pstOut = (PKT_ENTER_BOSSB_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_ENTER_BOSSB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_ENTER_BOSSB_ACK *pstIn = (PKT_ENTER_BOSSB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCliVer))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwResVer))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUIVer))
		return -1;

	if(-1 == EncodeDT_BOSSB_MY_DATA_CLI(&pstIn->stMyBossBInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BOSSB_PLAYER_DATA_CLI_LST(&pstIn->stPlayerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BOSSB_DATA_CLI(&pstIn->stBossBInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->astTopHurtInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_HURT_ENC_DATA(&pstIn->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszResVer, sizeof(pstIn->aszResVer)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_ENTER_BOSSB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_ENTER_BOSSB_ACK *pstOut = (PKT_ENTER_BOSSB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCliVer))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwResVer))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUIVer))
		return -1;

	if(-1 == DecodeDT_BOSSB_MY_DATA_CLI(&pstOut->stMyBossBInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BOSSB_PLAYER_DATA_CLI_LST(&pstOut->stPlayerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BOSSB_DATA_CLI(&pstOut->stBossBInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->astTopHurtInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_HURT_ENC_DATA(&pstOut->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszResVer, sizeof(pstOut->aszResVer)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_ENTER_BOSSB_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_ENTER_BOSSB_ACK2 *pstIn = (PKT_ENTER_BOSSB_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCliVer))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwResVer))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUIVer))
		return -1;

	if(-1 == EncodeDT_BOSSB_MY_DATA_CLI(&pstIn->stMyBossBInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BOSSB_PLAYER_DATA_CLI_LST(&pstIn->stPlayerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BOSSB_DATA_CLI2(&pstIn->stBossBInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->astTopHurtInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_HURT_ENC_DATA(&pstIn->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszResVer, sizeof(pstIn->aszResVer)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_ENTER_BOSSB_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_ENTER_BOSSB_ACK2 *pstOut = (PKT_ENTER_BOSSB_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCliVer))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwResVer))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUIVer))
		return -1;

	if(-1 == DecodeDT_BOSSB_MY_DATA_CLI(&pstOut->stMyBossBInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BOSSB_PLAYER_DATA_CLI_LST(&pstOut->stPlayerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BOSSB_DATA_CLI2(&pstOut->stBossBInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->astTopHurtInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_HURT_ENC_DATA(&pstOut->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszResVer, sizeof(pstOut->aszResVer)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_LEAVE_BOSSB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_LEAVE_BOSSB_REQ *pstIn = (PKT_LEAVE_BOSSB_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_LEAVE_BOSSB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_LEAVE_BOSSB_REQ *pstOut = (PKT_LEAVE_BOSSB_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_LEAVE_BOSSB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_LEAVE_BOSSB_ACK *pstIn = (PKT_LEAVE_BOSSB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_LEAVE_BOSSB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_LEAVE_BOSSB_ACK *pstOut = (PKT_LEAVE_BOSSB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_MOVE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_MOVE_REQ *pstIn = (PKT_BOSSB_MOVE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_MOVE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_MOVE_REQ *pstOut = (PKT_BOSSB_MOVE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_MOVE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_MOVE_ACK *pstIn = (PKT_BOSSB_MOVE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOldPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOldPosY))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_MOVE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_MOVE_ACK *pstOut = (PKT_BOSSB_MOVE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOldPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOldPosY))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_HURT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_HURT_REQ *pstIn = (PKT_BOSSB_HURT_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_HURT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_HURT_REQ *pstOut = (PKT_BOSSB_HURT_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_HURT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_HURT_ACK *pstIn = (PKT_BOSSB_HURT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurHurtValue))
		return -1;

	if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->stMyHurtInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->astTopHurtInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_HURT_ENC_DATA(&pstIn->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wReliveCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldReliveCountDown))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurBossHP))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_HURT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_HURT_ACK *pstOut = (PKT_BOSSB_HURT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurHurtValue))
		return -1;

	if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->stMyHurtInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->astTopHurtInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_HURT_ENC_DATA(&pstOut->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wReliveCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldReliveCountDown))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurBossHP))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_HURT_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_HURT_ACK2 *pstIn = (PKT_BOSSB_HURT_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurHurtValue))
		return -1;

	if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->stMyHurtInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->astTopHurtInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_HURT_ENC_DATA(&pstIn->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wReliveCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldReliveCountDown))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwTotalBossHP))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBossHP))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_HURT_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_HURT_ACK2 *pstOut = (PKT_BOSSB_HURT_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurHurtValue))
		return -1;

	if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->stMyHurtInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->astTopHurtInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_HURT_ENC_DATA(&pstOut->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wReliveCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldReliveCountDown))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwTotalBossHP))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBossHP))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_POS_NTF(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_POS_NTF *pstIn = (PKT_BOSSB_POS_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->bySyncType))
		return -1;

	if(-1 == EncodeDT_BOSSB_PLAYER_DATA_CLI(&pstIn->stPlayerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_POS_NTF(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_POS_NTF *pstOut = (PKT_BOSSB_POS_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->bySyncType))
		return -1;

	if(-1 == DecodeDT_BOSSB_PLAYER_DATA_CLI(&pstOut->stPlayerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_POS(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_POS *pstIn = (DT_BOSSB_POS*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_POS(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_POS *pstOut = (DT_BOSSB_POS*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_HURT(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_HURT *pstIn = (DT_BOSSB_HURT*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHurtValue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_HURT(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_HURT *pstOut = (DT_BOSSB_HURT*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHurtValue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_INFO_SYNC_NTF(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_INFO_SYNC_NTF *pstIn = (PKT_BOSSB_INFO_SYNC_NTF*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurBossHP))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->astTopHurtInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byLeaveNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byLeaveNum)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwLeaveInfo[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byEnterNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEnterNum)
			break;
		if(-1 == EncodeDT_BOSSB_PLAYER_DATA_CLI(&pstIn->astEnterInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byMoveNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byMoveNum)
			break;
		if(-1 == EncodeDT_BOSSB_POS(&pstIn->astMoveInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHurtNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHurtNum)
			break;
		if(-1 == EncodeDT_BOSSB_HURT(&pstIn->astHurtInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_INFO_SYNC_NTF(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_INFO_SYNC_NTF *pstOut = (PKT_BOSSB_INFO_SYNC_NTF*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurBossHP))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->astTopHurtInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelByte(pstOut->byLeaveNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byLeaveNum)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwLeaveInfo[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byEnterNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEnterNum)
			break;
		if(-1 == DecodeDT_BOSSB_PLAYER_DATA_CLI(&pstOut->astEnterInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byMoveNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byMoveNum)
			break;
		if(-1 == DecodeDT_BOSSB_POS(&pstOut->astMoveInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHurtNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHurtNum)
			break;
		if(-1 == DecodeDT_BOSSB_HURT(&pstOut->astHurtInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_INFO_SYNC_NTF2(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_INFO_SYNC_NTF2 *pstIn = (PKT_BOSSB_INFO_SYNC_NTF2*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwTotalBossHP))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBossHP))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->astTopHurtInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byLeaveNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byLeaveNum)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwLeaveInfo[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byEnterNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEnterNum)
			break;
		if(-1 == EncodeDT_BOSSB_PLAYER_DATA_CLI(&pstIn->astEnterInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byMoveNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byMoveNum)
			break;
		if(-1 == EncodeDT_BOSSB_POS(&pstIn->astMoveInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHurtNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHurtNum)
			break;
		if(-1 == EncodeDT_BOSSB_HURT(&pstIn->astHurtInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_INFO_SYNC_NTF2(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_INFO_SYNC_NTF2 *pstOut = (PKT_BOSSB_INFO_SYNC_NTF2*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwTotalBossHP))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBossHP))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->astTopHurtInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelByte(pstOut->byLeaveNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byLeaveNum)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwLeaveInfo[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byEnterNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEnterNum)
			break;
		if(-1 == DecodeDT_BOSSB_PLAYER_DATA_CLI(&pstOut->astEnterInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byMoveNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byMoveNum)
			break;
		if(-1 == DecodeDT_BOSSB_POS(&pstOut->astMoveInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHurtNum))
		return -1;

	for(i = 0; i < MAX_BOSSB_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHurtNum)
			break;
		if(-1 == DecodeDT_BOSSB_HURT(&pstOut->astHurtInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_OVER_INFO(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_OVER_INFO *pstIn = (DT_BOSSB_OVER_INFO*)pHost;

	if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->stMyHurtInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->astTopHurtInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurBossHP))
		return -1;

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stHeroEncInfo, poNetData))
		return -1;

	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->astTopEncInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stKillEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBossDeadFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedUpgrade))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_OVER_INFO(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_OVER_INFO *pstOut = (DT_BOSSB_OVER_INFO*)pHost;

	if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->stMyHurtInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->astTopHurtInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelDword(pstOut->dwTotalBossHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurBossHP))
		return -1;

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stHeroEncInfo, poNetData))
		return -1;

		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->astTopEncInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stKillEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBossDeadFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedUpgrade))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSSB_OVER_INFO2(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_OVER_INFO2 *pstIn = (DT_BOSSB_OVER_INFO2*)pHost;

	if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->stMyHurtInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->astTopHurtInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwTotalBossHP))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBossHP))
		return -1;

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stHeroEncInfo, poNetData))
		return -1;

	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->astTopEncInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stKillEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBossDeadFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedUpgrade))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSSB_OVER_INFO2(void *pHost, CNetData* poNetData)
{
	DT_BOSSB_OVER_INFO2 *pstOut = (DT_BOSSB_OVER_INFO2*)pHost;

	if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->stMyHurtInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->astTopHurtInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelUint64(pstOut->qwTotalBossHP))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBossHP))
		return -1;

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stHeroEncInfo, poNetData))
		return -1;

		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->astTopEncInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stKillEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBossDeadFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedUpgrade))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_OVER_NTF(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_OVER_NTF *pstIn = (PKT_BOSSB_OVER_NTF*)pHost;

	if(-1 == EncodeDT_BOSSB_OVER_INFO(&pstIn->stBossOverInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnreadBattleLogNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_OVER_NTF(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_OVER_NTF *pstOut = (PKT_BOSSB_OVER_NTF*)pHost;

	if(-1 == DecodeDT_BOSSB_OVER_INFO(&pstOut->stBossOverInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnreadBattleLogNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_OVER_NTF2(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_OVER_NTF2 *pstIn = (PKT_BOSSB_OVER_NTF2*)pHost;

	if(-1 == EncodeDT_BOSSB_OVER_INFO2(&pstIn->stBossOverInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnreadBattleLogNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_OVER_NTF2(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_OVER_NTF2 *pstOut = (PKT_BOSSB_OVER_NTF2*)pHost;

	if(-1 == DecodeDT_BOSSB_OVER_INFO2(&pstOut->stBossOverInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnreadBattleLogNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_OPEN_INSPIRE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_OPEN_INSPIRE_TAB_REQ *pstIn = (PKT_OPEN_INSPIRE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_OPEN_INSPIRE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_OPEN_INSPIRE_TAB_REQ *pstOut = (PKT_OPEN_INSPIRE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_INSPIRE_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_INSPIRE_TAB_DATA *pstIn = (DT_INSPIRE_TAB_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHaveIncPowerRate))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIncCostStory))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIncCostGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStoryIncRate))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldIncRate))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanIncPowerRate))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_INSPIRE_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_INSPIRE_TAB_DATA *pstOut = (DT_INSPIRE_TAB_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHaveIncPowerRate))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIncCostStory))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIncCostGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStoryIncRate))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldIncRate))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanIncPowerRate))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_OPEN_INSPIRE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_OPEN_INSPIRE_TAB_ACK *pstIn = (PKT_OPEN_INSPIRE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_INSPIRE_TAB_DATA(&pstIn->stInspireTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_OPEN_INSPIRE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_OPEN_INSPIRE_TAB_ACK *pstOut = (PKT_OPEN_INSPIRE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_INSPIRE_TAB_DATA(&pstOut->stInspireTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_INSPIRE_POWER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_INSPIRE_POWER_REQ *pstIn = (PKT_INSPIRE_POWER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGoldInspireFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_INSPIRE_POWER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_INSPIRE_POWER_REQ *pstOut = (PKT_INSPIRE_POWER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGoldInspireFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_INSPIRE_POWER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_INSPIRE_POWER_ACK *pstIn = (PKT_INSPIRE_POWER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_INSPIRE_TAB_DATA(&pstIn->stInspireTabInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_INSPIRE_POWER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_INSPIRE_POWER_ACK *pstOut = (PKT_INSPIRE_POWER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_INSPIRE_TAB_DATA(&pstOut->stInspireTabInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_RELIVE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_RELIVE_REQ *pstIn = (PKT_BOSSB_RELIVE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_RELIVE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_RELIVE_REQ *pstOut = (PKT_BOSSB_RELIVE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_RELIVE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_RELIVE_ACK *pstIn = (PKT_BOSSB_RELIVE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_RELIVE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_RELIVE_ACK *pstOut = (PKT_BOSSB_RELIVE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_GET_LAST_BOSSB_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_GET_LAST_BOSSB_INFO_REQ *pstIn = (PKT_BOSSB_GET_LAST_BOSSB_INFO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_GET_LAST_BOSSB_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_GET_LAST_BOSSB_INFO_REQ *pstOut = (PKT_BOSSB_GET_LAST_BOSSB_INFO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_GET_LAST_BOSSB_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK *pstIn = (PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BOSSB_OVER_INFO(&pstIn->stBossOverInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_GET_LAST_BOSSB_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK *pstOut = (PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BOSSB_OVER_INFO(&pstOut->stBossOverInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_BOSSB_GET_LAST_BOSSB_INFO_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK2 *pstIn = (PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BOSSB_OVER_INFO2(&pstIn->stBossOverInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_BOSSB_GET_LAST_BOSSB_INFO_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK2 *pstOut = (PKT_BOSSB_GET_LAST_BOSSB_INFO_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BOSSB_OVER_INFO2(&pstOut->stBossOverInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ *pstIn = (PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ *pstOut = (PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK *pstIn = (PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stHeroBaseInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_SKILL_DATA_CLI(&pstIn->stSkillInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RECHARGE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK *pstOut = (PKT_CLILS_OPEN_RECHARGE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stHeroBaseInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_SKILL_DATA_CLI(&pstOut->stSkillInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RECHARGE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_RECV_RECHARGE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ *pstIn = (PKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ *pstOut = (PKT_CLILS_OPEN_SCORE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK *pstIn = (PKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAppAddNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_APP_ADDRESS_NUM; i++)
	{
		if(i >= (INT32)pstIn->byAppAddNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyAppAddress[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	for(i = 0; i < MAX_SCORE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK *pstOut = (PKT_CLILS_OPEN_SCORE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAppAddNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_APP_ADDRESS_NUM; i++)
	{
		if(i >= (INT32)pstOut->byAppAddNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyAppAddress[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	for(i = 0; i < MAX_SCORE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_RECV_SCORE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_RECV_SCORE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_RANDOM_DSPNAME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANDOM_DSPNAME_REQ *pstIn = (PKT_CLIGS_GET_RANDOM_DSPNAME_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_RANDOM_DSPNAME_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANDOM_DSPNAME_REQ *pstOut = (PKT_CLIGS_GET_RANDOM_DSPNAME_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_RANDOM_DSPNAME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANDOM_DSPNAME_ACK *pstIn = (PKT_CLIGS_GET_RANDOM_DSPNAME_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDspName, sizeof(pstIn->aszDspName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_RANDOM_DSPNAME_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_RANDOM_DSPNAME_ACK *pstOut = (PKT_CLIGS_GET_RANDOM_DSPNAME_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDspName, sizeof(pstOut->aszDspName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI *pstIn = (DT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwOverTime))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBossID))
		return -1;

	if(-1 == EncodeDT_BOSSB_HURT_RATE(&pstIn->stMyHurtInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stHeroEncInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
	{
		if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->astBossBTopEncInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_BOSS_BATTLE_ENC_DATA(&pstIn->stBossBKillEncInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI *pstOut = (DT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwOverTime))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBossID))
		return -1;

	if(-1 == DecodeDT_BOSSB_HURT_RATE(&pstOut->stMyHurtInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stHurtEncInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stHeroEncInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BOSS_ENC_TOP_NUM; i++)
		{
			if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->astBossBTopEncInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_BOSS_BATTLE_ENC_DATA(&pstOut->stBossBKillEncInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ *pstIn = (PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ *pstOut = (PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK *pstIn = (PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSSB_BATTLE_LOG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI(&pstIn->astBossBattleBL[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK *pstOut = (PKT_CLIGS_OPEN_BOSSB_BATTLE_LOG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BOSSB_BATTLE_LOG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_BOSS_BATTLE_PLAYER_BATTLE_LOG_DATA_CLI(&pstOut->astBossBattleBL[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_UPGRADE_LEVEL(void *pHost, CNetData* poNetData)
{
	DT_HERO_UPGRADE_LEVEL *pstIn = (DT_HERO_UPGRADE_LEVEL*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFreeLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_UPGRADE_LEVEL(void *pHost, CNetData* poNetData)
{
	DT_HERO_UPGRADE_LEVEL *pstOut = (DT_HERO_UPGRADE_LEVEL*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFreeLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ *pstIn = (PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ *pstOut = (PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK *pstIn = (PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFreePercentage))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldPercentage))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGold))
		return -1;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stHeroInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->astHeroInfoLst[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_UPGRADE_LEVEL(&pstIn->astUpgradeHeroInfoLst[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK *pstOut = (PKT_CLIGS_OPEN_EXPERIENCE_TRANSFER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFreePercentage))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldPercentage))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGold))
		return -1;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stHeroInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->astHeroInfoLst[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_UPGRADE_LEVEL(&pstOut->astUpgradeHeroInfoLst[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXPERIENCE_TRANSFER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXPERIENCE_TRANSFER_REQ *pstIn = (PKT_CLIGS_EXPERIENCE_TRANSFER_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTransHeroID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXPERIENCE_TRANSFER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXPERIENCE_TRANSFER_REQ *pstOut = (PKT_CLIGS_EXPERIENCE_TRANSFER_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTransHeroID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXPERIENCE_TRANSFER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXPERIENCE_TRANSFER_ACK *pstIn = (PKT_CLIGS_EXPERIENCE_TRANSFER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerChangeData, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stHeroInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stTransHeroInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXPERIENCE_TRANSFER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXPERIENCE_TRANSFER_ACK *pstOut = (PKT_CLIGS_EXPERIENCE_TRANSFER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerChangeData, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stHeroInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stTransHeroInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RDCHALLENGE_POINT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_RDCHALLENGE_POINT_DATA_CLI *pstIn = (DT_RDCHALLENGE_POINT_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCurChallengePoint))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxChallengePoint))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRefreshCD))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCountDown))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RDCHALLENGE_POINT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_RDCHALLENGE_POINT_DATA_CLI *pstOut = (DT_RDCHALLENGE_POINT_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCurChallengePoint))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxChallengePoint))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRefreshCD))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCountDown))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byRefreshFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_RDCHALLENGE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byRefreshFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RDC_ENC_DATA(void *pHost, CNetData* poNetData)
{
	DT_RDC_ENC_DATA *pstIn = (DT_RDC_ENC_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwJingJie))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPurpleGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RDC_ENC_DATA(void *pHost, CNetData* poNetData)
{
	DT_RDC_ENC_DATA *pstOut = (DT_RDC_ENC_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwJingJie))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPurpleGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RDC_PLAYER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_RDC_PLAYER_DATA_CLI *pstIn = (DT_RDC_PLAYER_DATA_CLI*)pHost;

	if(-1 == EncodeDT_RDC_PLAYER_DATA(&pstIn->stPlayerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RDC_ENC_DATA(&pstIn->stSuccessEnc, poNetData))
		return -1;

	if(-1 == EncodeDT_RDC_ENC_DATA(&pstIn->stFailEnc, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RDC_PLAYER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_RDC_PLAYER_DATA_CLI *pstOut = (DT_RDC_PLAYER_DATA_CLI*)pHost;

	if(-1 == DecodeDT_RDC_PLAYER_DATA(&pstOut->stPlayerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RDC_ENC_DATA(&pstOut->stSuccessEnc, poNetData))
		return -1;

	if(-1 == DecodeDT_RDC_ENC_DATA(&pstOut->stFailEnc, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RDC_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_RDC_TAB_DATA *pstIn = (DT_RDC_TAB_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_RDC_NUM; i++)
	{
		if(i >= (INT32)pstIn->byPlayerNum)
			break;
		if(-1 == EncodeDT_RDC_PLAYER_DATA_CLI(&pstIn->astPlayerInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_RDCHALLENGE_POINT_DATA_CLI(&pstIn->stChallengePointInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wChallengeCountDown))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRefreshCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClrCDGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RDC_TAB_DATA(void *pHost, CNetData* poNetData)
{
	DT_RDC_TAB_DATA *pstOut = (DT_RDC_TAB_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GET_RDC_NUM; i++)
	{
		if(i >= (INT32)pstOut->byPlayerNum)
			break;
		if(-1 == DecodeDT_RDC_PLAYER_DATA_CLI(&pstOut->astPlayerInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_RDCHALLENGE_POINT_DATA_CLI(&pstOut->stChallengePointInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wChallengeCountDown))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRefreshCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClrCDGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RDC_TAB_DATA(&pstIn->stTabInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveWorship))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_RDCHALLENGE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RDC_TAB_DATA(&pstOut->stTabInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveWorship))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RDCHALLENGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RDCHALLENGE_REQ *pstIn = (PKT_CLIGS_RDCHALLENGE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RDCHALLENGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RDCHALLENGE_REQ *pstOut = (PKT_CLIGS_RDCHALLENGE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RDCHALLENGE_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RDCHALLENGE_ACK3 *pstIn = (PKT_CLIGS_RDCHALLENGE_ACK3*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA3(&pstIn->stBattleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RDC_TAB_DATA(&pstIn->stTabInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RDC_ENC_DATA(&pstIn->stEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RDCHALLENGE_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RDCHALLENGE_ACK3 *pstOut = (PKT_CLIGS_RDCHALLENGE_ACK3*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA3(&pstOut->stBattleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RDC_TAB_DATA(&pstOut->stTabInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RDC_ENC_DATA(&pstOut->stEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_RDCHALLENGE_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_RDCHALLENGE_CD_REQ *pstIn = (PKT_CLIGS_CLR_RDCHALLENGE_CD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_RDCHALLENGE_CD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_RDCHALLENGE_CD_REQ *pstOut = (PKT_CLIGS_CLR_RDCHALLENGE_CD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_RDCHALLENGE_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_RDCHALLENGE_CD_ACK *pstIn = (PKT_CLIGS_CLR_RDCHALLENGE_CD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_RDCHALLENGE_CD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_RDCHALLENGE_CD_ACK *pstOut = (PKT_CLIGS_CLR_RDCHALLENGE_CD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_WORSHIP_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_WORSHIP_DATA_CLI *pstIn = (DT_WORSHIP_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byWorshipTypeLevel))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoachID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedVipLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEncJingJie))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEncPurpleGas))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveWorship))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_WORSHIP_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_WORSHIP_DATA_CLI *pstOut = (DT_WORSHIP_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byWorshipTypeLevel))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoachID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedVipLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEncJingJie))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEncPurpleGas))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveWorship))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_WORSHIP_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_WORSHIP_DATA_CLI_LST *pstIn = (DT_WORSHIP_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_WORSHIP_NUM; i++)
	{
		if(i >= (INT32)pstIn->wNum)
			break;
		if(-1 == EncodeDT_WORSHIP_DATA_CLI(&pstIn->astWorshipInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_WORSHIP_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_WORSHIP_DATA_CLI_LST *pstOut = (DT_WORSHIP_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_WORSHIP_NUM; i++)
	{
		if(i >= (INT32)pstOut->wNum)
			break;
		if(-1 == DecodeDT_WORSHIP_DATA_CLI(&pstOut->astWorshipInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_WORSHIP_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_WORSHIP_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_WORSHIP_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byWorshipType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_WORSHIP_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_WORSHIP_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_WORSHIP_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byWorshipType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_WORSHIP_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_WORSHIP_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_WORSHIP_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_WORSHIP_DATA_CLI_LST(&pstIn->stWorshipInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_WORSHIP_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_WORSHIP_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_WORSHIP_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_WORSHIP_DATA_CLI_LST(&pstOut->stWorshipInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_WORSHIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WORSHIP_REQ *pstIn = (PKT_CLIGS_WORSHIP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byWorshipType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byWorshipTypeLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_WORSHIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WORSHIP_REQ *pstOut = (PKT_CLIGS_WORSHIP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byWorshipType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byWorshipTypeLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_WORSHIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WORSHIP_ACK *pstIn = (PKT_CLIGS_WORSHIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_WORSHIP_DATA_CLI_LST(&pstIn->stWorshipInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_WORSHIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WORSHIP_ACK *pstOut = (PKT_CLIGS_WORSHIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_WORSHIP_DATA_CLI_LST(&pstOut->stWorshipInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACTIVITY_NOTIFY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVITY_NOTIFY_REQ *pstIn = (PKT_CLIGS_ACTIVITY_NOTIFY_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byActivityType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNotify))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACTIVITY_NOTIFY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVITY_NOTIFY_REQ *pstOut = (PKT_CLIGS_ACTIVITY_NOTIFY_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byActivityType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNotify))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACTIVITY_NOTIFY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVITY_NOTIFY_ACK *pstIn = (PKT_CLIGS_ACTIVITY_NOTIFY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACTIVITY_NOTIFY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVITY_NOTIFY_ACK *pstOut = (PKT_CLIGS_ACTIVITY_NOTIFY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DOGFECES_BUILD_TIP(void *pHost, CNetData* poNetData)
{
	DT_DOGFECES_BUILD_TIP *pstIn = (DT_DOGFECES_BUILD_TIP*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wBuildID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParameter1))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParameter2))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParameter3))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParameter4))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwParameter5))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DOGFECES_BUILD_TIP(void *pHost, CNetData* poNetData)
{
	DT_DOGFECES_BUILD_TIP *pstOut = (DT_DOGFECES_BUILD_TIP*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wBuildID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParameter1))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParameter2))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParameter3))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParameter4))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwParameter5))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DOGFECES_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DOGFECES_REQ *pstIn = (PKT_CLIGS_OPEN_DOGFECES_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DOGFECES_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DOGFECES_REQ *pstOut = (PKT_CLIGS_OPEN_DOGFECES_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DOGFECES_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DOGFECES_ACK *pstIn = (PKT_CLIGS_OPEN_DOGFECES_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_DOGFECES_BUILD_TIP_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_DOGFECES_BUILD_TIP(&pstIn->astDogFecesBuildTip[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DOGFECES_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DOGFECES_ACK *pstOut = (PKT_CLIGS_OPEN_DOGFECES_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_DOGFECES_BUILD_TIP_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_DOGFECES_BUILD_TIP(&pstOut->astDogFecesBuildTip[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ACTIVITY_CENTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_CENTER_REQ *pstIn = (PKT_CLIGS_GET_ACTIVITY_CENTER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ACTIVITY_CENTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_CENTER_REQ *pstOut = (PKT_CLIGS_GET_ACTIVITY_CENTER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ACTIVITY_CENTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_CENTER_ACK *pstIn = (PKT_CLIGS_GET_ACTIVITY_CENTER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byActivityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityNum)
			break;
		if(-1 == EncodeDT_ACTIVITY_BASE_DATA(&pstIn->astActivityInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyActivityStartCountDown[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ACTIVITY_CENTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_CENTER_ACK *pstOut = (PKT_CLIGS_GET_ACTIVITY_CENTER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byActivityNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityNum)
			break;
		if(-1 == DecodeDT_ACTIVITY_BASE_DATA(&pstOut->astActivityInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_ACTIVITY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyActivityStartCountDown[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACTIVITY_ENCOURAGE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ACTIVITY_ENCOURAGE_DATA_CLI *pstIn = (DT_ACTIVITY_ENCOURAGE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wActivityID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanReceive))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySeriesNo))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszActivityName, sizeof(pstIn->aszActivityName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszActivityDesc, sizeof(pstIn->aszActivityDesc)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszObtainingConditions, sizeof(pstIn->aszObtainingConditions)))
		return -1;

	if(-1 == EncodeDT_ENCOURAGE_DATA(&pstIn->stEncourageData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACTIVITY_ENCOURAGE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_ACTIVITY_ENCOURAGE_DATA_CLI *pstOut = (DT_ACTIVITY_ENCOURAGE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wActivityID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanReceive))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySeriesNo))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszActivityName, sizeof(pstOut->aszActivityName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszActivityDesc, sizeof(pstOut->aszActivityDesc)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszObtainingConditions, sizeof(pstOut->aszObtainingConditions)))
		return -1;

	if(-1 == DecodeDT_ENCOURAGE_DATA(&pstOut->stEncourageData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ *pstIn = (PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ *pstOut = (PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK *pstIn = (PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byActivityEncourageNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_ENCOURAGE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityEncourageNum)
			break;
		if(-1 == EncodeDT_ACTIVITY_ENCOURAGE_DATA_CLI(&pstIn->astActivityEncourageInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK *pstOut = (PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byActivityEncourageNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_ENCOURAGE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityEncourageNum)
			break;
		if(-1 == DecodeDT_ACTIVITY_ENCOURAGE_DATA_CLI(&pstOut->astActivityEncourageInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ *pstIn = (PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wActivityID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszSeriesNo, sizeof(pstIn->aszSeriesNo)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ *pstOut = (PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wActivityID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszSeriesNo, sizeof(pstOut->aszSeriesNo)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK *pstIn = (PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wActivityIDOld))
		return -1;

	if(-1 == EncodeDT_RSYNC_RECV_ENCOURAGE_DATA(&pstIn->stRsyncRecvEncourageData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHide))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszErrInfo, sizeof(pstIn->aszErrInfo)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK *pstOut = (PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wActivityIDOld))
		return -1;

	if(-1 == DecodeDT_RSYNC_RECV_ENCOURAGE_DATA(&pstOut->stRsyncRecvEncourageData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHide))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszErrInfo, sizeof(pstOut->aszErrInfo)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ACTIVITY_ENCOURAGE_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_ACTIVITY_ENCOURAGE_DATA_CLI2 *pstIn = (DT_ACTIVITY_ENCOURAGE_DATA_CLI2*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwActivityID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanReceive))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySeriesNo))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszActivityName, sizeof(pstIn->aszActivityName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszActivityDesc, sizeof(pstIn->aszActivityDesc)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszObtainingConditions, sizeof(pstIn->aszObtainingConditions)))
		return -1;

	if(-1 == EncodeDT_ENCOURAGE_DATA(&pstIn->stEncourageData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ACTIVITY_ENCOURAGE_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_ACTIVITY_ENCOURAGE_DATA_CLI2 *pstOut = (DT_ACTIVITY_ENCOURAGE_DATA_CLI2*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwActivityID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanReceive))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySeriesNo))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszActivityName, sizeof(pstOut->aszActivityName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszActivityDesc, sizeof(pstOut->aszActivityDesc)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszObtainingConditions, sizeof(pstOut->aszObtainingConditions)))
		return -1;

	if(-1 == DecodeDT_ENCOURAGE_DATA(&pstOut->stEncourageData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ2 *pstIn = (PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ2 *pstOut = (PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK2 *pstIn = (PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byActivityEncourageNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_ENCOURAGE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byActivityEncourageNum)
			break;
		if(-1 == EncodeDT_ACTIVITY_ENCOURAGE_DATA_CLI2(&pstIn->astActivityEncourageInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK2 *pstOut = (PKT_CLIGS_GET_ACTIVITY_ENCOURRAGE_INFO_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byActivityEncourageNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ACTIVITY_ENCOURAGE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byActivityEncourageNum)
			break;
		if(-1 == DecodeDT_ACTIVITY_ENCOURAGE_DATA_CLI2(&pstOut->astActivityEncourageInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ2 *pstIn = (PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ2*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwActivityID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszSeriesNo, sizeof(pstIn->aszSeriesNo)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ2 *pstOut = (PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_REQ2*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwActivityID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszSeriesNo, sizeof(pstOut->aszSeriesNo)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK2 *pstIn = (PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwActivityID))
		return -1;

	if(-1 == EncodeDT_RSYNC_RECV_ENCOURAGE_DATA(&pstIn->stRsyncRecvEncourageData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHide))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszErrInfo, sizeof(pstIn->aszErrInfo)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK2 *pstOut = (PKT_CLIGS_RECV_ACTIVITY_ENCOURRAGE_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwActivityID))
		return -1;

	if(-1 == DecodeDT_RSYNC_RECV_ENCOURAGE_DATA(&pstOut->stRsyncRecvEncourageData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHide))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszErrInfo, sizeof(pstOut->aszErrInfo)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GEM_MAKER_DATA(void *pHost, CNetData* poNetData)
{
	DT_GEM_MAKER_DATA *pstIn = (DT_GEM_MAKER_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wMakerKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPileNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGemLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedBlueGas))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOpenNeedTowerNum))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszSuccessRate, sizeof(pstIn->aszSuccessRate)))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI2(&pstIn->stGemInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GEM_MAKER_DATA(void *pHost, CNetData* poNetData)
{
	DT_GEM_MAKER_DATA *pstOut = (DT_GEM_MAKER_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wMakerKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPileNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGemLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedBlueGas))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOpenNeedTowerNum))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszSuccessRate, sizeof(pstOut->aszSuccessRate)))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI2(&pstOut->stGemInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_GEM_MAKER_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurTowerNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMakerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GEM_LEVEL; i++)
	{
		if(i >= (INT32)pstIn->byMakerNum)
			break;
		if(-1 == EncodeDT_GEM_MAKER_DATA(&pstIn->astGemMakerInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddTString(pstIn->aszOtherPrompt, sizeof(pstIn->aszOtherPrompt)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_GEM_MAKER_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurTowerNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMakerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GEM_LEVEL; i++)
	{
		if(i >= (INT32)pstOut->byMakerNum)
			break;
		if(-1 == DecodeDT_GEM_MAKER_DATA(&pstOut->astGemMakerInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelTString(pstOut->aszOtherPrompt, sizeof(pstOut->aszOtherPrompt)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_REQ *pstIn = (PKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_REQ *pstOut = (PKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_ACK *pstIn = (PKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurTowerNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMakerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GEM_LEVEL_EX; i++)
	{
		if(i >= (INT32)pstIn->byMakerNum)
			break;
		if(-1 == EncodeDT_GEM_MAKER_DATA(&pstIn->astGemMakerInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddTString(pstIn->aszOtherPrompt, sizeof(pstIn->aszOtherPrompt)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_ACK *pstOut = (PKT_CLIGS_OPEN_GEM_MAKER_TAB_EX_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurTowerNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMakerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GEM_LEVEL_EX; i++)
	{
		if(i >= (INT32)pstOut->byMakerNum)
			break;
		if(-1 == DecodeDT_GEM_MAKER_DATA(&pstOut->astGemMakerInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelTString(pstOut->aszOtherPrompt, sizeof(pstOut->aszOtherPrompt)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_RATING_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RATING_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_RECV_RATING_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSceneIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wChapterID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_RATING_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RATING_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_RECV_RATING_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSceneIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wChapterID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_RATING_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RATING_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_RECV_RATING_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wChapterID))
		return -1;

	if(-1 == EncodeDT_RSYNC_RECV_ENCOURAGE_DATA(&pstIn->stRsyncRecvEncourageData, poNetData))
		return -1;

	if(-1 == EncodeDT_ACCUMULATED_SCORE_ENCOURAGE(&pstIn->stAccumulatedEncourage, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_RATING_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_RATING_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_RECV_RATING_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wChapterID))
		return -1;

	if(-1 == DecodeDT_RSYNC_RECV_ENCOURAGE_DATA(&pstOut->stRsyncRecvEncourageData, poNetData))
		return -1;

	if(-1 == DecodeDT_ACCUMULATED_SCORE_ENCOURAGE(&pstOut->stAccumulatedEncourage, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_STUDY_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_STUDY_DATA_CLI2 *pstIn = (DT_STUDY_DATA_CLI2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byStudyColorKind))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyAttrKind1))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStudyAttrValue1))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStudyExp))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextLevelAttrValue1))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeNeedExp))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyAttrKind2))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStudyAttrValue2))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextLevelAttrValue2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_STUDY_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_STUDY_DATA_CLI2 *pstOut = (DT_STUDY_DATA_CLI2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byStudyColorKind))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyAttrKind1))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStudyAttrValue1))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStudyExp))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextLevelAttrValue1))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeNeedExp))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyAttrKind2))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStudyAttrValue2))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextLevelAttrValue2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_AWAKEN_TAB_DATA2(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_TAB_DATA2 *pstIn = (DT_AWAKEN_TAB_DATA2*)pHost;

	if(-1 == EncodeDT_AWAKEN_BASE_DATA(&pstIn->stBaseInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wMaxStudyLevel))
		return -1;

	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(-1 == poNetData->AddDword(pstIn->adwAwakenCoin[i]))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwAwakenGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTatalCallNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanCallNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->stCallStudy, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_AWAKEN_TAB_DATA2(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_TAB_DATA2 *pstOut = (DT_AWAKEN_TAB_DATA2*)pHost;

	if(-1 == DecodeDT_AWAKEN_BASE_DATA(&pstOut->stBaseInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelWord(pstOut->wMaxStudyLevel))
		return -1;

	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(-1 == poNetData->DelDword(pstOut->adwAwakenCoin[i]))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwAwakenGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTatalCallNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanCallNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->stCallStudy, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_AWAKEN_STUDY_EXCHANGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_STUDY_EXCHANGE_DATA *pstIn = (DT_AWAKEN_STUDY_EXCHANGE_DATA*)pHost;

	if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->stStudyInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedClip))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNeePlayerLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_AWAKEN_STUDY_EXCHANGE_DATA(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_STUDY_EXCHANGE_DATA *pstOut = (DT_AWAKEN_STUDY_EXCHANGE_DATA*)pHost;

	if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->stStudyInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedClip))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNeePlayerLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byExchangeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_EXCHANGE_STUDY_NUM; i++)
	{
		if(i >= (INT32)pstIn->byExchangeNum)
			break;
		if(-1 == EncodeDT_AWAKEN_STUDY_EXCHANGE_DATA(&pstIn->astStudyExchangeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStudyClip))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_AWAKEN_EXCHANGE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byExchangeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_EXCHANGE_STUDY_NUM; i++)
	{
		if(i >= (INT32)pstOut->byExchangeNum)
			break;
		if(-1 == DecodeDT_AWAKEN_STUDY_EXCHANGE_DATA(&pstOut->astStudyExchangeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStudyClip))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXCHANGE_STUDY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_STUDY_REQ *pstIn = (PKT_CLIGS_EXCHANGE_STUDY_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byStudyColorKind))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyAttrKind1))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyAttrKind2))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXCHANGE_STUDY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_STUDY_REQ *pstOut = (PKT_CLIGS_EXCHANGE_STUDY_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byStudyColorKind))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyAttrKind1))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyAttrKind2))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXCHANGE_STUDY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_STUDY_ACK *pstIn = (PKT_CLIGS_EXCHANGE_STUDY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyBagIdx))
		return -1;

	if(-1 == EncodeDT_AWAKEN_TAB_DATA2(&pstIn->stAwakenTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXCHANGE_STUDY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_STUDY_ACK *pstOut = (PKT_CLIGS_EXCHANGE_STUDY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyBagIdx))
		return -1;

	if(-1 == DecodeDT_AWAKEN_TAB_DATA2(&pstOut->stAwakenTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COMPOSE_EQUIP_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_COMPOSE_EQUIP_DATA_CLI *pstIn = (DT_COMPOSE_EQUIP_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDressPos))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStrengthenLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressLevel))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stBattleAttribute, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COMPOSE_EQUIP_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_COMPOSE_EQUIP_DATA_CLI *pstOut = (DT_COMPOSE_EQUIP_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDressPos))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStrengthenLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressLevel))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stBattleAttribute, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_COMPOSE_LEVEL_DATA_CLI *pstIn = (DT_EQUIP_COMPOSE_LEVEL_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEquipNum)
			break;
		if(-1 == EncodeDT_COMPOSE_EQUIP_DATA_CLI(&pstIn->astEquipInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wEquipClipNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wComposeNeedNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurLowColor))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHitKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwColorComposeNeedGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCommonComposeNeedGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_COMPOSE_LEVEL_DATA_CLI *pstOut = (DT_EQUIP_COMPOSE_LEVEL_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEquipNum)
			break;
		if(-1 == DecodeDT_COMPOSE_EQUIP_DATA_CLI(&pstOut->astEquipInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wEquipClipNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wComposeNeedNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurLowColor))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHitKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwColorComposeNeedGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCommonComposeNeedGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipLevelNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_EQUIPLEVEL_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEquipLevelNum)
			break;
		if(-1 == EncodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(&pstIn->astEquipLevelInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wComposeCountDown))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_EQUIP_COMPOSE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipLevelNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_EQUIPLEVEL_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEquipLevelNum)
			break;
		if(-1 == DecodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(&pstOut->astEquipLevelInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wComposeCountDown))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_COMPOSE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_COMPOSE_REQ *pstIn = (PKT_CLIGS_EQUIP_COMPOSE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurColorFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_COMPOSE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_COMPOSE_REQ *pstOut = (PKT_CLIGS_EQUIP_COMPOSE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurColorFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_COMPOSE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_COMPOSE_ACK *pstIn = (PKT_CLIGS_EQUIP_COMPOSE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(&pstIn->stEquipLevelInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wComposeCountDown))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurBlueGas))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_COMPOSE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_COMPOSE_ACK *pstOut = (PKT_CLIGS_EQUIP_COMPOSE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(&pstOut->stEquipLevelInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wComposeCountDown))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurBlueGas))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_COMPOSE_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_COMPOSE_EQUIP_REQ *pstIn = (PKT_CLIGS_RECV_COMPOSE_EQUIP_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_COMPOSE_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_COMPOSE_EQUIP_REQ *pstOut = (PKT_CLIGS_RECV_COMPOSE_EQUIP_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_COMPOSE_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_COMPOSE_EQUIP_ACK *pstIn = (PKT_CLIGS_RECV_COMPOSE_EQUIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(&pstIn->stEquipLevelInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->stRecvEquipInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstIn->stRecvEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStrengthen10Coin))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_COMPOSE_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_COMPOSE_EQUIP_ACK *pstOut = (PKT_CLIGS_RECV_COMPOSE_EQUIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_EQUIP_COMPOSE_LEVEL_DATA_CLI(&pstOut->stEquipLevelInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->stRecvEquipInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstOut->stRecvEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStrengthen10Coin))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_DATA_TO_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_DATA_TO_CLI *pstIn = (DT_FACTION_DATA_TO_CLI*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionRank))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionFunds))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionAnnouncement, sizeof(pstIn->aszFactionAnnouncement)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_DATA_TO_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_DATA_TO_CLI *pstOut = (DT_FACTION_DATA_TO_CLI*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionRank))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionFunds))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionAnnouncement, sizeof(pstOut->aszFactionAnnouncement)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_BASE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BASE_DATA_CLI *pstIn = (DT_FACTION_BASE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byJoinFlag))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFactionNumberPeople))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFactionMaxPeople))
		return -1;

	if(-1 == EncodeDT_FACTION_DATA_TO_CLI(&pstIn->stFactionBaseData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_BASE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BASE_DATA_CLI *pstOut = (DT_FACTION_BASE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byJoinFlag))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFactionNumberPeople))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFactionMaxPeople))
		return -1;

	if(-1 == DecodeDT_FACTION_DATA_TO_CLI(&pstOut->stFactionBaseData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_BASE_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BASE_DATA_CLI_LST *pstIn = (DT_FACTION_BASE_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_CLI_NUM; i++)
	{
		if(i >= (INT32)pstIn->wFactionNum)
			break;
		if(-1 == EncodeDT_FACTION_BASE_DATA_CLI(&pstIn->astFactionBaseData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_BASE_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BASE_DATA_CLI_LST *pstOut = (DT_FACTION_BASE_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_CLI_NUM; i++)
	{
		if(i >= (INT32)pstOut->wFactionNum)
			break;
		if(-1 == DecodeDT_FACTION_BASE_DATA_CLI(&pstOut->astFactionBaseData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_OPEN_FACTION_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_OPEN_FACTION_BASE_DATA *pstIn = (DT_OPEN_FACTION_BASE_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCreateFactionCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCreateFactionGold))
		return -1;

	if(-1 == EncodeDT_FACTION_BASE_DATA_CLI_LST(&pstIn->stRankFactionBaseDataCliLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_OPEN_FACTION_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_OPEN_FACTION_BASE_DATA *pstOut = (DT_OPEN_FACTION_BASE_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCreateFactionCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCreateFactionGold))
		return -1;

	if(-1 == DecodeDT_FACTION_BASE_DATA_CLI_LST(&pstOut->stRankFactionBaseDataCliLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_PLAYER_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_CLI *pstIn = (DT_FACTION_PLAYER_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRank))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byJobType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDoorsTributeValues))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwDoorsTributeSum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOffLineSeconds))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_PLAYER_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_CLI *pstOut = (DT_FACTION_PLAYER_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRank))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byJobType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDoorsTributeValues))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwDoorsTributeSum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOffLineSeconds))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_PLAYER_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_CLI_LST *pstIn = (DT_FACTION_PLAYER_CLI_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->wFactionNum)
			break;
		if(-1 == EncodeDT_FACTION_PLAYER_CLI(&pstIn->astFactionPlayerCli[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_PLAYER_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_CLI_LST *pstOut = (DT_FACTION_PLAYER_CLI_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->wFactionNum)
			break;
		if(-1 == DecodeDT_FACTION_PLAYER_CLI(&pstOut->astFactionPlayerCli[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_BASE_OWNER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BASE_OWNER_DATA_CLI *pstIn = (DT_FACTION_BASE_OWNER_DATA_CLI*)pHost;

	if(-1 == EncodeDT_FACTION_BASE_DATA(&pstIn->stFactionBaseData, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFactionNumberPeople))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxFactionNumberPeople))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionFunds))
		return -1;

	if(-1 == EncodeDT_FACTION_AUTHORITY(&pstIn->stFactionAuthority, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszHeadName, sizeof(pstIn->aszHeadName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMyDoorsTribute))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwMySumDoorsTribute))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecvFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_BASE_OWNER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BASE_OWNER_DATA_CLI *pstOut = (DT_FACTION_BASE_OWNER_DATA_CLI*)pHost;

	if(-1 == DecodeDT_FACTION_BASE_DATA(&pstOut->stFactionBaseData, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFactionNumberPeople))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxFactionNumberPeople))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionFunds))
		return -1;

	if(-1 == DecodeDT_FACTION_AUTHORITY(&pstOut->stFactionAuthority, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszHeadName, sizeof(pstOut->aszHeadName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMyDoorsTribute))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwMySumDoorsTribute))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecvFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_OWNER_DATA(void *pHost, CNetData* poNetData)
{
	DT_FACTION_OWNER_DATA *pstIn = (DT_FACTION_OWNER_DATA*)pHost;

	if(-1 == EncodeDT_FACTION_BASE_OWNER_DATA_CLI(&pstIn->stFactionBaseData, poNetData))
		return -1;

	if(-1 == EncodeDT_FACTION_PLAYER_CLI_LST(&pstIn->stFactionPlayerCliLst, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAuditNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_OWNER_DATA(void *pHost, CNetData* poNetData)
{
	DT_FACTION_OWNER_DATA *pstOut = (DT_FACTION_OWNER_DATA*)pHost;

	if(-1 == DecodeDT_FACTION_BASE_OWNER_DATA_CLI(&pstOut->stFactionBaseData, poNetData))
		return -1;

	if(-1 == DecodeDT_FACTION_PLAYER_CLI_LST(&pstOut->stFactionPlayerCliLst, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAuditNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeUnDT_OPEN_FACTION_CONDITION(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case NOTIN:
		return EncodeDT_OPEN_FACTION_BASE_DATA(pHost, poNetData);
	case OWNER:
		return EncodeDT_FACTION_OWNER_DATA(pHost, poNetData);
	default: return -1;
	}
}

INT32 DecodeUnDT_OPEN_FACTION_CONDITION(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case NOTIN:
		return DecodeDT_OPEN_FACTION_BASE_DATA(pHost, poNetData);
	case OWNER:
		return DecodeDT_FACTION_OWNER_DATA(pHost, poNetData);
	default: return -1;
	}
}

INT32 EncodePKT_CLIGS_APPLY_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_APPLY_FACTION_REQ *pstIn = (PKT_CLIGS_APPLY_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_APPLY_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_APPLY_FACTION_REQ *pstOut = (PKT_CLIGS_APPLY_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_APPLY_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_APPLY_FACTION_ACK *pstIn = (PKT_CLIGS_APPLY_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJoinFactionCDTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_APPLY_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_APPLY_FACTION_ACK *pstOut = (PKT_CLIGS_APPLY_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJoinFactionCDTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CANCEL_APPLY_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CANCEL_APPLY_FACTION_REQ *pstIn = (PKT_CLIGS_CANCEL_APPLY_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CANCEL_APPLY_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CANCEL_APPLY_FACTION_REQ *pstOut = (PKT_CLIGS_CANCEL_APPLY_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CANCEL_APPLY_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CANCEL_APPLY_FACTION_ACK *pstIn = (PKT_CLIGS_CANCEL_APPLY_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CANCEL_APPLY_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CANCEL_APPLY_FACTION_ACK *pstOut = (PKT_CLIGS_CANCEL_APPLY_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CREATE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CREATE_FACTION_REQ *pstIn = (PKT_CLIGS_CREATE_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCreateFactionType))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionDescName, sizeof(pstIn->aszFactionDescName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CREATE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CREATE_FACTION_REQ *pstOut = (PKT_CLIGS_CREATE_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCreateFactionType))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionDescName, sizeof(pstOut->aszFactionDescName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CREATE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CREATE_FACTION_ACK *pstIn = (PKT_CLIGS_CREATE_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_OWNER_DATA(&pstIn->stFactionOwnerData, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwLeftTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CREATE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CREATE_FACTION_ACK *pstOut = (PKT_CLIGS_CREATE_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_OWNER_DATA(&pstOut->stFactionOwnerData, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwLeftTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEARCH_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_FACTION_REQ *pstIn = (PKT_CLIGS_SEARCH_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEARCH_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_FACTION_REQ *pstOut = (PKT_CLIGS_SEARCH_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEARCH_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_FACTION_ACK *pstIn = (PKT_CLIGS_SEARCH_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_BASE_DATA_CLI_LST(&pstIn->stSearchFactionBaseDataCliLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEARCH_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_FACTION_ACK *pstOut = (PKT_CLIGS_SEARCH_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_BASE_DATA_CLI_LST(&pstOut->stSearchFactionBaseDataCliLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_OWNER_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OWNER_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_OWNER_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_OWNER_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OWNER_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_OWNER_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_PLAYER_AUDIT_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_AUDIT_CLI *pstIn = (DT_FACTION_PLAYER_AUDIT_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFirstAttack))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_PLAYER_AUDIT_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_AUDIT_CLI *pstOut = (DT_FACTION_PLAYER_AUDIT_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFirstAttack))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_PLAYER_AUDIT_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_AUDIT_CLI_LST *pstIn = (DT_FACTION_PLAYER_AUDIT_CLI_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->wFactionNum)
			break;
		if(-1 == EncodeDT_FACTION_PLAYER_AUDIT_CLI(&pstIn->astFactionPlayerAuditCli[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_PLAYER_AUDIT_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_AUDIT_CLI_LST *pstOut = (DT_FACTION_PLAYER_AUDIT_CLI_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->wFactionNum)
			break;
		if(-1 == DecodeDT_FACTION_PLAYER_AUDIT_CLI(&pstOut->astFactionPlayerAuditCli[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_OWNER_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OWNER_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_OWNER_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_OWNER_DATA(&pstIn->stFactionOwnerData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_OWNER_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OWNER_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_OWNER_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_OWNER_DATA(&pstOut->stFactionOwnerData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_LIST_INFO(void *pHost, CNetData* poNetData)
{
	DT_ITEM_LIST_INFO *pstIn = (DT_ITEM_LIST_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
	{
		if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->astItemInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_LIST_INFO(void *pHost, CNetData* poNetData)
{
	DT_ITEM_LIST_INFO *pstOut = (DT_ITEM_LIST_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_ENCOURAGE_ITEM_KIND_NUM; i++)
		{
			if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->astItemInfo[i], poNetData))
				return -1;
		}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DOORS_TRIBUTE_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_DOORS_TRIBUTE_BASE_DATA *pstIn = (DT_DOORS_TRIBUTE_BASE_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCoinMaxTimeEveryDay))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoinEveryTimeValues))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoinEveryTimeDoorsTributeValues))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoinEveryTimeFundsValues))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldMaxTimeEveryDay))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoldEveryTimeValues))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoldEveryTimeDoorsTributeValues))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoldEveryTimeFundsValues))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DOORS_TRIBUTE_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_DOORS_TRIBUTE_BASE_DATA *pstOut = (DT_DOORS_TRIBUTE_BASE_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCoinMaxTimeEveryDay))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoinEveryTimeValues))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoinEveryTimeDoorsTributeValues))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoinEveryTimeFundsValues))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldMaxTimeEveryDay))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoldEveryTimeValues))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoldEveryTimeDoorsTributeValues))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoldEveryTimeFundsValues))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DOORS_TRIBUTE_TODAY_DATA(void *pHost, CNetData* poNetData)
{
	DT_DOORS_TRIBUTE_TODAY_DATA *pstIn = (DT_DOORS_TRIBUTE_TODAY_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byCoinRecvFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCoinTodaysDoorsTributeTimes))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldRecvFlag))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldTodaysDoorsTributeTimes))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DOORS_TRIBUTE_TODAY_DATA(void *pHost, CNetData* poNetData)
{
	DT_DOORS_TRIBUTE_TODAY_DATA *pstOut = (DT_DOORS_TRIBUTE_TODAY_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byCoinRecvFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCoinTodaysDoorsTributeTimes))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldRecvFlag))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldTodaysDoorsTributeTimes))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_DOORS_TRIBUTE_BASE_DATA(&pstIn->stDoorsTributeBaseData, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_LIST_INFO(&pstIn->stEncourageData, poNetData))
		return -1;

	if(-1 == EncodeDT_DOORS_TRIBUTE_TODAY_DATA(&pstIn->stDoorsTributeTodayData, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDoorsTribute))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCoinRequireTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_DOORS_TRIBUTE_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_DOORS_TRIBUTE_BASE_DATA(&pstOut->stDoorsTributeBaseData, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_LIST_INFO(&pstOut->stEncourageData, poNetData))
		return -1;

	if(-1 == DecodeDT_DOORS_TRIBUTE_TODAY_DATA(&pstOut->stDoorsTributeTodayData, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDoorsTribute))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCoinRequireTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DOORS_TRIBUTE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DOORS_TRIBUTE_FACTION_REQ *pstIn = (PKT_CLIGS_DOORS_TRIBUTE_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDoorsTributeFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DOORS_TRIBUTE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DOORS_TRIBUTE_FACTION_REQ *pstOut = (PKT_CLIGS_DOORS_TRIBUTE_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDoorsTributeFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DOORS_TRIBUTE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DOORS_TRIBUTE_FACTION_ACK *pstIn = (PKT_CLIGS_DOORS_TRIBUTE_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_DOORS_TRIBUTE_BASE_DATA(&pstIn->stDoorsTributeBaseData, poNetData))
		return -1;

	if(-1 == EncodeDT_DOORS_TRIBUTE_TODAY_DATA(&pstIn->stDoorsTributeTodayData, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDoorsTribute))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionFunds))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDoorsTributeFlag))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwSumDoorsTribute))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedVIPLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DOORS_TRIBUTE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DOORS_TRIBUTE_FACTION_ACK *pstOut = (PKT_CLIGS_DOORS_TRIBUTE_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_DOORS_TRIBUTE_BASE_DATA(&pstOut->stDoorsTributeBaseData, poNetData))
		return -1;

	if(-1 == DecodeDT_DOORS_TRIBUTE_TODAY_DATA(&pstOut->stDoorsTributeTodayData, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDoorsTribute))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionFunds))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDoorsTributeFlag))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwSumDoorsTribute))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedVIPLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_ITEM_LIST_INFO(&pstIn->stRewardInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_RECV_DOORS_TRIBUTE_FACTION_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_ITEM_LIST_INFO(&pstOut->stRewardInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_KICKED_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_KICKED_FACTION_REQ *pstIn = (PKT_CLIGS_KICKED_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_KICKED_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_KICKED_FACTION_REQ *pstOut = (PKT_CLIGS_KICKED_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_KICKED_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_KICKED_FACTION_ACK *pstIn = (PKT_CLIGS_KICKED_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_PLAYER_CLI_LST(&pstIn->stFactionPlayer, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxPlayerNum))
		return -1;

	if(-1 == EncodeDT_DOORSTRIBUTE_LEVE_DATA_LST(&pstIn->stDoorsTributeLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_KICKED_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_KICKED_FACTION_ACK *pstOut = (PKT_CLIGS_KICKED_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_PLAYER_CLI_LST(&pstOut->stFactionPlayer, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxPlayerNum))
		return -1;

	if(-1 == DecodeDT_DOORSTRIBUTE_LEVE_DATA_LST(&pstOut->stDoorsTributeLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JOB_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JOB_FACTION_REQ *pstIn = (PKT_CLIGS_JOB_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JOB_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JOB_FACTION_REQ *pstOut = (PKT_CLIGS_JOB_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JOB_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JOB_FACTION_ACK *pstIn = (PKT_CLIGS_JOB_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_PLAYER_CLI_LST(&pstIn->stFactionPlayerDataLst, poNetData))
		return -1;

	if(-1 == EncodeDT_DOORSTRIBUTE_LEVE_DATA_LST(&pstIn->stDoorsTributeLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JOB_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JOB_FACTION_ACK *pstOut = (PKT_CLIGS_JOB_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_PLAYER_CLI_LST(&pstOut->stFactionPlayerDataLst, poNetData))
		return -1;

	if(-1 == DecodeDT_DOORSTRIBUTE_LEVE_DATA_LST(&pstOut->stDoorsTributeLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SET_NOTICE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_NOTICE_FACTION_REQ *pstIn = (PKT_CLIGS_SET_NOTICE_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionNotice, sizeof(pstIn->aszFactionNotice)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SET_NOTICE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_NOTICE_FACTION_REQ *pstOut = (PKT_CLIGS_SET_NOTICE_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionNotice, sizeof(pstOut->aszFactionNotice)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SET_NOTICE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_NOTICE_FACTION_ACK *pstIn = (PKT_CLIGS_SET_NOTICE_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionNotice, sizeof(pstIn->aszFactionNotice)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SET_NOTICE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SET_NOTICE_FACTION_ACK *pstOut = (PKT_CLIGS_SET_NOTICE_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionNotice, sizeof(pstOut->aszFactionNotice)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DISSOLVE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISSOLVE_FACTION_REQ *pstIn = (PKT_CLIGS_DISSOLVE_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DISSOLVE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISSOLVE_FACTION_REQ *pstOut = (PKT_CLIGS_DISSOLVE_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DISSOLVE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISSOLVE_FACTION_ACK *pstIn = (PKT_CLIGS_DISSOLVE_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DISSOLVE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DISSOLVE_FACTION_ACK *pstOut = (PKT_CLIGS_DISSOLVE_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_AUDIT_PLAYER_DATA(void *pHost, CNetData* poNetData)
{
	DT_FACTION_AUDIT_PLAYER_DATA *pstIn = (DT_FACTION_AUDIT_PLAYER_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAuditFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_AUDIT_PLAYER_DATA(void *pHost, CNetData* poNetData)
{
	DT_FACTION_AUDIT_PLAYER_DATA *pstOut = (DT_FACTION_AUDIT_PLAYER_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAuditFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AUDIT_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_FACTION_REQ *pstIn = (PKT_CLIGS_AUDIT_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwFactionNum)
			break;
		if(-1 == EncodeDT_FACTION_AUDIT_PLAYER_DATA(&pstIn->astAuditPlayerData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AUDIT_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_FACTION_REQ *pstOut = (PKT_CLIGS_AUDIT_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwFactionNum)
			break;
		if(-1 == DecodeDT_FACTION_AUDIT_PLAYER_DATA(&pstOut->astAuditPlayerData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AUDIT_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_FACTION_ACK *pstIn = (PKT_CLIGS_AUDIT_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPassPlayerNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNoPassPlayerNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLeftPlayerNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurPlayerNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxPlayerNum))
		return -1;

	if(-1 == EncodeDT_FACTION_PLAYER_AUDIT_CLI_LST(&pstIn->stFactionPlayerAuditCliLst, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLeftAuditNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AUDIT_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_FACTION_ACK *pstOut = (PKT_CLIGS_AUDIT_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPassPlayerNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNoPassPlayerNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLeftPlayerNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurPlayerNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxPlayerNum))
		return -1;

	if(-1 == DecodeDT_FACTION_PLAYER_AUDIT_CLI_LST(&pstOut->stFactionPlayerAuditCliLst, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLeftAuditNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_APPLY_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_APPLY_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_APPLY_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_APPLY_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_APPLY_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_APPLY_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_APPLY_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_APPLY_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_APPLY_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_BASE_DATA_CLI_LST(&pstIn->stApplyFactionBaseDataCliLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_APPLY_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_APPLY_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_APPLY_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_BASE_DATA_CLI_LST(&pstOut->stApplyFactionBaseDataCliLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RANK_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RANK_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_RANK_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RANK_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RANK_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_RANK_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RANK_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RANK_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_RANK_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_BASE_DATA_CLI_LST(&pstIn->stRankFactionBaseDataCliLst, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwNeedGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwNeedCoin))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RANK_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RANK_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_RANK_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_BASE_DATA_CLI_LST(&pstOut->stRankFactionBaseDataCliLst, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwNeedGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwNeedCoin))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AUDIT_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AUDIT_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_AUDIT_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AUDIT_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AUDIT_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_AUDIT_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AUDIT_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AUDIT_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_AUDIT_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_PLAYER_AUDIT_CLI_LST(&pstIn->stFactionPlayerAuditCliLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AUDIT_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AUDIT_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_AUDIT_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_PLAYER_AUDIT_CLI_LST(&pstOut->stFactionPlayerAuditCliLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_LOG_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LOG_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_LOG_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_LOG_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LOG_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_LOG_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_LOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_LOG_DATA_CLI *pstIn = (DT_FACTION_LOG_DATA_CLI*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszDispName1, sizeof(pstIn->aszDispName1)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byJobType1))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName2, sizeof(pstIn->aszDispName2)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byJobType2))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAction))
		return -1;

	INT32 i;
	for(i = 0; i < FACTION_LOG_LIST_MAX_NUM; i++)
	{
		if(-1 == poNetData->AddDword(pstIn->adwParamList[i]))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwLogTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_LOG_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_LOG_DATA_CLI *pstOut = (DT_FACTION_LOG_DATA_CLI*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszDispName1, sizeof(pstOut->aszDispName1)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byJobType1))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName2, sizeof(pstOut->aszDispName2)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byJobType2))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAction))
		return -1;

	INT32 i;
	for(i = 0; i < FACTION_LOG_LIST_MAX_NUM; i++)
	{
		if(-1 == poNetData->DelDword(pstOut->adwParamList[i]))
			return -1;
	}

	if(-1 == poNetData->DelUint64(pstOut->qwLogTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_LOG_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_LOG_DATA_CLI_LST *pstIn = (DT_FACTION_LOG_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wFactionLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_LOG_NUM; i++)
	{
		if(i >= (INT32)pstIn->wFactionLogNum)
			break;
		if(-1 == EncodeDT_FACTION_LOG_DATA_CLI(&pstIn->astFactionLogDataCli[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_LOG_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_FACTION_LOG_DATA_CLI_LST *pstOut = (DT_FACTION_LOG_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wFactionLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_LOG_NUM; i++)
	{
		if(i >= (INT32)pstOut->wFactionLogNum)
			break;
		if(-1 == DecodeDT_FACTION_LOG_DATA_CLI(&pstOut->astFactionLogDataCli[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_LOG_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LOG_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_LOG_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_LOG_DATA_CLI_LST(&pstIn->stFactionLogDataCliLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_LOG_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LOG_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_LOG_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_LOG_DATA_CLI_LST(&pstOut->stFactionLogDataCliLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GATHER_SCIENCE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GATHER_SCIENCE_DATA_CLI *pstIn = (DT_GATHER_SCIENCE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinScience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCoinMaxNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCoinNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoinValues))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGoldScience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldMaxNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoldNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoldValues))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIncrease))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INCREASE; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyIncrease[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GATHER_SCIENCE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GATHER_SCIENCE_DATA_CLI *pstOut = (DT_GATHER_SCIENCE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinScience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCoinMaxNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCoinNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoinValues))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGoldScience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldMaxNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoldNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoldValues))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIncrease))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INCREASE; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyIncrease[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GATHER_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GATHER_SCIENCE_REQ *pstIn = (PKT_CLIGS_OPEN_GATHER_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GATHER_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GATHER_SCIENCE_REQ *pstOut = (PKT_CLIGS_OPEN_GATHER_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GATHER_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GATHER_SCIENCE_ACK *pstIn = (PKT_CLIGS_OPEN_GATHER_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == EncodeDT_GATHER_SCIENCE_DATA_CLI(&pstIn->stGatherScience, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GATHER_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GATHER_SCIENCE_ACK *pstOut = (PKT_CLIGS_OPEN_GATHER_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == DecodeDT_GATHER_SCIENCE_DATA_CLI(&pstOut->stGatherScience, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GATHER_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GATHER_SCIENCE_REQ *pstIn = (PKT_CLIGS_GATHER_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGatherType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GATHER_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GATHER_SCIENCE_REQ *pstOut = (PKT_CLIGS_GATHER_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGatherType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GATHER_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GATHER_SCIENCE_ACK *pstIn = (PKT_CLIGS_GATHER_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == EncodeDT_GATHER_SCIENCE_DATA_CLI(&pstIn->stGatherScience, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GATHER_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GATHER_SCIENCE_ACK *pstOut = (PKT_CLIGS_GATHER_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == DecodeDT_GATHER_SCIENCE_DATA_CLI(&pstOut->stGatherScience, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_NOTICE_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_NOTICE_NTF *pstIn = (PKT_CLIGS_NOTICE_NTF*)pHost;

	if(-1 == EncodeDT_NOTICE_DATA(&pstIn->stNoticeInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_NOTICE_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_NOTICE_NTF *pstOut = (PKT_CLIGS_NOTICE_NTF*)pHost;

	if(-1 == DecodeDT_NOTICE_DATA(&pstOut->stNoticeInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_NOTICE_NEW_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_NOTICE_NEW_NTF *pstIn = (PKT_CLIGS_NOTICE_NEW_NTF*)pHost;

	if(-1 == EncodeDT_NOTICE_DATA_NEW(&pstIn->stNoticeInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_NOTICE_NEW_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_NOTICE_NEW_NTF *pstOut = (PKT_CLIGS_NOTICE_NEW_NTF*)pHost;

	if(-1 == DecodeDT_NOTICE_DATA_NEW(&pstOut->stNoticeInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACTIVITY_ENC_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVITY_ENC_NTF *pstIn = (PKT_CLIGS_ACTIVITY_ENC_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byEncNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACTIVITY_ENC_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVITY_ENC_NTF *pstOut = (PKT_CLIGS_ACTIVITY_ENC_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byEncNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_REQ2 *pstIn = (PKT_CLIGS_OPEN_AWAKEN_TAB_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AWAKEN_TAB_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_REQ2 *pstOut = (PKT_CLIGS_OPEN_AWAKEN_TAB_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_ACK2 *pstIn = (PKT_CLIGS_OPEN_AWAKEN_TAB_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_AWAKEN_TAB_DATA2(&pstIn->stAwakenInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySingleResolve))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDoubleResolve))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AWAKEN_TAB_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AWAKEN_TAB_ACK2 *pstOut = (PKT_CLIGS_OPEN_AWAKEN_TAB_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_AWAKEN_TAB_DATA2(&pstOut->stAwakenInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySingleResolve))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDoubleResolve))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AWAKEN_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_REQ2 *pstIn = (PKT_CLIGS_AWAKEN_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byQuickFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AWAKEN_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_REQ2 *pstOut = (PKT_CLIGS_AWAKEN_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byQuickFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_AWAKEN_GET_DATA2(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_GET_DATA2 *pstIn = (DT_AWAKEN_GET_DATA2*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwGetCoin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStudyBagIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAwakenLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGetStudyClip))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_AWAKEN_GET_DATA2(void *pHost, CNetData* poNetData)
{
	DT_AWAKEN_GET_DATA2 *pstOut = (DT_AWAKEN_GET_DATA2*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwGetCoin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStudyBagIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAwakenLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGetStudyClip))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AWAKEN_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_ACK2 *pstIn = (PKT_CLIGS_AWAKEN_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byQuickFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAwakenNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byAwakenNum)
			break;
		if(-1 == EncodeDT_AWAKEN_GET_DATA2(&pstIn->astAwakenGetInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_AWAKEN_TAB_DATA2(&pstIn->stAwakenTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AWAKEN_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AWAKEN_ACK2 *pstOut = (PKT_CLIGS_AWAKEN_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byQuickFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAwakenNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_AWAKEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byAwakenNum)
			break;
		if(-1 == DecodeDT_AWAKEN_GET_DATA2(&pstOut->astAwakenGetInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_AWAKEN_TAB_DATA2(&pstOut->stAwakenTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2 *pstIn = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2 *pstOut = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_STUDY_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_HERO_STUDY_DATA_CLI2 *pstIn = (DT_HERO_STUDY_DATA_CLI2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->astStudyInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_STUDY_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_HERO_STUDY_DATA_CLI2 *pstOut = (DT_HERO_STUDY_DATA_CLI2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->astStudyInfo[i], poNetData))
				return -1;
		}

	return sizeof(*pstOut);
}

INT32 EncodeDT_DRESS_STUDY_TAB_DATA2(void *pHost, CNetData* poNetData)
{
	DT_DRESS_STUDY_TAB_DATA2 *pstIn = (DT_DRESS_STUDY_TAB_DATA2*)pHost;

	INT32 i;
	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
	{
		if(-1 == poNetData->AddWord(pstIn->awStudyUnlockLevelInfo[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_STUDY_DATA_CLI2(&pstIn->astHeroStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwStudyExp))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DRESS_STUDY_TAB_DATA2(void *pHost, CNetData* poNetData)
{
	DT_DRESS_STUDY_TAB_DATA2 *pstOut = (DT_DRESS_STUDY_TAB_DATA2*)pHost;

	INT32 i;
		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
	{
		if(-1 == poNetData->DelWord(pstOut->awStudyUnlockLevelInfo[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_STUDY_DATA_CLI2(&pstOut->astHeroStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelUint64(pstOut->qwStudyExp))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2 *pstIn = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_DRESS_STUDY_TAB_DATA2(&pstIn->stDressStudyTabInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2 *pstOut = (PKT_CLIGS_OPEN_DRESS_STUDY_TAB_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_DRESS_STUDY_TAB_DATA2(&pstOut->stDressStudyTabInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRESS_STUDY_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_REQ2 *pstIn = (PKT_CLIGS_DRESS_STUDY_REQ2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroGridIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRESS_STUDY_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_REQ2 *pstOut = (PKT_CLIGS_DRESS_STUDY_REQ2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroGridIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRESS_STUDY_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_ACK2 *pstIn = (PKT_CLIGS_DRESS_STUDY_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroGridIdx))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_HERO_STUDY_DATA_CLI2(&pstIn->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveSecondsUndress))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx2))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroGridIdx2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRESS_STUDY_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_STUDY_ACK2 *pstOut = (PKT_CLIGS_DRESS_STUDY_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroGridIdx))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_HERO_STUDY_DATA_CLI2(&pstOut->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveSecondsUndress))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx2))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroGridIdx2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_TO_EXP_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_REQ2 *pstIn = (PKT_CLIGS_STUDY_TO_EXP_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAllFlag))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abySelectConvertColor[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_TO_EXP_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_REQ2 *pstOut = (PKT_CLIGS_STUDY_TO_EXP_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAllFlag))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abySelectConvertColor[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_TO_EXP_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_ACK2 *pstIn = (PKT_CLIGS_STUDY_TO_EXP_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abySelectConvertColor[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAllFlag))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGenStudyExp))
		return -1;

	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwCurStudyExp))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_TO_EXP_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_TO_EXP_ACK2 *pstOut = (PKT_CLIGS_STUDY_TO_EXP_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COLOR_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abySelectConvertColor[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAllFlag))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGenStudyExp))
		return -1;

		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelUint64(pstOut->qwCurStudyExp))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_UPGRADE_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_REQ2 *pstIn = (PKT_CLIGS_STUDY_UPGRADE_REQ2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_UPGRADE_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_REQ2 *pstOut = (PKT_CLIGS_STUDY_UPGRADE_REQ2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_STUDY_UPGRADE_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_ACK2 *pstIn = (PKT_CLIGS_STUDY_UPGRADE_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGridIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevel))
		return -1;

	if(-1 == EncodeDT_HERO_STUDY_DATA_CLI2(&pstIn->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurStudyExp))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_STUDY_UPGRADE_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_STUDY_UPGRADE_ACK2 *pstOut = (PKT_CLIGS_STUDY_UPGRADE_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGridIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevel))
		return -1;

	if(-1 == DecodeDT_HERO_STUDY_DATA_CLI2(&pstOut->stHeroStudyInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurStudyExp))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BEGBLUE_PLAYER_RES_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_PLAYER_RES_CLI *pstIn = (DT_BEGBLUE_PLAYER_RES_CLI*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwBlue))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStory))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BEGBLUE_PLAYER_RES_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_PLAYER_RES_CLI *pstOut = (DT_BEGBLUE_PLAYER_RES_CLI*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwBlue))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStory))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BEGBLUE_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_INFO_CLI *pstIn = (DT_BEGBLUE_INFO_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwMaxBegTimes))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLeftBegTimes))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BEGBLUE_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_INFO_CLI *pstOut = (DT_BEGBLUE_INFO_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwMaxBegTimes))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLeftBegTimes))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_IMPROVELUCK_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_IMPROVELUCK_INFO_CLI *pstIn = (DT_IMPROVELUCK_INFO_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFreeImproveLuckMaxTimes))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLeftFreeImproveLuckTimes))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoldImproveLuckIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextImproveLuckGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_IMPROVELUCK_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_IMPROVELUCK_INFO_CLI *pstOut = (DT_IMPROVELUCK_INFO_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFreeImproveLuckMaxTimes))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLeftFreeImproveLuckTimes))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoldImproveLuckIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextImproveLuckGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BEGBLUE_RES_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_RES_DATA_CLI *pstIn = (DT_BEGBLUE_RES_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSmileNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBlueUnit))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStoryUnit))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wXnMultiple))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszLuckPrompt, sizeof(pstIn->aszLuckPrompt)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BEGBLUE_RES_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_RES_DATA_CLI *pstOut = (DT_BEGBLUE_RES_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSmileNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBlueUnit))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStoryUnit))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wXnMultiple))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszLuckPrompt, sizeof(pstOut->aszLuckPrompt)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BEGBLUE_RESULT_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_RESULT_CLI *pstIn = (DT_BEGBLUE_RESULT_CLI*)pHost;

	if(-1 == EncodeDT_BEGBLUE_INFO_CLI(&pstIn->stBegBlueInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_IMPROVELUCK_INFO_CLI(&pstIn->stImproveLuckInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BEGBLUE_RES_DATA_CLI(&pstIn->stBegBlueResCli, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BEGBLUE_RESULT_CLI(void *pHost, CNetData* poNetData)
{
	DT_BEGBLUE_RESULT_CLI *pstOut = (DT_BEGBLUE_RESULT_CLI*)pHost;

	if(-1 == DecodeDT_BEGBLUE_INFO_CLI(&pstOut->stBegBlueInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_IMPROVELUCK_INFO_CLI(&pstOut->stImproveLuckInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BEGBLUE_RES_DATA_CLI(&pstOut->stBegBlueResCli, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeUnDT_BLUE_PAVILION_UNION_DATA_CLI(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case FOR_NEW_BEGBLUE:
		return EncodeDT_BEGBLUE_INFO_CLI(pHost, poNetData);
	case FOR_TO_COMFIRM_BEGBLUE:
		return EncodeDT_BEGBLUE_RESULT_CLI(pHost, poNetData);
	default: return -1;
	}
}

INT32 DecodeUnDT_BLUE_PAVILION_UNION_DATA_CLI(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case FOR_NEW_BEGBLUE:
		return DecodeDT_BEGBLUE_INFO_CLI(pHost, poNetData);
	case FOR_TO_COMFIRM_BEGBLUE:
		return DecodeDT_BEGBLUE_RESULT_CLI(pHost, poNetData);
	default: return -1;
	}
}

INT32 EncodeDT_BLUE_PAVILION_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BLUE_PAVILION_DATA_CLI *pstIn = (DT_BLUE_PAVILION_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBluePavilionType))
		return -1;

	if(-1 == EncodeUnDT_BLUE_PAVILION_UNION_DATA_CLI(&pstIn->stBluePavilionUnion, pstIn->byBluePavilionType, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszClimbTowerPrompt, sizeof(pstIn->aszClimbTowerPrompt)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BLUE_PAVILION_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_BLUE_PAVILION_DATA_CLI *pstOut = (DT_BLUE_PAVILION_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBluePavilionType))
		return -1;

	if(-1 == DecodeUnDT_BLUE_PAVILION_UNION_DATA_CLI(&pstOut->stBluePavilionUnion, pstOut->byBluePavilionType, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszClimbTowerPrompt, sizeof(pstOut->aszClimbTowerPrompt)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BLUE_ENCOURAGEINFO(void *pHost, CNetData* poNetData)
{
	DT_BLUE_ENCOURAGEINFO *pstIn = (DT_BLUE_ENCOURAGEINFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwBlue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSmileNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BLUE_ENCOURAGEINFO(void *pHost, CNetData* poNetData)
{
	DT_BLUE_ENCOURAGEINFO *pstOut = (DT_BLUE_ENCOURAGEINFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwBlue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSmileNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BLUE_ENCOURAGEINFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_BLUE_ENCOURAGEINFO_CLI *pstIn = (DT_BLUE_ENCOURAGEINFO_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSmileNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGetAward))
		return -1;

	if(-1 == EncodeDT_BLUE_ENCOURAGEINFO(&pstIn->stEncourageData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BLUE_ENCOURAGEINFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_BLUE_ENCOURAGEINFO_CLI *pstOut = (DT_BLUE_ENCOURAGEINFO_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSmileNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGetAward))
		return -1;

	if(-1 == DecodeDT_BLUE_ENCOURAGEINFO(&pstOut->stEncourageData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BLUE_PAVILION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BLUE_PAVILION_REQ *pstIn = (PKT_CLIGS_OPEN_BLUE_PAVILION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BLUE_PAVILION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BLUE_PAVILION_REQ *pstOut = (PKT_CLIGS_OPEN_BLUE_PAVILION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BLUE_PAVILION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BLUE_PAVILION_ACK *pstIn = (PKT_CLIGS_OPEN_BLUE_PAVILION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BEGBLUE_PLAYER_RES_CLI(&pstIn->stPlayerResInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BLUE_PAVILION_DATA_CLI(&pstIn->stBluePavilion, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsIgnoreXnMultiple))
		return -1;

	if(-1 == EncodeDT_BLUE_ENCOURAGEINFO_CLI(&pstIn->stEncourage, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BLUE_PAVILION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BLUE_PAVILION_ACK *pstOut = (PKT_CLIGS_OPEN_BLUE_PAVILION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BEGBLUE_PLAYER_RES_CLI(&pstOut->stPlayerResInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BLUE_PAVILION_DATA_CLI(&pstOut->stBluePavilion, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsIgnoreXnMultiple))
		return -1;

	if(-1 == DecodeDT_BLUE_ENCOURAGEINFO_CLI(&pstOut->stEncourage, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BEGBLUE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGBLUE_REQ *pstIn = (PKT_CLIGS_BEGBLUE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BEGBLUE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGBLUE_REQ *pstOut = (PKT_CLIGS_BEGBLUE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BEGBLUE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGBLUE_ACK *pstIn = (PKT_CLIGS_BEGBLUE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BEGBLUE_RESULT_CLI(&pstIn->stBegBlueResult, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BEGBLUE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGBLUE_ACK *pstOut = (PKT_CLIGS_BEGBLUE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BEGBLUE_RESULT_CLI(&pstOut->stBegBlueResult, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_IMPROVELUCK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_IMPROVELUCK_REQ *pstIn = (PKT_CLIGS_IMPROVELUCK_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_IMPROVELUCK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_IMPROVELUCK_REQ *pstOut = (PKT_CLIGS_IMPROVELUCK_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_IMPROVELUCK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_IMPROVELUCK_ACK *pstIn = (PKT_CLIGS_IMPROVELUCK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == EncodeDT_BEGBLUE_RES_DATA_CLI(&pstIn->stBegBlueResCli, poNetData))
		return -1;

	if(-1 == EncodeDT_IMPROVELUCK_INFO_CLI(&pstIn->stImproveLuckInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_IMPROVELUCK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_IMPROVELUCK_ACK *pstOut = (PKT_CLIGS_IMPROVELUCK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == DecodeDT_BEGBLUE_RES_DATA_CLI(&pstOut->stBegBlueResCli, poNetData))
		return -1;

	if(-1 == DecodeDT_IMPROVELUCK_INFO_CLI(&pstOut->stImproveLuckInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COMFIRM_BEGBLUE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMFIRM_BEGBLUE_REQ *pstIn = (PKT_CLIGS_COMFIRM_BEGBLUE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COMFIRM_BEGBLUE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMFIRM_BEGBLUE_REQ *pstOut = (PKT_CLIGS_COMFIRM_BEGBLUE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COMFIRM_BEGBLUE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMFIRM_BEGBLUE_ACK *pstIn = (PKT_CLIGS_COMFIRM_BEGBLUE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BEGBLUE_PLAYER_RES_CLI(&pstIn->stPlayerResInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BEGBLUE_INFO_CLI(&pstIn->stBegBlueInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BLUE_ENCOURAGEINFO_CLI(&pstIn->stEncourage, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COMFIRM_BEGBLUE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMFIRM_BEGBLUE_ACK *pstOut = (PKT_CLIGS_COMFIRM_BEGBLUE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BEGBLUE_PLAYER_RES_CLI(&pstOut->stPlayerResInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BEGBLUE_INFO_CLI(&pstOut->stBegBlueInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BLUE_ENCOURAGEINFO_CLI(&pstOut->stEncourage, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_OPENLIGHT_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_OPENLIGHT_INFO_REQ *pstIn = (PKT_CLIGS_GET_OPENLIGHT_INFO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_OPENLIGHT_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_OPENLIGHT_INFO_REQ *pstOut = (PKT_CLIGS_GET_OPENLIGHT_INFO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_OPENLIGHT_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_OPENLIGHT_INFO_ACK *pstIn = (PKT_CLIGS_GET_OPENLIGHT_INFO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipIdx))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_CLI(&pstIn->stAfterOpenLightInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOpenLightGoodsID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNeedOpenLightGoodsNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOpenLightGoodsNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOpenLightRate))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOpenLightGold))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stOldEquipInitBatlAttr, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stNewEquipInitBatlAttr, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->stOldEquipCurrBatlAttr, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_OPENLIGHT_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_OPENLIGHT_INFO_ACK *pstOut = (PKT_CLIGS_GET_OPENLIGHT_INFO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipIdx))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_CLI(&pstOut->stAfterOpenLightInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOpenLightGoodsID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNeedOpenLightGoodsNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOpenLightGoodsNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOpenLightRate))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOpenLightGold))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stOldEquipInitBatlAttr, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stNewEquipInitBatlAttr, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->stOldEquipCurrBatlAttr, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPENLIGHT_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPENLIGHT_INFO_REQ *pstIn = (PKT_CLIGS_OPENLIGHT_INFO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPENLIGHT_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPENLIGHT_INFO_REQ *pstOut = (PKT_CLIGS_OPENLIGHT_INFO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPENLIGHT_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPENLIGHT_INFO_ACK *pstIn = (PKT_CLIGS_OPENLIGHT_INFO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOpenLightFlagInfo))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOpenLightGoodsID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOpenLightGoodsNum))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPENLIGHT_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPENLIGHT_INFO_ACK *pstOut = (PKT_CLIGS_OPENLIGHT_INFO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOpenLightFlagInfo))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOpenLightGoodsID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOpenLightGoodsNum))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHANGE_CAREER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_CAREER_REQ *pstIn = (PKT_CLIGS_CHANGE_CAREER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byCareerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHANGE_CAREER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_CAREER_REQ *pstOut = (PKT_CLIGS_CHANGE_CAREER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byCareerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHANGE_CAREER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_CAREER_ACK *pstIn = (PKT_CLIGS_CHANGE_CAREER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCareerID))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHANGE_CAREER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_CAREER_ACK *pstOut = (PKT_CLIGS_CHANGE_CAREER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCareerID))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHALLENGE_MYSELF_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_MYSELF_REQ *pstIn = (PKT_CLIGS_CHALLENGE_MYSELF_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byCareerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHALLENGE_MYSELF_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_MYSELF_REQ *pstOut = (PKT_CLIGS_CHALLENGE_MYSELF_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byCareerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_ITEM_EXCHANGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ITEM_EXCHANGE_REQ *pstIn = (PKT_CLIGS_OPEN_ITEM_EXCHANGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_ITEM_EXCHANGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ITEM_EXCHANGE_REQ *pstOut = (PKT_CLIGS_OPEN_ITEM_EXCHANGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeITEM_NUM_DATA(void *pHost, CNetData* poNetData)
{
	ITEM_NUM_DATA *pstIn = (ITEM_NUM_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNeedNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeITEM_NUM_DATA(void *pHost, CNetData* poNetData)
{
	ITEM_NUM_DATA *pstOut = (ITEM_NUM_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNeedNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeITEM_EXCHANGE_DATA(void *pHost, CNetData* poNetData)
{
	ITEM_EXCHANGE_DATA *pstIn = (ITEM_EXCHANGE_DATA*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszTitle, sizeof(pstIn->aszTitle)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDscInfo, sizeof(pstIn->aszDscInfo)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wExchangeIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < ITEM_EXCHANGE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNeedItemNum)
			break;
		if(-1 == EncodeITEM_NUM_DATA(&pstIn->astNeedItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wExchangeItemKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wExchangeItemNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeITEM_EXCHANGE_DATA(void *pHost, CNetData* poNetData)
{
	ITEM_EXCHANGE_DATA *pstOut = (ITEM_EXCHANGE_DATA*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszTitle, sizeof(pstOut->aszTitle)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDscInfo, sizeof(pstOut->aszDscInfo)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wExchangeIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < ITEM_EXCHANGE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNeedItemNum)
			break;
		if(-1 == DecodeITEM_NUM_DATA(&pstOut->astNeedItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wExchangeItemKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wExchangeItemNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_ITEM_EXCHANGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ITEM_EXCHANGE_ACK *pstIn = (PKT_CLIGS_OPEN_ITEM_EXCHANGE_ACK*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszErrInfo, sizeof(pstIn->aszErrInfo)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byExchangeNum))
		return -1;

	INT32 i;
	for(i = 0; i < ITEM_EXCHANGE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byExchangeNum)
			break;
		if(-1 == EncodeITEM_EXCHANGE_DATA(&pstIn->astExchangeInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_ITEM_EXCHANGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ITEM_EXCHANGE_ACK *pstOut = (PKT_CLIGS_OPEN_ITEM_EXCHANGE_ACK*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszErrInfo, sizeof(pstOut->aszErrInfo)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byExchangeNum))
		return -1;

	INT32 i;
	for(i = 0; i < ITEM_EXCHANGE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byExchangeNum)
			break;
		if(-1 == DecodeITEM_EXCHANGE_DATA(&pstOut->astExchangeInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ITEM_EXCHANGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ITEM_EXCHANGE_REQ *pstIn = (PKT_CLIGS_ITEM_EXCHANGE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wExchangeIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ITEM_EXCHANGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ITEM_EXCHANGE_REQ *pstOut = (PKT_CLIGS_ITEM_EXCHANGE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wExchangeIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ITEM_EXCHANGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ITEM_EXCHANGE_ACK *pstIn = (PKT_CLIGS_ITEM_EXCHANGE_ACK*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszErrInfo, sizeof(pstIn->aszErrInfo)))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->stExchangeItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byExchangeNum))
		return -1;

	INT32 i;
	for(i = 0; i < ITEM_EXCHANGE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byExchangeNum)
			break;
		if(-1 == EncodeITEM_EXCHANGE_DATA(&pstIn->astExchangeInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_NEW_EQUIP_PROMPT_DATA(&pstIn->stNewEquipPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ITEM_EXCHANGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ITEM_EXCHANGE_ACK *pstOut = (PKT_CLIGS_ITEM_EXCHANGE_ACK*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszErrInfo, sizeof(pstOut->aszErrInfo)))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->stExchangeItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byExchangeNum))
		return -1;

	INT32 i;
	for(i = 0; i < ITEM_EXCHANGE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byExchangeNum)
			break;
		if(-1 == DecodeITEM_EXCHANGE_DATA(&pstOut->astExchangeInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_NEW_EQUIP_PROMPT_DATA(&pstOut->stNewEquipPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_WANTED_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_WANTED_INFO_CLI *pstIn = (DT_WANTED_INFO_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wWantedIndex))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszWantedName, sizeof(pstIn->aszWantedName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszWantedDesc, sizeof(pstIn->aszWantedDesc)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byWantedState))
		return -1;

	if(-1 == EncodeDT_TASK_ENCOURAGE_DATA(&pstIn->stEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScoreThreshold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_WANTED_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_WANTED_INFO_CLI *pstOut = (DT_WANTED_INFO_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wWantedIndex))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszWantedName, sizeof(pstOut->aszWantedName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszWantedDesc, sizeof(pstOut->aszWantedDesc)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byWantedState))
		return -1;

	if(-1 == DecodeDT_TASK_ENCOURAGE_DATA(&pstOut->stEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScoreThreshold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_WANTED_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_WANTED_LIST_CLI *pstIn = (DT_WANTED_LIST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byWantedNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_WANTED_NUM; i++)
	{
		if(i >= (INT32)pstIn->byWantedNum)
			break;
		if(-1 == EncodeDT_WANTED_INFO_CLI(&pstIn->astListData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_WANTED_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_WANTED_LIST_CLI *pstOut = (DT_WANTED_LIST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byWantedNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_WANTED_NUM; i++)
	{
		if(i >= (INT32)pstOut->byWantedNum)
			break;
		if(-1 == DecodeDT_WANTED_INFO_CLI(&pstOut->astListData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BIGREWARD_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BIGREWARD_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_BIGREWARD_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BIGREWARD_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BIGREWARD_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_BIGREWARD_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BIGREWARD_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BIGREWARD_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_BIGREWARD_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == EncodeDT_WANTED_LIST_CLI(&pstIn->stWantedList, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurClueScore))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHerosRecoverCD))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BIGREWARD_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BIGREWARD_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_BIGREWARD_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == DecodeDT_WANTED_LIST_CLI(&pstOut->stWantedList, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurClueScore))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHerosRecoverCD))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CLUE_TASK_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_CLUE_TASK_INFO_CLI *pstIn = (DT_CLUE_TASK_INFO_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wClueTaskType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClueScore))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byState))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CLUE_TASK_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_CLUE_TASK_INFO_CLI *pstOut = (DT_CLUE_TASK_INFO_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wClueTaskType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClueScore))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byState))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CLUE_TASK_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_CLUE_TASK_LIST_CLI *pstIn = (DT_CLUE_TASK_LIST_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwClueTaskNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CLUE_TASK_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwClueTaskNum)
			break;
		if(-1 == EncodeDT_CLUE_TASK_INFO_CLI(&pstIn->astListData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CLUE_TASK_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_CLUE_TASK_LIST_CLI *pstOut = (DT_CLUE_TASK_LIST_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwClueTaskNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CLUE_TASK_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwClueTaskNum)
			break;
		if(-1 == DecodeDT_CLUE_TASK_INFO_CLI(&pstOut->astListData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_CLUE_TASK_KILL_MONSTER_NAVI(void *pHost, CNetData* poNetData)
{
	DT_CLUE_TASK_KILL_MONSTER_NAVI *pstIn = (DT_CLUE_TASK_KILL_MONSTER_NAVI*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszDesc, sizeof(pstIn->aszDesc)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTargetNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKilledNum))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClueScore))
		return -1;

	if(-1 == EncodeDT_TASK_ENCOURAGE_DATA(&pstIn->stEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOnHookCoin))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CLUE_TASK_KILL_MONSTER_NAVI(void *pHost, CNetData* poNetData)
{
	DT_CLUE_TASK_KILL_MONSTER_NAVI *pstOut = (DT_CLUE_TASK_KILL_MONSTER_NAVI*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszDesc, sizeof(pstOut->aszDesc)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTargetNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKilledNum))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClueScore))
		return -1;

	if(-1 == DecodeDT_TASK_ENCOURAGE_DATA(&pstOut->stEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOnHookCoin))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CLUE_TASK_ITEM_BOX_NAVI(void *pHost, CNetData* poNetData)
{
	DT_CLUE_TASK_ITEM_BOX_NAVI *pstIn = (DT_CLUE_TASK_ITEM_BOX_NAVI*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszDesc, sizeof(pstIn->aszDesc)))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI(&pstIn->stItemInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CLUE_TASK_ITEM_BOX_NAVI(void *pHost, CNetData* poNetData)
{
	DT_CLUE_TASK_ITEM_BOX_NAVI *pstOut = (DT_CLUE_TASK_ITEM_BOX_NAVI*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszDesc, sizeof(pstOut->aszDesc)))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI(&pstOut->stItemInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CLUE_TASK_FORTUNE_GRID_NAVI(void *pHost, CNetData* poNetData)
{
	DT_CLUE_TASK_FORTUNE_GRID_NAVI *pstIn = (DT_CLUE_TASK_FORTUNE_GRID_NAVI*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszDesc, sizeof(pstIn->aszDesc)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClueScore))
		return -1;

	if(-1 == EncodeDT_TASK_ENCOURAGE_DATA(&pstIn->stEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNextIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CLUE_TASK_FORTUNE_GRID_NAVI(void *pHost, CNetData* poNetData)
{
	DT_CLUE_TASK_FORTUNE_GRID_NAVI *pstOut = (DT_CLUE_TASK_FORTUNE_GRID_NAVI*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszDesc, sizeof(pstOut->aszDesc)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClueScore))
		return -1;

	if(-1 == DecodeDT_TASK_ENCOURAGE_DATA(&pstOut->stEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNextIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeUnDT_CLUE_TASK_NAVI_UNION(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case KILL_MONSTER_NAVI:
		return EncodeDT_CLUE_TASK_KILL_MONSTER_NAVI(pHost, poNetData);
	case ITEM_BOX_NAVI:
		return EncodeDT_CLUE_TASK_ITEM_BOX_NAVI(pHost, poNetData);
	case FORTUNE_GRID_NAVI:
		return EncodeDT_CLUE_TASK_FORTUNE_GRID_NAVI(pHost, poNetData);
	default: return -1;
	}
}

INT32 DecodeUnDT_CLUE_TASK_NAVI_UNION(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case KILL_MONSTER_NAVI:
		return DecodeDT_CLUE_TASK_KILL_MONSTER_NAVI(pHost, poNetData);
	case ITEM_BOX_NAVI:
		return DecodeDT_CLUE_TASK_ITEM_BOX_NAVI(pHost, poNetData);
	case FORTUNE_GRID_NAVI:
		return DecodeDT_CLUE_TASK_FORTUNE_GRID_NAVI(pHost, poNetData);
	default: return -1;
	}
}

INT32 EncodeDT_CLUE_TASK_NAVI_CLI(void *pHost, CNetData* poNetData)
{
	DT_CLUE_TASK_NAVI_CLI *pstIn = (DT_CLUE_TASK_NAVI_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byClueTaskType))
		return -1;

	if(-1 == EncodeUnDT_CLUE_TASK_NAVI_UNION(&pstIn->stConcreteNavi, pstIn->byClueTaskType, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CLUE_TASK_NAVI_CLI(void *pHost, CNetData* poNetData)
{
	DT_CLUE_TASK_NAVI_CLI *pstOut = (DT_CLUE_TASK_NAVI_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byClueTaskType))
		return -1;

	if(-1 == DecodeUnDT_CLUE_TASK_NAVI_UNION(&pstOut->stConcreteNavi, pstOut->byClueTaskType, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DICE_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_DICE_INFO_CLI *pstIn = (DT_DICE_INFO_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wFreeShakeMaxTimes))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLeftFreeShakeTimes))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyShakeTimesGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreeRefreshMaxTimes))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLeftFreeRefreshTimes))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyRefreshTimesGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCheatDiceGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLastDicePoint))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DICE_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_DICE_INFO_CLI *pstOut = (DT_DICE_INFO_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wFreeShakeMaxTimes))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLeftFreeShakeTimes))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyShakeTimesGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreeRefreshMaxTimes))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLeftFreeRefreshTimes))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyRefreshTimesGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCheatDiceGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLastDicePoint))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_COLLECT_CLUE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_COLLECT_CLUE_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_COLLECT_CLUE_TAB_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wWantedIndex))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_COLLECT_CLUE_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_COLLECT_CLUE_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_COLLECT_CLUE_TAB_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wWantedIndex))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_COLLECT_CLUE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_COLLECT_CLUE_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_COLLECT_CLUE_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurClueScore))
		return -1;

	if(-1 == EncodeDT_WANTED_INFO_CLI(&pstIn->stCurWantedInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CLUE_TASK_LIST_CLI(&pstIn->stClueTaskList, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurClueTaskIdx))
		return -1;

	if(-1 == EncodeDT_DICE_INFO_CLI(&pstIn->stDiceInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_COLLECT_CLUE_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_COLLECT_CLUE_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_COLLECT_CLUE_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurClueScore))
		return -1;

	if(-1 == DecodeDT_WANTED_INFO_CLI(&pstOut->stCurWantedInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CLUE_TASK_LIST_CLI(&pstOut->stClueTaskList, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurClueTaskIdx))
		return -1;

	if(-1 == DecodeDT_DICE_INFO_CLI(&pstOut->stDiceInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CLUE_GRID_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CLUE_GRID_REQ *pstIn = (PKT_CLIGS_OPEN_CLUE_GRID_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CLUE_GRID_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CLUE_GRID_REQ *pstOut = (PKT_CLIGS_OPEN_CLUE_GRID_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CLUE_GRID_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CLUE_GRID_ACK *pstIn = (PKT_CLIGS_OPEN_CLUE_GRID_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_CLUE_TASK_NAVI_CLI(&pstIn->stClueTaskNavi, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CLUE_GRID_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CLUE_GRID_ACK *pstOut = (PKT_CLIGS_OPEN_CLUE_GRID_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_CLUE_TASK_NAVI_CLI(&pstOut->stClueTaskNavi, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SHAKE_DICE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SHAKE_DICE_REQ *pstIn = (PKT_CLIGS_SHAKE_DICE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byCheatFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SHAKE_DICE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SHAKE_DICE_REQ *pstOut = (PKT_CLIGS_SHAKE_DICE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byCheatFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SHAKE_DICE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SHAKE_DICE_ACK *pstIn = (PKT_CLIGS_SHAKE_DICE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDicePoint))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreeShakeMaxTimes))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreeShakeLeftTimes))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyShakeTimesGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCheatDiceGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SHAKE_DICE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SHAKE_DICE_ACK *pstOut = (PKT_CLIGS_SHAKE_DICE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDicePoint))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreeShakeMaxTimes))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreeShakeLeftTimes))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyShakeTimesGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCheatDiceGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REFRESH_DICE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_DICE_REQ *pstIn = (PKT_CLIGS_REFRESH_DICE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byCheatFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REFRESH_DICE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_DICE_REQ *pstOut = (PKT_CLIGS_REFRESH_DICE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byCheatFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REFRESH_DICE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_DICE_ACK *pstIn = (PKT_CLIGS_REFRESH_DICE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDicePoint))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreeRefreshMaxTimes))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLeftFreeRefreshTimes))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyRefreshTimesGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCheatDiceGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REFRESH_DICE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFRESH_DICE_ACK *pstOut = (PKT_CLIGS_REFRESH_DICE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDicePoint))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreeRefreshMaxTimes))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLeftFreeRefreshTimes))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyRefreshTimesGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCheatDiceGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COMFIRM_DICE_POINT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMFIRM_DICE_POINT_REQ *pstIn = (PKT_CLIGS_COMFIRM_DICE_POINT_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byDicePoint))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COMFIRM_DICE_POINT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMFIRM_DICE_POINT_REQ *pstOut = (PKT_CLIGS_COMFIRM_DICE_POINT_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byDicePoint))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COMFIRM_DICE_POINT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMFIRM_DICE_POINT_ACK *pstIn = (PKT_CLIGS_COMFIRM_DICE_POINT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDestClueTaskIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COMFIRM_DICE_POINT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COMFIRM_DICE_POINT_ACK *pstOut = (PKT_CLIGS_COMFIRM_DICE_POINT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDestClueTaskIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_RES_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_RES_NTF *pstIn = (PKT_CLIGS_PLAYER_RES_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byResNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstIn->byResNum)
			break;
		if(-1 == EncodeDT_PLAYER_RES_DATA(&pstIn->astResInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_RES_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_RES_NTF *pstOut = (PKT_CLIGS_PLAYER_RES_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byResNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PLAYER_RES_NUM; i++)
	{
		if(i >= (INT32)pstOut->byResNum)
			break;
		if(-1 == DecodeDT_PLAYER_RES_DATA(&pstOut->astResInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPERATING_ACTIVITY_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPERATING_ACTIVITY_NTF *pstIn = (PKT_CLIGS_OPERATING_ACTIVITY_NTF*)pHost;

	if(-1 == EncodeDT_OPERATING_ACTIVITY_DATA(&pstIn->stOperatingActivityInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPERATING_ACTIVITY_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPERATING_ACTIVITY_NTF *pstOut = (PKT_CLIGS_OPERATING_ACTIVITY_NTF*)pHost;

	if(-1 == DecodeDT_OPERATING_ACTIVITY_DATA(&pstOut->stOperatingActivityInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPERATING_ACTIVITY_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPERATING_ACTIVITY_BATTLE_REQ *pstIn = (PKT_CLIGS_OPERATING_ACTIVITY_BATTLE_REQ*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszBattleKey, sizeof(pstIn->aszBattleKey)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPERATING_ACTIVITY_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPERATING_ACTIVITY_BATTLE_REQ *pstOut = (PKT_CLIGS_OPERATING_ACTIVITY_BATTLE_REQ*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszBattleKey, sizeof(pstOut->aszBattleKey)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FRIEND_SYS_PLAYER_INFO(void *pHost, CNetData* poNetData)
{
	DT_FRIEND_SYS_PLAYER_INFO *pstIn = (DT_FRIEND_SYS_PLAYER_INFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszPlayerName, sizeof(pstIn->aszPlayerName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMainHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsOnline))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FRIEND_SYS_PLAYER_INFO(void *pHost, CNetData* poNetData)
{
	DT_FRIEND_SYS_PLAYER_INFO *pstOut = (DT_FRIEND_SYS_PLAYER_INFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszPlayerName, sizeof(pstOut->aszPlayerName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMainHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsOnline))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FRIEND_SYS_PLAYER_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_FRIEND_SYS_PLAYER_LIST_CLI *pstIn = (DT_FRIEND_SYS_PLAYER_LIST_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FRIEND_SYS_PLAYER_LIST_ELEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwPlayerNum)
			break;
		if(-1 == EncodeDT_FRIEND_SYS_PLAYER_INFO(&pstIn->astListData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FRIEND_SYS_PLAYER_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_FRIEND_SYS_PLAYER_LIST_CLI *pstOut = (DT_FRIEND_SYS_PLAYER_LIST_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FRIEND_SYS_PLAYER_LIST_ELEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwPlayerNum)
			break;
		if(-1 == DecodeDT_FRIEND_SYS_PLAYER_INFO(&pstOut->astListData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ *pstIn = (PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGetListType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPageCapacity))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPageNo))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ *pstOut = (PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGetListType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPageCapacity))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPageNo))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK *pstIn = (PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGetListType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPageNo))
		return -1;

	if(-1 == EncodeDT_FRIEND_SYS_PLAYER_LIST_CLI(&pstIn->stPlayerList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK *pstOut = (PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGetListType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPageNo))
		return -1;

	if(-1 == DecodeDT_FRIEND_SYS_PLAYER_LIST_CLI(&pstOut->stPlayerList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FRIEND_SYS_PLAYER_INFO2(void *pHost, CNetData* poNetData)
{
	DT_FRIEND_SYS_PLAYER_INFO2 *pstIn = (DT_FRIEND_SYS_PLAYER_INFO2*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszPlayerName, sizeof(pstIn->aszPlayerName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMainHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsOnline))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRelation))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FRIEND_SYS_PLAYER_INFO2(void *pHost, CNetData* poNetData)
{
	DT_FRIEND_SYS_PLAYER_INFO2 *pstOut = (DT_FRIEND_SYS_PLAYER_INFO2*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszPlayerName, sizeof(pstOut->aszPlayerName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMainHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsOnline))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRelation))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FRIEND_SYS_PLAYER_LIST_CLI2(void *pHost, CNetData* poNetData)
{
	DT_FRIEND_SYS_PLAYER_LIST_CLI2 *pstIn = (DT_FRIEND_SYS_PLAYER_LIST_CLI2*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FRIEND_SYS_PLAYER_LIST_ELEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwPlayerNum)
			break;
		if(-1 == EncodeDT_FRIEND_SYS_PLAYER_INFO2(&pstIn->astListData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FRIEND_SYS_PLAYER_LIST_CLI2(void *pHost, CNetData* poNetData)
{
	DT_FRIEND_SYS_PLAYER_LIST_CLI2 *pstOut = (DT_FRIEND_SYS_PLAYER_LIST_CLI2*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FRIEND_SYS_PLAYER_LIST_ELEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwPlayerNum)
			break;
		if(-1 == DecodeDT_FRIEND_SYS_PLAYER_INFO2(&pstOut->astListData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ2 *pstIn = (PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGetListType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPageCapacity))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPageNo))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ2 *pstOut = (PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGetListType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPageCapacity))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPageNo))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK2 *pstIn = (PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGetListType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPageNo))
		return -1;

	if(-1 == EncodeDT_FRIEND_SYS_PLAYER_LIST_CLI2(&pstIn->stPlayerList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK2 *pstOut = (PKT_CLIGS_GET_FRIEND_SYS_PLAYER_LIST_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGetListType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPageNo))
		return -1;

	if(-1 == DecodeDT_FRIEND_SYS_PLAYER_LIST_CLI2(&pstOut->stPlayerList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DEL_FRIEND_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_FRIEND_REQ *pstIn = (PKT_CLIGS_DEL_FRIEND_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DEL_FRIEND_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_FRIEND_REQ *pstOut = (PKT_CLIGS_DEL_FRIEND_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DEL_FRIEND_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_FRIEND_ACK *pstIn = (PKT_CLIGS_DEL_FRIEND_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DEL_FRIEND_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_FRIEND_ACK *pstOut = (PKT_CLIGS_DEL_FRIEND_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEARCH_PLAYER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_PLAYER_REQ *pstIn = (PKT_CLIGS_SEARCH_PLAYER_REQ*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszPlayerName, sizeof(pstIn->aszPlayerName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPageCapacity))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPageNo))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEARCH_PLAYER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_PLAYER_REQ *pstOut = (PKT_CLIGS_SEARCH_PLAYER_REQ*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszPlayerName, sizeof(pstOut->aszPlayerName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPageCapacity))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPageNo))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEARCH_PLAYER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_PLAYER_ACK *pstIn = (PKT_CLIGS_SEARCH_PLAYER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPageNo))
		return -1;

	if(-1 == EncodeDT_FRIEND_SYS_PLAYER_LIST_CLI(&pstIn->stSearchRltList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEARCH_PLAYER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_PLAYER_ACK *pstOut = (PKT_CLIGS_SEARCH_PLAYER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPageNo))
		return -1;

	if(-1 == DecodeDT_FRIEND_SYS_PLAYER_LIST_CLI(&pstOut->stSearchRltList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEARCH_PLAYER_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_PLAYER_REQ2 *pstIn = (PKT_CLIGS_SEARCH_PLAYER_REQ2*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszPlayerName, sizeof(pstIn->aszPlayerName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPageCapacity))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPageNo))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEARCH_PLAYER_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_PLAYER_REQ2 *pstOut = (PKT_CLIGS_SEARCH_PLAYER_REQ2*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszPlayerName, sizeof(pstOut->aszPlayerName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPageCapacity))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPageNo))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEARCH_PLAYER_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_PLAYER_ACK2 *pstIn = (PKT_CLIGS_SEARCH_PLAYER_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPageNo))
		return -1;

	if(-1 == EncodeDT_FRIEND_SYS_PLAYER_LIST_CLI2(&pstIn->stSearchRltList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEARCH_PLAYER_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEARCH_PLAYER_ACK2 *pstOut = (PKT_CLIGS_SEARCH_PLAYER_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPageNo))
		return -1;

	if(-1 == DecodeDT_FRIEND_SYS_PLAYER_LIST_CLI2(&pstOut->stSearchRltList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FRIEND_SYS_PLAYER_GENERAL_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_FRIEND_SYS_PLAYER_GENERAL_INFO_CLI *pstIn = (DT_FRIEND_SYS_PLAYER_GENERAL_INFO_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszPlayerName, sizeof(pstIn->aszPlayerName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMainHeroKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlayerLvl))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerPower))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwFlowerSum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRelationType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRank))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVipLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FRIEND_SYS_PLAYER_GENERAL_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_FRIEND_SYS_PLAYER_GENERAL_INFO_CLI *pstOut = (DT_FRIEND_SYS_PLAYER_GENERAL_INFO_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszPlayerName, sizeof(pstOut->aszPlayerName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMainHeroKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlayerLvl))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerPower))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwFlowerSum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRelationType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRank))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVipLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_VIEW_PLAYER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VIEW_PLAYER_REQ *pstIn = (PKT_CLIGS_VIEW_PLAYER_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_VIEW_PLAYER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VIEW_PLAYER_REQ *pstOut = (PKT_CLIGS_VIEW_PLAYER_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_ATTR_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_HERO_ATTR_LST_INFO *pstIn = (DT_HERO_ATTR_LST_INFO*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awHeroID[i]))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awTalent[i]))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_BATTLE_ATTRIBUTE2(&pstIn->astBaseAttr[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HIDE_BATTLE_ATTRIBUTE(&pstIn->astHideAttr[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwPower[i]))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awLevel[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_ATTR_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_HERO_ATTR_LST_INFO *pstOut = (DT_HERO_ATTR_LST_INFO*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awHeroID[i]))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awTalent[i]))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_BATTLE_ATTRIBUTE2(&pstOut->astBaseAttr[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HIDE_BATTLE_ATTRIBUTE(&pstOut->astHideAttr[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwPower[i]))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awLevel[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_SPECIAL_EFFECT_DESC(void *pHost, CNetData* poNetData)
{
	DT_SPECIAL_EFFECT_DESC *pstIn = (DT_SPECIAL_EFFECT_DESC*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byEffectType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTriggerProbValue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEffectPercentValue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLimitNumValue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SPECIAL_EFFECT_DESC(void *pHost, CNetData* poNetData)
{
	DT_SPECIAL_EFFECT_DESC *pstOut = (DT_SPECIAL_EFFECT_DESC*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byEffectType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTriggerProbValue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEffectPercentValue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLimitNumValue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SPECIAL_EFFECT_LST_DESC(void *pHost, CNetData* poNetData)
{
	DT_SPECIAL_EFFECT_LST_DESC *pstIn = (DT_SPECIAL_EFFECT_LST_DESC*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byDescNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_SOUL_NUM; i++)
	{
		if(i >= (INT32)pstIn->byDescNum)
			break;
		if(-1 == EncodeDT_SPECIAL_EFFECT_DESC(&pstIn->astSkillDesc[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SPECIAL_EFFECT_LST_DESC(void *pHost, CNetData* poNetData)
{
	DT_SPECIAL_EFFECT_LST_DESC *pstOut = (DT_SPECIAL_EFFECT_LST_DESC*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byDescNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_SOUL_NUM; i++)
	{
		if(i >= (INT32)pstOut->byDescNum)
			break;
		if(-1 == DecodeDT_SPECIAL_EFFECT_DESC(&pstOut->astSkillDesc[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_SPECIAL_EFFECT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SPECIAL_EFFECT_DATA_CLI *pstIn = (DT_SPECIAL_EFFECT_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEffectID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEffectName, sizeof(pstIn->aszEffectName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsActivity))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnlockLevel))
		return -1;

	if(-1 == EncodeDT_SPECIAL_EFFECT_LST_DESC(&pstIn->stSkillLstDesc, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SPECIAL_EFFECT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SPECIAL_EFFECT_DATA_CLI *pstOut = (DT_SPECIAL_EFFECT_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEffectID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEffectName, sizeof(pstOut->aszEffectName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsActivity))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnlockLevel))
		return -1;

	if(-1 == DecodeDT_SPECIAL_EFFECT_LST_DESC(&pstOut->stSkillLstDesc, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SOUL_ATTR_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SOUL_ATTR_DATA_CLI *pstIn = (DT_SOUL_ATTR_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwKindValue))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwKindPercent))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SOUL_ATTR_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SOUL_ATTR_DATA_CLI *pstOut = (DT_SOUL_ATTR_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwKindValue))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwKindPercent))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SOUL_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SOUL_DATA_CLI *pstIn = (DT_SOUL_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSoulID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSoulIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySoulStar))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySoulType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySoulLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSoulExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwReturnExperience))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsNormalSoul))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBaseNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_ATTR_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBaseNum)
			break;
		if(-1 == EncodeDT_SOUL_ATTR_DATA_CLI(&pstIn->astSoulAttr[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byBaseAfterNum))
		return -1;

	for(i = 0; i < MAX_SOUL_ATTR_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBaseAfterNum)
			break;
		if(-1 == EncodeDT_SOUL_ATTR_DATA_CLI(&pstIn->astSoulAfterAttr[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddTString(pstIn->aszSoulName, sizeof(pstIn->aszSoulName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszSoulPic, sizeof(pstIn->aszSoulPic)))
		return -1;

	if(-1 == EncodeDT_SPECIAL_EFFECT_DATA_CLI(&pstIn->stSpecialEffect, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszNamePic, sizeof(pstIn->aszNamePic)))
		return -1;

	for(i = 0; i < MAX_SOUL_ATTR_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abySoulAttrLock[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SOUL_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_SOUL_DATA_CLI *pstOut = (DT_SOUL_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSoulID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSoulIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySoulStar))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySoulType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySoulLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSoulExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwReturnExperience))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsNormalSoul))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBaseNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_ATTR_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBaseNum)
			break;
		if(-1 == DecodeDT_SOUL_ATTR_DATA_CLI(&pstOut->astSoulAttr[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byBaseAfterNum))
		return -1;

	for(i = 0; i < MAX_SOUL_ATTR_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBaseAfterNum)
			break;
		if(-1 == DecodeDT_SOUL_ATTR_DATA_CLI(&pstOut->astSoulAfterAttr[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelTString(pstOut->aszSoulName, sizeof(pstOut->aszSoulName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszSoulPic, sizeof(pstOut->aszSoulPic)))
		return -1;

	if(-1 == DecodeDT_SPECIAL_EFFECT_DATA_CLI(&pstOut->stSpecialEffect, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszNamePic, sizeof(pstOut->aszNamePic)))
		return -1;

	for(i = 0; i < MAX_SOUL_ATTR_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abySoulAttrLock[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_SOUL_POTENCY_CLI(void *pHost, CNetData* poNetData)
{
	DT_SOUL_POTENCY_CLI *pstIn = (DT_SOUL_POTENCY_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPotencyLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPotencySubLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SOUL_POTENCY_CLI(void *pHost, CNetData* poNetData)
{
	DT_SOUL_POTENCY_CLI *pstOut = (DT_SOUL_POTENCY_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPotencyLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPotencySubLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SOUL_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_SOUL_DATA_LST_CLI *pstIn = (DT_SOUL_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSoulNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_BAG_NUM; i++)
	{
		if(i >= (INT32)pstIn->wSoulNum)
			break;
		if(-1 == EncodeDT_SOUL_DATA_CLI(&pstIn->astSoulLstData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SOUL_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_SOUL_DATA_LST_CLI *pstOut = (DT_SOUL_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSoulNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_BAG_NUM; i++)
	{
		if(i >= (INT32)pstOut->wSoulNum)
			break;
		if(-1 == DecodeDT_SOUL_DATA_CLI(&pstOut->astSoulLstData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_SOUL_POTENCY_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_SOUL_POTENCY_DATA_LST_CLI *pstIn = (DT_SOUL_POTENCY_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSoulNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_BAG_NUM; i++)
	{
		if(i >= (INT32)pstIn->wSoulNum)
			break;
		if(-1 == EncodeDT_SOUL_POTENCY_CLI(&pstIn->astSoulLstData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SOUL_POTENCY_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_SOUL_POTENCY_DATA_LST_CLI *pstOut = (DT_SOUL_POTENCY_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSoulNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_BAG_NUM; i++)
	{
		if(i >= (INT32)pstOut->wSoulNum)
			break;
		if(-1 == DecodeDT_SOUL_POTENCY_CLI(&pstOut->astSoulLstData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_SOUL_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_SOUL_DATA_LST_CLI *pstIn = (DT_HERO_SOUL_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSoulEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_EQUIP_NUM; i++)
	{
		if(i >= (INT32)pstIn->wSoulEquipNum)
			break;
		if(-1 == EncodeDT_SOUL_DATA_CLI(&pstIn->astSoulEquipLstData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_SOUL_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_SOUL_DATA_LST_CLI *pstOut = (DT_HERO_SOUL_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSoulEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_EQUIP_NUM; i++)
	{
		if(i >= (INT32)pstOut->wSoulEquipNum)
			break;
		if(-1 == DecodeDT_SOUL_DATA_CLI(&pstOut->astSoulEquipLstData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_SOUL_POTENCY_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_SOUL_POTENCY_DATA_LST_CLI *pstIn = (DT_HERO_SOUL_POTENCY_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSoulEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_EQUIP_NUM; i++)
	{
		if(i >= (INT32)pstIn->wSoulEquipNum)
			break;
		if(-1 == EncodeDT_SOUL_POTENCY_CLI(&pstIn->astSoulEquipLstData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_SOUL_POTENCY_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_SOUL_POTENCY_DATA_LST_CLI *pstOut = (DT_HERO_SOUL_POTENCY_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSoulEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_EQUIP_NUM; i++)
	{
		if(i >= (INT32)pstOut->wSoulEquipNum)
			break;
		if(-1 == DecodeDT_SOUL_POTENCY_CLI(&pstOut->astSoulEquipLstData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_LST_SOUL_POTENCY_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_LST_SOUL_POTENCY_DATA_LST_CLI *pstIn = (DT_HERO_LST_SOUL_POTENCY_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_SOUL_POTENCY_DATA_LST_CLI(&pstIn->astSoulEquipLstData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_LST_SOUL_POTENCY_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_LST_SOUL_POTENCY_DATA_LST_CLI *pstOut = (DT_HERO_LST_SOUL_POTENCY_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_SOUL_POTENCY_DATA_LST_CLI(&pstOut->astSoulEquipLstData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ATTR_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_ATTR_BASE_DATA *pstIn = (DT_ATTR_BASE_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAttrValue))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byValueType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ATTR_BASE_DATA(void *pHost, CNetData* poNetData)
{
	DT_ATTR_BASE_DATA *pstOut = (DT_ATTR_BASE_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAttrValue))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byValueType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ATTR_BASE_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_ATTR_BASE_LST_DATA *pstIn = (DT_ATTR_BASE_LST_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SCIENCE_ATTR_NUM; i++)
	{
		if(i >= (INT32)pstIn->byAttrNum)
			break;
		if(-1 == EncodeDT_ATTR_BASE_DATA(&pstIn->astAttrInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ATTR_BASE_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_ATTR_BASE_LST_DATA *pstOut = (DT_ATTR_BASE_LST_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SCIENCE_ATTR_NUM; i++)
	{
		if(i >= (INT32)pstOut->byAttrNum)
			break;
		if(-1 == DecodeDT_ATTR_BASE_DATA(&pstOut->astAttrInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_MEDAL_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_MEDAL_DATA_CLI *pstIn = (DT_MEDAL_DATA_CLI*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszMedalName, sizeof(pstIn->aszMedalName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszMedalIconName, sizeof(pstIn->aszMedalIconName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFinishDesc, sizeof(pstIn->aszFinishDesc)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsActivate))
		return -1;

	if(-1 == EncodeDT_ATTR_BASE_LST_DATA(&pstIn->stCurAttrInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ATTR_BASE_LST_DATA(&pstIn->stNextAttrInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMedalLevel))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwValidityTime))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwOverTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMedalType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSmallType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMedalColor))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsLevelMedal))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MEDAL_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_MEDAL_DATA_CLI *pstOut = (DT_MEDAL_DATA_CLI*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszMedalName, sizeof(pstOut->aszMedalName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszMedalIconName, sizeof(pstOut->aszMedalIconName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFinishDesc, sizeof(pstOut->aszFinishDesc)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsActivate))
		return -1;

	if(-1 == DecodeDT_ATTR_BASE_LST_DATA(&pstOut->stCurAttrInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ATTR_BASE_LST_DATA(&pstOut->stNextAttrInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMedalLevel))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwValidityTime))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwOverTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMedalType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSmallType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMedalColor))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsLevelMedal))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MEDAL_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_MEDAL_DATA_LST_CLI *pstIn = (DT_MEDAL_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wMedalNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_MEDAL_NUM; i++)
	{
		if(i >= (INT32)pstIn->wMedalNum)
			break;
		if(-1 == EncodeDT_MEDAL_DATA_CLI(&pstIn->astMedalInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MEDAL_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_MEDAL_DATA_LST_CLI *pstOut = (DT_MEDAL_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wMedalNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_MEDAL_NUM; i++)
	{
		if(i >= (INT32)pstOut->wMedalNum)
			break;
		if(-1 == DecodeDT_MEDAL_DATA_CLI(&pstOut->astMedalInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_VIEW_PLAYER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VIEW_PLAYER_ACK *pstIn = (PKT_CLIGS_VIEW_PLAYER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FRIEND_SYS_PLAYER_GENERAL_INFO_CLI(&pstIn->stPlayerGeneralInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFactionIconID))
		return -1;

	if(-1 == EncodeDT_HERO_ATTR_LST_INFO(&pstIn->stAttrInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byJewelryOpen))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGodWeaponOpen))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAwakenOpen))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySoulOpen))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyJobType[i]))
			return -1;
	}

	if(-1 == EncodeDT_MEDAL_DATA_LST_CLI(&pstIn->stMedalInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPetOpen))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_VIEW_PLAYER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VIEW_PLAYER_ACK *pstOut = (PKT_CLIGS_VIEW_PLAYER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FRIEND_SYS_PLAYER_GENERAL_INFO_CLI(&pstOut->stPlayerGeneralInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFactionIconID))
		return -1;

	if(-1 == DecodeDT_HERO_ATTR_LST_INFO(&pstOut->stAttrInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byJewelryOpen))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGodWeaponOpen))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAwakenOpen))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySoulOpen))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyJobType[i]))
			return -1;
	}

	if(-1 == DecodeDT_MEDAL_DATA_LST_CLI(&pstOut->stMedalInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPetOpen))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ADD_FRIEND_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ADD_FRIEND_REQ *pstIn = (PKT_CLIGS_ADD_FRIEND_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ADD_FRIEND_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ADD_FRIEND_REQ *pstOut = (PKT_CLIGS_ADD_FRIEND_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ADD_FRIEND_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ADD_FRIEND_ACK *pstIn = (PKT_CLIGS_ADD_FRIEND_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ADD_FRIEND_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ADD_FRIEND_ACK *pstOut = (PKT_CLIGS_ADD_FRIEND_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SEND_FLOWER_PROP_INFO(void *pHost, CNetData* poNetData)
{
	DT_SEND_FLOWER_PROP_INFO *pstIn = (DT_SEND_FLOWER_PROP_INFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFlowerNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoodsKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoodsNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLeftSendTimes))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedVipLvl))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SEND_FLOWER_PROP_INFO(void *pHost, CNetData* poNetData)
{
	DT_SEND_FLOWER_PROP_INFO *pstOut = (DT_SEND_FLOWER_PROP_INFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFlowerNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoodsKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoodsNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLeftSendTimes))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedVipLvl))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SEND_FLOWER_PROP_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_SEND_FLOWER_PROP_LIST_CLI *pstIn = (DT_SEND_FLOWER_PROP_LIST_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPropNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SEND_FLOWER_PROP_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwPropNum)
			break;
		if(-1 == EncodeDT_SEND_FLOWER_PROP_INFO(&pstIn->astListData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SEND_FLOWER_PROP_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_SEND_FLOWER_PROP_LIST_CLI *pstOut = (DT_SEND_FLOWER_PROP_LIST_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPropNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SEND_FLOWER_PROP_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwPropNum)
			break;
		if(-1 == DecodeDT_SEND_FLOWER_PROP_INFO(&pstOut->astListData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SEND_FLOWER_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_SEND_FLOWER_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRecvPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SEND_FLOWER_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_SEND_FLOWER_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRecvPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SEND_FLOWER_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_SEND_FLOWER_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SEND_FLOWER_PROP_LIST_CLI(&pstIn->stSendFlowerPropList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SEND_FLOWER_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_SEND_FLOWER_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SEND_FLOWER_PROP_LIST_CLI(&pstOut->stSendFlowerPropList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEND_FLOWER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEND_FLOWER_REQ *pstIn = (PKT_CLIGS_SEND_FLOWER_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwRecvPlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSendFlowerNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEND_FLOWER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEND_FLOWER_REQ *pstOut = (PKT_CLIGS_SEND_FLOWER_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwRecvPlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSendFlowerNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEND_FLOWER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEND_FLOWER_ACK *pstIn = (PKT_CLIGS_SEND_FLOWER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoodsKindID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGoodsNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwRecverFlowerSum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEND_FLOWER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEND_FLOWER_ACK *pstOut = (PKT_CLIGS_SEND_FLOWER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoodsKindID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGoodsNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwRecverFlowerSum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RECV_FLOWER_LOG(void *pHost, CNetData* poNetData)
{
	DT_RECV_FLOWER_LOG *pstIn = (DT_RECV_FLOWER_LOG*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwSendPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszSendPlayerName, sizeof(pstIn->aszSendPlayerName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFlowerNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwSendTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RECV_FLOWER_LOG(void *pHost, CNetData* poNetData)
{
	DT_RECV_FLOWER_LOG *pstOut = (DT_RECV_FLOWER_LOG*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwSendPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszSendPlayerName, sizeof(pstOut->aszSendPlayerName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFlowerNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwSendTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RECV_FLOWER_LOG_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_RECV_FLOWER_LOG_LIST_CLI *pstIn = (DT_RECV_FLOWER_LOG_LIST_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RECV_FLOWER_LOG_LIST_ELEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwLogNum)
			break;
		if(-1 == EncodeDT_RECV_FLOWER_LOG(&pstIn->astListData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RECV_FLOWER_LOG_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_RECV_FLOWER_LOG_LIST_CLI *pstOut = (DT_RECV_FLOWER_LOG_LIST_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RECV_FLOWER_LOG_LIST_ELEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwLogNum)
			break;
		if(-1 == DecodeDT_RECV_FLOWER_LOG(&pstOut->astListData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_FLOWER_BY_PLAYERID_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FLOWER_BY_PLAYERID_REQ *pstIn = (PKT_CLIGS_GET_FLOWER_BY_PLAYERID_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_FLOWER_BY_PLAYERID_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FLOWER_BY_PLAYERID_REQ *pstOut = (PKT_CLIGS_GET_FLOWER_BY_PLAYERID_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_FLOWER_BY_PLAYERID_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FLOWER_BY_PLAYERID_ACK *pstIn = (PKT_CLIGS_GET_FLOWER_BY_PLAYERID_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwFlowerSum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMyFlowerRanking))
		return -1;

	if(-1 == EncodeDT_RECV_FLOWER_LOG_LIST_CLI(&pstIn->stRecvFlowerLogList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_FLOWER_BY_PLAYERID_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FLOWER_BY_PLAYERID_ACK *pstOut = (PKT_CLIGS_GET_FLOWER_BY_PLAYERID_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwFlowerSum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMyFlowerRanking))
		return -1;

	if(-1 == DecodeDT_RECV_FLOWER_LOG_LIST_CLI(&pstOut->stRecvFlowerLogList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FLOWER_RANKING_INFO(void *pHost, CNetData* poNetData)
{
	DT_FLOWER_RANKING_INFO *pstIn = (DT_FLOWER_RANKING_INFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszPlayerName, sizeof(pstIn->aszPlayerName)))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwFlowerSum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFlowerRanking))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FLOWER_RANKING_INFO(void *pHost, CNetData* poNetData)
{
	DT_FLOWER_RANKING_INFO *pstOut = (DT_FLOWER_RANKING_INFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszPlayerName, sizeof(pstOut->aszPlayerName)))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwFlowerSum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFlowerRanking))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FLOWER_RANKING_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_FLOWER_RANKING_LIST_CLI *pstIn = (DT_FLOWER_RANKING_LIST_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwRankingNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FLOWER_RANKING_LIST_ELEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwRankingNum)
			break;
		if(-1 == EncodeDT_FLOWER_RANKING_INFO(&pstIn->astListData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FLOWER_RANKING_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_FLOWER_RANKING_LIST_CLI *pstOut = (DT_FLOWER_RANKING_LIST_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwRankingNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FLOWER_RANKING_LIST_ELEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwRankingNum)
			break;
		if(-1 == DecodeDT_FLOWER_RANKING_INFO(&pstOut->astListData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_FLOWER_RANKING_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FLOWER_RANKING_REQ *pstIn = (PKT_CLIGS_GET_FLOWER_RANKING_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_FLOWER_RANKING_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FLOWER_RANKING_REQ *pstOut = (PKT_CLIGS_GET_FLOWER_RANKING_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_FLOWER_RANKING_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FLOWER_RANKING_ACK *pstIn = (PKT_CLIGS_GET_FLOWER_RANKING_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FLOWER_RANKING_LIST_CLI(&pstIn->stFlowerRankingList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_FLOWER_RANKING_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_FLOWER_RANKING_ACK *pstOut = (PKT_CLIGS_GET_FLOWER_RANKING_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FLOWER_RANKING_LIST_CLI(&pstOut->stFlowerRankingList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PRIVATE_MSG_DATA(void *pHost, CNetData* poNetData)
{
	DT_PRIVATE_MSG_DATA *pstIn = (DT_PRIVATE_MSG_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwMsgIdx))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszMsgContent, sizeof(pstIn->aszMsgContent)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsRecv))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwSendTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PRIVATE_MSG_DATA(void *pHost, CNetData* poNetData)
{
	DT_PRIVATE_MSG_DATA *pstOut = (DT_PRIVATE_MSG_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwMsgIdx))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszMsgContent, sizeof(pstOut->aszMsgContent)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsRecv))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwSendTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PRIVATE_MSG_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_PRIVATE_MSG_LIST_CLI *pstIn = (DT_PRIVATE_MSG_LIST_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwMsgNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PRIVATE_MSG_LIST_ELEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwMsgNum)
			break;
		if(-1 == EncodeDT_PRIVATE_MSG_DATA(&pstIn->astListData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PRIVATE_MSG_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_PRIVATE_MSG_LIST_CLI *pstOut = (DT_PRIVATE_MSG_LIST_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwMsgNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PRIVATE_MSG_LIST_ELEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwMsgNum)
			break;
		if(-1 == DecodeDT_PRIVATE_MSG_DATA(&pstOut->astListData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_REQ *pstIn = (PKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStartIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGetMsgNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_REQ *pstOut = (PKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStartIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGetMsgNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_ACK *pstIn = (PKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStartIdx))
		return -1;

	if(-1 == EncodeDT_PRIVATE_MSG_LIST_CLI(&pstIn->stPrivateMsgList, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPeerRole))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_ACK *pstOut = (PKT_CLIGS_GET_PRIVATE_MSG_LOG_LIST_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStartIdx))
		return -1;

	if(-1 == DecodeDT_PRIVATE_MSG_LIST_CLI(&pstOut->stPrivateMsgList, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPeerRole))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEND_PRIVATE_MSG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEND_PRIVATE_MSG_REQ *pstIn = (PKT_CLIGS_SEND_PRIVATE_MSG_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwRecvPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszMsgContent, sizeof(pstIn->aszMsgContent)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEND_PRIVATE_MSG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEND_PRIVATE_MSG_REQ *pstOut = (PKT_CLIGS_SEND_PRIVATE_MSG_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwRecvPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszMsgContent, sizeof(pstOut->aszMsgContent)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEND_PRIVATE_MSG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEND_PRIVATE_MSG_ACK *pstIn = (PKT_CLIGS_SEND_PRIVATE_MSG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszErrInfo, sizeof(pstIn->aszErrInfo)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEND_PRIVATE_MSG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEND_PRIVATE_MSG_ACK *pstOut = (PKT_CLIGS_SEND_PRIVATE_MSG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszErrInfo, sizeof(pstOut->aszErrInfo)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DEL_PRIVATE_MSG_LOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_PRIVATE_MSG_LOG_REQ *pstIn = (PKT_CLIGS_DEL_PRIVATE_MSG_LOG_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DEL_PRIVATE_MSG_LOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_PRIVATE_MSG_LOG_REQ *pstOut = (PKT_CLIGS_DEL_PRIVATE_MSG_LOG_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DEL_PRIVATE_MSG_LOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_PRIVATE_MSG_LOG_ACK *pstIn = (PKT_CLIGS_DEL_PRIVATE_MSG_LOG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DEL_PRIVATE_MSG_LOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEL_PRIVATE_MSG_LOG_ACK *pstOut = (PKT_CLIGS_DEL_PRIVATE_MSG_LOG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ADD_TO_BLACKLIST_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ADD_TO_BLACKLIST_REQ *pstIn = (PKT_CLIGS_ADD_TO_BLACKLIST_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ADD_TO_BLACKLIST_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ADD_TO_BLACKLIST_REQ *pstOut = (PKT_CLIGS_ADD_TO_BLACKLIST_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ADD_TO_BLACKLIST_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ADD_TO_BLACKLIST_ACK *pstIn = (PKT_CLIGS_ADD_TO_BLACKLIST_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ADD_TO_BLACKLIST_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ADD_TO_BLACKLIST_ACK *pstOut = (PKT_CLIGS_ADD_TO_BLACKLIST_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MOVE_FROM_BLACKLIST_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MOVE_FROM_BLACKLIST_REQ *pstIn = (PKT_CLIGS_MOVE_FROM_BLACKLIST_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MOVE_FROM_BLACKLIST_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MOVE_FROM_BLACKLIST_REQ *pstOut = (PKT_CLIGS_MOVE_FROM_BLACKLIST_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MOVE_FROM_BLACKLIST_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MOVE_FROM_BLACKLIST_ACK *pstIn = (PKT_CLIGS_MOVE_FROM_BLACKLIST_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MOVE_FROM_BLACKLIST_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MOVE_FROM_BLACKLIST_ACK *pstOut = (PKT_CLIGS_MOVE_FROM_BLACKLIST_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ONLINE_PRIVATE_MSG_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONLINE_PRIVATE_MSG_NTF *pstIn = (PKT_CLIGS_ONLINE_PRIVATE_MSG_NTF*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwMsgIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSendPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszSendPlayerName, sizeof(pstIn->aszSendPlayerName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMainHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRelationType))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszMsgContent, sizeof(pstIn->aszMsgContent)))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwSendTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ONLINE_PRIVATE_MSG_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ONLINE_PRIVATE_MSG_NTF *pstOut = (PKT_CLIGS_ONLINE_PRIVATE_MSG_NTF*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwMsgIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSendPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszSendPlayerName, sizeof(pstOut->aszSendPlayerName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMainHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRelationType))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszMsgContent, sizeof(pstOut->aszMsgContent)))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwSendTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_OFFLINE_MSG_SENDER_INFO(void *pHost, CNetData* poNetData)
{
	DT_OFFLINE_MSG_SENDER_INFO *pstIn = (DT_OFFLINE_MSG_SENDER_INFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwSendPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszSendPlayerName, sizeof(pstIn->aszSendPlayerName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMainHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRelationType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wOfflineMsgCnt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_OFFLINE_MSG_SENDER_INFO(void *pHost, CNetData* poNetData)
{
	DT_OFFLINE_MSG_SENDER_INFO *pstOut = (DT_OFFLINE_MSG_SENDER_INFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwSendPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszSendPlayerName, sizeof(pstOut->aszSendPlayerName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMainHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRelationType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wOfflineMsgCnt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SEND_OFFLINE_MSG_PLAYER_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_SEND_OFFLINE_MSG_PLAYER_LIST_CLI *pstIn = (DT_SEND_OFFLINE_MSG_PLAYER_LIST_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SEND_OFFLINE_MSG_PLAYER_LIST_ELEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwPlayerNum)
			break;
		if(-1 == EncodeDT_OFFLINE_MSG_SENDER_INFO(&pstIn->astListData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SEND_OFFLINE_MSG_PLAYER_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_SEND_OFFLINE_MSG_PLAYER_LIST_CLI *pstOut = (DT_SEND_OFFLINE_MSG_PLAYER_LIST_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SEND_OFFLINE_MSG_PLAYER_LIST_ELEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwPlayerNum)
			break;
		if(-1 == DecodeDT_OFFLINE_MSG_SENDER_INFO(&pstOut->astListData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_REQ *pstIn = (PKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_REQ *pstOut = (PKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_ACK *pstIn = (PKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SEND_OFFLINE_MSG_PLAYER_LIST_CLI(&pstIn->stPlayerList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_ACK *pstOut = (PKT_CLIGS_GET_SEND_OFFLINE_MSG_PLAYER_LIST_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SEND_OFFLINE_MSG_PLAYER_LIST_CLI(&pstOut->stPlayerList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_READ_OFFLINE_MSG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_READ_OFFLINE_MSG_REQ *pstIn = (PKT_CLIGS_READ_OFFLINE_MSG_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwSendPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_READ_OFFLINE_MSG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_READ_OFFLINE_MSG_REQ *pstOut = (PKT_CLIGS_READ_OFFLINE_MSG_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwSendPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_READ_OFFLINE_MSG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_READ_OFFLINE_MSG_ACK *pstIn = (PKT_CLIGS_READ_OFFLINE_MSG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_READ_OFFLINE_MSG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_READ_OFFLINE_MSG_ACK *pstOut = (PKT_CLIGS_READ_OFFLINE_MSG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RAREITEM_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_RAREITEM_INFO_CLI *pstIn = (DT_RAREITEM_INFO_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byRareItemType))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->stRareItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRareItemExchangeRule))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRareItemSumRequire))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRareItemExchangeMoney))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRareItemLeftExchange))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsUnLock))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnlockLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDoorsTributeEnough))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySumDoorsTributeEnough))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBuyNeedLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedLeveEnough))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RAREITEM_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_RAREITEM_INFO_CLI *pstOut = (DT_RAREITEM_INFO_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byRareItemType))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->stRareItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRareItemExchangeRule))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRareItemSumRequire))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRareItemExchangeMoney))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRareItemLeftExchange))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsUnLock))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnlockLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDoorsTributeEnough))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySumDoorsTributeEnough))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBuyNeedLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedLeveEnough))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RAREITEM_INFO_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_RAREITEM_INFO_LIST_CLI *pstIn = (DT_RAREITEM_INFO_LIST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byRareItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RAREITEM_RES_NUM; i++)
	{
		if(i >= (INT32)pstIn->byRareItemNum)
			break;
		if(-1 == EncodeDT_RAREITEM_INFO_CLI(&pstIn->astRareItemInfoList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RAREITEM_INFO_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_RAREITEM_INFO_LIST_CLI *pstOut = (DT_RAREITEM_INFO_LIST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byRareItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RAREITEM_RES_NUM; i++)
	{
		if(i >= (INT32)pstOut->byRareItemNum)
			break;
		if(-1 == DecodeDT_RAREITEM_INFO_CLI(&pstOut->astRareItemInfoList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_RAREITEM_ROOM_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_RAREITEM_ROOM_INFO_CLI *pstIn = (DT_RAREITEM_ROOM_INFO_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwRemainMoney))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwAccumulateMoney))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRareItemGrade))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUpgradeLimit))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RAREITEM_ROOM_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_RAREITEM_ROOM_INFO_CLI *pstOut = (DT_RAREITEM_ROOM_INFO_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwRemainMoney))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwAccumulateMoney))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRareItemGrade))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUpgradeLimit))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RAREITEMROOM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RAREITEMROOM_REQ *pstIn = (PKT_CLIGS_OPEN_RAREITEMROOM_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RAREITEMROOM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RAREITEMROOM_REQ *pstOut = (PKT_CLIGS_OPEN_RAREITEMROOM_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RAREITEMROOM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RAREITEMROOM_ACK *pstIn = (PKT_CLIGS_OPEN_RAREITEMROOM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RAREITEM_ROOM_INFO_CLI(&pstIn->stRareItemRoomInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RAREITEM_INFO_LIST_CLI(&pstIn->stRareItemInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RAREITEMROOM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RAREITEMROOM_ACK *pstOut = (PKT_CLIGS_OPEN_RAREITEMROOM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RAREITEM_ROOM_INFO_CLI(&pstOut->stRareItemRoomInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RAREITEM_INFO_LIST_CLI(&pstOut->stRareItemInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_RAREITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_RAREITEM_REQ *pstIn = (PKT_CLIGS_BUY_RAREITEM_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwGoodsID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_RAREITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_RAREITEM_REQ *pstOut = (PKT_CLIGS_BUY_RAREITEM_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwGoodsID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_RAREITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_RAREITEM_ACK *pstIn = (PKT_CLIGS_BUY_RAREITEM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RAREITEM_INFO_CLI(&pstIn->stRareItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLeftDoorsTributes))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_RAREITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_RAREITEM_ACK *pstOut = (PKT_CLIGS_BUY_RAREITEM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RAREITEM_INFO_CLI(&pstOut->stRareItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLeftDoorsTributes))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_UPGRADERAREITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPGRADERAREITEM_REQ *pstIn = (PKT_CLIGS_OPEN_UPGRADERAREITEM_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_UPGRADERAREITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPGRADERAREITEM_REQ *pstOut = (PKT_CLIGS_OPEN_UPGRADERAREITEM_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_UPGRADE_RAREITEM_INFO(void *pHost, CNetData* poNetData)
{
	DT_UPGRADE_RAREITEM_INFO *pstIn = (DT_UPGRADE_RAREITEM_INFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRateItemNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_UPGRADE_RAREITEM_INFO(void *pHost, CNetData* poNetData)
{
	DT_UPGRADE_RAREITEM_INFO *pstOut = (DT_UPGRADE_RAREITEM_INFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRateItemNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_UPGRADE_MSG_LIST(void *pHost, CNetData* poNetData)
{
	DT_UPGRADE_MSG_LIST *pstIn = (DT_UPGRADE_MSG_LIST*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszUpgradeMsg, sizeof(pstIn->aszUpgradeMsg)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_UPGRADE_MSG_LIST(void *pHost, CNetData* poNetData)
{
	DT_UPGRADE_MSG_LIST *pstOut = (DT_UPGRADE_MSG_LIST*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszUpgradeMsg, sizeof(pstOut->aszUpgradeMsg)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_UPGRADE_REQUIRE_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_UPGRADE_REQUIRE_INFO_CLI *pstIn = (DT_UPGRADE_REQUIRE_INFO_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwConsumptionMoney))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFactionFundsEnough))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnitedGrade))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFactionIsEnough))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byInfoListNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_UPGRADE_INFO_NUM; i++)
	{
		if(i >= (INT32)pstIn->byInfoListNum)
			break;
		if(-1 == EncodeDT_UPGRADE_MSG_LIST(&pstIn->astUpgradeInfoList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byBuildLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsUpgradeLimit))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_UPGRADE_REQUIRE_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_UPGRADE_REQUIRE_INFO_CLI *pstOut = (DT_UPGRADE_REQUIRE_INFO_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwConsumptionMoney))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFactionFundsEnough))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnitedGrade))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFactionIsEnough))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byInfoListNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_UPGRADE_INFO_NUM; i++)
	{
		if(i >= (INT32)pstOut->byInfoListNum)
			break;
		if(-1 == DecodeDT_UPGRADE_MSG_LIST(&pstOut->astUpgradeInfoList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byBuildLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsUpgradeLimit))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_UPGRADERAREITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPGRADERAREITEM_ACK *pstIn = (PKT_CLIGS_OPEN_UPGRADERAREITEM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_UPGRADE_REQUIRE_INFO_CLI(&pstIn->stUpgradeRequireInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_UPGRADERAREITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_UPGRADERAREITEM_ACK *pstOut = (PKT_CLIGS_OPEN_UPGRADERAREITEM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_UPGRADE_REQUIRE_INFO_CLI(&pstOut->stUpgradeRequireInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_RAREITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_RAREITEM_REQ *pstIn = (PKT_CLIGS_UPGRADE_RAREITEM_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_RAREITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_RAREITEM_REQ *pstOut = (PKT_CLIGS_UPGRADE_RAREITEM_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_AFTER_UPGRADE_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_AFTER_UPGRADE_INFO_CLI *pstIn = (DT_AFTER_UPGRADE_INFO_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byRareItemGrade))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsMaxLevel))
		return -1;

	if(-1 == EncodeDT_RAREITEM_INFO_LIST_CLI(&pstIn->stRareItemInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_AFTER_UPGRADE_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_AFTER_UPGRADE_INFO_CLI *pstOut = (DT_AFTER_UPGRADE_INFO_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byRareItemGrade))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsMaxLevel))
		return -1;

	if(-1 == DecodeDT_RAREITEM_INFO_LIST_CLI(&pstOut->stRareItemInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_RAREITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_RAREITEM_ACK *pstIn = (PKT_CLIGS_UPGRADE_RAREITEM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_AFTER_UPGRADE_INFO_CLI(&pstIn->stAfterUpgradeInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_UPGRADE_REQUIRE_INFO_CLI(&pstIn->stUpgradeRequireInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionFunds))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_RAREITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_RAREITEM_ACK *pstOut = (PKT_CLIGS_UPGRADE_RAREITEM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_AFTER_UPGRADE_INFO_CLI(&pstOut->stAfterUpgradeInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_UPGRADE_REQUIRE_INFO_CLI(&pstOut->stUpgradeRequireInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionFunds))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GYMNASIUM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GYMNASIUM_REQ *pstIn = (PKT_CLIGS_OPEN_GYMNASIUM_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GYMNASIUM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GYMNASIUM_REQ *pstOut = (PKT_CLIGS_OPEN_GYMNASIUM_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ *pstIn = (PKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwSkillID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ *pstOut = (PKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwSkillID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_REQ *pstIn = (PKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_REQ *pstOut = (PKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GYMNASIUM_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GYMNASIUM_UPGRADE_REQ *pstIn = (PKT_CLIGS_GYMNASIUM_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GYMNASIUM_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GYMNASIUM_UPGRADE_REQ *pstOut = (PKT_CLIGS_GYMNASIUM_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GYMNASIUM_CLI_INFO(void *pHost, CNetData* poNetData)
{
	DT_GYMNASIUM_CLI_INFO *pstIn = (DT_GYMNASIUM_CLI_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGymnasiumLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDoorsTribute))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUpgradeLimit))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GYMNASIUM_CLI_INFO(void *pHost, CNetData* poNetData)
{
	DT_GYMNASIUM_CLI_INFO *pstOut = (DT_GYMNASIUM_CLI_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGymnasiumLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDoorsTribute))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUpgradeLimit))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_CLI_INFO(void *pHost, CNetData* poNetData)
{
	DT_SKILL_CLI_INFO *pstIn = (DT_SKILL_CLI_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->bySkillID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszGymnasiumSkillName, sizeof(pstIn->aszGymnasiumSkillName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySkillFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurMaxSkillLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySkillLevel))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszSkillMsg, sizeof(pstIn->aszSkillMsg)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostDoorsTribute))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGymnasiumLevelRequire))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_CLI_INFO(void *pHost, CNetData* poNetData)
{
	DT_SKILL_CLI_INFO *pstOut = (DT_SKILL_CLI_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->bySkillID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszGymnasiumSkillName, sizeof(pstOut->aszGymnasiumSkillName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySkillFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurMaxSkillLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySkillLevel))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszSkillMsg, sizeof(pstOut->aszSkillMsg)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostDoorsTribute))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGymnasiumLevelRequire))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GYMNASIUM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GYMNASIUM_ACK *pstIn = (PKT_CLIGS_OPEN_GYMNASIUM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GYMNASIUM_CLI_INFO(&pstIn->stGymnasiumInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySkillNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GYMNASIUM_SKILL_NUM; i++)
	{
		if(i >= (INT32)pstIn->bySkillNum)
			break;
		if(-1 == EncodeDT_SKILL_CLI_INFO(&pstIn->astSkillInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_GYMNASIUM_SKILL_NUM; i++)
	{
		if(i >= (INT32)pstIn->bySkillNum)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwSkillSumDoorsTribute[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GYMNASIUM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GYMNASIUM_ACK *pstOut = (PKT_CLIGS_OPEN_GYMNASIUM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GYMNASIUM_CLI_INFO(&pstOut->stGymnasiumInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySkillNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GYMNASIUM_SKILL_NUM; i++)
	{
		if(i >= (INT32)pstOut->bySkillNum)
			break;
		if(-1 == DecodeDT_SKILL_CLI_INFO(&pstOut->astSkillInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_GYMNASIUM_SKILL_NUM; i++)
	{
		if(i >= (INT32)pstOut->bySkillNum)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwSkillSumDoorsTribute[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK *pstIn = (PKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SKILL_CLI_INFO(&pstIn->stSkillInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLeftDoorsTribute))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSumDoorsTribute))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK *pstOut = (PKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SKILL_CLI_INFO(&pstOut->stSkillInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLeftDoorsTribute))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSumDoorsTribute))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_ACK *pstIn = (PKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_UPGRADE_REQUIRE_INFO_CLI(&pstIn->stUpgradeRequireInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_ACK *pstOut = (PKT_CLIGS_OPEN_GYMNASIUM_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_UPGRADE_REQUIRE_INFO_CLI(&pstOut->stUpgradeRequireInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GYMNASIUM_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GYMNASIUM_UPGRADE_ACK *pstIn = (PKT_CLIGS_GYMNASIUM_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySkillNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GYMNASIUM_SKILL_NUM; i++)
	{
		if(i >= (INT32)pstIn->bySkillNum)
			break;
		if(-1 == EncodeDT_SKILL_CLI_INFO(&pstIn->astAfterUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_UPGRADE_REQUIRE_INFO_CLI(&pstIn->stUpgradeRequireInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFullLevelMark))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGymnasiumLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionFunds))
		return -1;

	for(i = 0; i < MAX_GYMNASIUM_SKILL_NUM; i++)
	{
		if(i >= (INT32)pstIn->bySkillNum)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwSkillSumDoorsTribute[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GYMNASIUM_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GYMNASIUM_UPGRADE_ACK *pstOut = (PKT_CLIGS_GYMNASIUM_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySkillNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GYMNASIUM_SKILL_NUM; i++)
	{
		if(i >= (INT32)pstOut->bySkillNum)
			break;
		if(-1 == DecodeDT_SKILL_CLI_INFO(&pstOut->astAfterUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_UPGRADE_REQUIRE_INFO_CLI(&pstOut->stUpgradeRequireInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFullLevelMark))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGymnasiumLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionFunds))
		return -1;

	for(i = 0; i < MAX_GYMNASIUM_SKILL_NUM; i++)
	{
		if(i >= (INT32)pstOut->bySkillNum)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwSkillSumDoorsTribute[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SHADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHADE_REQ *pstIn = (PKT_CLIGS_OPEN_SHADE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SHADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHADE_REQ *pstOut = (PKT_CLIGS_OPEN_SHADE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SHADE_INFO(void *pHost, CNetData* poNetData)
{
	DT_SHADE_INFO *pstIn = (DT_SHADE_INFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwShadeLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDoorsTribute))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUpgradeLimit))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPlayerVIPLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SHADE_INFO(void *pHost, CNetData* poNetData)
{
	DT_SHADE_INFO *pstOut = (DT_SHADE_INFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwShadeLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDoorsTribute))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUpgradeLimit))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPlayerVIPLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HUNTING_POT_INFO(void *pHost, CNetData* poNetData)
{
	DT_HUNTING_POT_INFO *pstIn = (DT_HUNTING_POT_INFO*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszPotName, sizeof(pstIn->aszPotName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurIntegral))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxintegral))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRewardFunds))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HUNTING_POT_INFO(void *pHost, CNetData* poNetData)
{
	DT_HUNTING_POT_INFO *pstOut = (DT_HUNTING_POT_INFO*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszPotName, sizeof(pstOut->aszPotName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurIntegral))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxintegral))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRewardFunds))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HUNTING_POT_INFO2(void *pHost, CNetData* poNetData)
{
	DT_HUNTING_POT_INFO2 *pstIn = (DT_HUNTING_POT_INFO2*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszPotName, sizeof(pstIn->aszPotName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurIntegral))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxintegral))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRewardFunds))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsUnlock))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnLockLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HUNTING_POT_INFO2(void *pHost, CNetData* poNetData)
{
	DT_HUNTING_POT_INFO2 *pstOut = (DT_HUNTING_POT_INFO2*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszPotName, sizeof(pstOut->aszPotName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurIntegral))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxintegral))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRewardFunds))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsUnlock))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnLockLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_REWARD_SINGLE_INFO(void *pHost, CNetData* poNetData)
{
	DT_REWARD_SINGLE_INFO *pstIn = (DT_REWARD_SINGLE_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGoodsType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRewardValue))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOutProbability))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMulti))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_REWARD_SINGLE_INFO(void *pHost, CNetData* poNetData)
{
	DT_REWARD_SINGLE_INFO *pstOut = (DT_REWARD_SINGLE_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGoodsType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRewardValue))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOutProbability))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMulti))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HUNTING_SCHEDULE_INFO(void *pHost, CNetData* poNetData)
{
	DT_HUNTING_SCHEDULE_INFO *pstIn = (DT_HUNTING_SCHEDULE_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byHuntingPotPos))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHuntingPotNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HUTING_POT_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHuntingPotNum)
			break;
		if(-1 == EncodeDT_HUNTING_POT_INFO(&pstIn->astHuntingPotInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwFactionFunds))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDoorsTribute))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HUNTING_SCHEDULE_INFO(void *pHost, CNetData* poNetData)
{
	DT_HUNTING_SCHEDULE_INFO *pstOut = (DT_HUNTING_SCHEDULE_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byHuntingPotPos))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHuntingPotNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HUTING_POT_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHuntingPotNum)
			break;
		if(-1 == DecodeDT_HUNTING_POT_INFO(&pstOut->astHuntingPotInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwFactionFunds))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDoorsTribute))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HUNTING_SCHEDULE_INFO2(void *pHost, CNetData* poNetData)
{
	DT_HUNTING_SCHEDULE_INFO2 *pstIn = (DT_HUNTING_SCHEDULE_INFO2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byHuntingPotPos))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHuntingPotNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HUNTING_POT_NUM_NEW; i++)
	{
		if(i >= (INT32)pstIn->byHuntingPotNum)
			break;
		if(-1 == EncodeDT_HUNTING_POT_INFO2(&pstIn->astHuntingPotInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwFactionFunds))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDoorsTribute))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLastSchedule))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HUNTING_SCHEDULE_INFO2(void *pHost, CNetData* poNetData)
{
	DT_HUNTING_SCHEDULE_INFO2 *pstOut = (DT_HUNTING_SCHEDULE_INFO2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byHuntingPotPos))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHuntingPotNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HUNTING_POT_NUM_NEW; i++)
	{
		if(i >= (INT32)pstOut->byHuntingPotNum)
			break;
		if(-1 == DecodeDT_HUNTING_POT_INFO2(&pstOut->astHuntingPotInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwFactionFunds))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDoorsTribute))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLastSchedule))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HUNTING_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_HUNTING_INFO_CLI *pstIn = (DT_HUNTING_INFO_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszTaskBeginTimeMsg, sizeof(pstIn->aszTaskBeginTimeMsg)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszTaskDescMsg, sizeof(pstIn->aszTaskDescMsg)))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO(&pstIn->stHuntingScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHuntingNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byActiviFlag))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHuntingCountDown))
		return -1;

	if(-1 == EncodeDT_ACTIVITY_BASE_DATA(&pstIn->stActiviInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HUNTING_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_HUNTING_INFO_CLI *pstOut = (DT_HUNTING_INFO_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszTaskBeginTimeMsg, sizeof(pstOut->aszTaskBeginTimeMsg)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszTaskDescMsg, sizeof(pstOut->aszTaskDescMsg)))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO(&pstOut->stHuntingScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHuntingNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byActiviFlag))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHuntingCountDown))
		return -1;

	if(-1 == DecodeDT_ACTIVITY_BASE_DATA(&pstOut->stActiviInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SHADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHADE_ACK *pstIn = (PKT_CLIGS_OPEN_SHADE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SHADE_INFO(&pstIn->stShadeInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HUNTING_INFO_CLI(&pstIn->stHuntingInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO2(&pstIn->stNewHuntingScheduleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SHADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHADE_ACK *pstOut = (PKT_CLIGS_OPEN_SHADE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SHADE_INFO(&pstOut->stShadeInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HUNTING_INFO_CLI(&pstOut->stHuntingInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO2(&pstOut->stNewHuntingScheduleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SHADE_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHADE_UPGRADE_REQ *pstIn = (PKT_CLIGS_OPEN_SHADE_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SHADE_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHADE_UPGRADE_REQ *pstOut = (PKT_CLIGS_OPEN_SHADE_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SHADE_UPGRADE_INFO(void *pHost, CNetData* poNetData)
{
	DT_SHADE_UPGRADE_INFO *pstIn = (DT_SHADE_UPGRADE_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFactionFundsEnough))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeNeedFactionFunds))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFactionLevelEnough))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeNeedFactionLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUpgradeMsgNum))
		return -1;

	INT32 i;
	for(i = 0; i < SHADE_UPGRADE_MSG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byUpgradeMsgNum)
			break;
		if(-1 == EncodeDT_UPGRADE_MSG_LIST(&pstIn->astUpgradeMsgLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byShadelevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsUpgradeLimit))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SHADE_UPGRADE_INFO(void *pHost, CNetData* poNetData)
{
	DT_SHADE_UPGRADE_INFO *pstOut = (DT_SHADE_UPGRADE_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFactionFundsEnough))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeNeedFactionFunds))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFactionLevelEnough))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeNeedFactionLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUpgradeMsgNum))
		return -1;

	INT32 i;
	for(i = 0; i < SHADE_UPGRADE_MSG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byUpgradeMsgNum)
			break;
		if(-1 == DecodeDT_UPGRADE_MSG_LIST(&pstOut->astUpgradeMsgLst[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byShadelevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsUpgradeLimit))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SHADE_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHADE_UPGRADE_ACK *pstIn = (PKT_CLIGS_OPEN_SHADE_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SHADE_UPGRADE_INFO(&pstIn->stUpgradeInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SHADE_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SHADE_UPGRADE_ACK *pstOut = (PKT_CLIGS_OPEN_SHADE_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SHADE_UPGRADE_INFO(&pstOut->stUpgradeInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SHADE_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SHADE_UPGRADE_REQ *pstIn = (PKT_CLIGS_SHADE_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SHADE_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SHADE_UPGRADE_REQ *pstOut = (PKT_CLIGS_SHADE_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SHADE_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SHADE_UPGRADE_ACK *pstIn = (PKT_CLIGS_SHADE_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_HUNTING_INFO_CLI(&pstIn->stAfterUpgradeHuntingInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_SHADE_UPGRADE_INFO(&pstIn->stNextUpgradeInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFullLevelMark))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byShadeLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionFunds))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO2(&pstIn->stNewHuntingScheduleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SHADE_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SHADE_UPGRADE_ACK *pstOut = (PKT_CLIGS_SHADE_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_HUNTING_INFO_CLI(&pstOut->stAfterUpgradeHuntingInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_SHADE_UPGRADE_INFO(&pstOut->stNextUpgradeInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFullLevelMark))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byShadeLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionFunds))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO2(&pstOut->stNewHuntingScheduleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_REWARD_INFO(void *pHost, CNetData* poNetData)
{
	DT_REWARD_INFO *pstIn = (DT_REWARD_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byRewardType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRewardNum))
		return -1;

	INT32 i;
	for(i = 0; i < HUNTING_REWARD_MGS_NUM; i++)
	{
		if(i >= (INT32)pstIn->byRewardNum)
			break;
		if(-1 == EncodeDT_REWARD_SINGLE_INFO(&pstIn->astRewardMsg[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_REWARD_INFO(void *pHost, CNetData* poNetData)
{
	DT_REWARD_INFO *pstOut = (DT_REWARD_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byRewardType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRewardNum))
		return -1;

	INT32 i;
	for(i = 0; i < HUNTING_REWARD_MGS_NUM; i++)
	{
		if(i >= (INT32)pstOut->byRewardNum)
			break;
		if(-1 == DecodeDT_REWARD_SINGLE_INFO(&pstOut->astRewardMsg[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_MONSTER_INFO(void *pHost, CNetData* poNetData)
{
	DT_MONSTER_INFO *pstIn = (DT_MONSTER_INFO*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wMonsterID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMonsterPower))
		return -1;

	if(-1 == EncodeDT_REWARD_INFO(&pstIn->stMonsterReward, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MONSTER_INFO(void *pHost, CNetData* poNetData)
{
	DT_MONSTER_INFO *pstOut = (DT_MONSTER_INFO*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wMonsterID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMonsterPower))
		return -1;

	if(-1 == DecodeDT_REWARD_INFO(&pstOut->stMonsterReward, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GOLDMODE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GOLDMODE_REQ *pstIn = (PKT_CLIGS_OPEN_GOLDMODE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GOLDMODE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GOLDMODE_REQ *pstOut = (PKT_CLIGS_OPEN_GOLDMODE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GOLDMODE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GOLDMODE_ACK *pstIn = (PKT_CLIGS_OPEN_GOLDMODE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_MONSTER_INFO(&pstIn->stCurMonsterInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSyncGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GOLDMODE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GOLDMODE_ACK *pstOut = (PKT_CLIGS_OPEN_GOLDMODE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_MONSTER_INFO(&pstOut->stCurMonsterInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSyncGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_HUNTING_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HUNTING_REQ *pstIn = (PKT_CLIGS_OPEN_HUNTING_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_HUNTING_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HUNTING_REQ *pstOut = (PKT_CLIGS_OPEN_HUNTING_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_REWARD_INFO_ALL(void *pHost, CNetData* poNetData)
{
	DT_REWARD_INFO_ALL *pstIn = (DT_REWARD_INFO_ALL*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTypeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MONSTER_TYPE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byTypeNum)
			break;
		if(-1 == EncodeDT_REWARD_INFO(&pstIn->astRewardInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_REWARD_INFO_ALL(void *pHost, CNetData* poNetData)
{
	DT_REWARD_INFO_ALL *pstOut = (DT_REWARD_INFO_ALL*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTypeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MONSTER_TYPE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byTypeNum)
			break;
		if(-1 == DecodeDT_REWARD_INFO(&pstOut->astRewardInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_CHANGE_MONSTER_INFO(void *pHost, CNetData* poNetData)
{
	DT_CHANGE_MONSTER_INFO *pstIn = (DT_CHANGE_MONSTER_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byMaxFreeNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurFreeNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwChangeMonsterGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CHANGE_MONSTER_INFO(void *pHost, CNetData* poNetData)
{
	DT_CHANGE_MONSTER_INFO *pstOut = (DT_CHANGE_MONSTER_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byMaxFreeNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurFreeNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwChangeMonsterGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FIND_MONSTER_INFO(void *pHost, CNetData* poNetData)
{
	DT_FIND_MONSTER_INFO *pstIn = (DT_FIND_MONSTER_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlayerVIPLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedVIPLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FIND_MONSTER_INFO(void *pHost, CNetData* poNetData)
{
	DT_FIND_MONSTER_INFO *pstOut = (DT_FIND_MONSTER_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlayerVIPLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedVIPLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HUNTING_OTHER_INFO(void *pHost, CNetData* poNetData)
{
	DT_HUNTING_OTHER_INFO *pstIn = (DT_HUNTING_OTHER_INFO*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDoorsTribute))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanHuntingNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHuntingTime))
		return -1;

	if(-1 == EncodeDT_CHANGE_MONSTER_INFO(&pstIn->stChangeMonsterMsg, poNetData))
		return -1;

	if(-1 == EncodeDT_FIND_MONSTER_INFO(&pstIn->stFindMonsterMsg, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxTaskIntegral))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurTaskIntegral))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszCurHuntingPotName, sizeof(pstIn->aszCurHuntingPotName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurPotNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySumPotNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HUNTING_OTHER_INFO(void *pHost, CNetData* poNetData)
{
	DT_HUNTING_OTHER_INFO *pstOut = (DT_HUNTING_OTHER_INFO*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDoorsTribute))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanHuntingNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHuntingTime))
		return -1;

	if(-1 == DecodeDT_CHANGE_MONSTER_INFO(&pstOut->stChangeMonsterMsg, poNetData))
		return -1;

	if(-1 == DecodeDT_FIND_MONSTER_INFO(&pstOut->stFindMonsterMsg, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxTaskIntegral))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurTaskIntegral))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszCurHuntingPotName, sizeof(pstOut->aszCurHuntingPotName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurPotNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySumPotNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_HUNTING_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HUNTING_ACK *pstIn = (PKT_CLIGS_OPEN_HUNTING_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_REWARD_INFO_ALL(&pstIn->stRewardInfoAll, poNetData))
		return -1;

	if(-1 == EncodeDT_MONSTER_INFO(&pstIn->stMonsterInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HUNTING_OTHER_INFO(&pstIn->stOtherInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMonsterExist))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOpenGoldFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVIPLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedGold))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO2(&pstIn->stNewHuntingScheduleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_HUNTING_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HUNTING_ACK *pstOut = (PKT_CLIGS_OPEN_HUNTING_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_REWARD_INFO_ALL(&pstOut->stRewardInfoAll, poNetData))
		return -1;

	if(-1 == DecodeDT_MONSTER_INFO(&pstOut->stMonsterInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HUNTING_OTHER_INFO(&pstOut->stOtherInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMonsterExist))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOpenGoldFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVIPLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedGold))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO2(&pstOut->stNewHuntingScheduleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FIND_MONSTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FIND_MONSTER_REQ *pstIn = (PKT_CLIGS_FIND_MONSTER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFindType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMonsterNum))
		return -1;

	INT32 i;
	for(i = 0; i < MONSTER_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstIn->byMonsterNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awMonsterBlue[i]))
			return -1;
	}

	for(i = 0; i < MONSTER_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstIn->byMonsterNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awMonsterPurple[i]))
			return -1;
	}

	for(i = 0; i < MONSTER_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstIn->byMonsterNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awMonsterRed[i]))
			return -1;
	}

	for(i = 0; i < MONSTER_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstIn->byMonsterNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awMonsterOrange[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FIND_MONSTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FIND_MONSTER_REQ *pstOut = (PKT_CLIGS_FIND_MONSTER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFindType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMonsterNum))
		return -1;

	INT32 i;
	for(i = 0; i < MONSTER_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstOut->byMonsterNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awMonsterBlue[i]))
			return -1;
	}

	for(i = 0; i < MONSTER_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstOut->byMonsterNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awMonsterPurple[i]))
			return -1;
	}

	for(i = 0; i < MONSTER_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstOut->byMonsterNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awMonsterRed[i]))
			return -1;
	}

	for(i = 0; i < MONSTER_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstOut->byMonsterNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awMonsterOrange[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FIND_MONSTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FIND_MONSTER_ACK *pstIn = (PKT_CLIGS_FIND_MONSTER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_CHANGE_MONSTER_INFO(&pstIn->stFreeMsg, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoldNum))
		return -1;

	if(-1 == EncodeDT_MONSTER_INFO(&pstIn->stMonsterInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFindType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoldModeFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FIND_MONSTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FIND_MONSTER_ACK *pstOut = (PKT_CLIGS_FIND_MONSTER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_CHANGE_MONSTER_INFO(&pstOut->stFreeMsg, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoldNum))
		return -1;

	if(-1 == DecodeDT_MONSTER_INFO(&pstOut->stMonsterInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFindType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoldModeFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HUNTING_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HUNTING_BATTLE_REQ *pstIn = (PKT_CLIGS_HUNTING_BATTLE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HUNTING_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HUNTING_BATTLE_REQ *pstOut = (PKT_CLIGS_HUNTING_BATTLE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HUNTING_BATTLE_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HUNTING_BATTLE_ACK2 *pstIn = (PKT_CLIGS_HUNTING_BATTLE_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA3(&pstIn->stBattleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_REWARD_INFO(&pstIn->stBattleReward, poNetData))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO(&pstIn->stTaskScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClosedMonsterNeedGold))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszBattleLostMsg, sizeof(pstIn->aszBattleLostMsg)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSyncDoorsTribute))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byScheduleChangeFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHuntingLeftNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsGoldMode))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO2(&pstIn->stNewHuntingScheduleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HUNTING_BATTLE_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HUNTING_BATTLE_ACK2 *pstOut = (PKT_CLIGS_HUNTING_BATTLE_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA3(&pstOut->stBattleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_REWARD_INFO(&pstOut->stBattleReward, poNetData))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO(&pstOut->stTaskScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClosedMonsterNeedGold))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszBattleLostMsg, sizeof(pstOut->aszBattleLostMsg)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSyncDoorsTribute))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byScheduleChangeFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHuntingLeftNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsGoldMode))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO2(&pstOut->stNewHuntingScheduleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHANGE_SCHEDEULE_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_SCHEDEULE_NTF *pstIn = (PKT_CLIGS_CHANGE_SCHEDEULE_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTaskID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwNTFTime))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO(&pstIn->stScheduleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_REWARD_INFO(&pstIn->stBattleReward, poNetData))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO2(&pstIn->stNewHuntingScheduleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHANGE_SCHEDEULE_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_SCHEDEULE_NTF *pstOut = (PKT_CLIGS_CHANGE_SCHEDEULE_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTaskID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwNTFTime))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO(&pstOut->stScheduleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_REWARD_INFO(&pstOut->stBattleReward, poNetData))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO2(&pstOut->stNewHuntingScheduleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_HOT_SPRING_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HOT_SPRING_REQ *pstIn = (PKT_CLIGS_OPEN_HOT_SPRING_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_HOT_SPRING_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HOT_SPRING_REQ *pstOut = (PKT_CLIGS_OPEN_HOT_SPRING_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HOT_SPRING_PLAYER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HOT_SPRING_PLAYER_DATA_CLI *pstIn = (DT_HOT_SPRING_PLAYER_DATA_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTuhaoGoldMark))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HOT_SPRING_PLAYER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HOT_SPRING_PLAYER_DATA_CLI *pstOut = (DT_HOT_SPRING_PLAYER_DATA_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTuhaoGoldMark))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HOT_SPRING_PLAYER_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_HOT_SPRING_PLAYER_DATA_CLI_LST *pstIn = (DT_HOT_SPRING_PLAYER_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HOT_SPRING_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwPlayerNum)
			break;
		if(-1 == EncodeDT_HOT_SPRING_PLAYER_DATA_CLI(&pstIn->astHotSpringPlayerLst[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HOT_SPRING_PLAYER_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_HOT_SPRING_PLAYER_DATA_CLI_LST *pstOut = (DT_HOT_SPRING_PLAYER_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HOT_SPRING_SHOW_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwPlayerNum)
			break;
		if(-1 == DecodeDT_HOT_SPRING_PLAYER_DATA_CLI(&pstOut->astHotSpringPlayerLst[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HOT_SPRING_SELF_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HOT_SPRING_SELF_DATA_CLI *pstIn = (DT_HOT_SPRING_SELF_DATA_CLI*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurSkill))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPhystrength))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwMaxPhystrength))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGiveWineLimit))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HOT_SPRING_SELF_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_HOT_SPRING_SELF_DATA_CLI *pstOut = (DT_HOT_SPRING_SELF_DATA_CLI*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurSkill))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPhystrength))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwMaxPhystrength))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGiveWineLimit))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DIDNOT_GIVE_WINE_CLI(void *pHost, CNetData* poNetData)
{
	DT_DIDNOT_GIVE_WINE_CLI *pstIn = (DT_DIDNOT_GIVE_WINE_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byLeftGiveWineNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGiveWineCost))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGiveWineCountDown))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGiveWineCDValue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DIDNOT_GIVE_WINE_CLI(void *pHost, CNetData* poNetData)
{
	DT_DIDNOT_GIVE_WINE_CLI *pstOut = (DT_DIDNOT_GIVE_WINE_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byLeftGiveWineNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGiveWineCost))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGiveWineCountDown))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGiveWineCDValue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_DIDNOT_DRINGK_WINE_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_DIDNOT_DRINGK_WINE_LIST_CLI *pstIn = (DT_DIDNOT_DRINGK_WINE_LIST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byWineNum))
		return -1;

	INT32 i;
	for(i = 0; i < HOT_SPRING_WINE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byWineNum)
			break;
		if(-1 == EncodeDT_WINE_DATA_CLI(&pstIn->astAllWineInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddTString(pstIn->aszExtMsg, sizeof(pstIn->aszExtMsg)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_DIDNOT_DRINGK_WINE_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_DIDNOT_DRINGK_WINE_LIST_CLI *pstOut = (DT_DIDNOT_DRINGK_WINE_LIST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byWineNum))
		return -1;

	INT32 i;
	for(i = 0; i < HOT_SPRING_WINE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byWineNum)
			break;
		if(-1 == DecodeDT_WINE_DATA_CLI(&pstOut->astAllWineInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelTString(pstOut->aszExtMsg, sizeof(pstOut->aszExtMsg)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HOTSPRING_ACTIVITY_TIME_DATA(void *pHost, CNetData* poNetData)
{
	DT_HOTSPRING_ACTIVITY_TIME_DATA *pstIn = (DT_HOTSPRING_ACTIVITY_TIME_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byStartHour))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStartMin))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKeepTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HOTSPRING_ACTIVITY_TIME_DATA(void *pHost, CNetData* poNetData)
{
	DT_HOTSPRING_ACTIVITY_TIME_DATA *pstOut = (DT_HOTSPRING_ACTIVITY_TIME_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byStartHour))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStartMin))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKeepTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HOT_SPRING_EXPERIENCE(void *pHost, CNetData* poNetData)
{
	DT_HOT_SPRING_EXPERIENCE *pstIn = (DT_HOT_SPRING_EXPERIENCE*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwMaxExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperienceBase))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddInterval))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HOT_SPRING_EXPERIENCE(void *pHost, CNetData* poNetData)
{
	DT_HOT_SPRING_EXPERIENCE *pstOut = (DT_HOT_SPRING_EXPERIENCE*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwMaxExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperienceBase))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddInterval))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_HOT_SPRING_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HOT_SPRING_ACK *pstIn = (PKT_CLIGS_OPEN_HOT_SPRING_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_HOT_SPRING_PLAYER_DATA_CLI_LST(&pstIn->stPlayerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HOT_SPRING_SELF_DATA_CLI(&pstIn->stPlayerSelf, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBeforeWineState))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGiveWineState))
		return -1;

	if(-1 == EncodeDT_WINE_DATA_CLI(&pstIn->stWineDataCli, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwActiviTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveOverReward))
		return -1;

	if(-1 == EncodeDT_OVER_GIVE_WINE_REWARD(&pstIn->stOverReward, poNetData))
		return -1;

	if(-1 == EncodeDT_HOT_SPRING_EXPERIENCE(&pstIn->stPlayerExprience, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_HOT_SPRING_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HOT_SPRING_ACK *pstOut = (PKT_CLIGS_OPEN_HOT_SPRING_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_HOT_SPRING_PLAYER_DATA_CLI_LST(&pstOut->stPlayerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HOT_SPRING_SELF_DATA_CLI(&pstOut->stPlayerSelf, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBeforeWineState))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGiveWineState))
		return -1;

	if(-1 == DecodeDT_WINE_DATA_CLI(&pstOut->stWineDataCli, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwActiviTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveOverReward))
		return -1;

	if(-1 == DecodeDT_OVER_GIVE_WINE_REWARD(&pstOut->stOverReward, poNetData))
		return -1;

	if(-1 == DecodeDT_HOT_SPRING_EXPERIENCE(&pstOut->stPlayerExprience, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SELECT_WINE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_WINE_REQ *pstIn = (PKT_CLIGS_SELECT_WINE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwWineID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SELECT_WINE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_WINE_REQ *pstOut = (PKT_CLIGS_SELECT_WINE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwWineID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SELECT_WINE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_WINE_ACK *pstIn = (PKT_CLIGS_SELECT_WINE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == EncodeDT_WINE_DATA_CLI(&pstIn->stWineDataCli, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySelectWineState))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SELECT_WINE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_WINE_ACK *pstOut = (PKT_CLIGS_SELECT_WINE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == DecodeDT_WINE_DATA_CLI(&pstOut->stWineDataCli, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySelectWineState))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRINK_WINE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRINK_WINE_REQ *pstIn = (PKT_CLIGS_DRINK_WINE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRINK_WINE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRINK_WINE_REQ *pstOut = (PKT_CLIGS_DRINK_WINE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRINK_WINE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRINK_WINE_ACK *pstIn = (PKT_CLIGS_DRINK_WINE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_WINE_DATA_CLI(&pstIn->stWineDataCli, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRewardID1))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSyncValue1))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRewardID2))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSyncValue2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRINK_WINE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRINK_WINE_ACK *pstOut = (PKT_CLIGS_DRINK_WINE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_WINE_DATA_CLI(&pstOut->stWineDataCli, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRewardID1))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSyncValue1))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRewardID2))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSyncValue2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRINK_WINE_MOVE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRINK_WINE_MOVE_REQ *pstIn = (PKT_CLIGS_DRINK_WINE_MOVE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPosX))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPosY))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRINK_WINE_MOVE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRINK_WINE_MOVE_REQ *pstOut = (PKT_CLIGS_DRINK_WINE_MOVE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPosX))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPosY))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRINK_WINE_MOVE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRINK_WINE_MOVE_ACK *pstIn = (PKT_CLIGS_DRINK_WINE_MOVE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRINK_WINE_MOVE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRINK_WINE_MOVE_ACK *pstOut = (PKT_CLIGS_DRINK_WINE_MOVE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEAVE_HOT_SPRING_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_HOT_SPRING_REQ *pstIn = (PKT_CLIGS_LEAVE_HOT_SPRING_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEAVE_HOT_SPRING_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_HOT_SPRING_REQ *pstOut = (PKT_CLIGS_LEAVE_HOT_SPRING_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEAVE_HOT_SPRING_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_HOT_SPRING_ACK *pstIn = (PKT_CLIGS_LEAVE_HOT_SPRING_ACK*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEAVE_HOT_SPRING_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_HOT_SPRING_ACK *pstOut = (PKT_CLIGS_LEAVE_HOT_SPRING_ACK*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HOT_SPRING_POS_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HOT_SPRING_POS_NTF *pstIn = (PKT_CLIGS_HOT_SPRING_POS_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byEnterPalyerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HOT_SPRING_SHOW_PLAYER_NUM; i++)
	{
		if(-1 == EncodeDT_HOT_SPRING_PLAYER_DATA_CLI(&pstIn->astEnterPlayerInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byLeavePlayerNum))
		return -1;

	for(i = 0; i < MAX_HOT_SPRING_SHOW_PLAYER_NUM; i++)
	{
		if(-1 == EncodeDT_HOT_SPRING_PLAYER_DATA_CLI(&pstIn->astLeavePlayerInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byMovePlayerNum))
		return -1;

	for(i = 0; i < MAX_HOT_SPRING_SHOW_PLAYER_NUM; i++)
	{
		if(-1 == EncodeDT_HOT_SPRING_PLAYER_DATA_CLI(&pstIn->astMovePlayerInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HOT_SPRING_POS_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HOT_SPRING_POS_NTF *pstOut = (PKT_CLIGS_HOT_SPRING_POS_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byEnterPalyerNum))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_HOT_SPRING_SHOW_PLAYER_NUM; i++)
		{
			if(-1 == DecodeDT_HOT_SPRING_PLAYER_DATA_CLI(&pstOut->astEnterPlayerInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelByte(pstOut->byLeavePlayerNum))
		return -1;

		for(i = 0; i < MAX_HOT_SPRING_SHOW_PLAYER_NUM; i++)
		{
			if(-1 == DecodeDT_HOT_SPRING_PLAYER_DATA_CLI(&pstOut->astLeavePlayerInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelByte(pstOut->byMovePlayerNum))
		return -1;

		for(i = 0; i < MAX_HOT_SPRING_SHOW_PLAYER_NUM; i++)
		{
			if(-1 == DecodeDT_HOT_SPRING_PLAYER_DATA_CLI(&pstOut->astMovePlayerInfo[i], poNetData))
				return -1;
		}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHANGE_OTHER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_OTHER_REQ *pstIn = (PKT_CLIGS_CHANGE_OTHER_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwSendPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHANGE_OTHER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_OTHER_REQ *pstOut = (PKT_CLIGS_CHANGE_OTHER_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwSendPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHANGE_OTHER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_OTHER_ACK *pstIn = (PKT_CLIGS_CHANGE_OTHER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_PLAYER_CLI_LST(&pstIn->stFactionPlayerDataLst, poNetData))
		return -1;

	if(-1 == EncodeDT_FACTION_AUTHORITY_EX(&pstIn->stFactionAuthority, poNetData))
		return -1;

	if(-1 == EncodeDT_DOORSTRIBUTE_LEVE_DATA_LST(&pstIn->stDoorsTributeLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHANGE_OTHER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_OTHER_ACK *pstOut = (PKT_CLIGS_CHANGE_OTHER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_PLAYER_CLI_LST(&pstOut->stFactionPlayerDataLst, poNetData))
		return -1;

	if(-1 == DecodeDT_FACTION_AUTHORITY_EX(&pstOut->stFactionAuthority, poNetData))
		return -1;

	if(-1 == DecodeDT_DOORSTRIBUTE_LEVE_DATA_LST(&pstOut->stDoorsTributeLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GIVE_WINE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GIVE_WINE_REQ *pstIn = (PKT_CLIGS_GIVE_WINE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GIVE_WINE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GIVE_WINE_REQ *pstOut = (PKT_CLIGS_GIVE_WINE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GIVE_WINE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GIVE_WINE_ACK *pstIn = (PKT_CLIGS_GIVE_WINE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_DIDNOT_GIVE_WINE_CLI(&pstIn->stGiveWineInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GIVE_WINE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GIVE_WINE_ACK *pstOut = (PKT_CLIGS_GIVE_WINE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_DIDNOT_GIVE_WINE_CLI(&pstOut->stGiveWineInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLICK_SELECT_WINE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLICK_SELECT_WINE_REQ *pstIn = (PKT_CLIGS_CLICK_SELECT_WINE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byDrinkWIneState))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLICK_SELECT_WINE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLICK_SELECT_WINE_REQ *pstOut = (PKT_CLIGS_CLICK_SELECT_WINE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byDrinkWIneState))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLICK_SELECT_WINE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLICK_SELECT_WINE_ACK *pstIn = (PKT_CLIGS_CLICK_SELECT_WINE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_DIDNOT_DRINGK_WINE_LIST_CLI(&pstIn->stWineDataList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLICK_SELECT_WINE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLICK_SELECT_WINE_ACK *pstOut = (PKT_CLIGS_CLICK_SELECT_WINE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_DIDNOT_DRINGK_WINE_LIST_CLI(&pstOut->stWineDataList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SURE_GIVE_WINE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SURE_GIVE_WINE_REQ *pstIn = (PKT_CLIGS_SURE_GIVE_WINE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SURE_GIVE_WINE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SURE_GIVE_WINE_REQ *pstOut = (PKT_CLIGS_SURE_GIVE_WINE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SURE_GIVE_WINE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SURE_GIVE_WINE_ACK *pstIn = (PKT_CLIGS_SURE_GIVE_WINE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwActiviTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SURE_GIVE_WINE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SURE_GIVE_WINE_ACK *pstOut = (PKT_CLIGS_SURE_GIVE_WINE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwActiviTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLOSED_MONSTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLOSED_MONSTER_REQ *pstIn = (PKT_CLIGS_CLOSED_MONSTER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byChoice))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLOSED_MONSTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLOSED_MONSTER_REQ *pstOut = (PKT_CLIGS_CLOSED_MONSTER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byChoice))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLOSED_MONSTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLOSED_MONSTER_ACK *pstIn = (PKT_CLIGS_CLOSED_MONSTER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRewardNum))
		return -1;

	INT32 i;
	for(i = 0; i < HUNTING_REWARD_MGS_NUM; i++)
	{
		if(i >= (INT32)pstIn->byRewardNum)
			break;
		if(-1 == EncodeDT_REWARD_SINGLE_INFO(&pstIn->astRewardMsg[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwSyncDoorsTribute))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO(&pstIn->stTaskScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byScheduleChangeFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHuntingLeftNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCloseMonsterChoice))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwSyncGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsGoldMode))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO2(&pstIn->stNewHuntingScheduleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLOSED_MONSTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLOSED_MONSTER_ACK *pstOut = (PKT_CLIGS_CLOSED_MONSTER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRewardNum))
		return -1;

	INT32 i;
	for(i = 0; i < HUNTING_REWARD_MGS_NUM; i++)
	{
		if(i >= (INT32)pstOut->byRewardNum)
			break;
		if(-1 == DecodeDT_REWARD_SINGLE_INFO(&pstOut->astRewardMsg[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwSyncDoorsTribute))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO(&pstOut->stTaskScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byScheduleChangeFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHuntingLeftNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCloseMonsterChoice))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwSyncGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsGoldMode))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO2(&pstOut->stNewHuntingScheduleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FACTION_PLAYER_CHANGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_PLAYER_CHANGE_REQ *pstIn = (PKT_CLIGS_FACTION_PLAYER_CHANGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FACTION_PLAYER_CHANGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_PLAYER_CHANGE_REQ *pstOut = (PKT_CLIGS_FACTION_PLAYER_CHANGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FACTION_PLAYER_CHANGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_PLAYER_CHANGE_ACK *pstIn = (PKT_CLIGS_FACTION_PLAYER_CHANGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byChangeFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FACTION_PLAYER_CHANGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_PLAYER_CHANGE_ACK *pstOut = (PKT_CLIGS_FACTION_PLAYER_CHANGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byChangeFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GIVE_WINE_ACTIVITY_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GIVE_WINE_ACTIVITY_NTF *pstIn = (PKT_CLIGS_GIVE_WINE_ACTIVITY_NTF*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwCountDownTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GIVE_WINE_ACTIVITY_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GIVE_WINE_ACTIVITY_NTF *pstOut = (PKT_CLIGS_GIVE_WINE_ACTIVITY_NTF*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwCountDownTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEAVE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_FACTION_REQ *pstIn = (PKT_CLIGS_LEAVE_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEAVE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_FACTION_REQ *pstOut = (PKT_CLIGS_LEAVE_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEAVE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_FACTION_ACK *pstIn = (PKT_CLIGS_LEAVE_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEAVE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_FACTION_ACK *pstOut = (PKT_CLIGS_LEAVE_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_LEAVE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LEAVE_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_LEAVE_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_LEAVE_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LEAVE_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_LEAVE_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_LEAVE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LEAVE_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_LEAVE_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwIntervalTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLeaveFactionMark))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_LEAVE_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LEAVE_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_LEAVE_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwIntervalTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLeaveFactionMark))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FACTION_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_UPGRADE_REQ *pstIn = (PKT_CLIGS_OPEN_FACTION_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FACTION_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_UPGRADE_REQ *pstOut = (PKT_CLIGS_OPEN_FACTION_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_UPGRADE_ALL_INFO(void *pHost, CNetData* poNetData)
{
	DT_FACTION_UPGRADE_ALL_INFO *pstIn = (DT_FACTION_UPGRADE_ALL_INFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwNeedFactionFunds))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFunds_Is_Enough))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUpgradeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_UPGRADE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byUpgradeNum)
			break;
		if(-1 == EncodeDT_UPGRADE_MSG_LIST(&pstIn->astUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byFactionLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsUpgradeLimit))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_UPGRADE_ALL_INFO(void *pHost, CNetData* poNetData)
{
	DT_FACTION_UPGRADE_ALL_INFO *pstOut = (DT_FACTION_UPGRADE_ALL_INFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwNeedFactionFunds))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFunds_Is_Enough))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUpgradeNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_UPGRADE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byUpgradeNum)
			break;
		if(-1 == DecodeDT_UPGRADE_MSG_LIST(&pstOut->astUpgradeInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byFactionLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsUpgradeLimit))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FACTION_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_UPGRADE_ACK *pstIn = (PKT_CLIGS_OPEN_FACTION_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_UPGRADE_ALL_INFO(&pstIn->stUpgradeAllInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FACTION_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_UPGRADE_ACK *pstOut = (PKT_CLIGS_OPEN_FACTION_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_UPGRADE_ALL_INFO(&pstOut->stUpgradeAllInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_BUILD_LEVEL(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BUILD_LEVEL *pstIn = (DT_FACTION_BUILD_LEVEL*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byRareitemLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGymnasiumLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byShadeLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHotSpringLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byColdPrisonLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFactionTowerLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_BUILD_LEVEL(void *pHost, CNetData* poNetData)
{
	DT_FACTION_BUILD_LEVEL *pstOut = (DT_FACTION_BUILD_LEVEL*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byRareitemLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGymnasiumLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byShadeLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHotSpringLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byColdPrisonLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFactionTowerLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FACTION_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_UPGRADE_REQ *pstIn = (PKT_CLIGS_FACTION_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FACTION_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_UPGRADE_REQ *pstOut = (PKT_CLIGS_FACTION_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_SYNC_INFO(void *pHost, CNetData* poNetData)
{
	DT_FACTION_SYNC_INFO *pstIn = (DT_FACTION_SYNC_INFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionFunds))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionMaxNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRareitemFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGymnasiumFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byShadeFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHotFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byColdPrisonFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFactionTowerFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFactionRank))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_SYNC_INFO(void *pHost, CNetData* poNetData)
{
	DT_FACTION_SYNC_INFO *pstOut = (DT_FACTION_SYNC_INFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionFunds))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionMaxNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRareitemFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGymnasiumFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byShadeFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHotFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byColdPrisonFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFactionTowerFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFactionRank))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FACTION_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_UPGRADE_ACK *pstIn = (PKT_CLIGS_FACTION_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_SYNC_INFO(&pstIn->stSyncInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsMaxLevel))
		return -1;

	if(-1 == EncodeDT_FACTION_UPGRADE_ALL_INFO(&pstIn->stNextUpgradeAllInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFactionLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionFunds))
		return -1;

	if(-1 == EncodeDT_FACTION_BUILD_LEVEL(&pstIn->stCurBuildLevel, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FACTION_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_UPGRADE_ACK *pstOut = (PKT_CLIGS_FACTION_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_SYNC_INFO(&pstOut->stSyncInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsMaxLevel))
		return -1;

	if(-1 == DecodeDT_FACTION_UPGRADE_ALL_INFO(&pstOut->stNextUpgradeAllInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFactionLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionFunds))
		return -1;

	if(-1 == DecodeDT_FACTION_BUILD_LEVEL(&pstOut->stCurBuildLevel, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_MASTER_DETAIL_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_MASTER_DETAIL_CLI *pstIn = (DT_EQUIP_MASTER_DETAIL_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byEquipKind))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMasterRank))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMasterLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurMasterExp))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxMasterExp))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurPromote))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNextPromote))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byActivateOrBreak))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMedalCost))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRequiredPlayerLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_MASTER_DETAIL_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_MASTER_DETAIL_CLI *pstOut = (DT_EQUIP_MASTER_DETAIL_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byEquipKind))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMasterRank))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMasterLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurMasterExp))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxMasterExp))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurPromote))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNextPromote))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byActivateOrBreak))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMedalCost))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRequiredPlayerLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MASTER_EXP_BOOK_DETAIL_CLI(void *pHost, CNetData* poNetData)
{
	DT_MASTER_EXP_BOOK_DETAIL_CLI *pstIn = (DT_MASTER_EXP_BOOK_DETAIL_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBigExpBookCnt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MASTER_EXP_BOOK_DETAIL_CLI(void *pHost, CNetData* poNetData)
{
	DT_MASTER_EXP_BOOK_DETAIL_CLI *pstOut = (DT_MASTER_EXP_BOOK_DETAIL_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBigExpBookCnt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MASTER_CHEAT_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_MASTER_CHEAT_INFO_CLI *pstIn = (DT_MASTER_CHEAT_INFO_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCheatGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFreeCheatCnt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MASTER_CHEAT_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_MASTER_CHEAT_INFO_CLI *pstOut = (DT_MASTER_CHEAT_INFO_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCheatGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFreeCheatCnt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MASTER_EXP_BOOK_PANEL_CLI(void *pHost, CNetData* poNetData)
{
	DT_MASTER_EXP_BOOK_PANEL_CLI *pstIn = (DT_MASTER_EXP_BOOK_PANEL_CLI*)pHost;

	INT32 i;
	for(i = 0; i < MASTER_EXP_BOOK_COUNT; i++)
	{
		if(-1 == EncodeDT_MASTER_EXP_BOOK_DETAIL_CLI(&pstIn->astExpBooks[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wBigBookExp))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSmallBookExp))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsOpenUpCheat))
		return -1;

	if(-1 == EncodeDT_MASTER_CHEAT_INFO_CLI(&pstIn->stCheatInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MASTER_EXP_BOOK_PANEL_CLI(void *pHost, CNetData* poNetData)
{
	DT_MASTER_EXP_BOOK_PANEL_CLI *pstOut = (DT_MASTER_EXP_BOOK_PANEL_CLI*)pHost;

	INT32 i;
		for(i = 0; i < MASTER_EXP_BOOK_COUNT; i++)
		{
			if(-1 == DecodeDT_MASTER_EXP_BOOK_DETAIL_CLI(&pstOut->astExpBooks[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelWord(pstOut->wBigBookExp))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSmallBookExp))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsOpenUpCheat))
		return -1;

	if(-1 == DecodeDT_MASTER_CHEAT_INFO_CLI(&pstOut->stCheatInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MASTER_LEVEL_UP(void *pHost, CNetData* poNetData)
{
	DT_MASTER_LEVEL_UP *pstIn = (DT_MASTER_LEVEL_UP*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwMaxMasterExp))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPromote))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNextPromote))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MASTER_LEVEL_UP(void *pHost, CNetData* poNetData)
{
	DT_MASTER_LEVEL_UP *pstOut = (DT_MASTER_LEVEL_UP*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwMaxMasterExp))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPromote))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNextPromote))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MASTER_LEVEL_UP_INFO(void *pHost, CNetData* poNetData)
{
	DT_MASTER_LEVEL_UP_INFO *pstIn = (DT_MASTER_LEVEL_UP_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byLevelDiff))
		return -1;

	INT32 i;
	for(i = 0; i < MASTER_MAX_LEVEL_UP; i++)
	{
		if(i >= (INT32)pstIn->byLevelDiff)
			break;
		if(-1 == EncodeDT_MASTER_LEVEL_UP(&pstIn->astLevelUp[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wPreLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUpExp))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MASTER_LEVEL_UP_INFO(void *pHost, CNetData* poNetData)
{
	DT_MASTER_LEVEL_UP_INFO *pstOut = (DT_MASTER_LEVEL_UP_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byLevelDiff))
		return -1;

	INT32 i;
	for(i = 0; i < MASTER_MAX_LEVEL_UP; i++)
	{
		if(i >= (INT32)pstOut->byLevelDiff)
			break;
		if(-1 == DecodeDT_MASTER_LEVEL_UP(&pstOut->astLevelUp[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wPreLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUpExp))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EQUIP_MASTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_MASTER_REQ *pstIn = (PKT_CLIGS_OPEN_EQUIP_MASTER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EQUIP_MASTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_MASTER_REQ *pstOut = (PKT_CLIGS_OPEN_EQUIP_MASTER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EQUIP_MASTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_MASTER_ACK *pstIn = (PKT_CLIGS_OPEN_EQUIP_MASTER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_KIND_COUNT; i++)
	{
		if(-1 == EncodeDT_EQUIP_MASTER_DETAIL_CLI(&pstIn->astEquipMasterDetail[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwGetBookMedalCost))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byExpBookPanelState))
		return -1;

	if(-1 == EncodeDT_MASTER_EXP_BOOK_PANEL_CLI(&pstIn->stExpBookPanelData, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMedal))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EQUIP_MASTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_MASTER_ACK *pstOut = (PKT_CLIGS_OPEN_EQUIP_MASTER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	INT32 i;
		for(i = 0; i < EQUIP_KIND_COUNT; i++)
		{
			if(-1 == DecodeDT_EQUIP_MASTER_DETAIL_CLI(&pstOut->astEquipMasterDetail[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelDword(pstOut->dwGetBookMedalCost))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byExpBookPanelState))
		return -1;

	if(-1 == DecodeDT_MASTER_EXP_BOOK_PANEL_CLI(&pstOut->stExpBookPanelData, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMedal))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACTIVATE_MASTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVATE_MASTER_REQ *pstIn = (PKT_CLIGS_ACTIVATE_MASTER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byEquipKind))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACTIVATE_MASTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVATE_MASTER_REQ *pstOut = (PKT_CLIGS_ACTIVATE_MASTER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byEquipKind))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACTIVATE_MASTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVATE_MASTER_ACK *pstIn = (PKT_CLIGS_ACTIVATE_MASTER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_EQUIP_MASTER_DETAIL_CLI(&pstIn->stEquipMasterInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMedal))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOldPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanGetMasterBook))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACTIVATE_MASTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVATE_MASTER_ACK *pstOut = (PKT_CLIGS_ACTIVATE_MASTER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_EQUIP_MASTER_DETAIL_CLI(&pstOut->stEquipMasterInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMedal))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOldPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanGetMasterBook))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BREAK_MASTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BREAK_MASTER_REQ *pstIn = (PKT_CLIGS_BREAK_MASTER_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byEquipKind))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BREAK_MASTER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BREAK_MASTER_REQ *pstOut = (PKT_CLIGS_BREAK_MASTER_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byEquipKind))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BREAK_MASTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BREAK_MASTER_ACK *pstIn = (PKT_CLIGS_BREAK_MASTER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_EQUIP_MASTER_DETAIL_CLI(&pstIn->stEquipMasterInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMedal))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOldPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurPower))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BREAK_MASTER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BREAK_MASTER_ACK *pstOut = (PKT_CLIGS_BREAK_MASTER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_EQUIP_MASTER_DETAIL_CLI(&pstOut->stEquipMasterInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMedal))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOldPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurPower))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_MASTER_BOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_MASTER_BOOK_REQ *pstIn = (PKT_CLIGS_GET_MASTER_BOOK_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_MASTER_BOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_MASTER_BOOK_REQ *pstOut = (PKT_CLIGS_GET_MASTER_BOOK_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_MASTER_BOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_MASTER_BOOK_ACK *pstIn = (PKT_CLIGS_GET_MASTER_BOOK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_MASTER_EXP_BOOK_PANEL_CLI(&pstIn->stExpBookPanelData, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextMedalCost))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMedal))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_MASTER_BOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_MASTER_BOOK_ACK *pstOut = (PKT_CLIGS_GET_MASTER_BOOK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_MASTER_EXP_BOOK_PANEL_CLI(&pstOut->stExpBookPanelData, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextMedalCost))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMedal))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_WIPE_MASTER_BOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WIPE_MASTER_BOOK_REQ *pstIn = (PKT_CLIGS_WIPE_MASTER_BOOK_REQ*)pHost;

	if(-1 == EncodeDT_MASTER_EXP_BOOK_PANEL_CLI(&pstIn->stExpBookPanelData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_WIPE_MASTER_BOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WIPE_MASTER_BOOK_REQ *pstOut = (PKT_CLIGS_WIPE_MASTER_BOOK_REQ*)pHost;

	if(-1 == DecodeDT_MASTER_EXP_BOOK_PANEL_CLI(&pstOut->stExpBookPanelData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_WIPE_MASTER_BOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WIPE_MASTER_BOOK_ACK *pstIn = (PKT_CLIGS_WIPE_MASTER_BOOK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_WIPE_MASTER_BOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WIPE_MASTER_BOOK_ACK *pstOut = (PKT_CLIGS_WIPE_MASTER_BOOK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MASTER_CHEAT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MASTER_CHEAT_REQ *pstIn = (PKT_CLIGS_MASTER_CHEAT_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MASTER_CHEAT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MASTER_CHEAT_REQ *pstOut = (PKT_CLIGS_MASTER_CHEAT_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MASTER_CHEAT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MASTER_CHEAT_ACK *pstIn = (PKT_CLIGS_MASTER_CHEAT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_KIND_COUNT; i++)
	{
		if(-1 == EncodeDT_MASTER_EXP_BOOK_DETAIL_CLI(&pstIn->astExpBooks[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == EncodeDT_MASTER_CHEAT_INFO_CLI(&pstIn->stCheatInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MASTER_CHEAT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MASTER_CHEAT_ACK *pstOut = (PKT_CLIGS_MASTER_CHEAT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	INT32 i;
		for(i = 0; i < EQUIP_KIND_COUNT; i++)
		{
			if(-1 == DecodeDT_MASTER_EXP_BOOK_DETAIL_CLI(&pstOut->astExpBooks[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == DecodeDT_MASTER_CHEAT_INFO_CLI(&pstOut->stCheatInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CONFIRM_MASTER_BOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CONFIRM_MASTER_BOOK_REQ *pstIn = (PKT_CLIGS_CONFIRM_MASTER_BOOK_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CONFIRM_MASTER_BOOK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CONFIRM_MASTER_BOOK_REQ *pstOut = (PKT_CLIGS_CONFIRM_MASTER_BOOK_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CONFIRM_MASTER_BOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CONFIRM_MASTER_BOOK_ACK *pstIn = (PKT_CLIGS_CONFIRM_MASTER_BOOK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_KIND_COUNT; i++)
	{
		if(-1 == EncodeDT_EQUIP_MASTER_DETAIL_CLI(&pstIn->astEquipMasterDetail[i], poNetData))
			return -1;
	}

	for(i = 0; i < EQUIP_KIND_COUNT; i++)
	{
		if(-1 == EncodeDT_MASTER_LEVEL_UP_INFO(&pstIn->astLevelUpInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wCurPlayerLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwOldPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurPower))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CONFIRM_MASTER_BOOK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CONFIRM_MASTER_BOOK_ACK *pstOut = (PKT_CLIGS_CONFIRM_MASTER_BOOK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	INT32 i;
		for(i = 0; i < EQUIP_KIND_COUNT; i++)
		{
			if(-1 == DecodeDT_EQUIP_MASTER_DETAIL_CLI(&pstOut->astEquipMasterDetail[i], poNetData))
				return -1;
		}

		for(i = 0; i < EQUIP_KIND_COUNT; i++)
		{
			if(-1 == DecodeDT_MASTER_LEVEL_UP_INFO(&pstOut->astLevelUpInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelWord(pstOut->wCurPlayerLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwOldPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurPower))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BAD_REWARD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BAD_REWARD_REQ *pstIn = (PKT_CLIGS_OPEN_BAD_REWARD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BAD_REWARD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BAD_REWARD_REQ *pstOut = (PKT_CLIGS_OPEN_BAD_REWARD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_BAD_REWARD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BAD_REWARD_ACK *pstIn = (PKT_CLIGS_OPEN_BAD_REWARD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNeedCoin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLeftTimes))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRewardID1))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRewardValue1))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRewardID2))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRewardValue2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_BAD_REWARD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_BAD_REWARD_ACK *pstOut = (PKT_CLIGS_OPEN_BAD_REWARD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNeedCoin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLeftTimes))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRewardID1))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRewardValue1))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRewardID2))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRewardValue2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_BAD_REWARD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_BAD_REWARD_REQ *pstIn = (PKT_CLIGS_GET_BAD_REWARD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_BAD_REWARD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_BAD_REWARD_REQ *pstOut = (PKT_CLIGS_GET_BAD_REWARD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_BAD_REWARD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_BAD_REWARD_ACK *pstIn = (PKT_CLIGS_GET_BAD_REWARD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRewardID1))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRewardValue1))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSyncValue1))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRewardID2))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRewardValue2))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSyncValue2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_BAD_REWARD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_BAD_REWARD_ACK *pstOut = (PKT_CLIGS_GET_BAD_REWARD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRewardID1))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRewardValue1))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSyncValue1))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRewardID2))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRewardValue2))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSyncValue2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_INFO_CLI *pstIn = (DT_COURAGE_INFO_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwMaxCourageTimes))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLeftCourageTimes))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHelpCourageTimes))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszHelpCouragePrompt, sizeof(pstIn->aszHelpCouragePrompt)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBattleType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_INFO_CLI *pstOut = (DT_COURAGE_INFO_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwMaxCourageTimes))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLeftCourageTimes))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHelpCourageTimes))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszHelpCouragePrompt, sizeof(pstOut->aszHelpCouragePrompt)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBattleType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_GROUP_LEADER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_GROUP_LEADER_DATA_CLI *pstIn = (DT_COURAGE_GROUP_LEADER_DATA_CLI*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszDispPlayerName, sizeof(pstIn->aszDispPlayerName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_GROUP_LEADER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_GROUP_LEADER_DATA_CLI *pstOut = (DT_COURAGE_GROUP_LEADER_DATA_CLI*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszDispPlayerName, sizeof(pstOut->aszDispPlayerName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_GROUP_BASE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_GROUP_BASE_DATA_CLI *pstIn = (DT_COURAGE_GROUP_BASE_DATA_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwGroupID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byJoinType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlayerMaxNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlayerNum))
		return -1;

	if(-1 == EncodeDT_COURAGE_GROUP_LEADER_DATA_CLI(&pstIn->stLeaderData, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMinLevel))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_GROUP_BASE_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_GROUP_BASE_DATA_CLI *pstOut = (DT_COURAGE_GROUP_BASE_DATA_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwGroupID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byJoinType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlayerMaxNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlayerNum))
		return -1;

	if(-1 == DecodeDT_COURAGE_GROUP_LEADER_DATA_CLI(&pstOut->stLeaderData, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMinLevel))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_GROUP_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_GROUP_DATA_CLI_LST *pstIn = (DT_COURAGE_GROUP_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wTeamNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COURAGE_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstIn->wTeamNum)
			break;
		if(-1 == EncodeDT_COURAGE_GROUP_BASE_DATA_CLI(&pstIn->astTeamInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_GROUP_DATA_CLI_LST(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_GROUP_DATA_CLI_LST *pstOut = (DT_COURAGE_GROUP_DATA_CLI_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wTeamNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COURAGE_GROUP_NUM; i++)
	{
		if(i >= (INT32)pstOut->wTeamNum)
			break;
		if(-1 == DecodeDT_COURAGE_GROUP_BASE_DATA_CLI(&pstOut->astTeamInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_COURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_COURAGE_REQ *pstIn = (PKT_CLIGS_OPEN_COURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_COURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_COURAGE_REQ *pstOut = (PKT_CLIGS_OPEN_COURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeUnDT_COURAGE_GROUP_UNION_DATA_CLI(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case COURAGE_NO_GROUP:
		return EncodeDT_COURAGE_GROUP_DATA_CLI_LST(pHost, poNetData);
	case COURAGE_HAVE_GROUP:
		return EncodeDT_COURAGE_GROUP_DATA(pHost, poNetData);
	default: return -1;
	}
}

INT32 DecodeUnDT_COURAGE_GROUP_UNION_DATA_CLI(void *pHost, INT32 iSelect, CNetData* poNetData)
{
	switch(iSelect){
	case COURAGE_NO_GROUP:
		return DecodeDT_COURAGE_GROUP_DATA_CLI_LST(pHost, poNetData);
	case COURAGE_HAVE_GROUP:
		return DecodeDT_COURAGE_GROUP_DATA(pHost, poNetData);
	default: return -1;
	}
}

INT32 EncodeDT_COURAGE_ALL_GROUP_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_ALL_GROUP_DATA_CLI *pstIn = (DT_COURAGE_ALL_GROUP_DATA_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlayerGroupType))
		return -1;

	if(-1 == EncodeUnDT_COURAGE_GROUP_UNION_DATA_CLI(&pstIn->stCourageGroupUnion, pstIn->byPlayerGroupType, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_ALL_GROUP_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_ALL_GROUP_DATA_CLI *pstOut = (DT_COURAGE_ALL_GROUP_DATA_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlayerGroupType))
		return -1;

	if(-1 == DecodeUnDT_COURAGE_GROUP_UNION_DATA_CLI(&pstOut->stCourageGroupUnion, pstOut->byPlayerGroupType, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_COURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_COURAGE_ACK *pstIn = (PKT_CLIGS_OPEN_COURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCopper))
		return -1;

	if(-1 == EncodeDT_COURAGE_INFO_CLI(&pstIn->stPlayerCourageData, poNetData))
		return -1;

	if(-1 == EncodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstIn->stGroupData, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMinLevel))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwMedal))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySelect))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_COURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_COURAGE_ACK *pstOut = (PKT_CLIGS_OPEN_COURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCopper))
		return -1;

	if(-1 == DecodeDT_COURAGE_INFO_CLI(&pstOut->stPlayerCourageData, poNetData))
		return -1;

	if(-1 == DecodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstOut->stGroupData, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMinLevel))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwMedal))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySelect))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_REQ *pstIn = (PKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_REQ *pstOut = (PKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_CHALLENGE_NUM_DATA(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_CHALLENGE_NUM_DATA *pstIn = (DT_COURAGE_CHALLENGE_NUM_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wChallengeGroupNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_CHALLENGE_NUM_DATA(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_CHALLENGE_NUM_DATA *pstOut = (DT_COURAGE_CHALLENGE_NUM_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wChallengeGroupNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_CHALLENGE_NUM_CLI(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_CHALLENGE_NUM_CLI *pstIn = (DT_COURAGE_CHALLENGE_NUM_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_PER_TOWN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byInstanceNum)
			break;
		if(-1 == EncodeDT_COURAGE_CHALLENGE_NUM_DATA(&pstIn->astInstanceChallenge[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_CHALLENGE_NUM_CLI(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_CHALLENGE_NUM_CLI *pstOut = (DT_COURAGE_CHALLENGE_NUM_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_INSTANCE_PER_TOWN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byInstanceNum)
			break;
		if(-1 == DecodeDT_COURAGE_CHALLENGE_NUM_DATA(&pstOut->astInstanceChallenge[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_ACK *pstIn = (PKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stMaxSceneData, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byTownNum)
			break;
		if(-1 == EncodeDT_TOWN_INSTANCE_RECORD_DATA_CLI(&pstIn->astTownInstanceInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byTownNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awChallengeNums[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_ACK *pstOut = (PKT_CLIGS_COURAGE_OPEN_CREATE_GROUP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stMaxSceneData, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byTownNum)
			break;
		if(-1 == DecodeDT_TOWN_INSTANCE_RECORD_DATA_CLI(&pstOut->astTownInstanceInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_TOWN_PER_SCENE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byTownNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awChallengeNums[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_CREATE_GROUP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_CREATE_GROUP_REQ *pstIn = (PKT_CLIGS_COURAGE_CREATE_GROUP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byJoinType))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stSceneData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_CREATE_GROUP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_CREATE_GROUP_REQ *pstOut = (PKT_CLIGS_COURAGE_CREATE_GROUP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byJoinType))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stSceneData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_CREATE_GROUP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_CREATE_GROUP_ACK *pstIn = (PKT_CLIGS_COURAGE_CREATE_GROUP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGroupID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_CREATE_GROUP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_CREATE_GROUP_ACK *pstOut = (PKT_CLIGS_COURAGE_CREATE_GROUP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGroupID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_HERO_DATA(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_HERO_DATA *pstIn = (DT_COURAGE_HERO_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_HERO_DATA(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_HERO_DATA *pstOut = (DT_COURAGE_HERO_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_GROUP_HERO_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_GROUP_HERO_DATA_CLI *pstIn = (DT_COURAGE_GROUP_HERO_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_COURAGE_HERO_DATA(&pstIn->astHeroData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_GROUP_HERO_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_GROUP_HERO_DATA_CLI *pstOut = (DT_COURAGE_GROUP_HERO_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_COURAGE_HERO_DATA(&pstOut->astHeroData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_OPERATE_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_OPERATE_HERO_REQ *pstIn = (PKT_CLIGS_COURAGE_OPERATE_HERO_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_OPERATE_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_OPERATE_HERO_REQ *pstOut = (PKT_CLIGS_COURAGE_OPERATE_HERO_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_OPERATE_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_OPERATE_HERO_ACK *pstIn = (PKT_CLIGS_COURAGE_OPERATE_HERO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_COURAGE_GROUP_HERO_DATA_CLI(&pstIn->stHeroData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_OPERATE_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_OPERATE_HERO_ACK *pstOut = (PKT_CLIGS_COURAGE_OPERATE_HERO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_COURAGE_GROUP_HERO_DATA_CLI(&pstOut->stHeroData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_CONFIRM_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_CONFIRM_HERO_REQ *pstIn = (PKT_CLIGS_COURAGE_CONFIRM_HERO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_CONFIRM_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_CONFIRM_HERO_REQ *pstOut = (PKT_CLIGS_COURAGE_CONFIRM_HERO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_CONFIRM_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_CONFIRM_HERO_ACK *pstIn = (PKT_CLIGS_COURAGE_CONFIRM_HERO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_COURAGE_HERO_DATA(&pstIn->stHeroData, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_CONFIRM_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_CONFIRM_HERO_ACK *pstOut = (PKT_CLIGS_COURAGE_CONFIRM_HERO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_COURAGE_HERO_DATA(&pstOut->stHeroData, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_JOIN_GROUP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_JOIN_GROUP_REQ *pstIn = (PKT_CLIGS_COURAGE_JOIN_GROUP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byAddBattleType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGroupID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_JOIN_GROUP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_JOIN_GROUP_REQ *pstOut = (PKT_CLIGS_COURAGE_JOIN_GROUP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byAddBattleType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGroupID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_JOIN_GROUP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_JOIN_GROUP_ACK *pstIn = (PKT_CLIGS_COURAGE_JOIN_GROUP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_JOIN_GROUP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_JOIN_GROUP_ACK *pstOut = (PKT_CLIGS_COURAGE_JOIN_GROUP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_REQ *pstIn = (PKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGroupID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_REQ *pstOut = (PKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGroupID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_ACK *pstIn = (PKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wAverageLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_ACK *pstOut = (PKT_CLIGS_COURAGE_FIRE_GROUP_MEMBER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wAverageLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_REQ *pstIn = (PKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_REQ *pstOut = (PKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_ACK *pstIn = (PKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTotalTimes))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurTimes))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextBuyGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLeftBuyTimes))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_ACK *pstOut = (PKT_CLIGS_COURAGE_BUY_PRACTISE_TIMES_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTotalTimes))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurTimes))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextBuyGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLeftBuyTimes))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_PLAYER_READY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_READY_REQ *pstIn = (PKT_CLIGS_COURAGE_PLAYER_READY_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_PLAYER_READY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_READY_REQ *pstOut = (PKT_CLIGS_COURAGE_PLAYER_READY_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_PLAYER_READY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_READY_ACK *pstIn = (PKT_CLIGS_COURAGE_PLAYER_READY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byReadyType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_PLAYER_READY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_READY_ACK *pstOut = (PKT_CLIGS_COURAGE_PLAYER_READY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byReadyType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_AWARD_DATA(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_AWARD_DATA *pstIn = (DT_COURAGE_AWARD_DATA*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwMedal))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_AWARD_DATA(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_AWARD_DATA *pstOut = (DT_COURAGE_AWARD_DATA*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwMedal))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_PLAYERID_HEROID_DATA(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_PLAYERID_HEROID_DATA *pstIn = (DT_COURAGE_PLAYERID_HEROID_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBattleType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExperience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispPlayerName, sizeof(pstIn->aszDispPlayerName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurAttackObjIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpgradeExperience))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byColor))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_PLAYERID_HEROID_DATA(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_PLAYERID_HEROID_DATA *pstOut = (DT_COURAGE_PLAYERID_HEROID_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBattleType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExperience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispPlayerName, sizeof(pstOut->aszDispPlayerName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurAttackObjIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpgradeExperience))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byColor))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_PLAYER_START_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_START_REQ *pstIn = (PKT_CLIGS_COURAGE_PLAYER_START_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_PLAYER_START_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_START_REQ *pstOut = (PKT_CLIGS_COURAGE_PLAYER_START_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_PLAYER_BATTLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_PLAYER_BATTLE_DATA *pstIn = (DT_COURAGE_PLAYER_BATTLE_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBattleNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COURAGE_MEMBER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBattleNum)
			break;
		if(-1 == EncodeDT_BATTLE_DATA2(&pstIn->astBattleInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_PLAYER_BATTLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_PLAYER_BATTLE_DATA *pstOut = (DT_COURAGE_PLAYER_BATTLE_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBattleNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COURAGE_MEMBER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBattleNum)
			break;
		if(-1 == DecodeDT_BATTLE_DATA2(&pstOut->astBattleInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_PLAYER_BATTLE_DATA2(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_PLAYER_BATTLE_DATA2 *pstIn = (DT_COURAGE_PLAYER_BATTLE_DATA2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBattleNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COURAGE_MEMBER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBattleNum)
			break;
		if(-1 == EncodeDT_BATTLE_DATA3(&pstIn->astBattleInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_PLAYER_BATTLE_DATA2(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_PLAYER_BATTLE_DATA2 *pstOut = (DT_COURAGE_PLAYER_BATTLE_DATA2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBattleNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COURAGE_MEMBER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBattleNum)
			break;
		if(-1 == DecodeDT_BATTLE_DATA3(&pstOut->astBattleInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_GROUP_PLAYER_BATTLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_GROUP_PLAYER_BATTLE_DATA *pstIn = (DT_COURAGE_GROUP_PLAYER_BATTLE_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COURAGE_MEMBER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byPlayerNum)
			break;
		if(-1 == EncodeDT_COURAGE_PLAYERID_HEROID_DATA(&pstIn->astPlayerInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_GROUP_PLAYER_BATTLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_GROUP_PLAYER_BATTLE_DATA *pstOut = (DT_COURAGE_GROUP_PLAYER_BATTLE_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COURAGE_MEMBER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byPlayerNum)
			break;
		if(-1 == DecodeDT_COURAGE_PLAYERID_HEROID_DATA(&pstOut->astPlayerInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_JEWELRY_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_JEWELRY_DATA_LST *pstIn = (DT_COURAGE_JEWELRY_DATA_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wJewelryNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wJewelryNum)
			break;
		if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->astJewelryInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_JEWELRY_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_JEWELRY_DATA_LST *pstOut = (DT_COURAGE_JEWELRY_DATA_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wJewelryNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wJewelryNum)
			break;
		if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->astJewelryInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_PLAYER_START_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_START_ACK2 *pstIn = (PKT_CLIGS_COURAGE_PLAYER_START_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_MONSTER_DATA_LIST(&pstIn->stMonsterInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_COURAGE_PLAYER_BATTLE_DATA2(&pstIn->stBattleInfoCli, poNetData))
		return -1;

	if(-1 == EncodeDT_COURAGE_GROUP_PLAYER_BATTLE_DATA(&pstIn->stGroupPlayerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPassFlag))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	if(-1 == EncodeDT_COURAGE_JEWELRY_DATA_LST(&pstIn->stjewelryInfoLst, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHelpID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_PLAYER_START_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_START_ACK2 *pstOut = (PKT_CLIGS_COURAGE_PLAYER_START_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_MONSTER_DATA_LIST(&pstOut->stMonsterInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_COURAGE_PLAYER_BATTLE_DATA2(&pstOut->stBattleInfoCli, poNetData))
		return -1;

	if(-1 == DecodeDT_COURAGE_GROUP_PLAYER_BATTLE_DATA(&pstOut->stGroupPlayerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPassFlag))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	if(-1 == DecodeDT_COURAGE_JEWELRY_DATA_LST(&pstOut->stjewelryInfoLst, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHelpID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_LEADER_START_NTF2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_LEADER_START_NTF2 *pstIn = (PKT_CLIGS_COURAGE_LEADER_START_NTF2*)pHost;

	if(-1 == EncodePKT_CLIGS_COURAGE_PLAYER_START_ACK2(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_LEADER_START_NTF2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_LEADER_START_NTF2 *pstOut = (PKT_CLIGS_COURAGE_LEADER_START_NTF2*)pHost;

	if(-1 == DecodePKT_CLIGS_COURAGE_PLAYER_START_ACK2(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_JOIN_GROUP_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_JOIN_GROUP_NTF *pstIn = (PKT_CLIGS_COURAGE_JOIN_GROUP_NTF*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwAverageLevel))
		return -1;

	if(-1 == EncodeDT_COURAGE_PLAYER_DATA(&pstIn->stPlayerGroupData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_JOIN_GROUP_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_JOIN_GROUP_NTF *pstOut = (PKT_CLIGS_COURAGE_JOIN_GROUP_NTF*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwAverageLevel))
		return -1;

	if(-1 == DecodeDT_COURAGE_PLAYER_DATA(&pstOut->stPlayerGroupData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_QUIT_GROUP_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_QUIT_GROUP_NTF *pstIn = (PKT_CLIGS_COURAGE_QUIT_GROUP_NTF*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wAverageLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_QUIT_GROUP_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_QUIT_GROUP_NTF *pstOut = (PKT_CLIGS_COURAGE_QUIT_GROUP_NTF*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wAverageLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_PLAYER_HERO_NTF_DATA(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_PLAYER_HERO_NTF_DATA *pstIn = (DT_COURAGE_PLAYER_HERO_NTF_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHeroID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_PLAYER_HERO_NTF_DATA(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_PLAYER_HERO_NTF_DATA *pstOut = (DT_COURAGE_PLAYER_HERO_NTF_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHeroID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_OPERATE_HERO_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_OPERATE_HERO_NTF *pstIn = (PKT_CLIGS_COURAGE_OPERATE_HERO_NTF*)pHost;

	if(-1 == EncodeDT_COURAGE_PLAYER_DATA(&pstIn->stPlayerGroupData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_OPERATE_HERO_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_OPERATE_HERO_NTF *pstOut = (PKT_CLIGS_COURAGE_OPERATE_HERO_NTF*)pHost;

	if(-1 == DecodeDT_COURAGE_PLAYER_DATA(&pstOut->stPlayerGroupData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_PLAYER_READY_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_READY_NTF *pstIn = (PKT_CLIGS_COURAGE_PLAYER_READY_NTF*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byReadyType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_PLAYER_READY_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_READY_NTF *pstOut = (PKT_CLIGS_COURAGE_PLAYER_READY_NTF*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byReadyType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_PLAYER_FIRED_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_FIRED_NTF *pstIn = (PKT_CLIGS_COURAGE_PLAYER_FIRED_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byErrCode))
		return -1;

	if(-1 == EncodeDT_COURAGE_INFO_CLI(&pstIn->stPlayerCourageData, poNetData))
		return -1;

	if(-1 == EncodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstIn->stGroupData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_PLAYER_FIRED_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_FIRED_NTF *pstOut = (PKT_CLIGS_COURAGE_PLAYER_FIRED_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byErrCode))
		return -1;

	if(-1 == DecodeDT_COURAGE_INFO_CLI(&pstOut->stPlayerCourageData, poNetData))
		return -1;

	if(-1 == DecodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstOut->stGroupData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_LEAVE_GROUP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_LEAVE_GROUP_REQ *pstIn = (PKT_CLIGS_COURAGE_LEAVE_GROUP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_LEAVE_GROUP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_LEAVE_GROUP_REQ *pstOut = (PKT_CLIGS_COURAGE_LEAVE_GROUP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_LEAVE_GROUP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_LEAVE_GROUP_ACK *pstIn = (PKT_CLIGS_COURAGE_LEAVE_GROUP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCopper))
		return -1;

	if(-1 == EncodeDT_COURAGE_INFO_CLI(&pstIn->stPlayerCourageData, poNetData))
		return -1;

	if(-1 == EncodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstIn->stGroupData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_LEAVE_GROUP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_LEAVE_GROUP_ACK *pstOut = (PKT_CLIGS_COURAGE_LEAVE_GROUP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCopper))
		return -1;

	if(-1 == DecodeDT_COURAGE_INFO_CLI(&pstOut->stPlayerCourageData, poNetData))
		return -1;

	if(-1 == DecodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstOut->stGroupData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_COURAGE_SHOP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_COURAGE_SHOP_REQ *pstIn = (PKT_CLIGS_OPEN_COURAGE_SHOP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_COURAGE_SHOP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_COURAGE_SHOP_REQ *pstOut = (PKT_CLIGS_OPEN_COURAGE_SHOP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_COURAGE_SHOP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_COURAGE_SHOP_ACK *pstIn = (PKT_CLIGS_OPEN_COURAGE_SHOP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLeftBuyTimes))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_COURAGE_SHOP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_COURAGE_SHOP_ACK *pstOut = (PKT_CLIGS_OPEN_COURAGE_SHOP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLeftBuyTimes))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_FACTION_BATTLELOG_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_FACTION_BATTLELOG_NTF *pstIn = (PKT_CLIGS_PLAYER_FACTION_BATTLELOG_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byUnReadLogNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLastOperateType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_FACTION_BATTLELOG_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_FACTION_BATTLELOG_NTF *pstOut = (PKT_CLIGS_PLAYER_FACTION_BATTLELOG_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byUnReadLogNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLastOperateType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_FACTION_READ_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_FACTION_READ_REQ *pstIn = (PKT_CLIGS_PLAYER_FACTION_READ_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_FACTION_READ_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_FACTION_READ_REQ *pstOut = (PKT_CLIGS_PLAYER_FACTION_READ_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_FACTION_READ_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_FACTION_READ_ACK *pstIn = (PKT_CLIGS_PLAYER_FACTION_READ_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_BATTLE_LOG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byLogNum)
			break;
		if(-1 == EncodeDT_PLAYER_FACTION_BATTLELOG_DATA(&pstIn->astPlayerFactionLogList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_FACTION_READ_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_FACTION_READ_ACK *pstOut = (PKT_CLIGS_PLAYER_FACTION_READ_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_BATTLE_LOG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byLogNum)
			break;
		if(-1 == DecodeDT_PLAYER_FACTION_BATTLELOG_DATA(&pstOut->astPlayerFactionLogList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FIND_DRINK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FIND_DRINK_REQ *pstIn = (PKT_CLIGS_OPEN_FIND_DRINK_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FIND_DRINK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FIND_DRINK_REQ *pstOut = (PKT_CLIGS_OPEN_FIND_DRINK_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FIND_DRINK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FIND_DRINK_ACK *pstIn = (PKT_CLIGS_OPEN_FIND_DRINK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FIND_DRINK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FIND_DRINK_ACK *pstOut = (PKT_CLIGS_OPEN_FIND_DRINK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_BATTLE_REQ *pstIn = (PKT_CLIGS_COURAGE_BATTLE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byMonsterIndex))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_BATTLE_REQ *pstOut = (PKT_CLIGS_COURAGE_BATTLE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byMonsterIndex))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_BATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_BATTLE_ACK *pstIn = (PKT_CLIGS_COURAGE_BATTLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA2(&pstIn->stBattleInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPassFlag))
		return -1;

	if(-1 == EncodeDT_COURAGE_AWARD_DATA(&pstIn->stCourageAwardInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_BATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_BATTLE_ACK *pstOut = (PKT_CLIGS_COURAGE_BATTLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA2(&pstOut->stBattleInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPassFlag))
		return -1;

	if(-1 == DecodeDT_COURAGE_AWARD_DATA(&pstOut->stCourageAwardInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_BATTLE_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_BATTLE_NTF *pstIn = (PKT_CLIGS_COURAGE_BATTLE_NTF*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA2(&pstIn->stBattleInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPassFlag))
		return -1;

	if(-1 == EncodeDT_COURAGE_AWARD_DATA(&pstIn->stCourageAwardInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_BATTLE_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_BATTLE_NTF *pstOut = (PKT_CLIGS_COURAGE_BATTLE_NTF*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA2(&pstOut->stBattleInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPassFlag))
		return -1;

	if(-1 == DecodeDT_COURAGE_AWARD_DATA(&pstOut->stCourageAwardInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FACTION_BUILD_GROUP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_BUILD_GROUP_REQ *pstIn = (PKT_CLIGS_OPEN_FACTION_BUILD_GROUP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FACTION_BUILD_GROUP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_BUILD_GROUP_REQ *pstOut = (PKT_CLIGS_OPEN_FACTION_BUILD_GROUP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FACTION_BUILD_GROUP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_BUILD_GROUP_ACK *pstIn = (PKT_CLIGS_OPEN_FACTION_BUILD_GROUP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_BUILD_LEVEL(&pstIn->stBuildFlag, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFactionLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionFunds))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMyDoorTribute))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	if(-1 == EncodeDT_FACTION_BUILD_LEVEL(&pstIn->stCurBuildLevel, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszNewFactionName, sizeof(pstIn->aszNewFactionName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFactionIconID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEditFacName))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszEditFacName, sizeof(pstIn->aszEditFacName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnDisplayBuildNum))
		return -1;

	INT32 i;
	for(i = 0; i < 16; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyUnDisplayBuildID[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FACTION_BUILD_GROUP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_BUILD_GROUP_ACK *pstOut = (PKT_CLIGS_OPEN_FACTION_BUILD_GROUP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_BUILD_LEVEL(&pstOut->stBuildFlag, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFactionLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionFunds))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMyDoorTribute))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	if(-1 == DecodeDT_FACTION_BUILD_LEVEL(&pstOut->stCurBuildLevel, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszNewFactionName, sizeof(pstOut->aszNewFactionName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFactionIconID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEditFacName))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszEditFacName, sizeof(pstOut->aszEditFacName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnDisplayBuildNum))
		return -1;

	INT32 i;
	for(i = 0; i < 16; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyUnDisplayBuildID[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_GROUP_DISMISS_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GROUP_DISMISS_NTF *pstIn = (PKT_CLIGS_COURAGE_GROUP_DISMISS_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byErrCode))
		return -1;

	if(-1 == EncodeDT_COURAGE_INFO_CLI(&pstIn->stPlayerCourageData, poNetData))
		return -1;

	if(-1 == EncodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstIn->stGroupData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_GROUP_DISMISS_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GROUP_DISMISS_NTF *pstOut = (PKT_CLIGS_COURAGE_GROUP_DISMISS_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byErrCode))
		return -1;

	if(-1 == DecodeDT_COURAGE_INFO_CLI(&pstOut->stPlayerCourageData, poNetData))
		return -1;

	if(-1 == DecodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstOut->stGroupData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HOT_SPRING_REWARD_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HOT_SPRING_REWARD_NTF *pstIn = (PKT_CLIGS_HOT_SPRING_REWARD_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byRewardID1))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEachReward1))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSumReward1))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRewardID2))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEachReward2))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSumReward2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HOT_SPRING_REWARD_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HOT_SPRING_REWARD_NTF *pstOut = (PKT_CLIGS_HOT_SPRING_REWARD_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byRewardID1))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEachReward1))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSumReward1))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRewardID2))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEachReward2))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSumReward2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_GROUP_REFRESH_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GROUP_REFRESH_REQ *pstIn = (PKT_CLIGS_COURAGE_GROUP_REFRESH_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_GROUP_REFRESH_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GROUP_REFRESH_REQ *pstOut = (PKT_CLIGS_COURAGE_GROUP_REFRESH_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_GROUP_REFRESH_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GROUP_REFRESH_ACK *pstIn = (PKT_CLIGS_COURAGE_GROUP_REFRESH_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstIn->stGroupData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_GROUP_REFRESH_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GROUP_REFRESH_ACK *pstOut = (PKT_CLIGS_COURAGE_GROUP_REFRESH_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstOut->stGroupData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_ENTER_GROUP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_ENTER_GROUP_REQ *pstIn = (PKT_CLIGS_COURAGE_ENTER_GROUP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_ENTER_GROUP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_ENTER_GROUP_REQ *pstOut = (PKT_CLIGS_COURAGE_ENTER_GROUP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_ENTER_GROUP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_ENTER_GROUP_ACK *pstIn = (PKT_CLIGS_COURAGE_ENTER_GROUP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_COURAGE_GROUP_DATA(&pstIn->stGroupData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_ENTER_GROUP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_ENTER_GROUP_ACK *pstOut = (PKT_CLIGS_COURAGE_ENTER_GROUP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_COURAGE_GROUP_DATA(&pstOut->stGroupData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEAVE_COURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_COURAGE_REQ *pstIn = (PKT_CLIGS_LEAVE_COURAGE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEAVE_COURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_COURAGE_REQ *pstOut = (PKT_CLIGS_LEAVE_COURAGE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEAVE_COURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_COURAGE_ACK *pstIn = (PKT_CLIGS_LEAVE_COURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEAVE_COURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_COURAGE_ACK *pstOut = (PKT_CLIGS_LEAVE_COURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HOT_SPRING_OVER_REWARD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HOT_SPRING_OVER_REWARD_REQ *pstIn = (PKT_CLIGS_HOT_SPRING_OVER_REWARD_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HOT_SPRING_OVER_REWARD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HOT_SPRING_OVER_REWARD_REQ *pstOut = (PKT_CLIGS_HOT_SPRING_OVER_REWARD_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HOT_SPRING_OVER_REWARD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HOT_SPRING_OVER_REWARD_ACK *pstIn = (PKT_CLIGS_HOT_SPRING_OVER_REWARD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HOT_SPRING_OVER_REWARD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HOT_SPRING_OVER_REWARD_ACK *pstOut = (PKT_CLIGS_HOT_SPRING_OVER_REWARD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GOLD_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GOLD_NTF *pstIn = (PKT_CLIGS_OPEN_GOLD_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byOpenFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GOLD_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GOLD_NTF *pstOut = (PKT_CLIGS_OPEN_GOLD_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byOpenFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HUNTING_ITEGRAL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HUNTING_ITEGRAL_REQ *pstIn = (PKT_CLIGS_HUNTING_ITEGRAL_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HUNTING_ITEGRAL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HUNTING_ITEGRAL_REQ *pstOut = (PKT_CLIGS_HUNTING_ITEGRAL_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HUNTING_ITEGRAL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HUNTING_ITEGRAL_ACK *pstIn = (PKT_CLIGS_HUNTING_ITEGRAL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO(&pstIn->stScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsChangeFlag))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO2(&pstIn->stNewHuntingScheduleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HUNTING_ITEGRAL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HUNTING_ITEGRAL_ACK *pstOut = (PKT_CLIGS_HUNTING_ITEGRAL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO(&pstOut->stScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsChangeFlag))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO2(&pstOut->stNewHuntingScheduleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACTIVITY_END_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVITY_END_NTF *pstIn = (PKT_CLIGS_ACTIVITY_END_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBuildID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFuncTypeID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACTIVITY_END_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACTIVITY_END_NTF *pstOut = (PKT_CLIGS_ACTIVITY_END_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBuildID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFuncTypeID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PROMPT_IGNORE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PROMPT_IGNORE_REQ *pstIn = (PKT_CLIGS_PROMPT_IGNORE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byActiviID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PROMPT_IGNORE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PROMPT_IGNORE_REQ *pstOut = (PKT_CLIGS_PROMPT_IGNORE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byActiviID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PROMPT_IGNORE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PROMPT_IGNORE_ACK *pstIn = (PKT_CLIGS_PROMPT_IGNORE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byActiviID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PROMPT_IGNORE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PROMPT_IGNORE_ACK *pstOut = (PKT_CLIGS_PROMPT_IGNORE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byActiviID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_GROUP_REFRESH_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GROUP_REFRESH_NTF *pstIn = (PKT_CLIGS_COURAGE_GROUP_REFRESH_NTF*)pHost;

	if(-1 == EncodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstIn->stGroupData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_GROUP_REFRESH_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GROUP_REFRESH_NTF *pstOut = (PKT_CLIGS_COURAGE_GROUP_REFRESH_NTF*)pHost;

	if(-1 == DecodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstOut->stGroupData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HOME_BUILD_PROMPT_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HOME_BUILD_PROMPT_NTF *pstIn = (PKT_CLIGS_HOME_BUILD_PROMPT_NTF*)pHost;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HOME_BUILD_PROMPT_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HOME_BUILD_PROMPT_NTF *pstOut = (PKT_CLIGS_HOME_BUILD_PROMPT_NTF*)pHost;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_LEAVE_HOT_SPRING_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LEAVE_HOT_SPRING_REQ *pstIn = (PKT_CLIGS_OPEN_LEAVE_HOT_SPRING_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_LEAVE_HOT_SPRING_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LEAVE_HOT_SPRING_REQ *pstOut = (PKT_CLIGS_OPEN_LEAVE_HOT_SPRING_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_LEAVE_HOT_SPRING_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LEAVE_HOT_SPRING_ACK *pstIn = (PKT_CLIGS_OPEN_LEAVE_HOT_SPRING_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszPromptMsg, sizeof(pstIn->aszPromptMsg)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_LEAVE_HOT_SPRING_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_LEAVE_HOT_SPRING_ACK *pstOut = (PKT_CLIGS_OPEN_LEAVE_HOT_SPRING_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszPromptMsg, sizeof(pstOut->aszPromptMsg)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FACTION_OPERATE_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_OPERATE_NTF *pstIn = (PKT_CLIGS_FACTION_OPERATE_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFactionLogType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FACTION_OPERATE_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_OPERATE_NTF *pstOut = (PKT_CLIGS_FACTION_OPERATE_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFactionLogType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FACTION_PROMPT_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_PROMPT_NTF *pstIn = (PKT_CLIGS_FACTION_PROMPT_NTF*)pHost;

	if(-1 == EncodeDT_FUNC_COMMON_PROMPT(&pstIn->stFactionPrompt, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FACTION_PROMPT_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_PROMPT_NTF *pstOut = (PKT_CLIGS_FACTION_PROMPT_NTF*)pHost;

	if(-1 == DecodeDT_FUNC_COMMON_PROMPT(&pstOut->stFactionPrompt, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_GET_AWARD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GET_AWARD_REQ *pstIn = (PKT_CLIGS_COURAGE_GET_AWARD_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_GET_AWARD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GET_AWARD_REQ *pstOut = (PKT_CLIGS_COURAGE_GET_AWARD_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_GET_AWARD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GET_AWARD_ACK *pstIn = (PKT_CLIGS_COURAGE_GET_AWARD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_GET_AWARD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GET_AWARD_ACK *pstOut = (PKT_CLIGS_COURAGE_GET_AWARD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_GET_BATTLE_RESULT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GET_BATTLE_RESULT_REQ *pstIn = (PKT_CLIGS_COURAGE_GET_BATTLE_RESULT_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_GET_BATTLE_RESULT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GET_BATTLE_RESULT_REQ *pstOut = (PKT_CLIGS_COURAGE_GET_BATTLE_RESULT_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_GET_BATTLE_RESULT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GET_BATTLE_RESULT_ACK *pstIn = (PKT_CLIGS_COURAGE_GET_BATTLE_RESULT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHavePass))
		return -1;

	if(-1 == EncodeDT_COURAGE_GROUP_PLAYER_BATTLE_DATA(&pstIn->stGroupPlayerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_COURAGE_JEWELRY_DATA_LST(&pstIn->stjewelryInfoLst, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHelpID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_GET_BATTLE_RESULT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GET_BATTLE_RESULT_ACK *pstOut = (PKT_CLIGS_COURAGE_GET_BATTLE_RESULT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHavePass))
		return -1;

	if(-1 == DecodeDT_COURAGE_GROUP_PLAYER_BATTLE_DATA(&pstOut->stGroupPlayerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_COURAGE_JEWELRY_DATA_LST(&pstOut->stjewelryInfoLst, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHelpID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DOORSTRIBUTE_SYNC_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DOORSTRIBUTE_SYNC_NTF *pstIn = (PKT_CLIGS_DOORSTRIBUTE_SYNC_NTF*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwCurDoorTribute))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwSumDoorsTribute))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DOORSTRIBUTE_SYNC_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DOORSTRIBUTE_SYNC_NTF *pstOut = (PKT_CLIGS_DOORSTRIBUTE_SYNC_NTF*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwCurDoorTribute))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwSumDoorsTribute))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AUDIT_FACTION_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_FACTION_REQ2 *pstIn = (PKT_CLIGS_AUDIT_FACTION_REQ2*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwAuditPlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAuditWay))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AUDIT_FACTION_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_FACTION_REQ2 *pstOut = (PKT_CLIGS_AUDIT_FACTION_REQ2*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwAuditPlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAuditWay))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AUDIT_FACTION_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_FACTION_ACK2 *pstIn = (PKT_CLIGS_AUDIT_FACTION_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAuditPlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAuditWay))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFactionCurPlayerNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFactionMaxPlayerNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLeftAuditPlayerNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLeftApplyNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AUDIT_FACTION_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_FACTION_ACK2 *pstOut = (PKT_CLIGS_AUDIT_FACTION_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAuditPlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAuditWay))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFactionCurPlayerNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFactionMaxPlayerNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLeftAuditPlayerNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLeftApplyNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CROP_FIELD_INFO_DATA2(void *pHost, CNetData* poNetData)
{
	DT_CROP_FIELD_INFO_DATA2 *pstIn = (DT_CROP_FIELD_INFO_DATA2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byOpen))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFieldLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanUpgrade))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwUpGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurSeedNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNexSeedNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedVipLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CROP_FIELD_INFO_DATA2(void *pHost, CNetData* poNetData)
{
	DT_CROP_FIELD_INFO_DATA2 *pstOut = (DT_CROP_FIELD_INFO_DATA2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byOpen))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFieldLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanUpgrade))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwUpGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurSeedNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNexSeedNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedVipLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CROP_MORE_INFO_DATA2(void *pHost, CNetData* poNetData)
{
	DT_CROP_MORE_INFO_DATA2 *pstIn = (DT_CROP_MORE_INFO_DATA2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wCropKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCropTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCropType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCropValue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCropGainKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCropNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CROP_MORE_INFO_DATA2(void *pHost, CNetData* poNetData)
{
	DT_CROP_MORE_INFO_DATA2 *pstOut = (DT_CROP_MORE_INFO_DATA2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wCropKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCropTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCropType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCropValue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCropGainKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCropNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CROP_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_REQ2 *pstIn = (PKT_CLIGS_OPEN_CROP_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CROP_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_REQ2 *pstOut = (PKT_CLIGS_OPEN_CROP_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CROP_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_ACK2 *pstIn = (PKT_CLIGS_OPEN_CROP_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCropSeedNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CROP_SEED_NUM; i++)
	{
		if(i >= (INT32)pstIn->byCropSeedNum)
			break;
		if(-1 == EncodeDT_CROP_SEED_INFO_DATA(&pstIn->astCropSeedInfoList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_CROP_NUM; i++)
	{
		if(-1 == EncodeDT_CROP_FIELD_INFO_DATA2(&pstIn->astCropFieldInfoList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_CROP_NUM; i++)
	{
		if(-1 == EncodeDT_CROP_MORE_INFO_DATA2(&pstIn->astCropMoreInfoList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wNoCDGoldPerMin))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagFullFlag))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingJie))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CROP_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_ACK2 *pstOut = (PKT_CLIGS_OPEN_CROP_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCropSeedNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_CROP_SEED_NUM; i++)
	{
		if(i >= (INT32)pstOut->byCropSeedNum)
			break;
		if(-1 == DecodeDT_CROP_SEED_INFO_DATA(&pstOut->astCropSeedInfoList[i], poNetData))
			return -1;
	}

		for(i = 0; i < MAX_CROP_NUM; i++)
		{
			if(-1 == DecodeDT_CROP_FIELD_INFO_DATA2(&pstOut->astCropFieldInfoList[i], poNetData))
				return -1;
		}

		for(i = 0; i < MAX_CROP_NUM; i++)
		{
			if(-1 == DecodeDT_CROP_MORE_INFO_DATA2(&pstOut->astCropMoreInfoList[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelWord(pstOut->wNoCDGoldPerMin))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagFullFlag))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingJie))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CROP_FIELD_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_FIELD_REQ2 *pstIn = (PKT_CLIGS_OPEN_CROP_FIELD_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CROP_FIELD_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_FIELD_REQ2 *pstOut = (PKT_CLIGS_OPEN_CROP_FIELD_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CROP_FIELD_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_FIELD_ACK2 *pstIn = (PKT_CLIGS_OPEN_CROP_FIELD_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == EncodeDT_CROP_FIELD_INFO_DATA2(&pstIn->stCropFieldInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CROP_FIELD_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CROP_FIELD_ACK2 *pstOut = (PKT_CLIGS_OPEN_CROP_FIELD_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == DecodeDT_CROP_FIELD_INFO_DATA2(&pstOut->stCropFieldInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CROP_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROP_REQ2 *pstIn = (PKT_CLIGS_CROP_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCropKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSeedNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CROP_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROP_REQ2 *pstOut = (PKT_CLIGS_CROP_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCropKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSeedNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CROP_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROP_ACK2 *pstIn = (PKT_CLIGS_CROP_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	if(-1 == EncodeDT_CROP_MORE_INFO_DATA2(&pstIn->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CROP_FIELD_INFO_DATA2(&pstIn->stCropFieldInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CROP_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CROP_ACK2 *pstOut = (PKT_CLIGS_CROP_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	if(-1 == DecodeDT_CROP_MORE_INFO_DATA2(&pstOut->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CROP_FIELD_INFO_DATA2(&pstOut->stCropFieldInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GAIN_CROP_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GAIN_CROP_REQ2 *pstIn = (PKT_CLIGS_GAIN_CROP_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GAIN_CROP_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GAIN_CROP_REQ2 *pstOut = (PKT_CLIGS_GAIN_CROP_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GAIN_CROP_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GAIN_CROP_ACK2 *pstIn = (PKT_CLIGS_GAIN_CROP_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStory))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJingJie))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCropType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCropValue))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCropKindID))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CROP_MORE_INFO_DATA2(&pstIn->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CROP_FIELD_INFO_DATA2(&pstIn->stCropFieldInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GAIN_CROP_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GAIN_CROP_ACK2 *pstOut = (PKT_CLIGS_GAIN_CROP_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStory))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJingJie))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCropType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCropValue))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCropKindID))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CROP_MORE_INFO_DATA2(&pstOut->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CROP_FIELD_INFO_DATA2(&pstOut->stCropFieldInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_CROP_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CROP_REQ2 *pstIn = (PKT_CLIGS_CLR_CROP_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_CROP_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CROP_REQ2 *pstOut = (PKT_CLIGS_CLR_CROP_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CLR_CROP_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CROP_ACK2 *pstIn = (PKT_CLIGS_CLR_CROP_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == EncodeDT_CROP_MORE_INFO_DATA2(&pstIn->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CLR_CROP_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CLR_CROP_ACK2 *pstOut = (PKT_CLIGS_CLR_CROP_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == DecodeDT_CROP_MORE_INFO_DATA2(&pstOut->stCropMoreInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_CROP_FIELD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_CROP_FIELD_REQ *pstIn = (PKT_CLIGS_UPGRADE_CROP_FIELD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_CROP_FIELD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_CROP_FIELD_REQ *pstOut = (PKT_CLIGS_UPGRADE_CROP_FIELD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_CROP_FIELD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_CROP_FIELD_ACK *pstIn = (PKT_CLIGS_UPGRADE_CROP_FIELD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFieldID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGold))
		return -1;

	if(-1 == EncodeDT_CROP_FIELD_INFO_DATA(&pstIn->stCropFieldInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_CROP_FIELD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_CROP_FIELD_ACK *pstOut = (PKT_CLIGS_UPGRADE_CROP_FIELD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFieldID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGold))
		return -1;

	if(-1 == DecodeDT_CROP_FIELD_INFO_DATA(&pstOut->stCropFieldInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AUDIT_ALL_REFUSE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_ALL_REFUSE_REQ *pstIn = (PKT_CLIGS_AUDIT_ALL_REFUSE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AUDIT_ALL_REFUSE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_ALL_REFUSE_REQ *pstOut = (PKT_CLIGS_AUDIT_ALL_REFUSE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_AUDIT_ALL_REFUSE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_ALL_REFUSE_ACK *pstIn = (PKT_CLIGS_AUDIT_ALL_REFUSE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_AUDIT_ALL_REFUSE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_AUDIT_ALL_REFUSE_ACK *pstOut = (PKT_CLIGS_AUDIT_ALL_REFUSE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_PLAYER_AUDIT_CLI2(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_AUDIT_CLI2 *pstIn = (DT_FACTION_PLAYER_AUDIT_CLI2*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVIPLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_PLAYER_AUDIT_CLI2(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_AUDIT_CLI2 *pstOut = (DT_FACTION_PLAYER_AUDIT_CLI2*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVIPLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_PLAYER_AUDIT_CLI_LST2(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_AUDIT_CLI_LST2 *pstIn = (DT_FACTION_PLAYER_AUDIT_CLI_LST2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->wPlayerNum)
			break;
		if(-1 == EncodeDT_FACTION_PLAYER_AUDIT_CLI2(&pstIn->astFactionPlayerAuditCli[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_PLAYER_AUDIT_CLI_LST2(void *pHost, CNetData* poNetData)
{
	DT_FACTION_PLAYER_AUDIT_CLI_LST2 *pstOut = (DT_FACTION_PLAYER_AUDIT_CLI_LST2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->wPlayerNum)
			break;
		if(-1 == DecodeDT_FACTION_PLAYER_AUDIT_CLI2(&pstOut->astFactionPlayerAuditCli[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AUDIT_FACTION_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AUDIT_FACTION_REQ2 *pstIn = (PKT_CLIGS_OPEN_AUDIT_FACTION_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AUDIT_FACTION_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AUDIT_FACTION_REQ2 *pstOut = (PKT_CLIGS_OPEN_AUDIT_FACTION_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_AUDIT_FACTION_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AUDIT_FACTION_ACK2 *pstIn = (PKT_CLIGS_OPEN_AUDIT_FACTION_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_PLAYER_AUDIT_CLI_LST2(&pstIn->stFactionPlayerAuditCliLst, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLeftAuditNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurPlayerNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxPlayerNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_AUDIT_FACTION_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_AUDIT_FACTION_ACK2 *pstOut = (PKT_CLIGS_OPEN_AUDIT_FACTION_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_PLAYER_AUDIT_CLI_LST2(&pstOut->stFactionPlayerAuditCliLst, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLeftAuditNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurPlayerNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxPlayerNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_VIP_GIFT_EACH_DATA(void *pHost, CNetData* poNetData)
{
	DT_VIP_GIFT_EACH_DATA *pstIn = (DT_VIP_GIFT_EACH_DATA*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwRequireOldSourceNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRequireNewSourceNum))
		return -1;

	if(-1 == EncodeDT_RES_ITEM_DATA(&pstIn->stVipItemData, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipGiftGetNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_VIP_GIFT_EACH_DATA(void *pHost, CNetData* poNetData)
{
	DT_VIP_GIFT_EACH_DATA *pstOut = (DT_VIP_GIFT_EACH_DATA*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwRequireOldSourceNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRequireNewSourceNum))
		return -1;

	if(-1 == DecodeDT_RES_ITEM_DATA(&pstOut->stVipItemData, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipGiftGetNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_VIP_GIFT_DATA(void *pHost, CNetData* poNetData)
{
	DT_VIP_GIFT_DATA *pstIn = (DT_VIP_GIFT_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byMaxVipGift))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_VIP_GIFT; i++)
	{
		if(i >= (INT32)pstIn->byMaxVipGift)
			break;
		if(-1 == EncodeDT_VIP_GIFT_EACH_DATA(&pstIn->astVipGiftData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_VIP_GIFT_DATA(void *pHost, CNetData* poNetData)
{
	DT_VIP_GIFT_DATA *pstOut = (DT_VIP_GIFT_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byMaxVipGift))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_VIP_GIFT; i++)
	{
		if(i >= (INT32)pstOut->byMaxVipGift)
			break;
		if(-1 == DecodeDT_VIP_GIFT_EACH_DATA(&pstOut->astVipGiftData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_VIP_GIFT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_VIP_GIFT_REQ *pstIn = (PKT_CLIGS_OPEN_VIP_GIFT_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_VIP_GIFT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_VIP_GIFT_REQ *pstOut = (PKT_CLIGS_OPEN_VIP_GIFT_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_VIP_GIFT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_VIP_GIFT_ACK *pstIn = (PKT_CLIGS_OPEN_VIP_GIFT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwVipMaxLevel))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_VIP_LEVEL; i++)
	{
		if(i >= (INT32)pstIn->dwVipMaxLevel)
			break;
		if(-1 == EncodeDT_VIP_GIFT_DATA(&pstIn->astGiftItemData[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwCurVipLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_VIP_GIFT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_VIP_GIFT_ACK *pstOut = (PKT_CLIGS_OPEN_VIP_GIFT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwVipMaxLevel))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_VIP_LEVEL; i++)
	{
		if(i >= (INT32)pstOut->dwVipMaxLevel)
			break;
		if(-1 == DecodeDT_VIP_GIFT_DATA(&pstOut->astGiftItemData[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwCurVipLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_VIP_GIFT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_VIP_GIFT_REQ *pstIn = (PKT_CLIGS_GET_VIP_GIFT_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_VIP_GIFT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_VIP_GIFT_REQ *pstOut = (PKT_CLIGS_GET_VIP_GIFT_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_VIP_GIFT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_VIP_GIFT_ACK *pstIn = (PKT_CLIGS_GET_VIP_GIFT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RES_ITEM_DATA(&pstIn->stResItemData, poNetData))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stRsyncResItemData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVipLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIndex))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipGiftGetNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_VIP_GIFT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_VIP_GIFT_ACK *pstOut = (PKT_CLIGS_GET_VIP_GIFT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RES_ITEM_DATA(&pstOut->stResItemData, poNetData))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stRsyncResItemData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVipLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIndex))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipGiftGetNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RECV_FLOWER_LOG_CLI_EX(void *pHost, CNetData* poNetData)
{
	DT_RECV_FLOWER_LOG_CLI_EX *pstIn = (DT_RECV_FLOWER_LOG_CLI_EX*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwSendPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszSendPlayerName, sizeof(pstIn->aszSendPlayerName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwKindID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwSendTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFlag))
		return -1;

	if(-1 == EncodeDT_RES_ITEM_DATA(&pstIn->stResItemData, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwExpires))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RECV_FLOWER_LOG_CLI_EX(void *pHost, CNetData* poNetData)
{
	DT_RECV_FLOWER_LOG_CLI_EX *pstOut = (DT_RECV_FLOWER_LOG_CLI_EX*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwSendPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszSendPlayerName, sizeof(pstOut->aszSendPlayerName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwKindID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwSendTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFlag))
		return -1;

	if(-1 == DecodeDT_RES_ITEM_DATA(&pstOut->stResItemData, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwExpires))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RECV_FLOWER_LOG_LIST_CLI_EX(void *pHost, CNetData* poNetData)
{
	DT_RECV_FLOWER_LOG_LIST_CLI_EX *pstIn = (DT_RECV_FLOWER_LOG_LIST_CLI_EX*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RECV_FLOWER_LOG_LIST_ELEM_EX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byLogNum)
			break;
		if(-1 == EncodeDT_RECV_FLOWER_LOG_CLI_EX(&pstIn->astListData[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byAlsoReceive))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnReceiveNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RECV_FLOWER_LOG_LIST_CLI_EX(void *pHost, CNetData* poNetData)
{
	DT_RECV_FLOWER_LOG_LIST_CLI_EX *pstOut = (DT_RECV_FLOWER_LOG_LIST_CLI_EX*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RECV_FLOWER_LOG_LIST_ELEM_EX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byLogNum)
			break;
		if(-1 == DecodeDT_RECV_FLOWER_LOG_CLI_EX(&pstOut->astListData[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byAlsoReceive))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnReceiveNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RECV_FLOWER_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RECV_FLOWER_TAB_REQ *pstIn = (PKT_CLIGS_OPEN_RECV_FLOWER_TAB_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RECV_FLOWER_TAB_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RECV_FLOWER_TAB_REQ *pstOut = (PKT_CLIGS_OPEN_RECV_FLOWER_TAB_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RECV_FLOWER_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RECV_FLOWER_TAB_ACK *pstIn = (PKT_CLIGS_OPEN_RECV_FLOWER_TAB_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RECV_FLOWER_LOG_LIST_CLI_EX(&pstIn->stRecvFlowerLogListCLiEx, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RECV_FLOWER_TAB_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RECV_FLOWER_TAB_ACK *pstOut = (PKT_CLIGS_OPEN_RECV_FLOWER_TAB_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RECV_FLOWER_LOG_LIST_CLI_EX(&pstOut->stRecvFlowerLogListCLiEx, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACCEPT_FLOWER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACCEPT_FLOWER_REQ *pstIn = (PKT_CLIGS_ACCEPT_FLOWER_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwSendPlayerID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwSendTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACCEPT_FLOWER_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACCEPT_FLOWER_REQ *pstOut = (PKT_CLIGS_ACCEPT_FLOWER_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwSendPlayerID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwSendTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_ACCEPT_FLOWER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACCEPT_FLOWER_ACK *pstIn = (PKT_CLIGS_ACCEPT_FLOWER_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RES_ITEM_DATA(&pstIn->stGainResItemData, poNetData))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stRsyncResItemData, poNetData))
		return -1;

	if(-1 == EncodeDT_RECV_FLOWER_LOG_LIST_CLI_EX(&pstIn->stRecvFlowerLogListCLiEx, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_ACCEPT_FLOWER_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_ACCEPT_FLOWER_ACK *pstOut = (PKT_CLIGS_ACCEPT_FLOWER_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RES_ITEM_DATA(&pstOut->stGainResItemData, poNetData))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stRsyncResItemData, poNetData))
		return -1;

	if(-1 == DecodeDT_RECV_FLOWER_LOG_LIST_CLI_EX(&pstOut->stRecvFlowerLogListCLiEx, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_REQ *pstIn = (PKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_REQ *pstOut = (PKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FRIENDS_CLI(void *pHost, CNetData* poNetData)
{
	DT_FRIENDS_CLI *pstIn = (DT_FRIENDS_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispName, sizeof(pstIn->aszDispName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCareerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySameFaction))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FRIENDS_CLI(void *pHost, CNetData* poNetData)
{
	DT_FRIENDS_CLI *pstOut = (DT_FRIENDS_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispName, sizeof(pstOut->aszDispName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCareerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySameFaction))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_FLOWER(void *pHost, CNetData* poNetData)
{
	DT_ITEM_FLOWER *pstIn = (DT_ITEM_FLOWER*)pHost;

	if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->stItem, poNetData))
		return -1;

	if(-1 == EncodeDT_RES_ITEM_DATA(&pstIn->stResItemData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_FLOWER(void *pHost, CNetData* poNetData)
{
	DT_ITEM_FLOWER *pstOut = (DT_ITEM_FLOWER*)pHost;

	if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->stItem, poNetData))
		return -1;

	if(-1 == DecodeDT_RES_ITEM_DATA(&pstOut->stResItemData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_ACK *pstIn = (PKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FLOWER_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_FLOWER(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byFriendsNum))
		return -1;

	for(i = 0; i < MAX_RELATION_LIST_ELEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byFriendsNum)
			break;
		if(-1 == EncodeDT_FRIENDS_CLI(&pstIn->astFriendsList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byAgainNum))
		return -1;

	if(-1 == EncodeDT_RES_ITEM_DATA(&pstIn->stResItemData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnReceiveNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_ACK *pstOut = (PKT_CLIGS_OPEN_SEND_FLOWER_TAB_EX_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FLOWER_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_FLOWER(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byFriendsNum))
		return -1;

	for(i = 0; i < MAX_RELATION_LIST_ELEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byFriendsNum)
			break;
		if(-1 == DecodeDT_FRIENDS_CLI(&pstOut->astFriendsList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byAgainNum))
		return -1;

	if(-1 == DecodeDT_RES_ITEM_DATA(&pstOut->stResItemData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnReceiveNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_RAREITEM_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_RAREITEM_REQ2 *pstIn = (PKT_CLIGS_BUY_RAREITEM_REQ2*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwGoodsID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLeftTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_RAREITEM_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_RAREITEM_REQ2 *pstOut = (PKT_CLIGS_BUY_RAREITEM_REQ2*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwGoodsID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLeftTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_RAREITEM_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_RAREITEM_ACK2 *pstIn = (PKT_CLIGS_BUY_RAREITEM_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RAREITEM_INFO_CLI(&pstIn->stRareItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLeftDoorsTributes))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_RAREITEM_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_RAREITEM_ACK2 *pstOut = (PKT_CLIGS_BUY_RAREITEM_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RAREITEM_INFO_CLI(&pstOut->stRareItemInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLeftDoorsTributes))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ2 *pstIn = (PKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ2*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwSkillID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySkillCurLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ2 *pstOut = (PKT_CLIGS_LEARN_GYMNASIUM_SKILL_REQ2*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwSkillID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySkillCurLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK2 *pstIn = (PKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SKILL_CLI_INFO(&pstIn->stSkillInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLeftDoorsTribute))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSumDoorsTribute))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK2 *pstOut = (PKT_CLIGS_LEARN_GYMNASIUM_SKILL_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SKILL_CLI_INFO(&pstOut->stSkillInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLeftDoorsTribute))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSumDoorsTribute))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEND_FLOWER_EX_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEND_FLOWER_EX_REQ *pstIn = (PKT_CLIGS_SEND_FLOWER_EX_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwRecvPlayerID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEND_FLOWER_EX_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEND_FLOWER_EX_REQ *pstOut = (PKT_CLIGS_SEND_FLOWER_EX_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwRecvPlayerID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEND_FLOWER_EX_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEND_FLOWER_EX_ACK *pstIn = (PKT_CLIGS_SEND_FLOWER_EX_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FLOWER_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_RES_ITEM_DATA(&pstIn->stGainResItemData, poNetData))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stRsyncResItemData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAgainNum))
		return -1;

	if(-1 == EncodeDT_RES_ITEM_DATA(&pstIn->stResItemData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEND_FLOWER_EX_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEND_FLOWER_EX_ACK *pstOut = (PKT_CLIGS_SEND_FLOWER_EX_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FLOWER_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_RES_ITEM_DATA(&pstOut->stGainResItemData, poNetData))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stRsyncResItemData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAgainNum))
		return -1;

	if(-1 == DecodeDT_RES_ITEM_DATA(&pstOut->stResItemData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_INFO_CLI *pstIn = (DT_FACTION_INFO_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byIconID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionLevel))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszHeadName, sizeof(pstIn->aszHeadName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFactionNumberPeople))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxFactionNumberPeople))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionFunds))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAuditNum))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionNotice, sizeof(pstIn->aszFactionNotice)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionAnnouncement, sizeof(pstIn->aszFactionAnnouncement)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionRank))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_INFO_CLI *pstOut = (DT_FACTION_INFO_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byIconID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionLevel))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszHeadName, sizeof(pstOut->aszHeadName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFactionNumberPeople))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxFactionNumberPeople))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionFunds))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAuditNum))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionNotice, sizeof(pstOut->aszFactionNotice)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionAnnouncement, sizeof(pstOut->aszFactionAnnouncement)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionRank))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_SELF_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_SELF_INFO_CLI *pstIn = (DT_FACTION_SELF_INFO_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwMyDoorsTribute))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwMySumDoorsTribute))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwJoinFactionTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecvFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFindBackDoorsTribute))
		return -1;

	if(-1 == EncodeDT_FACTION_AUTHORITY_EX(&pstIn->stFactionAuthority, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_SELF_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_SELF_INFO_CLI *pstOut = (DT_FACTION_SELF_INFO_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwMyDoorsTribute))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwMySumDoorsTribute))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwJoinFactionTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecvFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFindBackDoorsTribute))
		return -1;

	if(-1 == DecodeDT_FACTION_AUTHORITY_EX(&pstOut->stFactionAuthority, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_MANAGER_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_MANAGER_INFO_CLI *pstIn = (DT_FACTION_MANAGER_INFO_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlayerJobType))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszPlayerName, sizeof(pstIn->aszPlayerName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_MANAGER_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_MANAGER_INFO_CLI *pstOut = (DT_FACTION_MANAGER_INFO_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlayerJobType))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszPlayerName, sizeof(pstOut->aszPlayerName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_MANAGER_INFO_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_MANAGER_INFO_LST_CLI *pstIn = (DT_FACTION_MANAGER_INFO_LST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byManagerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_MANAGER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byManagerNum)
			break;
		if(-1 == EncodeDT_FACTION_MANAGER_INFO_CLI(&pstIn->astManagerInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_MANAGER_INFO_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_FACTION_MANAGER_INFO_LST_CLI *pstOut = (DT_FACTION_MANAGER_INFO_LST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byManagerNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FACTION_MANAGER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byManagerNum)
			break;
		if(-1 == DecodeDT_FACTION_MANAGER_INFO_CLI(&pstOut->astManagerInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_REQ *pstIn = (PKT_CLIGS_OPEN_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_REQ *pstOut = (PKT_CLIGS_OPEN_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_ACK *pstIn = (PKT_CLIGS_OPEN_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_INFO_CLI(&pstIn->stFactionInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FACTION_MANAGER_INFO_LST_CLI(&pstIn->stManagerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FACTION_SELF_INFO_CLI(&pstIn->stPlayerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_ACK *pstOut = (PKT_CLIGS_OPEN_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_INFO_CLI(&pstOut->stFactionInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FACTION_MANAGER_INFO_LST_CLI(&pstOut->stManagerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FACTION_SELF_INFO_CLI(&pstOut->stPlayerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLAYER_POWER_INFO_LST(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_POWER_INFO_LST *pstIn = (DT_PLAYER_POWER_INFO_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->wPlayerNum)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwPowerInfo[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLAYER_POWER_INFO_LST(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_POWER_INFO_LST *pstOut = (DT_PLAYER_POWER_INFO_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->wPlayerNum)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwPowerInfo[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FACTION_PLAYERS_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_PLAYERS_INFO_REQ *pstIn = (PKT_CLIGS_FACTION_PLAYERS_INFO_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FACTION_PLAYERS_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_PLAYERS_INFO_REQ *pstOut = (PKT_CLIGS_FACTION_PLAYERS_INFO_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FACTION_PLAYERS_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_PLAYERS_INFO_ACK *pstIn = (PKT_CLIGS_FACTION_PLAYERS_INFO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_PLAYER_CLI_LST(&pstIn->stFactionPlayerCliLst, poNetData))
		return -1;

	if(-1 == EncodeDT_DOORSTRIBUTE_LEVE_DATA_LST(&pstIn->stDoorsTributeLst, poNetData))
		return -1;

	if(-1 == EncodeDT_FACTION_AUTHORITY_EX(&pstIn->stFactionAuthority, poNetData))
		return -1;

	if(-1 == EncodeDT_PLAYER_POWER_INFO_LST(&pstIn->stPlayerPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FACTION_PLAYERS_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FACTION_PLAYERS_INFO_ACK *pstOut = (PKT_CLIGS_FACTION_PLAYERS_INFO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_PLAYER_CLI_LST(&pstOut->stFactionPlayerCliLst, poNetData))
		return -1;

	if(-1 == DecodeDT_DOORSTRIBUTE_LEVE_DATA_LST(&pstOut->stDoorsTributeLst, poNetData))
		return -1;

	if(-1 == DecodeDT_FACTION_AUTHORITY_EX(&pstOut->stFactionAuthority, poNetData))
		return -1;

	if(-1 == DecodeDT_PLAYER_POWER_INFO_LST(&pstOut->stPlayerPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_VIEW_FACTION_MEMBERS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VIEW_FACTION_MEMBERS_REQ *pstIn = (PKT_CLIGS_VIEW_FACTION_MEMBERS_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_VIEW_FACTION_MEMBERS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VIEW_FACTION_MEMBERS_REQ *pstOut = (PKT_CLIGS_VIEW_FACTION_MEMBERS_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_VIEW_FACTION_MEMBERS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VIEW_FACTION_MEMBERS_ACK *pstIn = (PKT_CLIGS_VIEW_FACTION_MEMBERS_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_MEMBER_INFO_LIST(&pstIn->stMemberList, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsLocalFaction))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_VIEW_FACTION_MEMBERS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_VIEW_FACTION_MEMBERS_ACK *pstOut = (PKT_CLIGS_VIEW_FACTION_MEMBERS_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_MEMBER_INFO_LIST(&pstOut->stMemberList, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsLocalFaction))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CHANGE_FACTION_ICON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CHANGE_FACTION_ICON_REQ *pstIn = (PKT_CLIGS_OPEN_CHANGE_FACTION_ICON_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CHANGE_FACTION_ICON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CHANGE_FACTION_ICON_REQ *pstOut = (PKT_CLIGS_OPEN_CHANGE_FACTION_ICON_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_CHANGE_FACTION_ICON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CHANGE_FACTION_ICON_ACK *pstIn = (PKT_CLIGS_OPEN_CHANGE_FACTION_ICON_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFreeNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIconID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGoldNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byChangeNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_CHANGE_FACTION_ICON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_CHANGE_FACTION_ICON_ACK *pstOut = (PKT_CLIGS_OPEN_CHANGE_FACTION_ICON_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFreeNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIconID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGoldNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byChangeNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHANGE_FACTION_ICON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_FACTION_ICON_REQ *pstIn = (PKT_CLIGS_CHANGE_FACTION_ICON_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byIconID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHANGE_FACTION_ICON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_FACTION_ICON_REQ *pstOut = (PKT_CLIGS_CHANGE_FACTION_ICON_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byIconID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHANGE_FACTION_ICON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_FACTION_ICON_ACK *pstIn = (PKT_CLIGS_CHANGE_FACTION_ICON_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIconID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGoldSync))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHANGE_FACTION_ICON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_FACTION_ICON_ACK *pstOut = (PKT_CLIGS_CHANGE_FACTION_ICON_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIconID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGoldSync))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_REQ *pstIn = (PKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_REQ *pstOut = (PKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_ACK *pstIn = (PKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNormalPercent))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPerfectPercent))
		return -1;

	if(-1 == EncodeDT_RES_DATA(&pstIn->stNormalCost, poNetData))
		return -1;

	if(-1 == EncodeDT_RES_DATA(&pstIn->stPerfectCost, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFindBackDoorsTribute))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_ACK *pstOut = (PKT_CLIGS_OPEN_FIND_BACK_DOORSTRIBUTE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNormalPercent))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPerfectPercent))
		return -1;

	if(-1 == DecodeDT_RES_DATA(&pstOut->stNormalCost, poNetData))
		return -1;

	if(-1 == DecodeDT_RES_DATA(&pstOut->stPerfectCost, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFindBackDoorsTribute))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FIND_BACK_DOORSTRIBUTE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FIND_BACK_DOORSTRIBUTE_REQ *pstIn = (PKT_CLIGS_FIND_BACK_DOORSTRIBUTE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFindBackType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FIND_BACK_DOORSTRIBUTE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FIND_BACK_DOORSTRIBUTE_REQ *pstOut = (PKT_CLIGS_FIND_BACK_DOORSTRIBUTE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFindBackType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FIND_BACK_DOORSTRIBUTE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FIND_BACK_DOORSTRIBUTE_ACK *pstIn = (PKT_CLIGS_FIND_BACK_DOORSTRIBUTE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSyncDoorsTribute))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FIND_BACK_DOORSTRIBUTE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FIND_BACK_DOORSTRIBUTE_ACK *pstOut = (PKT_CLIGS_FIND_BACK_DOORSTRIBUTE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSyncDoorsTribute))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEAVE_COURAGE_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_COURAGE_BATTLE_REQ *pstIn = (PKT_CLIGS_LEAVE_COURAGE_BATTLE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEAVE_COURAGE_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_COURAGE_BATTLE_REQ *pstOut = (PKT_CLIGS_LEAVE_COURAGE_BATTLE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_LEAVE_COURAGE_BATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_COURAGE_BATTLE_ACK *pstIn = (PKT_CLIGS_LEAVE_COURAGE_BATTLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_LEAVE_COURAGE_BATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_LEAVE_COURAGE_BATTLE_ACK *pstOut = (PKT_CLIGS_LEAVE_COURAGE_BATTLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_REQ *pstIn = (PKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_REQ *pstOut = (PKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_ACK *pstIn = (PKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGroupID))
		return -1;

	if(-1 == EncodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstIn->stGroupData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_ACK *pstOut = (PKT_CLIGS_COURAGE_RANDOM_JOIN_GROUP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGroupID))
		return -1;

	if(-1 == DecodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstOut->stGroupData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EMBATTLE_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EMBATTLE_REQ2 *pstIn = (PKT_CLIGS_OPEN_EMBATTLE_REQ2*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EMBATTLE_REQ2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EMBATTLE_REQ2 *pstOut = (PKT_CLIGS_OPEN_EMBATTLE_REQ2*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FORMATION_DATA_LEVEL(void *pHost, CNetData* poNetData)
{
	DT_FORMATION_DATA_LEVEL *pstIn = (DT_FORMATION_DATA_LEVEL*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFormationID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFormationLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFormationType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFormationValue))
		return -1;

	if(-1 == EncodeDT_RES_DATA(&pstIn->stUpgradeCost, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxPlayerNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsUpgrade))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedPlayerLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FORMATION_DATA_LEVEL(void *pHost, CNetData* poNetData)
{
	DT_FORMATION_DATA_LEVEL *pstOut = (DT_FORMATION_DATA_LEVEL*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFormationID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFormationLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFormationType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFormationValue))
		return -1;

	if(-1 == DecodeDT_RES_DATA(&pstOut->stUpgradeCost, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxPlayerNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsUpgrade))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedPlayerLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_NEW_FORMATION_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_NEW_FORMATION_INFO_CLI *pstIn = (DT_NEW_FORMATION_INFO_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFormationID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPostionNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byPostionNum)
			break;
		if(-1 == EncodeDT_NEW_FORMATION_POSTION_INFO(&pstIn->astPostionInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FORMATION_DATA_LEVEL(&pstIn->stFormationLevel, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_NEW_FORMATION_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_NEW_FORMATION_INFO_CLI *pstOut = (DT_NEW_FORMATION_INFO_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFormationID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPostionNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byPostionNum)
			break;
		if(-1 == DecodeDT_NEW_FORMATION_POSTION_INFO(&pstOut->astPostionInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FORMATION_DATA_LEVEL(&pstOut->stFormationLevel, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_NEW_FORMATION_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_NEW_FORMATION_LST_CLI *pstIn = (DT_NEW_FORMATION_LST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->bySelectIndex))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFormationNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEW_FORMATION_NUM; i++)
	{
		if(i >= (INT32)pstIn->byFormationNum)
			break;
		if(-1 == EncodeDT_NEW_FORMATION_INFO_CLI(&pstIn->astFormationArray[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_NEW_FORMATION_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_NEW_FORMATION_LST_CLI *pstOut = (DT_NEW_FORMATION_LST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->bySelectIndex))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFormationNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEW_FORMATION_NUM; i++)
	{
		if(i >= (INT32)pstOut->byFormationNum)
			break;
		if(-1 == DecodeDT_NEW_FORMATION_INFO_CLI(&pstOut->astFormationArray[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_NEW_HERO_EMBATLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEW_HERO_EMBATLE_DATA *pstIn = (DT_NEW_HERO_EMBATLE_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCareerID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wTalent))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFormationNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEW_FORMATION_NUM; i++)
	{
		if(i >= (INT32)pstIn->byFormationNum)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwPower[i]))
			return -1;
	}

	for(i = 0; i < MAX_NEW_FORMATION_NUM; i++)
	{
		if(i >= (INT32)pstIn->byFormationNum)
			break;
		if(-1 == EncodeDT_BATTLE_ATTRIBUTE(&pstIn->astBattleAttribute[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_SKILL_DATA_CLI(&pstIn->stSkillInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_NEW_HERO_EMBATLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEW_HERO_EMBATLE_DATA *pstOut = (DT_NEW_HERO_EMBATLE_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCareerID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wTalent))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFormationNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEW_FORMATION_NUM; i++)
	{
		if(i >= (INT32)pstOut->byFormationNum)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwPower[i]))
			return -1;
	}

	for(i = 0; i < MAX_NEW_FORMATION_NUM; i++)
	{
		if(i >= (INT32)pstOut->byFormationNum)
			break;
		if(-1 == DecodeDT_BATTLE_ATTRIBUTE(&pstOut->astBattleAttribute[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_SKILL_DATA_CLI(&pstOut->stSkillInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EMBATTLE_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EMBATTLE_ACK2 *pstIn = (PKT_CLIGS_OPEN_EMBATTLE_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_NEW_HERO_EMBATLE_DATA(&pstIn->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_NEW_FORMATION_LST_CLI(&pstIn->stFormationInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RES_DATA(&pstIn->stCurRes, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EMBATTLE_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EMBATTLE_ACK2 *pstOut = (PKT_CLIGS_OPEN_EMBATTLE_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_NEW_HERO_EMBATLE_DATA(&pstOut->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_NEW_FORMATION_LST_CLI(&pstOut->stFormationInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RES_DATA(&pstOut->stCurRes, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FORMATION_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FORMATION_SCIENCE_REQ *pstIn = (PKT_CLIGS_OPEN_FORMATION_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FORMATION_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FORMATION_SCIENCE_REQ *pstOut = (PKT_CLIGS_OPEN_FORMATION_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FORMATION_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FORMATION_SCIENCE_ACK *pstIn = (PKT_CLIGS_OPEN_FORMATION_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFormationNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEW_FORMATION_NUM; i++)
	{
		if(i >= (INT32)pstIn->byFormationNum)
			break;
		if(-1 == EncodeDT_FORMATION_DATA_LEVEL(&pstIn->astFormationInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_RES_DATA(&pstIn->stCurRes, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FORMATION_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FORMATION_SCIENCE_ACK *pstOut = (PKT_CLIGS_OPEN_FORMATION_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFormationNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEW_FORMATION_NUM; i++)
	{
		if(i >= (INT32)pstOut->byFormationNum)
			break;
		if(-1 == DecodeDT_FORMATION_DATA_LEVEL(&pstOut->astFormationInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_RES_DATA(&pstOut->stCurRes, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_FORMATION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_FORMATION_REQ *pstIn = (PKT_CLIGS_UPGRADE_FORMATION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFormationID))
		return -1;

	if(-1 == EncodeDT_FORMATION_DATA(&pstIn->stFormationInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_FORMATION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_FORMATION_REQ *pstOut = (PKT_CLIGS_UPGRADE_FORMATION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFormationID))
		return -1;

	if(-1 == DecodeDT_FORMATION_DATA(&pstOut->stFormationInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_FORMATION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_FORMATION_ACK *pstIn = (PKT_CLIGS_UPGRADE_FORMATION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_NEW_HERO_EMBATLE_DATA(&pstIn->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_NEW_FORMATION_LST_CLI(&pstIn->stFormationInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPower, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_COMMON_PROMPT(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RES_DATA(&pstIn->stSyncRes, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_FORMATION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_FORMATION_ACK *pstOut = (PKT_CLIGS_UPGRADE_FORMATION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_NEW_HERO_EMBATLE_DATA(&pstOut->astHeroInfoLst[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_NEW_FORMATION_LST_CLI(&pstOut->stFormationInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPower, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_COMMON_PROMPT(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RES_DATA(&pstOut->stSyncRes, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_REGISTER_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_REGISTER_FACTION_REQ *pstIn = (PKT_CLILS_REGISTER_FACTION_REQ*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszDspName, sizeof(pstIn->aszDspName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_REGISTER_FACTION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_REGISTER_FACTION_REQ *pstOut = (PKT_CLILS_REGISTER_FACTION_REQ*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszDspName, sizeof(pstOut->aszDspName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLILS_REGISTER_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_REGISTER_FACTION_ACK *pstIn = (PKT_CLILS_REGISTER_FACTION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDspName, sizeof(pstIn->aszDspName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLILS_REGISTER_FACTION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLILS_REGISTER_FACTION_ACK *pstOut = (PKT_CLILS_REGISTER_FACTION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDspName, sizeof(pstOut->aszDspName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_FORMATION_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_FORMATION_SCIENCE_REQ *pstIn = (PKT_CLIGS_UPGRADE_FORMATION_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFormationID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_FORMATION_SCIENCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_FORMATION_SCIENCE_REQ *pstOut = (PKT_CLIGS_UPGRADE_FORMATION_SCIENCE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFormationID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_FORMATION_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_FORMATION_SCIENCE_ACK *pstIn = (PKT_CLIGS_UPGRADE_FORMATION_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFormationNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEW_FORMATION_NUM; i++)
	{
		if(i >= (INT32)pstIn->byFormationNum)
			break;
		if(-1 == EncodeDT_FORMATION_DATA_LEVEL(&pstIn->astFormationInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPower, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_COMMON_PROMPT(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RES_DATA(&pstIn->stSyncRes, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_FORMATION_SCIENCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_FORMATION_SCIENCE_ACK *pstOut = (PKT_CLIGS_UPGRADE_FORMATION_SCIENCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFormationNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEW_FORMATION_NUM; i++)
	{
		if(i >= (INT32)pstOut->byFormationNum)
			break;
		if(-1 == DecodeDT_FORMATION_DATA_LEVEL(&pstOut->astFormationInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPower, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_COMMON_PROMPT(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RES_DATA(&pstOut->stSyncRes, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_BLUE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_BLUE_ENCOURAGE_REQ *pstIn = (PKT_CLIGS_GET_BLUE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_BLUE_ENCOURAGE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_BLUE_ENCOURAGE_REQ *pstOut = (PKT_CLIGS_GET_BLUE_ENCOURAGE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_BLUE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_BLUE_ENCOURAGE_ACK *pstIn = (PKT_CLIGS_GET_BLUE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BEGBLUE_PLAYER_RES_CLI(&pstIn->stPlayerResInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BLUE_ENCOURAGEINFO_CLI(&pstIn->stEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBlue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_BLUE_ENCOURAGE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_BLUE_ENCOURAGE_ACK *pstOut = (PKT_CLIGS_GET_BLUE_ENCOURAGE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BEGBLUE_PLAYER_RES_CLI(&pstOut->stPlayerResInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BLUE_ENCOURAGEINFO_CLI(&pstOut->stEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBlue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_REQ *pstIn = (PKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwExprienceValue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_REQ *pstOut = (PKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwExprienceValue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_ACK *pstIn = (PKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_HOT_SPRING_EXPERIENCE(&pstIn->stPlayerExprience, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_UPGRADE_DATA(&pstIn->stHeroUpgradeInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExprienceValue))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_ACK *pstOut = (PKT_CLIGS_GET_EXPRIENCE_HOT_SPRING_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_HOT_SPRING_EXPERIENCE(&pstOut->stPlayerExprience, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_UPGRADE_DATA(&pstOut->stHeroUpgradeInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExprienceValue))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FACTION_SKILL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_SKILL_REQ *pstIn = (PKT_CLIGS_OPEN_FACTION_SKILL_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FACTION_SKILL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_SKILL_REQ *pstOut = (PKT_CLIGS_OPEN_FACTION_SKILL_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FACTION_SKILL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_SKILL_ACK *pstIn = (PKT_CLIGS_OPEN_FACTION_SKILL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySkillNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GYMNASIUM_SKILL_NUM; i++)
	{
		if(i >= (INT32)pstIn->bySkillNum)
			break;
		if(-1 == EncodeDT_SKILL_CLI_INFO(&pstIn->astSkillInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byStatu))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FACTION_SKILL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_SKILL_ACK *pstOut = (PKT_CLIGS_OPEN_FACTION_SKILL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySkillNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GYMNASIUM_SKILL_NUM; i++)
	{
		if(i >= (INT32)pstOut->bySkillNum)
			break;
		if(-1 == DecodeDT_SKILL_CLI_INFO(&pstOut->astSkillInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byStatu))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RESOURCE_SYNC_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESOURCE_SYNC_NTF *pstIn = (PKT_CLIGS_RESOURCE_SYNC_NTF*)pHost;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResourceSync, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RESOURCE_SYNC_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESOURCE_SYNC_NTF *pstOut = (PKT_CLIGS_RESOURCE_SYNC_NTF*)pHost;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResourceSync, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RESOLVE_TRIGRAM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RESOLVE_TRIGRAM_REQ *pstIn = (PKT_CLIGS_OPEN_RESOLVE_TRIGRAM_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RESOLVE_TRIGRAM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RESOLVE_TRIGRAM_REQ *pstOut = (PKT_CLIGS_OPEN_RESOLVE_TRIGRAM_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RESOLVE_TRIGRAM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RESOLVE_TRIGRAM_ACK *pstIn = (PKT_CLIGS_OPEN_RESOLVE_TRIGRAM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCommonNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSpecialNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoldNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoinNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RESOLVE_TRIGRAM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RESOLVE_TRIGRAM_ACK *pstOut = (PKT_CLIGS_OPEN_RESOLVE_TRIGRAM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCommonNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSpecialNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoldNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoinNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RESOLVE_TRIGRAM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESOLVE_TRIGRAM_REQ *pstIn = (PKT_CLIGS_RESOLVE_TRIGRAM_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byUseGold))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RESOLVE_TRIGRAM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESOLVE_TRIGRAM_REQ *pstOut = (PKT_CLIGS_RESOLVE_TRIGRAM_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byUseGold))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RESOLVE_TRIGRAM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESOLVE_TRIGRAM_ACK *pstIn = (PKT_CLIGS_RESOLVE_TRIGRAM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagGridIdx))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwStudyClip))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGetStudyClip))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
	{
		if(-1 == EncodeDT_STUDY_DATA_CLI2(&pstIn->astBagStudyInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwGoldNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUseGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RESOLVE_TRIGRAM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESOLVE_TRIGRAM_ACK *pstOut = (PKT_CLIGS_RESOLVE_TRIGRAM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagGridIdx))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwStudyClip))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGetStudyClip))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_BAG_STUDY_GRID_NUM; i++)
		{
			if(-1 == DecodeDT_STUDY_DATA_CLI2(&pstOut->astBagStudyInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelUint64(pstOut->qwGoldNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUseGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_JEWELRY_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_JEWELRY_DATA_LST_CLI *pstIn = (DT_JEWELRY_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wJewelryNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wJewelryNum)
			break;
		if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->astJewelryList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_JEWELRY_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_JEWELRY_DATA_LST_CLI *pstOut = (DT_JEWELRY_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wJewelryNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wJewelryNum)
			break;
		if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->astJewelryList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_DATA_LST_CLI *pstIn = (DT_SKILL_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->bySkillNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_NUM; i++)
	{
		if(i >= (INT32)pstIn->bySkillNum)
			break;
		if(-1 == EncodeDT_SKILL_DATA_CLI(&pstIn->astSkillInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_SKILL_DATA_LST_CLI *pstOut = (DT_SKILL_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->bySkillNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SKILL_NUM; i++)
	{
		if(i >= (INT32)pstOut->bySkillNum)
			break;
		if(-1 == DecodeDT_SKILL_DATA_CLI(&pstOut->astSkillInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_JEWELRY_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_JEWELRY_DATA_LST_CLI *pstIn = (DT_HERO_JEWELRY_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wJewelryNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_JEWELRY_POS; i++)
	{
		if(i >= (INT32)pstIn->wJewelryNum)
			break;
		if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->astJewelryList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_JEWELRY_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_HERO_JEWELRY_DATA_LST_CLI *pstOut = (DT_HERO_JEWELRY_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wJewelryNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_JEWELRY_POS; i++)
	{
		if(i >= (INT32)pstOut->wJewelryNum)
			break;
		if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->astJewelryList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_HERO_DATA_CLI2 *pstIn = (DT_HERO_DATA_CLI2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_PANEL_CLI(&pstIn->astHeroBaseData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_EQUIP_DATA_LST_CLI(&pstIn->astEquipDataList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_ATTR_ENABLE_UPDATE_INFO(&pstIn->astEnableAttrUpdate[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_SKILL_DATA_LST_CLI(&pstIn->astSkillInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_JEWELRY_DATA_LST_CLI(&pstIn->astJewelryInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_SOUL_DATA_LST_CLI(&pstIn->astSoulInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_DATA_CLI2(void *pHost, CNetData* poNetData)
{
	DT_HERO_DATA_CLI2 *pstOut = (DT_HERO_DATA_CLI2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_PANEL_CLI(&pstOut->astHeroBaseData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_EQUIP_DATA_LST_CLI(&pstOut->astEquipDataList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_ATTR_ENABLE_UPDATE_INFO(&pstOut->astEnableAttrUpdate[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_SKILL_DATA_LST_CLI(&pstOut->astSkillInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_JEWELRY_DATA_LST_CLI(&pstOut->astJewelryInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_SOUL_DATA_LST_CLI(&pstOut->astSoulInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_DATA_CLI_v410(void *pHost, CNetData* poNetData)
{
	DT_HERO_DATA_CLI_v410 *pstIn = (DT_HERO_DATA_CLI_v410*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_PANEL_CLI(&pstIn->astHeroBaseData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_EQUIP_DATA_LST_CLI_v410(&pstIn->astEquipDataList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_ATTR_ENABLE_UPDATE_INFO(&pstIn->astEnableAttrUpdate[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_SKILL_DATA_LST_CLI(&pstIn->astSkillInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_JEWELRY_DATA_LST_CLI(&pstIn->astJewelryInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_SOUL_DATA_LST_CLI(&pstIn->astSoulInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_DATA_CLI_v410(void *pHost, CNetData* poNetData)
{
	DT_HERO_DATA_CLI_v410 *pstOut = (DT_HERO_DATA_CLI_v410*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_PANEL_CLI(&pstOut->astHeroBaseData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_EQUIP_DATA_LST_CLI_v410(&pstOut->astEquipDataList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_ATTR_ENABLE_UPDATE_INFO(&pstOut->astEnableAttrUpdate[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_SKILL_DATA_LST_CLI(&pstOut->astSkillInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_JEWELRY_DATA_LST_CLI(&pstOut->astJewelryInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_SOUL_DATA_LST_CLI(&pstOut->astSoulInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_DATA_CLI2_OLD(void *pHost, CNetData* poNetData)
{
	DT_HERO_DATA_CLI2_OLD *pstIn = (DT_HERO_DATA_CLI2_OLD*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_PANEL_CLI(&pstIn->astHeroBaseData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_EQUIP_DATA_LST_CLI(&pstIn->astEquipDataList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_ATTR_ENABLE_UPDATE_INFO(&pstIn->astEnableAttrUpdate[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_SKILL_DATA_LST_CLI(&pstIn->astSkillInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_JEWELRY_DATA_LST_CLI(&pstIn->astJewelryInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_DATA_CLI2_OLD(void *pHost, CNetData* poNetData)
{
	DT_HERO_DATA_CLI2_OLD *pstOut = (DT_HERO_DATA_CLI2_OLD*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_PANEL_CLI(&pstOut->astHeroBaseData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_EQUIP_DATA_LST_CLI(&pstOut->astEquipDataList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_ATTR_ENABLE_UPDATE_INFO(&pstOut->astEnableAttrUpdate[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_SKILL_DATA_LST_CLI(&pstOut->astSkillInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_JEWELRY_DATA_LST_CLI(&pstOut->astJewelryInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_JEWELRY_SUIT_LVL_ATTR(void *pHost, CNetData* poNetData)
{
	DT_JEWELRY_SUIT_LVL_ATTR *pstIn = (DT_JEWELRY_SUIT_LVL_ATTR*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byAttrType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAttrVal))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byValType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_JEWELRY_SUIT_LVL_ATTR(void *pHost, CNetData* poNetData)
{
	DT_JEWELRY_SUIT_LVL_ATTR *pstOut = (DT_JEWELRY_SUIT_LVL_ATTR*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byAttrType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAttrVal))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byValType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_JEWELRY_SUIT_ATTR(void *pHost, CNetData* poNetData)
{
	DT_JEWELRY_SUIT_ATTR *pstIn = (DT_JEWELRY_SUIT_ATTR*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSuitLvl))
		return -1;

	if(-1 == EncodeDT_JEWELRY_SUIT_LVL_ATTR(&pstIn->stLvlAttr, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_JEWELRY_SUIT_ATTR(void *pHost, CNetData* poNetData)
{
	DT_JEWELRY_SUIT_ATTR *pstOut = (DT_JEWELRY_SUIT_ATTR*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSuitLvl))
		return -1;

	if(-1 == DecodeDT_JEWELRY_SUIT_LVL_ATTR(&pstOut->stLvlAttr, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_JEWELRY_SUIT_CLI(void *pHost, CNetData* poNetData)
{
	DT_JEWELRY_SUIT_CLI *pstIn = (DT_JEWELRY_SUIT_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSuitLvl))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySuitAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_JEWELRY_SUIT_ATTR_NUM; i++)
	{
		if(-1 == EncodeDT_JEWELRY_SUIT_ATTR(&pstIn->astSuitAttrLst[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_JEWELRY_SUIT_CLI(void *pHost, CNetData* poNetData)
{
	DT_JEWELRY_SUIT_CLI *pstOut = (DT_JEWELRY_SUIT_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSuitLvl))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySuitAttrNum))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_JEWELRY_SUIT_ATTR_NUM; i++)
		{
			if(-1 == DecodeDT_JEWELRY_SUIT_ATTR(&pstOut->astSuitAttrLst[i], poNetData))
				return -1;
		}

	return sizeof(*pstOut);
}

INT32 EncodeDT_JEWELRY_SUIT_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_JEWELRY_SUIT_LIST_CLI *pstIn = (DT_JEWELRY_SUIT_LIST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_JEWELRY_SUIT_CLI(&pstIn->astSuitList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_JEWELRY_SUIT_LIST_CLI(void *pHost, CNetData* poNetData)
{
	DT_JEWELRY_SUIT_LIST_CLI *pstOut = (DT_JEWELRY_SUIT_LIST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_JEWELRY_SUIT_CLI(&pstOut->astSuitList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLAYER_INFO_PANEL(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_INFO_PANEL *pstIn = (DT_PLAYER_INFO_PANEL*)pHost;

	if(-1 == EncodeDT_HERO_DATA_CLI2(&pstIn->stHeroInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI3(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI3(&pstIn->stJewelryInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstIn->stEquipXiangqianDes, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoodsCellNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byJewelryCellNum))
		return -1;

	if(-1 == EncodeDT_SOUL_DATA_LST_CLI(&pstIn->stSoulInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLAYER_INFO_PANEL(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_INFO_PANEL *pstOut = (DT_PLAYER_INFO_PANEL*)pHost;

	if(-1 == DecodeDT_HERO_DATA_CLI2(&pstOut->stHeroInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI3(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI3(&pstOut->stJewelryInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstOut->stEquipXiangqianDes, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoodsCellNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byJewelryCellNum))
		return -1;

	if(-1 == DecodeDT_SOUL_DATA_LST_CLI(&pstOut->stSoulInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLAYER_INFO_PANEL_OLD(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_INFO_PANEL_OLD *pstIn = (DT_PLAYER_INFO_PANEL_OLD*)pHost;

	if(-1 == EncodeDT_HERO_DATA_CLI2_OLD(&pstIn->stHeroInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI3(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI3(&pstIn->stJewelryInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstIn->stEquipXiangqianDes, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoodsCellNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byJewelryCellNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLAYER_INFO_PANEL_OLD(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_INFO_PANEL_OLD *pstOut = (DT_PLAYER_INFO_PANEL_OLD*)pHost;

	if(-1 == DecodeDT_HERO_DATA_CLI2_OLD(&pstOut->stHeroInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI3(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI3(&pstOut->stJewelryInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstOut->stEquipXiangqianDes, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoodsCellNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byJewelryCellNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PLAYER_PANEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLAYER_PANEL_REQ *pstIn = (PKT_CLIGS_OPEN_PLAYER_PANEL_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PLAYER_PANEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLAYER_PANEL_REQ *pstOut = (PKT_CLIGS_OPEN_PLAYER_PANEL_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PLAYER_PANEL_ACK_OLD(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLAYER_PANEL_ACK_OLD *pstIn = (PKT_CLIGS_OPEN_PLAYER_PANEL_ACK_OLD*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PLAYER_INFO_PANEL_OLD(&pstIn->stPlayerPanel, poNetData))
		return -1;

	if(-1 == EncodeDT_BAG_DATA_CLI(&pstIn->stBagInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCoachExpRate))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PLAYER_PANEL_ACK_OLD(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLAYER_PANEL_ACK_OLD *pstOut = (PKT_CLIGS_OPEN_PLAYER_PANEL_ACK_OLD*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PLAYER_INFO_PANEL_OLD(&pstOut->stPlayerPanel, poNetData))
		return -1;

	if(-1 == DecodeDT_BAG_DATA_CLI(&pstOut->stBagInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCoachExpRate))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PLAYER_PANEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLAYER_PANEL_ACK *pstIn = (PKT_CLIGS_OPEN_PLAYER_PANEL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PLAYER_INFO_PANEL(&pstIn->stPlayerPanel, poNetData))
		return -1;

	if(-1 == EncodeDT_BAG_DATA_CLI(&pstIn->stBagInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCoachExpRate))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PLAYER_PANEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLAYER_PANEL_ACK *pstOut = (PKT_CLIGS_OPEN_PLAYER_PANEL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PLAYER_INFO_PANEL(&pstOut->stPlayerPanel, poNetData))
		return -1;

	if(-1 == DecodeDT_BAG_DATA_CLI(&pstOut->stBagInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCoachExpRate))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PLAYER_INFO_PANEL_v410(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_INFO_PANEL_v410 *pstIn = (DT_PLAYER_INFO_PANEL_v410*)pHost;

	if(-1 == EncodeDT_HERO_DATA_CLI2(&pstIn->stHeroInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI4(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI4(&pstIn->stJewelryInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstIn->stEquipXiangqianDes, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoodsCellNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJewelryCellNum))
		return -1;

	if(-1 == EncodeDT_SOUL_DATA_LST_CLI(&pstIn->stSoulInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PLAYER_INFO_PANEL_v410(void *pHost, CNetData* poNetData)
{
	DT_PLAYER_INFO_PANEL_v410 *pstOut = (DT_PLAYER_INFO_PANEL_v410*)pHost;

	if(-1 == DecodeDT_HERO_DATA_CLI2(&pstOut->stHeroInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI4(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI4(&pstOut->stJewelryInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstOut->stEquipXiangqianDes, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoodsCellNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJewelryCellNum))
		return -1;

	if(-1 == DecodeDT_SOUL_DATA_LST_CLI(&pstOut->stSoulInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PLAYER_PANEL_ACK_v410(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLAYER_PANEL_ACK_v410 *pstIn = (PKT_CLIGS_OPEN_PLAYER_PANEL_ACK_v410*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PLAYER_INFO_PANEL_v410(&pstIn->stPlayerPanel, poNetData))
		return -1;

	if(-1 == EncodeDT_BAG_DATA_CLI2(&pstIn->stBagInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCoachExpRate))
		return -1;

	if(-1 == EncodeDT_JEWELRY_SUIT_LIST_CLI(&pstIn->stHeroJewelrySuitInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_LST_SOUL_POTENCY_DATA_LST_CLI(&pstIn->stHeroSoulPotencyInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_SOUL_POTENCY_DATA_LST_CLI(&pstIn->stBagSoulPotencyInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PLAYER_PANEL_ACK_v410(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLAYER_PANEL_ACK_v410 *pstOut = (PKT_CLIGS_OPEN_PLAYER_PANEL_ACK_v410*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PLAYER_INFO_PANEL_v410(&pstOut->stPlayerPanel, poNetData))
		return -1;

	if(-1 == DecodeDT_BAG_DATA_CLI2(&pstOut->stBagInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCoachExpRate))
		return -1;

	if(-1 == DecodeDT_JEWELRY_SUIT_LIST_CLI(&pstOut->stHeroJewelrySuitInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_LST_SOUL_POTENCY_DATA_LST_CLI(&pstOut->stHeroSoulPotencyInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_SOUL_POTENCY_DATA_LST_CLI(&pstOut->stBagSoulPotencyInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_INFO_AWAKEN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_AWAKEN_REQ *pstIn = (PKT_CLIGS_PLAYER_INFO_AWAKEN_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_INFO_AWAKEN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_AWAKEN_REQ *pstOut = (PKT_CLIGS_PLAYER_INFO_AWAKEN_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_INFO_AWAKEN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_AWAKEN_ACK *pstIn = (PKT_CLIGS_PLAYER_INFO_AWAKEN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
	{
		if(-1 == poNetData->AddWord(pstIn->awStudyUnlockLevelInfo[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_STUDY_DATA_CLI2(&pstIn->astHeroStudyInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awHeroLevel[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byAwakenOpenState))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_INFO_AWAKEN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_AWAKEN_ACK *pstOut = (PKT_CLIGS_PLAYER_INFO_AWAKEN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_STUDY_GRID_NUM; i++)
	{
		if(-1 == poNetData->DelWord(pstOut->awStudyUnlockLevelInfo[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_STUDY_DATA_CLI2(&pstOut->astHeroStudyInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awHeroLevel[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byAwakenOpenState))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_INFO_SKILL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_SKILL_REQ *pstIn = (PKT_CLIGS_PLAYER_INFO_SKILL_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_INFO_SKILL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_SKILL_REQ *pstOut = (PKT_CLIGS_PLAYER_INFO_SKILL_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_INFO_SKILL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_SKILL_ACK *pstIn = (PKT_CLIGS_PLAYER_INFO_SKILL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_SKILL_DATA_LST_CLI(&pstIn->astSkillInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_INFO_SKILL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_SKILL_ACK *pstOut = (PKT_CLIGS_PLAYER_INFO_SKILL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_SKILL_DATA_LST_CLI(&pstOut->astSkillInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_INFO_GODWEAPON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_GODWEAPON_REQ *pstIn = (PKT_CLIGS_PLAYER_INFO_GODWEAPON_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_INFO_GODWEAPON_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_GODWEAPON_REQ *pstOut = (PKT_CLIGS_PLAYER_INFO_GODWEAPON_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_INFO_GODWEAPON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_GODWEAPON_ACK *pstIn = (PKT_CLIGS_PLAYER_INFO_GODWEAPON_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGodweaponNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wGodweaponNum)
			break;
		if(-1 == EncodeDT_GODWEAPON_DATA_CLI(&pstIn->astGodweaponLst[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wGodweaponNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyLockStatu[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_INFO_GODWEAPON_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_GODWEAPON_ACK *pstOut = (PKT_CLIGS_PLAYER_INFO_GODWEAPON_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGodweaponNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wGodweaponNum)
			break;
		if(-1 == DecodeDT_GODWEAPON_DATA_CLI(&pstOut->astGodweaponLst[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wGodweaponNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyLockStatu[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_INFO_JEWELRY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_JEWELRY_REQ *pstIn = (PKT_CLIGS_PLAYER_INFO_JEWELRY_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_INFO_JEWELRY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_JEWELRY_REQ *pstOut = (PKT_CLIGS_PLAYER_INFO_JEWELRY_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_INFO_JEWELRY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_JEWELRY_ACK *pstIn = (PKT_CLIGS_PLAYER_INFO_JEWELRY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_JEWELRY_DATA_LST_CLI(&pstIn->astJewelryInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_JEWELRY_SUIT_CLI(&pstIn->astJewelrySuit[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_INFO_JEWELRY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_JEWELRY_ACK *pstOut = (PKT_CLIGS_PLAYER_INFO_JEWELRY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_JEWELRY_DATA_LST_CLI(&pstOut->astJewelryInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_JEWELRY_SUIT_CLI(&pstOut->astJewelrySuit[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_INFO_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_SOUL_REQ *pstIn = (PKT_CLIGS_PLAYER_INFO_SOUL_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_INFO_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_SOUL_REQ *pstOut = (PKT_CLIGS_PLAYER_INFO_SOUL_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_INFO_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_SOUL_ACK *pstIn = (PKT_CLIGS_PLAYER_INFO_SOUL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_SOUL_DATA_LST_CLI(&pstIn->astSoulInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_SOUL_POTENCY_DATA_LST_CLI(&pstIn->astSoulPotencyInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_INFO_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_SOUL_ACK *pstOut = (PKT_CLIGS_PLAYER_INFO_SOUL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_SOUL_DATA_LST_CLI(&pstOut->astSoulInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_SOUL_POTENCY_DATA_LST_CLI(&pstOut->astSoulPotencyInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRESS_JEWELRY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_JEWELRY_REQ *pstIn = (PKT_CLIGS_DRESS_JEWELRY_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDressType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressJewelryID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressItemIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUndressJewelryID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUndressItemIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byReqPos))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRESS_JEWELRY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_JEWELRY_REQ *pstOut = (PKT_CLIGS_DRESS_JEWELRY_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDressType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressJewelryID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressItemIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUndressJewelryID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUndressItemIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byReqPos))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRESS_JEWELRY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_JEWELRY_ACK *pstIn = (PKT_CLIGS_DRESS_JEWELRY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroKindID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDressType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressJewelryID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressItemIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUndressJewelryID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUndressItemIdx))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerHP))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_PANEL_LST_CLI(&pstIn->stHeroPanelInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsDown))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byIsDown)
			break;
		if(-1 == EncodeDT_JEWELRY_DATA_LST_CLI(&pstIn->astJewelryInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stBuildPrompt, poNetData))
		return -1;

	if(-1 == EncodeDT_JEWELRY_SUIT_CLI(&pstIn->stJewelrySuitInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRESS_JEWELRY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_JEWELRY_ACK *pstOut = (PKT_CLIGS_DRESS_JEWELRY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroKindID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDressType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressJewelryID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressItemIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUndressJewelryID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUndressItemIdx))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerHP))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_PANEL_LST_CLI(&pstOut->stHeroPanelInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsDown))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byIsDown)
			break;
		if(-1 == DecodeDT_JEWELRY_DATA_LST_CLI(&pstOut->astJewelryInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stBuildPrompt, poNetData))
		return -1;

	if(-1 == DecodeDT_JEWELRY_SUIT_CLI(&pstOut->stJewelrySuitInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_HERO_SELECT_PANEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HERO_SELECT_PANEL_REQ *pstIn = (PKT_CLIGS_OPEN_HERO_SELECT_PANEL_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_HERO_SELECT_PANEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HERO_SELECT_PANEL_REQ *pstOut = (PKT_CLIGS_OPEN_HERO_SELECT_PANEL_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_HERO_SELECT_PANEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HERO_SELECT_PANEL_ACK *pstIn = (PKT_CLIGS_OPEN_HERO_SELECT_PANEL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->astHeroBaseData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyFlyFlagList[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_HERO_SELECT_PANEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_HERO_SELECT_PANEL_ACK *pstOut = (PKT_CLIGS_OPEN_HERO_SELECT_PANEL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->astHeroBaseData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyFlyFlagList[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_JEWELRY_GENERATE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JEWELRY_GENERATE_REQ *pstIn = (PKT_CLIGS_OPEN_JEWELRY_GENERATE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_JEWELRY_GENERATE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JEWELRY_GENERATE_REQ *pstOut = (PKT_CLIGS_OPEN_JEWELRY_GENERATE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_JEWELRY_GENERATE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JEWELRY_GENERATE_ACK *pstIn = (PKT_CLIGS_OPEN_JEWELRY_GENERATE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_JEWELRY_DATA_LST_CLI(&pstIn->stJewelryInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_JEWELRY_GENERATE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JEWELRY_GENERATE_ACK *pstOut = (PKT_CLIGS_OPEN_JEWELRY_GENERATE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_JEWELRY_DATA_LST_CLI(&pstOut->stJewelryInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JEWELRY_GENERATE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_GENERATE_REQ *pstIn = (PKT_CLIGS_JEWELRY_GENERATE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wFirstID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFirstIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSecondID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSecondIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wThirdID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wThirdIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFourthID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFourthIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JEWELRY_GENERATE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_GENERATE_REQ *pstOut = (PKT_CLIGS_JEWELRY_GENERATE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wFirstID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFirstIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSecondID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSecondIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wThirdID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wThirdIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFourthID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFourthIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JEWELRY_GENERATE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_GENERATE_ACK *pstIn = (PKT_CLIGS_JEWELRY_GENERATE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->stJewelryInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_JEWELRY_DATA_LST_CLI(&pstIn->stBagJewelryInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResourceSnyc, poNetData))
		return -1;

	if(-1 == EncodeDT_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->stCompareJewelry, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JEWELRY_GENERATE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_GENERATE_ACK *pstOut = (PKT_CLIGS_JEWELRY_GENERATE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->stJewelryInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_JEWELRY_DATA_LST_CLI(&pstOut->stBagJewelryInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResourceSnyc, poNetData))
		return -1;

	if(-1 == DecodeDT_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->stCompareJewelry, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_STRENGTH_INFO(void *pHost, CNetData* poNetData)
{
	DT_STRENGTH_INFO *pstIn = (DT_STRENGTH_INFO*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostItemNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurItemNum))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_DATA(&pstIn->stCostRes, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_STRENGTH_INFO(void *pHost, CNetData* poNetData)
{
	DT_STRENGTH_INFO *pstOut = (DT_STRENGTH_INFO*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostItemNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurItemNum))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_DATA(&pstOut->stCostRes, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_STRENGTH_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_STRENGTH_LST_INFO *pstIn = (DT_STRENGTH_LST_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemKindNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_JEWELRY_STRENG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemKindNum)
			break;
		if(-1 == EncodeDT_STRENGTH_INFO(&pstIn->astItemInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_STRENGTH_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_STRENGTH_LST_INFO *pstOut = (DT_STRENGTH_LST_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemKindNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_JEWELRY_STRENG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemKindNum)
			break;
		if(-1 == DecodeDT_STRENGTH_INFO(&pstOut->astItemInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JEWELRY_STRENGTH_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_STRENGTH_REQ *pstIn = (PKT_CLIGS_JEWELRY_STRENGTH_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wJewelryID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJewelryIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JEWELRY_STRENGTH_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_STRENGTH_REQ *pstOut = (PKT_CLIGS_JEWELRY_STRENGTH_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wJewelryID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJewelryIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JEWELRY_STRENGTH_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_STRENGTH_ACK *pstIn = (PKT_CLIGS_JEWELRY_STRENGTH_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->stAfterJewelryInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->stStrengthJewelry, poNetData))
		return -1;

	if(-1 == EncodeDT_STRENGTH_INFO(&pstIn->stStringth, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxMark))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stBuildPrompt, poNetData))
		return -1;

	if(-1 == EncodeDT_STRENGTH_LST_INFO(&pstIn->stJewelryStrengResSync, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JEWELRY_STRENGTH_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_STRENGTH_ACK *pstOut = (PKT_CLIGS_JEWELRY_STRENGTH_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->stAfterJewelryInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->stStrengthJewelry, poNetData))
		return -1;

	if(-1 == DecodeDT_STRENGTH_INFO(&pstOut->stStringth, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxMark))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stBuildPrompt, poNetData))
		return -1;

	if(-1 == DecodeDT_STRENGTH_LST_INFO(&pstOut->stJewelryStrengResSync, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JEWELRY_GENERATE_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_GENERATE_INFO_REQ *pstIn = (PKT_CLIGS_JEWELRY_GENERATE_INFO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wFirstID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFirstIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSecondID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSecondIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wThirdID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wThirdIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFourthID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFourthIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JEWELRY_GENERATE_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_GENERATE_INFO_REQ *pstOut = (PKT_CLIGS_JEWELRY_GENERATE_INFO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wFirstID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFirstIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSecondID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSecondIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wThirdID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wThirdIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFourthID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFourthIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JEWELRY_GENERATE_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_GENERATE_INFO_ACK *pstIn = (PKT_CLIGS_JEWELRY_GENERATE_INFO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGenerateLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGenerateType))
		return -1;

	if(-1 == EncodeDT_RES_DATA(&pstIn->stGenerateCost, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byState))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResourceSnyc, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JEWELRY_GENERATE_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_GENERATE_INFO_ACK *pstOut = (PKT_CLIGS_JEWELRY_GENERATE_INFO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGenerateLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGenerateType))
		return -1;

	if(-1 == DecodeDT_RES_DATA(&pstOut->stGenerateCost, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byState))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResourceSnyc, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JEWELRY_RESOLVE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_RESOLVE_REQ *pstIn = (PKT_CLIGS_JEWELRY_RESOLVE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wJewelryID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJewelryIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagKind))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JEWELRY_RESOLVE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_RESOLVE_REQ *pstOut = (PKT_CLIGS_JEWELRY_RESOLVE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wJewelryID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJewelryIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagKind))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JEWELRY_RESOLVE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_RESOLVE_ACK *pstIn = (PKT_CLIGS_JEWELRY_RESOLVE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GOODS_DATA_LST_CLI(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_CLI3(&pstIn->stJewelryInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResourceSnyc, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JEWELRY_RESOLVE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_RESOLVE_ACK *pstOut = (PKT_CLIGS_JEWELRY_RESOLVE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GOODS_DATA_LST_CLI(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_CLI3(&pstOut->stJewelryInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResourceSnyc, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JEWELRY_RESOLVE_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_RESOLVE_ACK2 *pstIn = (PKT_CLIGS_JEWELRY_RESOLVE_ACK2*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GOODS_DATA_LST_CLI(&pstIn->stItemInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResourceSnyc, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JEWELRY_RESOLVE_ACK2(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_RESOLVE_ACK2 *pstOut = (PKT_CLIGS_JEWELRY_RESOLVE_ACK2*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GOODS_DATA_LST_CLI(&pstOut->stItemInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResourceSnyc, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_INFO_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_EQUIP_REQ *pstIn = (PKT_CLIGS_PLAYER_INFO_EQUIP_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_INFO_EQUIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_EQUIP_REQ *pstOut = (PKT_CLIGS_PLAYER_INFO_EQUIP_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_INFO_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_EQUIP_ACK *pstIn = (PKT_CLIGS_PLAYER_INFO_EQUIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_EQUIP_DATA_LST_CLI(&pstIn->astEquipDataList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstIn->stEquipXiangqianDes, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVipLevel))
		return -1;

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->astHeroBaseData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_INFO_EQUIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_EQUIP_ACK *pstOut = (PKT_CLIGS_PLAYER_INFO_EQUIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_EQUIP_DATA_LST_CLI(&pstOut->astEquipDataList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_ALL_EQUIP_XIANGQIAN_DES(&pstOut->stEquipXiangqianDes, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVipLevel))
		return -1;

	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->astHeroBaseData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_JEWELRY_STRENGTH_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JEWELRY_STRENGTH_REQ *pstIn = (PKT_CLIGS_OPEN_JEWELRY_STRENGTH_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wJewelryID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJewelryIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_JEWELRY_STRENGTH_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JEWELRY_STRENGTH_REQ *pstOut = (PKT_CLIGS_OPEN_JEWELRY_STRENGTH_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wJewelryID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJewelryIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_JEWELRY_STRENGTH_INFO(void *pHost, CNetData* poNetData)
{
	DT_HERO_JEWELRY_STRENGTH_INFO *pstIn = (DT_HERO_JEWELRY_STRENGTH_INFO*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_JEWELRY_POS; i++)
	{
		if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->astJewelryList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_JEWELRY_POS; i++)
	{
		if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->astStrengthJewelryList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_JEWELRY_POS; i++)
	{
		if(-1 == EncodeDT_STRENGTH_INFO(&pstIn->astStringth[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_JEWELRY_POS; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyMaxMark[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_JEWELRY_STRENGTH_INFO(void *pHost, CNetData* poNetData)
{
	DT_HERO_JEWELRY_STRENGTH_INFO *pstOut = (DT_HERO_JEWELRY_STRENGTH_INFO*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_JEWELRY_POS; i++)
		{
			if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->astJewelryList[i], poNetData))
				return -1;
		}

		for(i = 0; i < MAX_JEWELRY_POS; i++)
		{
			if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->astStrengthJewelryList[i], poNetData))
				return -1;
		}

		for(i = 0; i < MAX_JEWELRY_POS; i++)
		{
			if(-1 == DecodeDT_STRENGTH_INFO(&pstOut->astStringth[i], poNetData))
				return -1;
		}

	for(i = 0; i < MAX_JEWELRY_POS; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyMaxMark[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_BAG_JEWELRY_STRENGTH_INFO(void *pHost, CNetData* poNetData)
{
	DT_BAG_JEWELRY_STRENGTH_INFO *pstIn = (DT_BAG_JEWELRY_STRENGTH_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byJewelryNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byJewelryNum)
			break;
		if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->astJewelryList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byJewelryNum)
			break;
		if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->astStrengthJewelryList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byJewelryNum)
			break;
		if(-1 == EncodeDT_STRENGTH_INFO(&pstIn->astStringth[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byJewelryNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyMaxMark[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BAG_JEWELRY_STRENGTH_INFO(void *pHost, CNetData* poNetData)
{
	DT_BAG_JEWELRY_STRENGTH_INFO *pstOut = (DT_BAG_JEWELRY_STRENGTH_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byJewelryNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byJewelryNum)
			break;
		if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->astJewelryList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byJewelryNum)
			break;
		if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->astStrengthJewelryList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byJewelryNum)
			break;
		if(-1 == DecodeDT_STRENGTH_INFO(&pstOut->astStringth[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byJewelryNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyMaxMark[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_JEWELRY_STRENGTH_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JEWELRY_STRENGTH_ACK *pstIn = (PKT_CLIGS_OPEN_JEWELRY_STRENGTH_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == EncodeDT_HERO_JEWELRY_STRENGTH_INFO(&pstIn->astHeroJewelryStrengInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_BAG_JEWELRY_STRENGTH_INFO(&pstIn->stBagJewelryStrengInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_LST_DATA(&pstIn->stPlayerRes, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_JEWELRY_STRENGTH_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JEWELRY_STRENGTH_ACK *pstOut = (PKT_CLIGS_OPEN_JEWELRY_STRENGTH_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == DecodeDT_HERO_JEWELRY_STRENGTH_INFO(&pstOut->astHeroJewelryStrengInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_BAG_JEWELRY_STRENGTH_INFO(&pstOut->stBagJewelryStrengInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_LST_DATA(&pstOut->stPlayerRes, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JEWELRY_COMPARE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_COMPARE_REQ *pstIn = (PKT_CLIGS_JEWELRY_COMPARE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wJewelryID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJewelryIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JEWELRY_COMPARE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_COMPARE_REQ *pstOut = (PKT_CLIGS_JEWELRY_COMPARE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wJewelryID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJewelryIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JEWELRY_COMPARE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_COMPARE_ACK *pstIn = (PKT_CLIGS_JEWELRY_COMPARE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->stDressJewelryInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->stCompareJewelryInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JEWELRY_COMPARE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_COMPARE_ACK *pstOut = (PKT_CLIGS_JEWELRY_COMPARE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->stDressJewelryInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->stCompareJewelryInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JEWELRY_EXT_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_EXT_UPGRADE_REQ *pstIn = (PKT_CLIGS_JEWELRY_EXT_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wJewelryID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJewelryIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byExtID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JEWELRY_EXT_UPGRADE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_EXT_UPGRADE_REQ *pstOut = (PKT_CLIGS_JEWELRY_EXT_UPGRADE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wJewelryID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJewelryIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byExtID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_JEWELRY_EXT_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_EXT_UPGRADE_ACK *pstIn = (PKT_CLIGS_JEWELRY_EXT_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->stJewelryInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_JEWELRY_DATA_CLI(&pstIn->stStrengthJewelry, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMaxMark))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stBuildPrompt, poNetData))
		return -1;

	if(-1 == EncodeDT_STRENGTH_INFO(&pstIn->stStrengInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_JEWELRY_EXT_UPGRADE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_JEWELRY_EXT_UPGRADE_ACK *pstOut = (PKT_CLIGS_JEWELRY_EXT_UPGRADE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->stJewelryInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_JEWELRY_DATA_CLI(&pstOut->stStrengthJewelry, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMaxMark))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stBuildPrompt, poNetData))
		return -1;

	if(-1 == DecodeDT_STRENGTH_INFO(&pstOut->stStrengInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_JEWELRY_RESOLVE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JEWELRY_RESOLVE_REQ *pstIn = (PKT_CLIGS_OPEN_JEWELRY_RESOLVE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wJewelryID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJewelryIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_JEWELRY_RESOLVE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JEWELRY_RESOLVE_REQ *pstOut = (PKT_CLIGS_OPEN_JEWELRY_RESOLVE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wJewelryID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJewelryIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_JEWELRY_RESOLVE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JEWELRY_RESOLVE_ACK *pstIn = (PKT_CLIGS_OPEN_JEWELRY_RESOLVE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_STRENGTH_LST_INFO(&pstIn->stBaseItem, poNetData))
		return -1;

	if(-1 == EncodeDT_STRENGTH_LST_INFO(&pstIn->stReturnItem, poNetData))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_DATA(&pstIn->stCostRes, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_JEWELRY_RESOLVE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_JEWELRY_RESOLVE_ACK *pstOut = (PKT_CLIGS_OPEN_JEWELRY_RESOLVE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_STRENGTH_LST_INFO(&pstOut->stBaseItem, poNetData))
		return -1;

	if(-1 == DecodeDT_STRENGTH_LST_INFO(&pstOut->stReturnItem, poNetData))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_DATA(&pstOut->stCostRes, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_GROUP_OVERTIME_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GROUP_OVERTIME_NTF *pstIn = (PKT_CLIGS_COURAGE_GROUP_OVERTIME_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_GROUP_OVERTIME_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_GROUP_OVERTIME_NTF *pstOut = (PKT_CLIGS_COURAGE_GROUP_OVERTIME_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GVG_FORMATION_PLAYER_ID_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_GVG_FORMATION_PLAYER_ID_LST_CLI *pstIn = (DT_GVG_FORMATION_PLAYER_ID_LST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byPlayerNum)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwPlayerIDForFormation[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GVG_FORMATION_PLAYER_ID_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_GVG_FORMATION_PLAYER_ID_LST_CLI *pstOut = (DT_GVG_FORMATION_PLAYER_ID_LST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byPlayerNum)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwPlayerIDForFormation[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_GVG_FORMATION_HERO_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_GVG_FORMATION_HERO_LST_INFO *pstIn = (DT_GVG_FORMATION_HERO_LST_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwHeroID[i]))
			return -1;
	}

	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byHeroNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyHeroCareerID[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GVG_FORMATION_HERO_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_GVG_FORMATION_HERO_LST_INFO *pstOut = (DT_GVG_FORMATION_HERO_LST_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwHeroID[i]))
			return -1;
	}

	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byHeroNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyHeroCareerID[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_GVG_FORMATION_PLAYER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GVG_FORMATION_PLAYER_DATA_CLI *pstIn = (DT_GVG_FORMATION_PLAYER_DATA_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispPlayerName, sizeof(pstIn->aszDispPlayerName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoachID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPlayerPosition))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDoorsTributeLevel))
		return -1;

	if(-1 == EncodeDT_GVG_FORMATION_HERO_LST_INFO(&pstIn->stFrontRow, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_FORMATION_HERO_LST_INFO(&pstIn->stBackRow, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byColor))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GVG_FORMATION_PLAYER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GVG_FORMATION_PLAYER_DATA_CLI *pstOut = (DT_GVG_FORMATION_PLAYER_DATA_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispPlayerName, sizeof(pstOut->aszDispPlayerName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoachID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPlayerPosition))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDoorsTributeLevel))
		return -1;

	if(-1 == DecodeDT_GVG_FORMATION_HERO_LST_INFO(&pstOut->stFrontRow, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_FORMATION_HERO_LST_INFO(&pstOut->stBackRow, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byColor))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GVG_FORMATION_SIMPLE_PLAYER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GVG_FORMATION_SIMPLE_PLAYER_DATA_CLI *pstIn = (DT_GVG_FORMATION_SIMPLE_PLAYER_DATA_CLI*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszDispPlayerName, sizeof(pstIn->aszDispPlayerName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCoachID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPower))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPosIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byJobType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GVG_FORMATION_SIMPLE_PLAYER_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GVG_FORMATION_SIMPLE_PLAYER_DATA_CLI *pstOut = (DT_GVG_FORMATION_SIMPLE_PLAYER_DATA_CLI*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszDispPlayerName, sizeof(pstOut->aszDispPlayerName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCoachID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPower))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPosIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byJobType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GVG_FORMATION_SIMPLE_PLAYER_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_GVG_FORMATION_SIMPLE_PLAYER_DATA_LST_CLI *pstIn = (DT_GVG_FORMATION_SIMPLE_PLAYER_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byPlayerNum)
			break;
		if(-1 == EncodeDT_GVG_FORMATION_SIMPLE_PLAYER_DATA_CLI(&pstIn->astPlayerInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GVG_FORMATION_SIMPLE_PLAYER_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_GVG_FORMATION_SIMPLE_PLAYER_DATA_LST_CLI *pstOut = (DT_GVG_FORMATION_SIMPLE_PLAYER_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlayerNum))
		return -1;

	INT32 i;
	for(i = 0; i < DT_FACTION_PLAYER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byPlayerNum)
			break;
		if(-1 == DecodeDT_GVG_FORMATION_SIMPLE_PLAYER_DATA_CLI(&pstOut->astPlayerInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_FORMATION_POS_INFO(void *pHost, CNetData* poNetData)
{
	DT_FACTION_FORMATION_POS_INFO *pstIn = (DT_FACTION_FORMATION_POS_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byLockState))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNeedFactionLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_FORMATION_POS_INFO(void *pHost, CNetData* poNetData)
{
	DT_FACTION_FORMATION_POS_INFO *pstOut = (DT_FACTION_FORMATION_POS_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byLockState))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNeedFactionLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_FORMATION_POS_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_FACTION_FORMATION_POS_LST_INFO *pstIn = (DT_FACTION_FORMATION_POS_LST_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPosNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GVG_FORMATION_PLAYER_CNT; i++)
	{
		if(i >= (INT32)pstIn->byPosNum)
			break;
		if(-1 == EncodeDT_FACTION_FORMATION_POS_INFO(&pstIn->astFormationPosInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byUnlockPosNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_FORMATION_POS_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_FACTION_FORMATION_POS_LST_INFO *pstOut = (DT_FACTION_FORMATION_POS_LST_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPosNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GVG_FORMATION_PLAYER_CNT; i++)
	{
		if(i >= (INT32)pstOut->byPosNum)
			break;
		if(-1 == DecodeDT_FACTION_FORMATION_POS_INFO(&pstOut->astFormationPosInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byUnlockPosNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GVG_FORMATION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_FORMATION_REQ *pstIn = (PKT_CLIGS_OPEN_GVG_FORMATION_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GVG_FORMATION_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_FORMATION_REQ *pstOut = (PKT_CLIGS_OPEN_GVG_FORMATION_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GVG_FORMATION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_FORMATION_ACK *pstIn = (PKT_CLIGS_OPEN_GVG_FORMATION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GVG_FORMATION_SIMPLE_PLAYER_DATA_LST_CLI(&pstIn->stPlayerLstInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurFactionLevel))
		return -1;

	if(-1 == EncodeDT_FACTION_FORMATION_POS_LST_INFO(&pstIn->stFormationInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GVG_FORMATION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_FORMATION_ACK *pstOut = (PKT_CLIGS_OPEN_GVG_FORMATION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GVG_FORMATION_SIMPLE_PLAYER_DATA_LST_CLI(&pstOut->stPlayerLstInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurFactionLevel))
		return -1;

	if(-1 == DecodeDT_FACTION_FORMATION_POS_LST_INFO(&pstOut->stFormationInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GVG_TIME_INFO(void *pHost, CNetData* poNetData)
{
	DT_GVG_TIME_INFO *pstIn = (DT_GVG_TIME_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byStartWeek))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwStartTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEndWeek))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEndTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GVG_TIME_INFO(void *pHost, CNetData* poNetData)
{
	DT_GVG_TIME_INFO *pstOut = (DT_GVG_TIME_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byStartWeek))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwStartTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEndWeek))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEndTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GVG_SCHEDULE_INFO(void *pHost, CNetData* poNetData)
{
	DT_GVG_SCHEDULE_INFO *pstIn = (DT_GVG_SCHEDULE_INFO*)pHost;

	if(-1 == EncodeDT_GVG_TIME_INFO(&pstIn->stApply, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_TIME_INFO(&pstIn->stMoneyGame, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_TIME_INFO(&pstIn->stChaosWar, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_TIME_INFO(&pstIn->stDouble16TO8, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_TIME_INFO(&pstIn->stDouble8TO4, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_TIME_INFO(&pstIn->stFinalWar, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurRound))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRefreshTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGetGiftNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSessionID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnReadLogCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFormationState))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GVG_SCHEDULE_INFO(void *pHost, CNetData* poNetData)
{
	DT_GVG_SCHEDULE_INFO *pstOut = (DT_GVG_SCHEDULE_INFO*)pHost;

	if(-1 == DecodeDT_GVG_TIME_INFO(&pstOut->stApply, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_TIME_INFO(&pstOut->stMoneyGame, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_TIME_INFO(&pstOut->stChaosWar, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_TIME_INFO(&pstOut->stDouble16TO8, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_TIME_INFO(&pstOut->stDouble8TO4, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_TIME_INFO(&pstOut->stFinalWar, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurRound))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRefreshTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGetGiftNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSessionID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnReadLogCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFormationState))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_APPLAY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_APPLAY_ACK *pstIn = (PKT_CLIGS_GVG_APPLAY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GVG_SCHEDULE_INFO(&pstIn->stScheduleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_FACTION_RANK_DATA(&pstIn->stLastChampionInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsApplyTime))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCountDown))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_APPLAY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_APPLAY_ACK *pstOut = (PKT_CLIGS_GVG_APPLAY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GVG_SCHEDULE_INFO(&pstOut->stScheduleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_FACTION_RANK_DATA(&pstOut->stLastChampionInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsApplyTime))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCountDown))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GVG_RANK_MONEY_DATA(void *pHost, CNetData* poNetData)
{
	DT_GVG_RANK_MONEY_DATA *pstIn = (DT_GVG_RANK_MONEY_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wRank))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwFactionFunds))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwSumPower))
		return -1;

	if(-1 == EncodeDT_FACTION_BASE_DATA_CLI2(&pstIn->stFactionBaseInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GVG_RANK_MONEY_DATA(void *pHost, CNetData* poNetData)
{
	DT_GVG_RANK_MONEY_DATA *pstOut = (DT_GVG_RANK_MONEY_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wRank))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwFactionFunds))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwSumPower))
		return -1;

	if(-1 == DecodeDT_FACTION_BASE_DATA_CLI2(&pstOut->stFactionBaseInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GVG_SIMPLE_RANK_MONEY_DATA(void *pHost, CNetData* poNetData)
{
	DT_GVG_SIMPLE_RANK_MONEY_DATA *pstIn = (DT_GVG_SIMPLE_RANK_MONEY_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wRank))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwFactionFunds))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GVG_SIMPLE_RANK_MONEY_DATA(void *pHost, CNetData* poNetData)
{
	DT_GVG_SIMPLE_RANK_MONEY_DATA *pstOut = (DT_GVG_SIMPLE_RANK_MONEY_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wRank))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwFactionFunds))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GVG_RANK_MONEY_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_GVG_RANK_MONEY_LST_DATA *pstIn = (DT_GVG_RANK_MONEY_LST_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wRankNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RANK_DISPLAY; i++)
	{
		if(i >= (INT32)pstIn->wRankNum)
			break;
		if(-1 == EncodeDT_GVG_RANK_MONEY_DATA(&pstIn->astMoneyRank[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GVG_RANK_MONEY_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_GVG_RANK_MONEY_LST_DATA *pstOut = (DT_GVG_RANK_MONEY_LST_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wRankNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RANK_DISPLAY; i++)
	{
		if(i >= (INT32)pstOut->wRankNum)
			break;
		if(-1 == DecodeDT_GVG_RANK_MONEY_DATA(&pstOut->astMoneyRank[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_GVG_SIMPLE_RANK_MONEY_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_GVG_SIMPLE_RANK_MONEY_LST_DATA *pstIn = (DT_GVG_SIMPLE_RANK_MONEY_LST_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wRankNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RANK_DISPLAY; i++)
	{
		if(i >= (INT32)pstIn->wRankNum)
			break;
		if(-1 == EncodeDT_GVG_SIMPLE_RANK_MONEY_DATA(&pstIn->astMoneyRank[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GVG_SIMPLE_RANK_MONEY_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_GVG_SIMPLE_RANK_MONEY_LST_DATA *pstOut = (DT_GVG_SIMPLE_RANK_MONEY_LST_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wRankNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_RANK_DISPLAY; i++)
	{
		if(i >= (INT32)pstOut->wRankNum)
			break;
		if(-1 == DecodeDT_GVG_SIMPLE_RANK_MONEY_DATA(&pstOut->astMoneyRank[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_ALREAD_APPLAY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ALREAD_APPLAY_REQ *pstIn = (PKT_CLIGS_OPEN_ALREAD_APPLAY_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_ALREAD_APPLAY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ALREAD_APPLAY_REQ *pstOut = (PKT_CLIGS_OPEN_ALREAD_APPLAY_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_ALREAD_APPLAY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ALREAD_APPLAY_ACK *pstIn = (PKT_CLIGS_OPEN_ALREAD_APPLAY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GVG_RANK_MONEY_LST_DATA(&pstIn->stApplyInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_ALREAD_APPLAY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_ALREAD_APPLAY_ACK *pstOut = (PKT_CLIGS_OPEN_ALREAD_APPLAY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GVG_RANK_MONEY_LST_DATA(&pstOut->stApplyInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_LAST_RESULT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_LAST_RESULT_REQ *pstIn = (PKT_CLIGS_GVG_LAST_RESULT_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_LAST_RESULT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_LAST_RESULT_REQ *pstOut = (PKT_CLIGS_GVG_LAST_RESULT_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_LAST_RESULT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_LAST_RESULT_ACK *pstIn = (PKT_CLIGS_GVG_LAST_RESULT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GVG_FACTION_RANK_LST_DATA(&pstIn->stLastResult, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_LAST_RESULT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_LAST_RESULT_ACK *pstOut = (PKT_CLIGS_GVG_LAST_RESULT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GVG_FACTION_RANK_LST_DATA(&pstOut->stLastResult, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_MONEY_CHAOS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_MONEY_CHAOS_ACK *pstIn = (PKT_CLIGS_GVG_MONEY_CHAOS_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GVG_SCHEDULE_INFO(&pstIn->stScheduleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_SIMPLE_RANK_MONEY_LST_DATA(&pstIn->stMoneyRank, poNetData))
		return -1;

	if(-1 == EncodeDT_SIMPLE_FACTION_LST_INFO(&pstIn->stBattleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_SIMPLE_FACTION_LST_INFO(&pstIn->stMoneyInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCountDwonTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurPanel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySmallRound))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_MONEY_CHAOS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_MONEY_CHAOS_ACK *pstOut = (PKT_CLIGS_GVG_MONEY_CHAOS_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GVG_SCHEDULE_INFO(&pstOut->stScheduleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_SIMPLE_RANK_MONEY_LST_DATA(&pstOut->stMoneyRank, poNetData))
		return -1;

	if(-1 == DecodeDT_SIMPLE_FACTION_LST_INFO(&pstOut->stBattleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_SIMPLE_FACTION_LST_INFO(&pstOut->stMoneyInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCountDwonTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurPanel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySmallRound))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_OPEN_MY_GAMBLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_OPEN_MY_GAMBLE_REQ *pstIn = (PKT_CLIGS_GVG_OPEN_MY_GAMBLE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_OPEN_MY_GAMBLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_OPEN_MY_GAMBLE_REQ *pstOut = (PKT_CLIGS_GVG_OPEN_MY_GAMBLE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GAMBLE_GAME_INFO(void *pHost, CNetData* poNetData)
{
	DT_GAMBLE_GAME_INFO *pstIn = (DT_GAMBLE_GAME_INFO*)pHost;

	if(-1 == EncodeDT_GVG_ROUND(&pstIn->stGameKind, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byResult))
		return -1;

	if(-1 == EncodeDT_GAMBLE_FACTION_INFO(&pstIn->stFactionInfo1, poNetData))
		return -1;

	if(-1 == EncodeDT_GAMBLE_FACTION_INFO(&pstIn->stFactionInfo2, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwVideoID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GAMBLE_GAME_INFO(void *pHost, CNetData* poNetData)
{
	DT_GAMBLE_GAME_INFO *pstOut = (DT_GAMBLE_GAME_INFO*)pHost;

	if(-1 == DecodeDT_GVG_ROUND(&pstOut->stGameKind, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byResult))
		return -1;

	if(-1 == DecodeDT_GAMBLE_FACTION_INFO(&pstOut->stFactionInfo1, poNetData))
		return -1;

	if(-1 == DecodeDT_GAMBLE_FACTION_INFO(&pstOut->stFactionInfo2, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwVideoID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GAMBLE_GAME_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_GAMBLE_GAME_LST_INFO *pstIn = (DT_GAMBLE_GAME_LST_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGambleNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GAMBLE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byGambleNum)
			break;
		if(-1 == EncodeDT_GAMBLE_GAME_INFO(&pstIn->astGameInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GAMBLE_GAME_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_GAMBLE_GAME_LST_INFO *pstOut = (DT_GAMBLE_GAME_LST_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGambleNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GAMBLE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byGambleNum)
			break;
		if(-1 == DecodeDT_GAMBLE_GAME_INFO(&pstOut->astGameInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_GAMBLE_GIFT_DATA(void *pHost, CNetData* poNetData)
{
	DT_GAMBLE_GIFT_DATA *pstIn = (DT_GAMBLE_GIFT_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGambleType))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_DATA(&pstIn->stGambleReward, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GAMBLE_GIFT_DATA(void *pHost, CNetData* poNetData)
{
	DT_GAMBLE_GIFT_DATA *pstOut = (DT_GAMBLE_GIFT_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGambleType))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_DATA(&pstOut->stGambleReward, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_OPEN_MY_GAMBLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_OPEN_MY_GAMBLE_ACK *pstIn = (PKT_CLIGS_GVG_OPEN_MY_GAMBLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_DATA(&pstIn->stWinRes, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GAMBLE_NUM; i++)
	{
		if(-1 == EncodeDT_GAMBLE_GIFT_DATA(&pstIn->astGambleInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_GAMBLE_GAME_LST_INFO(&pstIn->stGambleGameInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_OPEN_MY_GAMBLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_OPEN_MY_GAMBLE_ACK *pstOut = (PKT_CLIGS_GVG_OPEN_MY_GAMBLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_DATA(&pstOut->stWinRes, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_GAMBLE_NUM; i++)
		{
			if(-1 == DecodeDT_GAMBLE_GIFT_DATA(&pstOut->astGambleInfo[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_GAMBLE_GAME_LST_INFO(&pstOut->stGambleGameInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_OPEN_GAMBLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_OPEN_GAMBLE_REQ *pstIn = (PKT_CLIGS_GVG_OPEN_GAMBLE_REQ*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwGambleID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_OPEN_GAMBLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_OPEN_GAMBLE_REQ *pstOut = (PKT_CLIGS_GVG_OPEN_GAMBLE_REQ*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwGambleID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FACTION_GAMBLE_INFO(void *pHost, CNetData* poNetData)
{
	DT_FACTION_GAMBLE_INFO *pstIn = (DT_FACTION_GAMBLE_INFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wZoneID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszHeadName, sizeof(pstIn->aszHeadName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJoinNum))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwSumPower))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSumIntegral))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSupportNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIconID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FACTION_GAMBLE_INFO(void *pHost, CNetData* poNetData)
{
	DT_FACTION_GAMBLE_INFO *pstOut = (DT_FACTION_GAMBLE_INFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wZoneID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszHeadName, sizeof(pstOut->aszHeadName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJoinNum))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwSumPower))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSumIntegral))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSupportNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIconID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_OPEN_GAMBLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_OPEN_GAMBLE_ACK *pstIn = (PKT_CLIGS_GVG_OPEN_GAMBLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_DATA(&pstIn->stWinRes, poNetData))
		return -1;

	if(-1 == EncodeDT_FACTION_GAMBLE_INFO(&pstIn->stFactionInfo1, poNetData))
		return -1;

	if(-1 == EncodeDT_FACTION_GAMBLE_INFO(&pstIn->stFactionInfo2, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwVideoID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_OPEN_GAMBLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_OPEN_GAMBLE_ACK *pstOut = (PKT_CLIGS_GVG_OPEN_GAMBLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_DATA(&pstOut->stWinRes, poNetData))
		return -1;

	if(-1 == DecodeDT_FACTION_GAMBLE_INFO(&pstOut->stFactionInfo1, poNetData))
		return -1;

	if(-1 == DecodeDT_FACTION_GAMBLE_INFO(&pstOut->stFactionInfo2, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwVideoID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GVG_RULE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_RULE_REQ *pstIn = (PKT_CLIGS_OPEN_GVG_RULE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GVG_RULE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_RULE_REQ *pstOut = (PKT_CLIGS_OPEN_GVG_RULE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GVG_RULE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_RULE_ACK *pstIn = (PKT_CLIGS_OPEN_GVG_RULE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszContent, sizeof(pstIn->aszContent)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GVG_RULE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_RULE_ACK *pstOut = (PKT_CLIGS_OPEN_GVG_RULE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszContent, sizeof(pstOut->aszContent)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_GAMBLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_GAMBLE_REQ *pstIn = (PKT_CLIGS_GVG_GAMBLE_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwWinFactionID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGambleID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_GAMBLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_GAMBLE_REQ *pstOut = (PKT_CLIGS_GVG_GAMBLE_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwWinFactionID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGambleID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_GAMBLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_GAMBLE_ACK *pstIn = (PKT_CLIGS_GVG_GAMBLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_GAMBLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_GAMBLE_ACK *pstOut = (PKT_CLIGS_GVG_GAMBLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GVG_ACTIVITY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_ACTIVITY_REQ *pstIn = (PKT_CLIGS_OPEN_GVG_ACTIVITY_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GVG_ACTIVITY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_ACTIVITY_REQ *pstOut = (PKT_CLIGS_OPEN_GVG_ACTIVITY_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FACTION_MONEY_RANK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_MONEY_RANK_REQ *pstIn = (PKT_CLIGS_OPEN_FACTION_MONEY_RANK_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FACTION_MONEY_RANK_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_MONEY_RANK_REQ *pstOut = (PKT_CLIGS_OPEN_FACTION_MONEY_RANK_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FACTION_MONEY_RANK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_MONEY_RANK_ACK *pstIn = (PKT_CLIGS_OPEN_FACTION_MONEY_RANK_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GVG_RANK_MONEY_LST_DATA(&pstIn->stMoneyRank, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FACTION_MONEY_RANK_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FACTION_MONEY_RANK_ACK *pstOut = (PKT_CLIGS_OPEN_FACTION_MONEY_RANK_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GVG_RANK_MONEY_LST_DATA(&pstOut->stMoneyRank, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_READ_FORMATION_PLAYER_TIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_READ_FORMATION_PLAYER_TIP_REQ *pstIn = (PKT_CLIGS_READ_FORMATION_PLAYER_TIP_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwReqPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_READ_FORMATION_PLAYER_TIP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_READ_FORMATION_PLAYER_TIP_REQ *pstOut = (PKT_CLIGS_READ_FORMATION_PLAYER_TIP_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwReqPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_READ_FORMATION_PLAYER_TIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_READ_FORMATION_PLAYER_TIP_ACK *pstIn = (PKT_CLIGS_READ_FORMATION_PLAYER_TIP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GVG_FORMATION_PLAYER_DATA_CLI(&pstIn->stTipInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_READ_FORMATION_PLAYER_TIP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_READ_FORMATION_PLAYER_TIP_ACK *pstOut = (PKT_CLIGS_READ_FORMATION_PLAYER_TIP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GVG_FORMATION_PLAYER_DATA_CLI(&pstOut->stTipInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_FACTION_EMBATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_FACTION_EMBATTLE_REQ *pstIn = (PKT_CLIGS_GVG_FACTION_EMBATTLE_REQ*)pHost;

	if(-1 == EncodeDT_GVG_FORMATION_PLAYER_ID_LST_CLI(&pstIn->stFormation, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_FACTION_EMBATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_FACTION_EMBATTLE_REQ *pstOut = (PKT_CLIGS_GVG_FACTION_EMBATTLE_REQ*)pHost;

	if(-1 == DecodeDT_GVG_FORMATION_PLAYER_ID_LST_CLI(&pstOut->stFormation, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_FACTION_EMBATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_FACTION_EMBATTLE_ACK *pstIn = (PKT_CLIGS_GVG_FACTION_EMBATTLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_FACTION_EMBATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_FACTION_EMBATTLE_ACK *pstOut = (PKT_CLIGS_GVG_FACTION_EMBATTLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GIFT_DETAILS_INFO(void *pHost, CNetData* poNetData)
{
	DT_GIFT_DETAILS_INFO *pstIn = (DT_GIFT_DETAILS_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKindType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwKindNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GIFT_DETAILS_INFO(void *pHost, CNetData* poNetData)
{
	DT_GIFT_DETAILS_INFO *pstOut = (DT_GIFT_DETAILS_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKindType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwKindNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GIFT_DETAILS_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_GIFT_DETAILS_LST_INFO *pstIn = (DT_GIFT_DETAILS_LST_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGoodsNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GIFT_GOODS_NUM; i++)
	{
		if(i >= (INT32)pstIn->byGoodsNum)
			break;
		if(-1 == EncodeDT_GIFT_DETAILS_INFO(&pstIn->astGoodsInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GIFT_DETAILS_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_GIFT_DETAILS_LST_INFO *pstOut = (DT_GIFT_DETAILS_LST_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGoodsNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GIFT_GOODS_NUM; i++)
	{
		if(i >= (INT32)pstOut->byGoodsNum)
			break;
		if(-1 == DecodeDT_GIFT_DETAILS_INFO(&pstOut->astGoodsInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_GVG_GIFT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GVG_GIFT_DATA_CLI *pstIn = (DT_GVG_GIFT_DATA_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSessionID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGvGRound))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBattleIdx))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBattleResult))
		return -1;

	if(-1 == EncodeDT_GIFT_DETAILS_LST_INFO(&pstIn->stGiftInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGiftGetState))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGiftID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGiftType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRank))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GVG_GIFT_DATA_CLI(void *pHost, CNetData* poNetData)
{
	DT_GVG_GIFT_DATA_CLI *pstOut = (DT_GVG_GIFT_DATA_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSessionID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGvGRound))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBattleIdx))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBattleResult))
		return -1;

	if(-1 == DecodeDT_GIFT_DETAILS_LST_INFO(&pstOut->stGiftInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGiftGetState))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGiftID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGiftType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRank))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GVG_GIFT_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_GVG_GIFT_DATA_LST_CLI *pstIn = (DT_GVG_GIFT_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byGiftNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GVG_GIFT_NUM; i++)
	{
		if(i >= (INT32)pstIn->byGiftNum)
			break;
		if(-1 == EncodeDT_GVG_GIFT_DATA_CLI(&pstIn->astGiftInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GVG_GIFT_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_GVG_GIFT_DATA_LST_CLI *pstOut = (DT_GVG_GIFT_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byGiftNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GVG_GIFT_NUM; i++)
	{
		if(i >= (INT32)pstOut->byGiftNum)
			break;
		if(-1 == DecodeDT_GVG_GIFT_DATA_CLI(&pstOut->astGiftInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GVG_GIFT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_GIFT_REQ *pstIn = (PKT_CLIGS_OPEN_GVG_GIFT_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GVG_GIFT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_GIFT_REQ *pstOut = (PKT_CLIGS_OPEN_GVG_GIFT_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GVG_GIFT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_GIFT_ACK *pstIn = (PKT_CLIGS_OPEN_GVG_GIFT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GVG_GIFT_DATA_LST_CLI(&pstIn->stGiftLstInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GVG_GIFT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_GIFT_ACK *pstOut = (PKT_CLIGS_OPEN_GVG_GIFT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GVG_GIFT_DATA_LST_CLI(&pstOut->stGiftLstInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_GVG_GIFT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_GVG_GIFT_REQ *pstIn = (PKT_CLIGS_GET_GVG_GIFT_REQ*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwGiftID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_GVG_GIFT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_GVG_GIFT_REQ *pstOut = (PKT_CLIGS_GET_GVG_GIFT_REQ*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwGiftID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GET_GVG_GIFT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_GVG_GIFT_ACK *pstIn = (PKT_CLIGS_GET_GVG_GIFT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stSyncInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwGiftID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLeftGiftNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GET_GVG_GIFT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GET_GVG_GIFT_ACK *pstOut = (PKT_CLIGS_GET_GVG_GIFT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stSyncInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwGiftID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLeftGiftNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_APPLY_GVG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_APPLY_GVG_REQ *pstIn = (PKT_CLIGS_APPLY_GVG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_APPLY_GVG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_APPLY_GVG_REQ *pstOut = (PKT_CLIGS_APPLY_GVG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_APPLY_GVG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_APPLY_GVG_ACK *pstIn = (PKT_CLIGS_APPLY_GVG_ACK*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_APPLY_GVG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_APPLY_GVG_ACK *pstOut = (PKT_CLIGS_APPLY_GVG_ACK*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FINAL_WAR_FACTION_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_FINAL_WAR_FACTION_INFO_CLI *pstIn = (DT_FINAL_WAR_FACTION_INFO_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byRank))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwZoneID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFactionIconID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFactionLevel))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwSumPower))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJoinNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScore))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwVideoID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszZoneName, sizeof(pstIn->aszZoneName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FINAL_WAR_FACTION_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_FINAL_WAR_FACTION_INFO_CLI *pstOut = (DT_FINAL_WAR_FACTION_INFO_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byRank))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwZoneID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFactionIconID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFactionLevel))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwSumPower))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJoinNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScore))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwVideoID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszZoneName, sizeof(pstOut->aszZoneName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GVG_LOG_RESET_UNREAD_CNT_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_LOG_RESET_UNREAD_CNT_NTF *pstIn = (PKT_CLIGS_OPEN_GVG_LOG_RESET_UNREAD_CNT_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byUnReadCnt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GVG_LOG_RESET_UNREAD_CNT_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_LOG_RESET_UNREAD_CNT_NTF *pstOut = (PKT_CLIGS_OPEN_GVG_LOG_RESET_UNREAD_CNT_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byUnReadCnt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GVG_LOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_LOG_REQ *pstIn = (PKT_CLIGS_OPEN_GVG_LOG_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GVG_LOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_LOG_REQ *pstOut = (PKT_CLIGS_OPEN_GVG_LOG_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_GVG_LOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_LOG_ACK *pstIn = (PKT_CLIGS_OPEN_GVG_LOG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_FACTION_GVG_LOG(&pstIn->stLog, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwRefreshTime))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_GVG_LOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_GVG_LOG_ACK *pstOut = (PKT_CLIGS_OPEN_GVG_LOG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_FACTION_GVG_LOG(&pstOut->stLog, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwRefreshTime))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_16_TO_8_TO_4_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_16_TO_8_TO_4_ACK *pstIn = (PKT_CLIGS_16_TO_8_TO_4_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GVG_SCHEDULE_INFO(&pstIn->stScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNextRound))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCountDownTime))
		return -1;

	INT32 i;
	for(i = 0; i < GVG_16_TO_8_FACTION_CNT; i++)
	{
		if(-1 == EncodeDT_FACTION_BASE_DATA_CLI2(&pstIn->astFactionList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byWin8Cnt))
		return -1;

	for(i = 0; i < GVG_16_TO_8_WIN_CNT; i++)
	{
		if(i >= (INT32)pstIn->byWin8Cnt)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyWin8List[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byWin4Cnt))
		return -1;

	for(i = 0; i < GVG_8_TO_4_WIN_CNT; i++)
	{
		if(i >= (INT32)pstIn->byWin4Cnt)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyWin4List[i]))
			return -1;
	}

	for(i = 0; i < GVG_16_TO_8_WIN_CNT; i++)
	{
		if(-1 == poNetData->AddUint64(pstIn->aqwVideoIDList16To8[i]))
			return -1;
	}

	for(i = 0; i < GVG_8_TO_4_WIN_CNT; i++)
	{
		if(-1 == poNetData->AddUint64(pstIn->aqwVideoIDList8To4[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byGamblePos))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_16_TO_8_TO_4_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_16_TO_8_TO_4_ACK *pstOut = (PKT_CLIGS_16_TO_8_TO_4_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GVG_SCHEDULE_INFO(&pstOut->stScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNextRound))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCountDownTime))
		return -1;

	INT32 i;
		for(i = 0; i < GVG_16_TO_8_FACTION_CNT; i++)
		{
			if(-1 == DecodeDT_FACTION_BASE_DATA_CLI2(&pstOut->astFactionList[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelByte(pstOut->byWin8Cnt))
		return -1;

	for(i = 0; i < GVG_16_TO_8_WIN_CNT; i++)
	{
		if(i >= (INT32)pstOut->byWin8Cnt)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyWin8List[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byWin4Cnt))
		return -1;

	for(i = 0; i < GVG_8_TO_4_WIN_CNT; i++)
	{
		if(i >= (INT32)pstOut->byWin4Cnt)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyWin4List[i]))
			return -1;
	}

	for(i = 0; i < GVG_16_TO_8_WIN_CNT; i++)
	{
		if(-1 == poNetData->DelUint64(pstOut->aqwVideoIDList16To8[i]))
			return -1;
	}

	for(i = 0; i < GVG_8_TO_4_WIN_CNT; i++)
	{
		if(-1 == poNetData->DelUint64(pstOut->aqwVideoIDList8To4[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byGamblePos))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FINAL_WAR_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FINAL_WAR_ACK *pstIn = (PKT_CLIGS_FINAL_WAR_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GVG_SCHEDULE_INFO(&pstIn->stScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byFactionCnt))
		return -1;

	INT32 i;
	for(i = 0; i < GVG_FINAL_WAR_FACTION_CNT; i++)
	{
		if(i >= (INT32)pstIn->byFactionCnt)
			break;
		if(-1 == EncodeDT_FINAL_WAR_FACTION_INFO_CLI(&pstIn->astFactionList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwCountDwonTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPassedStageCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTotalStage))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurStage))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGambleFactionID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FINAL_WAR_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FINAL_WAR_ACK *pstOut = (PKT_CLIGS_FINAL_WAR_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GVG_SCHEDULE_INFO(&pstOut->stScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byFactionCnt))
		return -1;

	INT32 i;
	for(i = 0; i < GVG_FINAL_WAR_FACTION_CNT; i++)
	{
		if(i >= (INT32)pstOut->byFactionCnt)
			break;
		if(-1 == DecodeDT_FINAL_WAR_FACTION_INFO_CLI(&pstOut->astFactionList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwCountDwonTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPassedStageCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTotalStage))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurStage))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGambleFactionID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_CHAMPION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_CHAMPION_ACK *pstIn = (PKT_CLIGS_GVG_CHAMPION_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_GVG_SCHEDULE_INFO(&pstIn->stScheduleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_FACTION_RANK_LST_DATA(&pstIn->stNo123, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_CHAMPION_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_CHAMPION_ACK *pstOut = (PKT_CLIGS_GVG_CHAMPION_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_GVG_SCHEDULE_INFO(&pstOut->stScheduleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_FACTION_RANK_LST_DATA(&pstOut->stNo123, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_ERR_MSG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_ERR_MSG_ACK *pstIn = (PKT_CLIGS_GVG_ERR_MSG_ACK*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszErrMsg, sizeof(pstIn->aszErrMsg)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_ERR_MSG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_ERR_MSG_ACK *pstOut = (PKT_CLIGS_GVG_ERR_MSG_ACK*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszErrMsg, sizeof(pstOut->aszErrMsg)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GVG_VIDEO_FACTION_INFO(void *pHost, CNetData* poNetData)
{
	DT_GVG_VIDEO_FACTION_INFO *pstIn = (DT_GVG_VIDEO_FACTION_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFactionIconID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszFactionName, sizeof(pstIn->aszFactionName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszNickName, sizeof(pstIn->aszNickName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byJob))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRemainPlayerCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byKillCombo))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszZoneName, sizeof(pstIn->aszZoneName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GVG_VIDEO_FACTION_INFO(void *pHost, CNetData* poNetData)
{
	DT_GVG_VIDEO_FACTION_INFO *pstOut = (DT_GVG_VIDEO_FACTION_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFactionIconID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszFactionName, sizeof(pstOut->aszFactionName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszNickName, sizeof(pstOut->aszNickName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byJob))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRemainPlayerCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byKillCombo))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszZoneName, sizeof(pstOut->aszZoneName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEE_GVG_VIDEO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEE_GVG_VIDEO_REQ *pstIn = (PKT_CLIGS_SEE_GVG_VIDEO_REQ*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwVideoID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVideoNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEE_GVG_VIDEO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEE_GVG_VIDEO_REQ *pstOut = (PKT_CLIGS_SEE_GVG_VIDEO_REQ*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwVideoID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVideoNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEE_GVG_VIDEO_ACK_v400(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEE_GVG_VIDEO_ACK_v400 *pstIn = (PKT_CLIGS_SEE_GVG_VIDEO_ACK_v400*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwVideoID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVideoNum))
		return -1;

	if(-1 == EncodeDT_GVG_VIDEO_FACTION_INFO(&pstIn->stG1, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_VIDEO_FACTION_INFO(&pstIn->stG2, poNetData))
		return -1;

	if(-1 == EncodeDT_EMPTY_HP_VIDEO_v400(&pstIn->stVideo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveNextVideo))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnegy1))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnegy2))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsWeak1))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsWeak2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEE_GVG_VIDEO_ACK_v400(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEE_GVG_VIDEO_ACK_v400 *pstOut = (PKT_CLIGS_SEE_GVG_VIDEO_ACK_v400*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwVideoID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVideoNum))
		return -1;

	if(-1 == DecodeDT_GVG_VIDEO_FACTION_INFO(&pstOut->stG1, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_VIDEO_FACTION_INFO(&pstOut->stG2, poNetData))
		return -1;

	if(-1 == DecodeDT_EMPTY_HP_VIDEO_v400(&pstOut->stVideo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveNextVideo))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnegy1))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnegy2))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsWeak1))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsWeak2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SEE_GVG_VIDEO_ACK_v410(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEE_GVG_VIDEO_ACK_v410 *pstIn = (PKT_CLIGS_SEE_GVG_VIDEO_ACK_v410*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwVideoID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byVideoNum))
		return -1;

	if(-1 == EncodeDT_GVG_VIDEO_FACTION_INFO(&pstIn->stG1, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_VIDEO_FACTION_INFO(&pstIn->stG2, poNetData))
		return -1;

	if(-1 == EncodeDT_EMPTY_HP_VIDEO(&pstIn->stVideo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveNextVideo))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnegy1))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnegy2))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsWeak1))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsWeak2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SEE_GVG_VIDEO_ACK_v410(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SEE_GVG_VIDEO_ACK_v410 *pstOut = (PKT_CLIGS_SEE_GVG_VIDEO_ACK_v410*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwVideoID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byVideoNum))
		return -1;

	if(-1 == DecodeDT_GVG_VIDEO_FACTION_INFO(&pstOut->stG1, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_VIDEO_FACTION_INFO(&pstOut->stG2, poNetData))
		return -1;

	if(-1 == DecodeDT_EMPTY_HP_VIDEO(&pstOut->stVideo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveNextVideo))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnegy1))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnegy2))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsWeak1))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsWeak2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_END_GVG_VIDEO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_END_GVG_VIDEO_REQ *pstIn = (PKT_CLIGS_END_GVG_VIDEO_REQ*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwVideoID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEndType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_END_GVG_VIDEO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_END_GVG_VIDEO_REQ *pstOut = (PKT_CLIGS_END_GVG_VIDEO_REQ*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwVideoID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEndType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_END_GVG_VIDEO_ACK_v400(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_END_GVG_VIDEO_ACK_v400 *pstIn = (PKT_CLIGS_END_GVG_VIDEO_ACK_v400*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwVideoID))
		return -1;

	if(-1 == EncodeDT_GVG_VIDEO_FACTION_INFO(&pstIn->stG1, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_VIDEO_FACTION_INFO(&pstIn->stG2, poNetData))
		return -1;

	if(-1 == EncodeDT_EMPTY_HP_VIDEO_v400(&pstIn->stVideo, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_MVP_LIST(&pstIn->stMVPList, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEndType))
		return -1;

	if(-1 == EncodeDT_GVG_ROUND(&pstIn->stRound, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_END_GVG_VIDEO_ACK_v400(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_END_GVG_VIDEO_ACK_v400 *pstOut = (PKT_CLIGS_END_GVG_VIDEO_ACK_v400*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwVideoID))
		return -1;

	if(-1 == DecodeDT_GVG_VIDEO_FACTION_INFO(&pstOut->stG1, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_VIDEO_FACTION_INFO(&pstOut->stG2, poNetData))
		return -1;

	if(-1 == DecodeDT_EMPTY_HP_VIDEO_v400(&pstOut->stVideo, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_MVP_LIST(&pstOut->stMVPList, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEndType))
		return -1;

	if(-1 == DecodeDT_GVG_ROUND(&pstOut->stRound, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_END_GVG_VIDEO_ACK_v410(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_END_GVG_VIDEO_ACK_v410 *pstIn = (PKT_CLIGS_END_GVG_VIDEO_ACK_v410*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwVideoID))
		return -1;

	if(-1 == EncodeDT_GVG_VIDEO_FACTION_INFO(&pstIn->stG1, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_VIDEO_FACTION_INFO(&pstIn->stG2, poNetData))
		return -1;

	if(-1 == EncodeDT_EMPTY_HP_VIDEO(&pstIn->stVideo, poNetData))
		return -1;

	if(-1 == EncodeDT_GVG_MVP_LIST(&pstIn->stMVPList, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEndType))
		return -1;

	if(-1 == EncodeDT_GVG_ROUND(&pstIn->stRound, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_END_GVG_VIDEO_ACK_v410(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_END_GVG_VIDEO_ACK_v410 *pstOut = (PKT_CLIGS_END_GVG_VIDEO_ACK_v410*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwVideoID))
		return -1;

	if(-1 == DecodeDT_GVG_VIDEO_FACTION_INFO(&pstOut->stG1, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_VIDEO_FACTION_INFO(&pstOut->stG2, poNetData))
		return -1;

	if(-1 == DecodeDT_EMPTY_HP_VIDEO(&pstOut->stVideo, poNetData))
		return -1;

	if(-1 == DecodeDT_GVG_MVP_LIST(&pstOut->stMVPList, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEndType))
		return -1;

	if(-1 == DecodeDT_GVG_ROUND(&pstOut->stRound, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SHOW_GVG_MVP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SHOW_GVG_MVP_REQ *pstIn = (PKT_CLIGS_SHOW_GVG_MVP_REQ*)pHost;

	if(-1 == poNetData->AddUint64(pstIn->qwVideoID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SHOW_GVG_MVP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SHOW_GVG_MVP_REQ *pstOut = (PKT_CLIGS_SHOW_GVG_MVP_REQ*)pHost;

	if(-1 == poNetData->DelUint64(pstOut->qwVideoID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SHOW_GVG_MVP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SHOW_GVG_MVP_ACK *pstIn = (PKT_CLIGS_SHOW_GVG_MVP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwVideoID))
		return -1;

	if(-1 == EncodeDT_GVG_MVP_LIST(&pstIn->stMVPList, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SHOW_GVG_MVP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SHOW_GVG_MVP_ACK *pstOut = (PKT_CLIGS_SHOW_GVG_MVP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwVideoID))
		return -1;

	if(-1 == DecodeDT_GVG_MVP_LIST(&pstOut->stMVPList, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SELECT_GROUP_TYPE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_GROUP_TYPE_REQ *pstIn = (PKT_CLIGS_SELECT_GROUP_TYPE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->bySelect))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SELECT_GROUP_TYPE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_GROUP_TYPE_REQ *pstOut = (PKT_CLIGS_SELECT_GROUP_TYPE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->bySelect))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SELECT_GROUP_TYPE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_GROUP_TYPE_ACK *pstIn = (PKT_CLIGS_SELECT_GROUP_TYPE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstIn->stGroupData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySelect))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SELECT_GROUP_TYPE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SELECT_GROUP_TYPE_ACK *pstOut = (PKT_CLIGS_SELECT_GROUP_TYPE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_COURAGE_GROUP_DATA_CLI_LST(&pstOut->stGroupData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySelect))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_FACTION_APPLAY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_FACTION_APPLAY_REQ *pstIn = (PKT_CLIGS_GVG_FACTION_APPLAY_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_FACTION_APPLAY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_FACTION_APPLAY_REQ *pstOut = (PKT_CLIGS_GVG_FACTION_APPLAY_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_GVG_FACTION_APPLAY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_FACTION_APPLAY_ACK *pstIn = (PKT_CLIGS_GVG_FACTION_APPLAY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_GVG_FACTION_APPLAY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_GVG_FACTION_APPLAY_ACK *pstOut = (PKT_CLIGS_GVG_FACTION_APPLAY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_READ_BATTLE_LOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_READ_BATTLE_LOG_REQ *pstIn = (PKT_CLIGS_READ_BATTLE_LOG_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byKindID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_READ_BATTLE_LOG_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_READ_BATTLE_LOG_REQ *pstOut = (PKT_CLIGS_READ_BATTLE_LOG_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byKindID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BATTLE_LOG_MSG_CLI(void *pHost, CNetData* poNetData)
{
	DT_BATTLE_LOG_MSG_CLI *pstIn = (DT_BATTLE_LOG_MSG_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byLogType))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwLogTime))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byParamNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BATTLE_LOG_PARAM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byParamNum)
			break;
		if(-1 == poNetData->AddUint64(pstIn->aqwParamLst[i]))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byStrNum))
		return -1;

	for(i = 0; i < MAX_BATTLE_LOG_PARAM_STR; i++)
	{
		if(i >= (INT32)pstIn->byStrNum)
			break;
		if(-1 == EncodeDT_TSTRING_MSG(&pstIn->astStrLst[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BATTLE_LOG_MSG_CLI(void *pHost, CNetData* poNetData)
{
	DT_BATTLE_LOG_MSG_CLI *pstOut = (DT_BATTLE_LOG_MSG_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byLogType))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwLogTime))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byParamNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BATTLE_LOG_PARAM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byParamNum)
			break;
		if(-1 == poNetData->DelUint64(pstOut->aqwParamLst[i]))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byStrNum))
		return -1;

	for(i = 0; i < MAX_BATTLE_LOG_PARAM_STR; i++)
	{
		if(i >= (INT32)pstOut->byStrNum)
			break;
		if(-1 == DecodeDT_TSTRING_MSG(&pstOut->astStrLst[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_BATTLE_LOG_MSG_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_BATTLE_LOG_MSG_LST_CLI *pstIn = (DT_BATTLE_LOG_MSG_LST_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BATTLE_LOG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byLogNum)
			break;
		if(-1 == EncodeDT_BATTLE_LOG_MSG_CLI(&pstIn->astLogData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BATTLE_LOG_MSG_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_BATTLE_LOG_MSG_LST_CLI *pstOut = (DT_BATTLE_LOG_MSG_LST_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BATTLE_LOG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byLogNum)
			break;
		if(-1 == DecodeDT_BATTLE_LOG_MSG_CLI(&pstOut->astLogData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_READ_BATTLE_LOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_READ_BATTLE_LOG_ACK *pstIn = (PKT_CLIGS_READ_BATTLE_LOG_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLogType))
		return -1;

	if(-1 == EncodeDT_BATTLE_LOG_MSG_LST_CLI(&pstIn->stLogInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_READ_BATTLE_LOG_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_READ_BATTLE_LOG_ACK *pstOut = (PKT_CLIGS_READ_BATTLE_LOG_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLogType))
		return -1;

	if(-1 == DecodeDT_BATTLE_LOG_MSG_LST_CLI(&pstOut->stLogInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BATTLE_LOG_UNREAD_INFO(void *pHost, CNetData* poNetData)
{
	DT_BATTLE_LOG_UNREAD_INFO *pstIn = (DT_BATTLE_LOG_UNREAD_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byLogType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUnReadNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BATTLE_LOG_UNREAD_INFO(void *pHost, CNetData* poNetData)
{
	DT_BATTLE_LOG_UNREAD_INFO *pstOut = (DT_BATTLE_LOG_UNREAD_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byLogType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUnReadNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UNREAD_BATTLE_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UNREAD_BATTLE_NTF *pstIn = (PKT_CLIGS_UNREAD_BATTLE_NTF*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BATTLE_LOG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byLogNum)
			break;
		if(-1 == EncodeDT_BATTLE_LOG_UNREAD_INFO(&pstIn->astLogInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UNREAD_BATTLE_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UNREAD_BATTLE_NTF *pstOut = (PKT_CLIGS_UNREAD_BATTLE_NTF*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byLogNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BATTLE_LOG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byLogNum)
			break;
		if(-1 == DecodeDT_BATTLE_LOG_UNREAD_INFO(&pstOut->astLogInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BATTLE_ACK4(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BATTLE_ACK4 *pstIn = (PKT_CLIGS_BATTLE_ACK4*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_ENCOURAGE_DATA(&pstIn->stBattleEncourage, poNetData))
		return -1;

	if(-1 == EncodeDT_DATA_AFTER_BATTLE_ENCOURAGE(&pstIn->stAfterBattleEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPassFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_DATA(&pstIn->astPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_DATA_AFTER_PASS_ENCOURAGE(&pstIn->astAfterPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_DATA(&pstIn->astPassEncourageBox[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_UNLOCK_DATA(&pstIn->astUnlockInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHaveNextInstance))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveNextInstance)
			break;
		if(-1 == EncodeDT_NEXT_INSTANCE_DATA(&pstIn->astNextInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stPhyStrengthInfo, poNetData))
		return -1;

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyGuide[i]))
			return -1;
	}

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszExtContext, sizeof(pstIn->aszExtContext)))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA4(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BATTLE_ACK4(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BATTLE_ACK4 *pstOut = (PKT_CLIGS_BATTLE_ACK4*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_ENCOURAGE_DATA(&pstOut->stBattleEncourage, poNetData))
		return -1;

	if(-1 == DecodeDT_DATA_AFTER_BATTLE_ENCOURAGE(&pstOut->stAfterBattleEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPassFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_DATA(&pstOut->astPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_DATA_AFTER_PASS_ENCOURAGE(&pstOut->astAfterPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_DATA(&pstOut->astPassEncourageBox[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_UNLOCK_DATA(&pstOut->astUnlockInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHaveNextInstance))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveNextInstance)
			break;
		if(-1 == DecodeDT_NEXT_INSTANCE_DATA(&pstOut->astNextInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stPhyStrengthInfo, poNetData))
		return -1;

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyGuide[i]))
			return -1;
	}

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszExtContext, sizeof(pstOut->aszExtContext)))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA4(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHALLENGE_ACK4(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_ACK4 *pstIn = (PKT_CLIGS_CHALLENGE_ACK4*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_CHALLENGE_PLAYER_DATA(&pstIn->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEnemyHeroNum)
			break;
		if(-1 == EncodeDT_ENEMY_HERO_DATA(&pstIn->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_RACE_CHALLENGE_ENCOURAGE_DATA(&pstIn->stChallengeEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA4(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHALLENGE_ACK4(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_ACK4 *pstOut = (PKT_CLIGS_CHALLENGE_ACK4*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_CHALLENGE_PLAYER_DATA(&pstOut->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEnemyHeroNum)
			break;
		if(-1 == DecodeDT_ENEMY_HERO_DATA(&pstOut->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_RACE_CHALLENGE_ENCOURAGE_DATA(&pstOut->stChallengeEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA4(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLUNDER_ACK4(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_ACK4 *pstIn = (PKT_CLIGS_PLUNDER_ACK4*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEnemyID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCaptureID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUseItemFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byResistFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureGridIdx))
		return -1;

	if(-1 == EncodeDT_BECAPTURE_DATA(&pstIn->stBeCaptureInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CHALLENGE_PLAYER_DATA(&pstIn->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEnemyHeroNum)
			break;
		if(-1 == EncodeDT_ENEMY_HERO_DATA(&pstIn->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_PLUNDER_ENCOURAGE_DATA(&pstIn->stPlunderEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipExtNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreePlunderNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlunderGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlunderItemNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byCaptureFlag)
			break;
		if(-1 == EncodeDT_CAPTURE_DATA_CLI(&pstIn->astCaptureInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA4(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLUNDER_ACK4(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_ACK4 *pstOut = (PKT_CLIGS_PLUNDER_ACK4*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEnemyID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCaptureID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUseItemFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byResistFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureGridIdx))
		return -1;

	if(-1 == DecodeDT_BECAPTURE_DATA(&pstOut->stBeCaptureInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CHALLENGE_PLAYER_DATA(&pstOut->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEnemyHeroNum)
			break;
		if(-1 == DecodeDT_ENEMY_HERO_DATA(&pstOut->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_PLUNDER_ENCOURAGE_DATA(&pstOut->stPlunderEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipExtNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreePlunderNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlunderGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlunderItemNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byCaptureFlag)
			break;
		if(-1 == DecodeDT_CAPTURE_DATA_CLI(&pstOut->astCaptureInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA4(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PKBATTLE_ACK4(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PKBATTLE_ACK4 *pstIn = (PKT_CLIGS_PKBATTLE_ACK4*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA4(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PKBATTLE_ACK4(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PKBATTLE_ACK4 *pstOut = (PKT_CLIGS_PKBATTLE_ACK4*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA4(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RDCHALLENGE_ACK4(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RDCHALLENGE_ACK4 *pstIn = (PKT_CLIGS_RDCHALLENGE_ACK4*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RDC_TAB_DATA(&pstIn->stTabInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RDC_ENC_DATA(&pstIn->stEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA4(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RDCHALLENGE_ACK4(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RDCHALLENGE_ACK4 *pstOut = (PKT_CLIGS_RDCHALLENGE_ACK4*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RDC_TAB_DATA(&pstOut->stTabInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RDC_ENC_DATA(&pstOut->stEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA4(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HUNTING_BATTLE_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HUNTING_BATTLE_ACK3 *pstIn = (PKT_CLIGS_HUNTING_BATTLE_ACK3*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_REWARD_INFO(&pstIn->stBattleReward, poNetData))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO(&pstIn->stTaskScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClosedMonsterNeedGold))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszBattleLostMsg, sizeof(pstIn->aszBattleLostMsg)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSyncDoorsTribute))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byScheduleChangeFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHuntingLeftNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsGoldMode))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO2(&pstIn->stNewHuntingScheduleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA4(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HUNTING_BATTLE_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HUNTING_BATTLE_ACK3 *pstOut = (PKT_CLIGS_HUNTING_BATTLE_ACK3*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_REWARD_INFO(&pstOut->stBattleReward, poNetData))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO(&pstOut->stTaskScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClosedMonsterNeedGold))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszBattleLostMsg, sizeof(pstOut->aszBattleLostMsg)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSyncDoorsTribute))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byScheduleChangeFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHuntingLeftNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsGoldMode))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO2(&pstOut->stNewHuntingScheduleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA4(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_PLAYER_BATTLE_DATA3(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_PLAYER_BATTLE_DATA3 *pstIn = (DT_COURAGE_PLAYER_BATTLE_DATA3*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBattleNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COURAGE_MEMBER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBattleNum)
			break;
		if(-1 == EncodeDT_BATTLE_DATA4(&pstIn->astBattleInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_PLAYER_BATTLE_DATA3(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_PLAYER_BATTLE_DATA3 *pstOut = (DT_COURAGE_PLAYER_BATTLE_DATA3*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBattleNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COURAGE_MEMBER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBattleNum)
			break;
		if(-1 == DecodeDT_BATTLE_DATA4(&pstOut->astBattleInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_PLAYER_START_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_START_ACK3 *pstIn = (PKT_CLIGS_COURAGE_PLAYER_START_ACK3*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_MONSTER_DATA_LIST(&pstIn->stMonsterInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_COURAGE_GROUP_PLAYER_BATTLE_DATA(&pstIn->stGroupPlayerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPassFlag))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	if(-1 == EncodeDT_COURAGE_JEWELRY_DATA_LST(&pstIn->stjewelryInfoLst, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHelpID))
		return -1;

	if(-1 == EncodeDT_COURAGE_PLAYER_BATTLE_DATA3(&pstIn->stBattleInfoCli, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_PLAYER_START_ACK3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_START_ACK3 *pstOut = (PKT_CLIGS_COURAGE_PLAYER_START_ACK3*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_MONSTER_DATA_LIST(&pstOut->stMonsterInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_COURAGE_GROUP_PLAYER_BATTLE_DATA(&pstOut->stGroupPlayerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPassFlag))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	if(-1 == DecodeDT_COURAGE_JEWELRY_DATA_LST(&pstOut->stjewelryInfoLst, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHelpID))
		return -1;

	if(-1 == DecodeDT_COURAGE_PLAYER_BATTLE_DATA3(&pstOut->stBattleInfoCli, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_LEADER_START_NTF3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_LEADER_START_NTF3 *pstIn = (PKT_CLIGS_COURAGE_LEADER_START_NTF3*)pHost;

	if(-1 == EncodePKT_CLIGS_COURAGE_PLAYER_START_ACK3(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_LEADER_START_NTF3(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_LEADER_START_NTF3 *pstOut = (PKT_CLIGS_COURAGE_LEADER_START_NTF3*)pHost;

	if(-1 == DecodePKT_CLIGS_COURAGE_PLAYER_START_ACK3(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BEGIN_JIEBIAO_ACK4(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_JIEBIAO_ACK4 *pstIn = (PKT_CLIGS_BEGIN_JIEBIAO_ACK4*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byYabiaoFlag))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBeJiebiaoPlayerID))
		return -1;

	if(-1 == EncodeBIAO_OPERATE_INFO(&pstIn->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJiebiaoPlayerID))
		return -1;

	if(-1 == EncodeBIAO_OPERATE_INFO(&pstIn->stJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJiebiaoCD))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA4(&pstIn->stBattleData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BEGIN_JIEBIAO_ACK4(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_JIEBIAO_ACK4 *pstOut = (PKT_CLIGS_BEGIN_JIEBIAO_ACK4*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byYabiaoFlag))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBeJiebiaoPlayerID))
		return -1;

	if(-1 == DecodeBIAO_OPERATE_INFO(&pstOut->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJiebiaoPlayerID))
		return -1;

	if(-1 == DecodeBIAO_OPERATE_INFO(&pstOut->stJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJiebiaoCD))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA4(&pstOut->stBattleData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK4(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_BATTLE_RECORD_ACK4 *pstIn = (PKT_CLIGS_QUERY_BATTLE_RECORD_ACK4*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA4(&pstIn->stBattleData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK4(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_BATTLE_RECORD_ACK4 *pstOut = (PKT_CLIGS_QUERY_BATTLE_RECORD_ACK4*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA4(&pstOut->stBattleData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CLIGS_SOUL_MARK_DATA(void *pHost, CNetData* poNetData)
{
	DT_CLIGS_SOUL_MARK_DATA *pstIn = (DT_CLIGS_SOUL_MARK_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroId))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSoulID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSoulIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CLIGS_SOUL_MARK_DATA(void *pHost, CNetData* poNetData)
{
	DT_CLIGS_SOUL_MARK_DATA *pstOut = (DT_CLIGS_SOUL_MARK_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroId))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSoulID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSoulIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CLIGS_SOUL_MARK_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_CLIGS_SOUL_MARK_LST_DATA *pstIn = (DT_CLIGS_SOUL_MARK_LST_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSoulNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_BAG_NUM; i++)
	{
		if(i >= (INT32)pstIn->wSoulNum)
			break;
		if(-1 == EncodeDT_CLIGS_SOUL_MARK_DATA(&pstIn->astSoulLstMark[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CLIGS_SOUL_MARK_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_CLIGS_SOUL_MARK_LST_DATA *pstOut = (DT_CLIGS_SOUL_MARK_LST_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSoulNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_BAG_NUM; i++)
	{
		if(i >= (INT32)pstOut->wSoulNum)
			break;
		if(-1 == DecodeDT_CLIGS_SOUL_MARK_DATA(&pstOut->astSoulLstMark[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DEVOUR_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DEVOUR_SOUL_REQ *pstIn = (PKT_CLIGS_OPEN_DEVOUR_SOUL_REQ*)pHost;

	if(-1 == EncodeDT_CLIGS_SOUL_MARK_DATA(&pstIn->stSoulID, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DEVOUR_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DEVOUR_SOUL_REQ *pstOut = (PKT_CLIGS_OPEN_DEVOUR_SOUL_REQ*)pHost;

	if(-1 == DecodeDT_CLIGS_SOUL_MARK_DATA(&pstOut->stSoulID, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_DEVOUR_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DEVOUR_SOUL_ACK *pstIn = (PKT_CLIGS_OPEN_DEVOUR_SOUL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SOUL_DATA_LST_CLI(&pstIn->stSoulBag, poNetData))
		return -1;

	if(-1 == EncodeDT_SOUL_DATA_CLI(&pstIn->stMainSoul, poNetData))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_LST_DATA(&pstIn->stResData, poNetData))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_DATA(&pstIn->stCostRes, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAttrUpPer))
		return -1;

	if(-1 == EncodeDT_SOUL_POTENCY_CLI(&pstIn->stPotencyInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_DEVOUR_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_DEVOUR_SOUL_ACK *pstOut = (PKT_CLIGS_OPEN_DEVOUR_SOUL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SOUL_DATA_LST_CLI(&pstOut->stSoulBag, poNetData))
		return -1;

	if(-1 == DecodeDT_SOUL_DATA_CLI(&pstOut->stMainSoul, poNetData))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_LST_DATA(&pstOut->stResData, poNetData))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_DATA(&pstOut->stCostRes, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAttrUpPer))
		return -1;

	if(-1 == DecodeDT_SOUL_POTENCY_CLI(&pstOut->stPotencyInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DEVOUR_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEVOUR_SOUL_REQ *pstIn = (PKT_CLIGS_DEVOUR_SOUL_REQ*)pHost;

	if(-1 == EncodeDT_CLIGS_SOUL_MARK_DATA(&pstIn->stMainSoul, poNetData))
		return -1;

	if(-1 == EncodeDT_CLIGS_SOUL_MARK_LST_DATA(&pstIn->stDevourSoul, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DEVOUR_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEVOUR_SOUL_REQ *pstOut = (PKT_CLIGS_DEVOUR_SOUL_REQ*)pHost;

	if(-1 == DecodeDT_CLIGS_SOUL_MARK_DATA(&pstOut->stMainSoul, poNetData))
		return -1;

	if(-1 == DecodeDT_CLIGS_SOUL_MARK_LST_DATA(&pstOut->stDevourSoul, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DEVOUR_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEVOUR_SOUL_ACK *pstIn = (PKT_CLIGS_DEVOUR_SOUL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SOUL_DATA_LST_CLI(&pstIn->stSoulBag, poNetData))
		return -1;

	if(-1 == EncodeDT_SOUL_DATA_CLI(&pstIn->stMainSoul, poNetData))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_LST_DATA(&pstIn->stResData, poNetData))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_DATA(&pstIn->stCostRes, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_PANEL_CLI(&pstIn->stHeroInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byAttrUpPer))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DEVOUR_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DEVOUR_SOUL_ACK *pstOut = (PKT_CLIGS_DEVOUR_SOUL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SOUL_DATA_LST_CLI(&pstOut->stSoulBag, poNetData))
		return -1;

	if(-1 == DecodeDT_SOUL_DATA_CLI(&pstOut->stMainSoul, poNetData))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_LST_DATA(&pstOut->stResData, poNetData))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_DATA(&pstOut->stCostRes, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_PANEL_CLI(&pstOut->stHeroInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byAttrUpPer))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_REFLASH_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_REFLASH_SOUL_REQ *pstIn = (PKT_CLIGS_OPEN_REFLASH_SOUL_REQ*)pHost;

	if(-1 == EncodeDT_CLIGS_SOUL_MARK_DATA(&pstIn->stMainSoul, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_REFLASH_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_REFLASH_SOUL_REQ *pstOut = (PKT_CLIGS_OPEN_REFLASH_SOUL_REQ*)pHost;

	if(-1 == DecodeDT_CLIGS_SOUL_MARK_DATA(&pstOut->stMainSoul, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_REFLASH_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_REFLASH_SOUL_ACK *pstIn = (PKT_CLIGS_OPEN_REFLASH_SOUL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SOUL_DATA_CLI(&pstIn->stSoulData, poNetData))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_LST_DATA(&pstIn->stResData, poNetData))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_DATA(&pstIn->stCostRes, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_REFLASH_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_REFLASH_SOUL_ACK *pstOut = (PKT_CLIGS_OPEN_REFLASH_SOUL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SOUL_DATA_CLI(&pstOut->stSoulData, poNetData))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_LST_DATA(&pstOut->stResData, poNetData))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_DATA(&pstOut->stCostRes, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REFLASH_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFLASH_SOUL_REQ *pstIn = (PKT_CLIGS_REFLASH_SOUL_REQ*)pHost;

	if(-1 == EncodeDT_CLIGS_SOUL_MARK_DATA(&pstIn->stMainSoul, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLockNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_ATTR_NUM; i++)
	{
		if(i >= (INT32)pstIn->byLockNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyLockIDLst[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REFLASH_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFLASH_SOUL_REQ *pstOut = (PKT_CLIGS_REFLASH_SOUL_REQ*)pHost;

	if(-1 == DecodeDT_CLIGS_SOUL_MARK_DATA(&pstOut->stMainSoul, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLockNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_ATTR_NUM; i++)
	{
		if(i >= (INT32)pstOut->byLockNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyLockIDLst[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REFLASH_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFLASH_SOUL_ACK *pstIn = (PKT_CLIGS_REFLASH_SOUL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SOUL_DATA_CLI(&pstIn->stSoulData, poNetData))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_LST_DATA(&pstIn->stResData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REFLASH_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFLASH_SOUL_ACK *pstOut = (PKT_CLIGS_REFLASH_SOUL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SOUL_DATA_CLI(&pstOut->stSoulData, poNetData))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_LST_DATA(&pstOut->stResData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SAVE_REFLASH_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SAVE_REFLASH_SOUL_REQ *pstIn = (PKT_CLIGS_SAVE_REFLASH_SOUL_REQ*)pHost;

	if(-1 == EncodeDT_CLIGS_SOUL_MARK_DATA(&pstIn->stMainSoul, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsSave))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SAVE_REFLASH_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SAVE_REFLASH_SOUL_REQ *pstOut = (PKT_CLIGS_SAVE_REFLASH_SOUL_REQ*)pHost;

	if(-1 == DecodeDT_CLIGS_SOUL_MARK_DATA(&pstOut->stMainSoul, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsSave))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SAVE_REFLASH_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SAVE_REFLASH_SOUL_ACK *pstIn = (PKT_CLIGS_SAVE_REFLASH_SOUL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SOUL_DATA_CLI(&pstIn->stSoulData, poNetData))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_LST_DATA(&pstIn->stResData, poNetData))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_DATA(&pstIn->stCostRes, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CLIGS_SOUL_MARK_DATA(&pstIn->stMainSoul, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_PANEL_CLI(&pstIn->stHeroInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SAVE_REFLASH_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SAVE_REFLASH_SOUL_ACK *pstOut = (PKT_CLIGS_SAVE_REFLASH_SOUL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SOUL_DATA_CLI(&pstOut->stSoulData, poNetData))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_LST_DATA(&pstOut->stResData, poNetData))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_DATA(&pstOut->stCostRes, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CLIGS_SOUL_MARK_DATA(&pstOut->stMainSoul, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_PANEL_CLI(&pstOut->stHeroInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_CLIGS_PRODUCTSOUL_COST(void *pHost, CNetData* poNetData)
{
	DT_CLIGS_PRODUCTSOUL_COST *pstIn = (DT_CLIGS_PRODUCTSOUL_COST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byCostType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_CLIGS_PRODUCTSOUL_COST(void *pHost, CNetData* poNetData)
{
	DT_CLIGS_PRODUCTSOUL_COST *pstOut = (DT_CLIGS_PRODUCTSOUL_COST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byCostType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SOUL_REP_INFO(void *pHost, CNetData* poNetData)
{
	DT_SOUL_REP_INFO *pstIn = (DT_SOUL_REP_INFO*)pHost;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_PRODUCT_TYPE; i++)
	{
		if(-1 == EncodeDT_CLIGS_PRODUCTSOUL_COST(&pstIn->astNormalCost[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_SOUL_PRODUCT_TYPE; i++)
	{
		if(-1 == EncodeDT_CLIGS_PRODUCTSOUL_COST(&pstIn->astContinusCost[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_SOUL_PRODUCT_TYPE; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyMinStar[i]))
			return -1;
	}

	for(i = 0; i < MAX_SOUL_PRODUCT_TYPE; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyMaxStar[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SOUL_REP_INFO(void *pHost, CNetData* poNetData)
{
	DT_SOUL_REP_INFO *pstOut = (DT_SOUL_REP_INFO*)pHost;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_SOUL_PRODUCT_TYPE; i++)
		{
			if(-1 == DecodeDT_CLIGS_PRODUCTSOUL_COST(&pstOut->astNormalCost[i], poNetData))
				return -1;
		}

		for(i = 0; i < MAX_SOUL_PRODUCT_TYPE; i++)
		{
			if(-1 == DecodeDT_CLIGS_PRODUCTSOUL_COST(&pstOut->astContinusCost[i], poNetData))
				return -1;
		}

	for(i = 0; i < MAX_SOUL_PRODUCT_TYPE; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyMinStar[i]))
			return -1;
	}

	for(i = 0; i < MAX_SOUL_PRODUCT_TYPE; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyMaxStar[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SOULREP_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SOULREP_INFO_REQ *pstIn = (PKT_CLIGS_SOULREP_INFO_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlaceholder))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SOULREP_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SOULREP_INFO_REQ *pstOut = (PKT_CLIGS_SOULREP_INFO_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlaceholder))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SOULREP_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SOULREP_INFO_ACK *pstIn = (PKT_CLIGS_SOULREP_INFO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SOUL_REP_INFO(&pstIn->stSoulRepInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOpenActivity))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SOULREP_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SOULREP_INFO_ACK *pstOut = (PKT_CLIGS_SOULREP_INFO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SOUL_REP_INFO(&pstOut->stSoulRepInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOpenActivity))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PRODUCT_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PRODUCT_SOUL_REQ *pstIn = (PKT_CLIGS_PRODUCT_SOUL_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byProductType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySearchType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PRODUCT_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PRODUCT_SOUL_REQ *pstOut = (PKT_CLIGS_PRODUCT_SOUL_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byProductType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySearchType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PRODUCT_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PRODUCT_SOUL_ACK *pstIn = (PKT_CLIGS_PRODUCT_SOUL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMeterialNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_CONTINUE_SEARCH; i++)
	{
		if(-1 == EncodeDT_GOODS_DATA_CLI(&pstIn->astMeterialGood[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->bySoulNum))
		return -1;

	for(i = 0; i < MAX_SOUL_CONTINUE_SEARCH; i++)
	{
		if(-1 == EncodeDT_SOUL_DATA_CLI(&pstIn->astSoulData[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_SOUL_REP_INFO(&pstIn->stSoulRepInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBoxType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PRODUCT_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PRODUCT_SOUL_ACK *pstOut = (PKT_CLIGS_PRODUCT_SOUL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMeterialNum))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_SOUL_CONTINUE_SEARCH; i++)
		{
			if(-1 == DecodeDT_GOODS_DATA_CLI(&pstOut->astMeterialGood[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelByte(pstOut->bySoulNum))
		return -1;

		for(i = 0; i < MAX_SOUL_CONTINUE_SEARCH; i++)
		{
			if(-1 == DecodeDT_SOUL_DATA_CLI(&pstOut->astSoulData[i], poNetData))
				return -1;
		}

	if(-1 == DecodeDT_SOUL_REP_INFO(&pstOut->stSoulRepInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBoxType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HERO_EQUIP_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HERO_EQUIP_SOUL_REQ *pstIn = (PKT_CLIGS_HERO_EQUIP_SOUL_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroId))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSoulID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSoulIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HERO_EQUIP_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HERO_EQUIP_SOUL_REQ *pstOut = (PKT_CLIGS_HERO_EQUIP_SOUL_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroId))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSoulID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSoulIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HERO_EQUIP_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HERO_EQUIP_SOUL_ACK *pstIn = (PKT_CLIGS_HERO_EQUIP_SOUL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSoulID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSoulIdx))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_PANEL_CLI(&pstIn->stHeroInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HERO_EQUIP_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HERO_EQUIP_SOUL_ACK *pstOut = (PKT_CLIGS_HERO_EQUIP_SOUL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSoulID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSoulIdx))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_PANEL_CLI(&pstOut->stHeroInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HERO_UNDRESS_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HERO_UNDRESS_SOUL_REQ *pstIn = (PKT_CLIGS_HERO_UNDRESS_SOUL_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroId))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSoulID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSoulIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HERO_UNDRESS_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HERO_UNDRESS_SOUL_REQ *pstOut = (PKT_CLIGS_HERO_UNDRESS_SOUL_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroId))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSoulID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSoulIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HERO_UNDRESS_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HERO_UNDRESS_SOUL_ACK *pstIn = (PKT_CLIGS_HERO_UNDRESS_SOUL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSoulID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSoulIdx))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_PANEL_CLI(&pstIn->stHeroInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HERO_UNDRESS_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HERO_UNDRESS_SOUL_ACK *pstOut = (PKT_CLIGS_HERO_UNDRESS_SOUL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSoulID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSoulIdx))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_PANEL_CLI(&pstOut->stHeroInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HERO_REPLACE_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HERO_REPLACE_SOUL_REQ *pstIn = (PKT_CLIGS_HERO_REPLACE_SOUL_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroId))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBagSoulID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBagSoulIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroSoulID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHeroSoulIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HERO_REPLACE_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HERO_REPLACE_SOUL_REQ *pstOut = (PKT_CLIGS_HERO_REPLACE_SOUL_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroId))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBagSoulID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBagSoulIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroSoulID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHeroSoulIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HERO_REPLACE_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HERO_REPLACE_SOUL_ACK *pstIn = (PKT_CLIGS_HERO_REPLACE_SOUL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBagSoulID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBagSoulIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroSoulID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwHeroSoulIdx))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_PANEL_CLI(&pstIn->stHeroInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HERO_REPLACE_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HERO_REPLACE_SOUL_ACK *pstOut = (PKT_CLIGS_HERO_REPLACE_SOUL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBagSoulID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBagSoulIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroSoulID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwHeroSoulIdx))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_PANEL_CLI(&pstOut->stHeroInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SOUL_EXCHANGE_METERIAL(void *pHost, CNetData* poNetData)
{
	DT_SOUL_EXCHANGE_METERIAL *pstIn = (DT_SOUL_EXCHANGE_METERIAL*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwMeterialID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMeterialNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SOUL_EXCHANGE_METERIAL(void *pHost, CNetData* poNetData)
{
	DT_SOUL_EXCHANGE_METERIAL *pstOut = (DT_SOUL_EXCHANGE_METERIAL*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwMeterialID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMeterialNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SOUL_EXCHANGE_CARD(void *pHost, CNetData* poNetData)
{
	DT_SOUL_EXCHANGE_CARD *pstIn = (DT_SOUL_EXCHANGE_CARD*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwID))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszName, sizeof(pstIn->aszName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMeterialNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_EXCHANGE_SOUL_METERIAL_NUM; i++)
	{
		if(i >= (INT32)pstIn->byMeterialNum)
			break;
		if(-1 == EncodeDT_SOUL_EXCHANGE_METERIAL(&pstIn->astMeterialInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SOUL_EXCHANGE_CARD(void *pHost, CNetData* poNetData)
{
	DT_SOUL_EXCHANGE_CARD *pstOut = (DT_SOUL_EXCHANGE_CARD*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwID))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszName, sizeof(pstOut->aszName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMeterialNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_EXCHANGE_SOUL_METERIAL_NUM; i++)
	{
		if(i >= (INT32)pstOut->byMeterialNum)
			break;
		if(-1 == DecodeDT_SOUL_EXCHANGE_METERIAL(&pstOut->astMeterialInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SOULEXCHANGE_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SOULEXCHANGE_INFO_REQ *pstIn = (PKT_CLIGS_SOULEXCHANGE_INFO_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlaceholder))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SOULEXCHANGE_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SOULEXCHANGE_INFO_REQ *pstOut = (PKT_CLIGS_SOULEXCHANGE_INFO_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlaceholder))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SOULEXCHANGE_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SOULEXCHANGE_INFO_ACK *pstIn = (PKT_CLIGS_SOULEXCHANGE_INFO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byExchangeCardNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_EXCHANGE_SOUL_CARD_NUM; i++)
	{
		if(i >= (INT32)pstIn->byExchangeCardNum)
			break;
		if(-1 == EncodeDT_SOUL_EXCHANGE_CARD(&pstIn->astExchangeCardInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byMeterialNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byMeterialNum)
			break;
		if(-1 == EncodeDT_GOODS_DATA_CLI(&pstIn->astMeterialInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SOULEXCHANGE_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SOULEXCHANGE_INFO_ACK *pstOut = (PKT_CLIGS_SOULEXCHANGE_INFO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byExchangeCardNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_EXCHANGE_SOUL_CARD_NUM; i++)
	{
		if(i >= (INT32)pstOut->byExchangeCardNum)
			break;
		if(-1 == DecodeDT_SOUL_EXCHANGE_CARD(&pstOut->astExchangeCardInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byMeterialNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byMeterialNum)
			break;
		if(-1 == DecodeDT_GOODS_DATA_CLI(&pstOut->astMeterialInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXCHANGE_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_SOUL_REQ *pstIn = (PKT_CLIGS_EXCHANGE_SOUL_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwSoulExchangeId))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwExchangeNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXCHANGE_SOUL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_SOUL_REQ *pstOut = (PKT_CLIGS_EXCHANGE_SOUL_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwSoulExchangeId))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwExchangeNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXCHANGE_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_SOUL_ACK *pstIn = (PKT_CLIGS_EXCHANGE_SOUL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySoulNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_EXCHANGE_SOUL_NUM; i++)
	{
		if(i >= (INT32)pstIn->bySoulNum)
			break;
		if(-1 == EncodeDT_SOUL_DATA_CLI(&pstIn->astSoulInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byMeterialNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byMeterialNum)
			break;
		if(-1 == EncodeDT_GOODS_DATA_CLI(&pstIn->astMeterialInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXCHANGE_SOUL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_SOUL_ACK *pstOut = (PKT_CLIGS_EXCHANGE_SOUL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySoulNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_EXCHANGE_SOUL_NUM; i++)
	{
		if(i >= (INT32)pstOut->bySoulNum)
			break;
		if(-1 == DecodeDT_SOUL_DATA_CLI(&pstOut->astSoulInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byMeterialNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byMeterialNum)
			break;
		if(-1 == DecodeDT_GOODS_DATA_CLI(&pstOut->astMeterialInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_MY_MEDAL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MY_MEDAL_REQ *pstIn = (PKT_CLIGS_OPEN_MY_MEDAL_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_MY_MEDAL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MY_MEDAL_REQ *pstOut = (PKT_CLIGS_OPEN_MY_MEDAL_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_MY_MEDAL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MY_MEDAL_ACK *pstIn = (PKT_CLIGS_OPEN_MY_MEDAL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_ATTR_BASE_LST_DATA(&pstIn->stAttrInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_MEDAL_DATA_LST_CLI(&pstIn->stMedalLstInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_MY_MEDAL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_MY_MEDAL_ACK *pstOut = (PKT_CLIGS_OPEN_MY_MEDAL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_ATTR_BASE_LST_DATA(&pstOut->stAttrInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_MEDAL_DATA_LST_CLI(&pstOut->stMedalLstInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MEDAL_ICON_NAME(void *pHost, CNetData* poNetData)
{
	DT_MEDAL_ICON_NAME *pstIn = (DT_MEDAL_ICON_NAME*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszMedalIconName, sizeof(pstIn->aszMedalIconName)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MEDAL_ICON_NAME(void *pHost, CNetData* poNetData)
{
	DT_MEDAL_ICON_NAME *pstOut = (DT_MEDAL_ICON_NAME*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszMedalIconName, sizeof(pstOut->aszMedalIconName)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MEDAL_ICON_ID_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_MEDAL_ICON_ID_LST_CLI *pstIn = (DT_MEDAL_ICON_ID_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wMedalNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_MEDAL_NUM; i++)
	{
		if(i >= (INT32)pstIn->wMedalNum)
			break;
		if(-1 == EncodeDT_MEDAL_ICON_NAME(&pstIn->astMedalIconID[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MEDAL_ICON_ID_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_MEDAL_ICON_ID_LST_CLI *pstOut = (DT_MEDAL_ICON_ID_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wMedalNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_MEDAL_NUM; i++)
	{
		if(i >= (INT32)pstOut->wMedalNum)
			break;
		if(-1 == DecodeDT_MEDAL_ICON_NAME(&pstOut->astMedalIconID[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MEDAL_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MEDAL_NTF *pstIn = (PKT_CLIGS_MEDAL_NTF*)pHost;

	if(-1 == EncodeDT_MEDAL_ICON_ID_LST_CLI(&pstIn->stUnLockMedal, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MEDAL_NTF(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MEDAL_NTF *pstOut = (PKT_CLIGS_MEDAL_NTF*)pHost;

	if(-1 == DecodeDT_MEDAL_ICON_ID_LST_CLI(&pstOut->stUnLockMedal, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_OUT_BOUND_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OUT_BOUND_REQ *pstIn = (PKT_CLIGS_OPEN_OUT_BOUND_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_OUT_BOUND_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OUT_BOUND_REQ *pstOut = (PKT_CLIGS_OPEN_OUT_BOUND_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_OUT_BOUND_DETAIL_DATA(void *pHost, CNetData* poNetData)
{
	DT_OUT_BOUND_DETAIL_DATA *pstIn = (DT_OUT_BOUND_DETAIL_DATA*)pHost;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszInstanceName, sizeof(pstIn->aszInstanceName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLeftCrossNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byState))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevelReq))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsMajor))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_LST_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_LESS_CLI3(&pstIn->stItemInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_OUT_BOUND_DETAIL_DATA(void *pHost, CNetData* poNetData)
{
	DT_OUT_BOUND_DETAIL_DATA *pstOut = (DT_OUT_BOUND_DETAIL_DATA*)pHost;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszInstanceName, sizeof(pstOut->aszInstanceName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLeftCrossNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byState))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevelReq))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsMajor))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_LST_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_LESS_CLI3(&pstOut->stItemInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_OUT_BOUND_DETAIL_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_OUT_BOUND_DETAIL_LST_DATA *pstIn = (DT_OUT_BOUND_DETAIL_LST_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_OUT_BOUND_INSTANCE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byInstanceNum)
			break;
		if(-1 == EncodeDT_OUT_BOUND_DETAIL_DATA(&pstIn->astInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->bySelectIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_OUT_BOUND_DETAIL_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_OUT_BOUND_DETAIL_LST_DATA *pstOut = (DT_OUT_BOUND_DETAIL_LST_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_OUT_BOUND_INSTANCE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byInstanceNum)
			break;
		if(-1 == DecodeDT_OUT_BOUND_DETAIL_DATA(&pstOut->astInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->bySelectIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_OUT_BOUND_SIMPLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_OUT_BOUND_SIMPLE_DATA *pstIn = (DT_OUT_BOUND_SIMPLE_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wScenceIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byTownIdx))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byState))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszUnlockReq, sizeof(pstIn->aszUnlockReq)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszHeroDesc, sizeof(pstIn->aszHeroDesc)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszItemDesc, sizeof(pstIn->aszItemDesc)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_OUT_BOUND_SIMPLE_DATA(void *pHost, CNetData* poNetData)
{
	DT_OUT_BOUND_SIMPLE_DATA *pstOut = (DT_OUT_BOUND_SIMPLE_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wScenceIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byTownIdx))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byState))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszUnlockReq, sizeof(pstOut->aszUnlockReq)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszHeroDesc, sizeof(pstOut->aszHeroDesc)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszItemDesc, sizeof(pstOut->aszItemDesc)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_OUT_BOUND_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OUT_BOUND_ACK *pstIn = (PKT_CLIGS_OPEN_OUT_BOUND_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_LST_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byOutBoundNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_OUT_BOUND_NUM; i++)
	{
		if(i >= (INT32)pstIn->byOutBoundNum)
			break;
		if(-1 == EncodeDT_OUT_BOUND_SIMPLE_DATA(&pstIn->astOutBoundInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_OUT_BOUND_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OUT_BOUND_ACK *pstOut = (PKT_CLIGS_OPEN_OUT_BOUND_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_LST_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byOutBoundNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_OUT_BOUND_NUM; i++)
	{
		if(i >= (INT32)pstOut->byOutBoundNum)
			break;
		if(-1 == DecodeDT_OUT_BOUND_SIMPLE_DATA(&pstOut->astOutBoundInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_OUT_BOUND_MAP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OUT_BOUND_MAP_REQ *pstIn = (PKT_CLIGS_OPEN_OUT_BOUND_MAP_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byTownIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_OUT_BOUND_MAP_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OUT_BOUND_MAP_REQ *pstOut = (PKT_CLIGS_OPEN_OUT_BOUND_MAP_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byTownIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_OUT_BOUND_MAP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OUT_BOUND_MAP_ACK *pstIn = (PKT_CLIGS_OPEN_OUT_BOUND_MAP_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_OUT_BOUND_DETAIL_LST_DATA(&pstIn->stInstanceLstInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_OUT_BOUND_MAP_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_OUT_BOUND_MAP_ACK *pstOut = (PKT_CLIGS_OPEN_OUT_BOUND_MAP_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_OUT_BOUND_DETAIL_LST_DATA(&pstOut->stInstanceLstInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OUT_BOUND_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OUT_BOUND_BATTLE_REQ *pstIn = (PKT_CLIGS_OUT_BOUND_BATTLE_REQ*)pHost;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsHook))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OUT_BOUND_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OUT_BOUND_BATTLE_REQ *pstOut = (PKT_CLIGS_OUT_BOUND_BATTLE_REQ*)pHost;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsHook))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OUT_BOUND_BATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OUT_BOUND_BATTLE_ACK *pstIn = (PKT_CLIGS_OUT_BOUND_BATTLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_OUT_BOUND_DETAIL_LST_DATA(&pstIn->stInstanceLstInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHaveBattleInfo))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveBattleInfo)
			break;
		if(-1 == EncodeDT_BATTLE_DATA5(&pstIn->astBattleInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_BATTLE_ENCOURAGE_DATA(&pstIn->stBattleEncourage, poNetData))
		return -1;

	if(-1 == EncodeDT_DATA_AFTER_BATTLE_ENCOURAGE(&pstIn->stAfterBattleEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPassFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_DATA(&pstIn->astPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_DATA_AFTER_PASS_ENCOURAGE(&pstIn->astAfterPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_DATA(&pstIn->astPassEncourageBox[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_PLAYER_RES_LST_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OUT_BOUND_BATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OUT_BOUND_BATTLE_ACK *pstOut = (PKT_CLIGS_OUT_BOUND_BATTLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_OUT_BOUND_DETAIL_LST_DATA(&pstOut->stInstanceLstInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHaveBattleInfo))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveBattleInfo)
			break;
		if(-1 == DecodeDT_BATTLE_DATA5(&pstOut->astBattleInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_BATTLE_ENCOURAGE_DATA(&pstOut->stBattleEncourage, poNetData))
		return -1;

	if(-1 == DecodeDT_DATA_AFTER_BATTLE_ENCOURAGE(&pstOut->stAfterBattleEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPassFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_DATA(&pstOut->astPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_DATA_AFTER_PASS_ENCOURAGE(&pstOut->astAfterPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_DATA(&pstOut->astPassEncourageBox[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_PLAYER_RES_LST_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_STORE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_STORE_REQ *pstIn = (PKT_CLIGS_OPEN_STORE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_STORE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_STORE_REQ *pstOut = (PKT_CLIGS_OPEN_STORE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GOODS_EXCHANGE_INFO(void *pHost, CNetData* poNetData)
{
	DT_GOODS_EXCHANGE_INFO *pstIn = (DT_GOODS_EXCHANGE_INFO*)pHost;

	if(-1 == EncodeDT_PLAYER_RES_DATA(&pstIn->stResReq, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_CLI3(&pstIn->stGoodsInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GOODS_EXCHANGE_INFO(void *pHost, CNetData* poNetData)
{
	DT_GOODS_EXCHANGE_INFO *pstOut = (DT_GOODS_EXCHANGE_INFO*)pHost;

	if(-1 == DecodeDT_PLAYER_RES_DATA(&pstOut->stResReq, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_CLI3(&pstOut->stGoodsInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_GOODS_EXCHANGE_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_GOODS_EXCHANGE_LST_INFO *pstIn = (DT_GOODS_EXCHANGE_LST_INFO*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wGoodsNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM_NEW; i++)
	{
		if(i >= (INT32)pstIn->wGoodsNum)
			break;
		if(-1 == EncodeDT_GOODS_EXCHANGE_INFO(&pstIn->astGoodsInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_GOODS_EXCHANGE_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_GOODS_EXCHANGE_LST_INFO *pstOut = (DT_GOODS_EXCHANGE_LST_INFO*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wGoodsNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM_NEW; i++)
	{
		if(i >= (INT32)pstOut->wGoodsNum)
			break;
		if(-1 == DecodeDT_GOODS_EXCHANGE_INFO(&pstOut->astGoodsInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_STORE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_STORE_ACK *pstIn = (PKT_CLIGS_OPEN_STORE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_LST_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_GOODS_EXCHANGE_LST_INFO(&pstIn->stItemInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_STORE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_STORE_ACK *pstOut = (PKT_CLIGS_OPEN_STORE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_LST_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_GOODS_EXCHANGE_LST_INFO(&pstOut->stItemInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXCHANGE_GOODS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_GOODS_REQ *pstIn = (PKT_CLIGS_EXCHANGE_GOODS_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wGoodsID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wGoodsNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXCHANGE_GOODS_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_GOODS_REQ *pstOut = (PKT_CLIGS_EXCHANGE_GOODS_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wGoodsID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wGoodsNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EXCHANGE_GOODS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_GOODS_ACK *pstIn = (PKT_CLIGS_EXCHANGE_GOODS_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_LST_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wItemsID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wItemNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EXCHANGE_GOODS_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EXCHANGE_GOODS_ACK *pstOut = (PKT_CLIGS_EXCHANGE_GOODS_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_LST_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wItemsID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wItemNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_INFO(void *pHost, CNetData* poNetData)
{
	DT_SKILL_INFO *pstIn = (DT_SKILL_INFO*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSkillID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHurtPeople))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHurtRate))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSpecialParam))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBeginRound))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFinalHurtRate))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBuffParam))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBuffRound))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_INFO(void *pHost, CNetData* poNetData)
{
	DT_SKILL_INFO *pstOut = (DT_SKILL_INFO*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSkillID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHurtPeople))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHurtRate))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSpecialParam))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBeginRound))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFinalHurtRate))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBuffParam))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBuffRound))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKILL_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_SKILL_LST_INFO *pstIn = (DT_SKILL_LST_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->bySkillNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_SKILL_NUM; i++)
	{
		if(i >= (INT32)pstIn->bySkillNum)
			break;
		if(-1 == EncodeDT_SKILL_INFO(&pstIn->astSkillInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKILL_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_SKILL_LST_INFO *pstOut = (DT_SKILL_LST_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->bySkillNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_SKILL_NUM; i++)
	{
		if(i >= (INT32)pstOut->bySkillNum)
			break;
		if(-1 == DecodeDT_SKILL_INFO(&pstOut->astSkillInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_PET_CLI_DATA(void *pHost, CNetData* poNetData)
{
	DT_PET_CLI_DATA *pstIn = (DT_PET_CLI_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPetId))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStarLv))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLv))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaxLv))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLvExp))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNextLvExp))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszPetName, sizeof(pstIn->aszPetName)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurPhychicVal))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxPhychicVal))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurLingli))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBeAteExp))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszPetPic, sizeof(pstIn->aszPetPic)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPetState))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_WASH_PSYCHIC_CELL_CNT; i++)
	{
		if(-1 == EncodeDT_PET_WASHQUALITY_DATA(&pstIn->astWashQualityData[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byIsUpStar))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPetColor))
		return -1;

	if(-1 == EncodeDT_SKILL_LST_INFO(&pstIn->stSkillInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPetQuality))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPetType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPetCfgID))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwScore))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PET_CLI_DATA(void *pHost, CNetData* poNetData)
{
	DT_PET_CLI_DATA *pstOut = (DT_PET_CLI_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPetId))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStarLv))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLv))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaxLv))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLvExp))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNextLvExp))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszPetName, sizeof(pstOut->aszPetName)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurPhychicVal))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxPhychicVal))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurLingli))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBeAteExp))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszPetPic, sizeof(pstOut->aszPetPic)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPetState))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_PET_WASH_PSYCHIC_CELL_CNT; i++)
		{
			if(-1 == DecodeDT_PET_WASHQUALITY_DATA(&pstOut->astWashQualityData[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelByte(pstOut->byIsUpStar))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPetColor))
		return -1;

	if(-1 == DecodeDT_SKILL_LST_INFO(&pstOut->stSkillInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPetQuality))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPetType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPetCfgID))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwScore))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PET_CLI_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_PET_CLI_DATA_LST *pstIn = (DT_PET_CLI_DATA_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPetNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_NUM; i++)
	{
		if(i >= (INT32)pstIn->wPetNum)
			break;
		if(-1 == EncodeDT_PET_CLI_DATA(&pstIn->astPetData[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PET_CLI_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_PET_CLI_DATA_LST *pstOut = (DT_PET_CLI_DATA_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPetNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_NUM; i++)
	{
		if(i >= (INT32)pstOut->wPetNum)
			break;
		if(-1 == DecodeDT_PET_CLI_DATA(&pstOut->astPetData[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PETREP_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PETREP_INFO_REQ *pstIn = (PKT_CLIGS_PETREP_INFO_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlaceholder))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PETREP_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PETREP_INFO_REQ *pstOut = (PKT_CLIGS_PETREP_INFO_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlaceholder))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PETREP_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PETREP_INFO_ACK *pstIn = (PKT_CLIGS_PETREP_INFO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNormalCostGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoodCostGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNormalLeftTime))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoodLeftTime))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNormalFreeCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRuleFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PETREP_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PETREP_INFO_ACK *pstOut = (PKT_CLIGS_PETREP_INFO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNormalCostGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoodCostGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNormalLeftTime))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoodLeftTime))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNormalFreeCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRuleFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PRODUCT_PET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PRODUCT_PET_REQ *pstIn = (PKT_CLIGS_PRODUCT_PET_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byProductType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PRODUCT_PET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PRODUCT_PET_REQ *pstOut = (PKT_CLIGS_PRODUCT_PET_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byProductType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PRODUCT_PET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PRODUCT_PET_ACK *pstIn = (PKT_CLIGS_PRODUCT_PET_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGoodNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PRODUCTPET_EXTRA_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byGoodNum)
			break;
		if(-1 == EncodeDT_GOODS_DATA_CLI(&pstIn->astPetGood[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byPetNum))
		return -1;

	for(i = 0; i < MAX_PRODUCTPET_NUM; i++)
	{
		if(i >= (INT32)pstIn->byPetNum)
			break;
		if(-1 == EncodeDT_PET_CLI_DATA(&pstIn->astPetData[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNormalCostGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoodCostGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNormalLeftTime))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGoodLeftTime))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwNormalFreeCnt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PRODUCT_PET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PRODUCT_PET_ACK *pstOut = (PKT_CLIGS_PRODUCT_PET_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGoodNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PRODUCTPET_EXTRA_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byGoodNum)
			break;
		if(-1 == DecodeDT_GOODS_DATA_CLI(&pstOut->astPetGood[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byPetNum))
		return -1;

	for(i = 0; i < MAX_PRODUCTPET_NUM; i++)
	{
		if(i >= (INT32)pstOut->byPetNum)
			break;
		if(-1 == DecodeDT_PET_CLI_DATA(&pstOut->astPetData[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNormalCostGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoodCostGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNormalLeftTime))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGoodLeftTime))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwNormalFreeCnt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_STAR_DRAGON_ITEM_INFO(void *pHost, CNetData* poNetData)
{
	DT_STAR_DRAGON_ITEM_INFO *pstIn = (DT_STAR_DRAGON_ITEM_INFO*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwItemID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwItemNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_STAR_DRAGON_ITEM_INFO(void *pHost, CNetData* poNetData)
{
	DT_STAR_DRAGON_ITEM_INFO *pstOut = (DT_STAR_DRAGON_ITEM_INFO*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwItemID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwItemNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_UP_STAR_INFO(void *pHost, CNetData* poNetData)
{
	DT_UP_STAR_INFO *pstIn = (DT_UP_STAR_INFO*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wStarLv))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLingliPer))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLvLimit))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_UP_STAR_INFO(void *pHost, CNetData* poNetData)
{
	DT_UP_STAR_INFO *pstOut = (DT_UP_STAR_INFO*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wStarLv))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLingliPer))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLvLimit))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_STAR_PANEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_STAR_PANEL_REQ *pstIn = (PKT_CLIGS_OPEN_STAR_PANEL_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPetId))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_STAR_PANEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_STAR_PANEL_REQ *pstOut = (PKT_CLIGS_OPEN_STAR_PANEL_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPetId))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_STAR_PANEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_STAR_PANEL_ACK *pstIn = (PKT_CLIGS_OPEN_STAR_PANEL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsFullStartLv))
		return -1;

	if(-1 == EncodeDT_UP_STAR_INFO(&pstIn->stCurUpStarInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_UP_STAR_INFO(&pstIn->stNextUpStarInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBagDragonItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBagDragonItemNum)
			break;
		if(-1 == EncodeDT_GOODS_DATA_CLI(&pstIn->astBagDragonItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byNeedDragonNum))
		return -1;

	for(i = 0; i < MAX_STAR_DRAGON_ITEMTYPE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNeedDragonNum)
			break;
		if(-1 == EncodeDT_STAR_DRAGON_ITEM_INFO(&pstIn->astNeedDragonInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_STAR_PANEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_STAR_PANEL_ACK *pstOut = (PKT_CLIGS_OPEN_STAR_PANEL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsFullStartLv))
		return -1;

	if(-1 == DecodeDT_UP_STAR_INFO(&pstOut->stCurUpStarInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_UP_STAR_INFO(&pstOut->stNextUpStarInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBagDragonItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBagDragonItemNum)
			break;
		if(-1 == DecodeDT_GOODS_DATA_CLI(&pstOut->astBagDragonItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byNeedDragonNum))
		return -1;

	for(i = 0; i < MAX_STAR_DRAGON_ITEMTYPE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNeedDragonNum)
			break;
		if(-1 == DecodeDT_STAR_DRAGON_ITEM_INFO(&pstOut->astNeedDragonInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UP_STAR_LV_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UP_STAR_LV_REQ *pstIn = (PKT_CLIGS_UP_STAR_LV_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPetId))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UP_STAR_LV_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UP_STAR_LV_REQ *pstOut = (PKT_CLIGS_UP_STAR_LV_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPetId))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UP_STAR_LV_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UP_STAR_LV_ACK *pstIn = (PKT_CLIGS_UP_STAR_LV_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PET_CLI_DATA(&pstIn->stPetData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UP_STAR_LV_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UP_STAR_LV_ACK *pstOut = (PKT_CLIGS_UP_STAR_LV_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PET_CLI_DATA(&pstOut->stPetData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PET_PANEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_PANEL_REQ *pstIn = (PKT_CLIGS_OPEN_PET_PANEL_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlaceholder))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PET_PANEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_PANEL_REQ *pstOut = (PKT_CLIGS_OPEN_PET_PANEL_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlaceholder))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PET_PANEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_PANEL_ACK *pstIn = (PKT_CLIGS_OPEN_PET_PANEL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PET_CLI_DATA_LST(&pstIn->stAllPetInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PET_PANEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_PANEL_ACK *pstOut = (PKT_CLIGS_OPEN_PET_PANEL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PET_CLI_DATA_LST(&pstOut->stAllPetInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PETFEED_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PETFEED_REQ *pstIn = (PKT_CLIGS_OPEN_PETFEED_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPetId))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PETFEED_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PETFEED_REQ *pstOut = (PKT_CLIGS_OPEN_PETFEED_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPetId))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PETFEED_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PETFEED_ACK *pstIn = (PKT_CLIGS_OPEN_PETFEED_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPetId))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwIsCanFeed))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLeftFreeFeedCnt))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwVipFeedCostGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalFeedCnt))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_FEED_FRUIT_CNT; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyCurFruitType[i]))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwFruitScore))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwReStartCost))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAMaxCost))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PETFEED_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PETFEED_ACK *pstOut = (PKT_CLIGS_OPEN_PETFEED_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPetId))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwIsCanFeed))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLeftFreeFeedCnt))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwVipFeedCostGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalFeedCnt))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_FEED_FRUIT_CNT; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyCurFruitType[i]))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwFruitScore))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwReStartCost))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAMaxCost))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FIRST_DRAW_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FIRST_DRAW_REQ *pstIn = (PKT_CLIGS_FIRST_DRAW_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPetId))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FIRST_DRAW_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FIRST_DRAW_REQ *pstOut = (PKT_CLIGS_FIRST_DRAW_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPetId))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FIRST_DRAW_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FIRST_DRAW_ACK *pstIn = (PKT_CLIGS_FIRST_DRAW_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPetId))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_FEED_FRUIT_CNT; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyCurFruitType[i]))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwFruitScore))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwIsCanFeed))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLeftFreeFeedCnt))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwVipFeedCostGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwTotalFeedCnt))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FIRST_DRAW_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FIRST_DRAW_ACK *pstOut = (PKT_CLIGS_FIRST_DRAW_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPetId))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_FEED_FRUIT_CNT; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyCurFruitType[i]))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwFruitScore))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwIsCanFeed))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLeftFreeFeedCnt))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwVipFeedCostGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwTotalFeedCnt))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RESET_DRAW_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESET_DRAW_REQ *pstIn = (PKT_CLIGS_RESET_DRAW_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPetId))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byResetType))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RESET_DRAW_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESET_DRAW_REQ *pstOut = (PKT_CLIGS_RESET_DRAW_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPetId))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byResetType))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RESET_DRAW_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESET_DRAW_ACK *pstIn = (PKT_CLIGS_RESET_DRAW_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPetId))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_FEED_FRUIT_CNT; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyCurFruitType[i]))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwFruitScore))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RESET_DRAW_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RESET_DRAW_ACK *pstOut = (PKT_CLIGS_RESET_DRAW_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPetId))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_FEED_FRUIT_CNT; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyCurFruitType[i]))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwFruitScore))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CONFIRM_FEED_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CONFIRM_FEED_REQ *pstIn = (PKT_CLIGS_CONFIRM_FEED_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPetId))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CONFIRM_FEED_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CONFIRM_FEED_REQ *pstOut = (PKT_CLIGS_CONFIRM_FEED_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPetId))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CONFIRM_FEED_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CONFIRM_FEED_ACK *pstIn = (PKT_CLIGS_CONFIRM_FEED_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PET_CLI_DATA(&pstIn->stPetInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CONFIRM_FEED_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CONFIRM_FEED_ACK *pstOut = (PKT_CLIGS_CONFIRM_FEED_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PET_CLI_DATA(&pstOut->stPetInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MERGE_PET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MERGE_PET_REQ *pstIn = (PKT_CLIGS_MERGE_PET_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byEatPetId))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBeAtePetNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBeAtePetNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyBeAtePetId[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MERGE_PET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MERGE_PET_REQ *pstOut = (PKT_CLIGS_MERGE_PET_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byEatPetId))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBeAtePetNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBeAtePetNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyBeAtePetId[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_MERGE_PET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MERGE_PET_ACK *pstIn = (PKT_CLIGS_MERGE_PET_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PET_CLI_DATA_LST(&pstIn->stAllPetInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_MERGE_PET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_MERGE_PET_ACK *pstOut = (PKT_CLIGS_MERGE_PET_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PET_CLI_DATA_LST(&pstOut->stAllPetInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_TEST_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_TEST_REQ *pstIn = (PKT_CLIGS_TEST_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byErrCode))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_TEST_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_TEST_REQ *pstOut = (PKT_CLIGS_TEST_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byErrCode))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_TEST_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_TEST_ACK *pstIn = (PKT_CLIGS_TEST_ACK*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszWenzi, sizeof(pstIn->aszWenzi)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_TEST_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_TEST_ACK *pstOut = (PKT_CLIGS_TEST_ACK*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszWenzi, sizeof(pstOut->aszWenzi)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PET_STORE_INFO(void *pHost, CNetData* poNetData)
{
	DT_PET_STORE_INFO *pstIn = (DT_PET_STORE_INFO*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wStoreId))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCostType))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostNum))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->stStoreGood, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byItemType))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byLvLimit))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PET_STORE_INFO(void *pHost, CNetData* poNetData)
{
	DT_PET_STORE_INFO *pstOut = (DT_PET_STORE_INFO*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wStoreId))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCostType))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostNum))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->stStoreGood, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byItemType))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byLvLimit))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PET_STORE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_STORE_REQ *pstIn = (PKT_CLIGS_OPEN_PET_STORE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlaceholder))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PET_STORE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_STORE_REQ *pstOut = (PKT_CLIGS_OPEN_PET_STORE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlaceholder))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PET_STORE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_STORE_ACK *pstIn = (PKT_CLIGS_OPEN_PET_STORE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStoreItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_STORE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->wStoreItemNum)
			break;
		if(-1 == EncodeDT_PET_STORE_INFO(&pstIn->astStoreItems[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PET_STORE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_STORE_ACK *pstOut = (PKT_CLIGS_OPEN_PET_STORE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStoreItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_STORE_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->wStoreItemNum)
			break;
		if(-1 == DecodeDT_PET_STORE_INFO(&pstOut->astStoreItems[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_PET_STORE_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_PET_STORE_ITEM_REQ *pstIn = (PKT_CLIGS_BUY_PET_STORE_ITEM_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wStoreItemId))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_PET_STORE_ITEM_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_PET_STORE_ITEM_REQ *pstOut = (PKT_CLIGS_BUY_PET_STORE_ITEM_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wStoreItemId))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BUY_PET_STORE_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_PET_STORE_ITEM_ACK *pstIn = (PKT_CLIGS_BUY_PET_STORE_ITEM_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BUY_PET_STORE_ITEM_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BUY_PET_STORE_ITEM_ACK *pstOut = (PKT_CLIGS_BUY_PET_STORE_ITEM_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_REFINEPET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_REFINEPET_REQ *pstIn = (PKT_CLIGS_OPEN_REFINEPET_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlaceholder))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_REFINEPET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_REFINEPET_REQ *pstOut = (PKT_CLIGS_OPEN_REFINEPET_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlaceholder))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_REFINEPET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_REFINEPET_ACK *pstIn = (PKT_CLIGS_OPEN_REFINEPET_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PET_CLI_DATA_LST(&pstIn->stAllPetInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_REFINEPET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_REFINEPET_ACK *pstOut = (PKT_CLIGS_OPEN_REFINEPET_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PET_CLI_DATA_LST(&pstOut->stAllPetInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REFINEPET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFINEPET_REQ *pstIn = (PKT_CLIGS_REFINEPET_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPetId1))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPetId2))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REFINEPET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFINEPET_REQ *pstOut = (PKT_CLIGS_REFINEPET_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPetId1))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPetId2))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REFINEPET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFINEPET_ACK *pstIn = (PKT_CLIGS_REFINEPET_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PET_CLI_DATA(&pstIn->stRefineGetPet, poNetData))
		return -1;

	if(-1 == EncodeDT_PET_CLI_DATA_LST(&pstIn->stAllPetInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REFINEPET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REFINEPET_ACK *pstOut = (PKT_CLIGS_REFINEPET_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PET_CLI_DATA(&pstOut->stRefineGetPet, poNetData))
		return -1;

	if(-1 == DecodeDT_PET_CLI_DATA_LST(&pstOut->stAllPetInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_BAG_ITEM_INFO(void *pHost, CNetData* poNetData)
{
	DT_BAG_ITEM_INFO *pstIn = (DT_BAG_ITEM_INFO*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemNum))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_CLI2(&pstIn->stItemData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BAG_ITEM_INFO(void *pHost, CNetData* poNetData)
{
	DT_BAG_ITEM_INFO *pstOut = (DT_BAG_ITEM_INFO*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemNum))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_CLI2(&pstOut->stItemData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_WASH_QUALITY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_WASH_QUALITY_REQ *pstIn = (PKT_CLIGS_OPEN_WASH_QUALITY_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPetId))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_WASH_QUALITY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_WASH_QUALITY_REQ *pstOut = (PKT_CLIGS_OPEN_WASH_QUALITY_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPetId))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PET_WASHQUALITY_COST_ITEM(void *pHost, CNetData* poNetData)
{
	DT_PET_WASHQUALITY_COST_ITEM *pstIn = (DT_PET_WASHQUALITY_COST_ITEM*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwItemId))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwItemNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PET_WASHQUALITY_COST_ITEM(void *pHost, CNetData* poNetData)
{
	DT_PET_WASHQUALITY_COST_ITEM *pstOut = (DT_PET_WASHQUALITY_COST_ITEM*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwItemId))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwItemNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PET_WASHQUALITY_COST_ITEM_LIST(void *pHost, CNetData* poNetData)
{
	DT_PET_WASHQUALITY_COST_ITEM_LIST *pstIn = (DT_PET_WASHQUALITY_COST_ITEM_LIST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_WASH_PSYCHIC_ITEMTYPE_CNT; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_PET_WASHQUALITY_COST_ITEM(&pstIn->astItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwLockCostGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PET_WASHQUALITY_COST_ITEM_LIST(void *pHost, CNetData* poNetData)
{
	DT_PET_WASHQUALITY_COST_ITEM_LIST *pstOut = (DT_PET_WASHQUALITY_COST_ITEM_LIST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_WASH_PSYCHIC_ITEMTYPE_CNT; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_PET_WASHQUALITY_COST_ITEM(&pstOut->astItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelDword(pstOut->dwLockCostGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_WASH_QUALITY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_WASH_QUALITY_ACK *pstIn = (PKT_CLIGS_OPEN_WASH_QUALITY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSlotVal))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_WASH_PSYCHIC_CELL_CNT; i++)
	{
		if(-1 == EncodeDT_PET_WASHQUALITY_COST_ITEM_LIST(&pstIn->astCostItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwBagItemNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwBagItemNum)
			break;
		if(-1 == EncodeDT_GOODS_DATA_CLI(&pstIn->astBagItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddTString(pstIn->aszWashDesc, sizeof(pstIn->aszWashDesc)))
		return -1;

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_WASH_QUALITY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_WASH_QUALITY_ACK *pstOut = (PKT_CLIGS_OPEN_WASH_QUALITY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSlotVal))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_PET_WASH_PSYCHIC_CELL_CNT; i++)
		{
			if(-1 == DecodeDT_PET_WASHQUALITY_COST_ITEM_LIST(&pstOut->astCostItemInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelDword(pstOut->dwBagItemNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwBagItemNum)
			break;
		if(-1 == DecodeDT_GOODS_DATA_CLI(&pstOut->astBagItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelTString(pstOut->aszWashDesc, sizeof(pstOut->aszWashDesc)))
		return -1;

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_WASH_QUALITY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WASH_QUALITY_REQ *pstIn = (PKT_CLIGS_WASH_QUALITY_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPetId))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsLock))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byWashCell))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_WASH_QUALITY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WASH_QUALITY_REQ *pstOut = (PKT_CLIGS_WASH_QUALITY_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPetId))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsLock))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byWashCell))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_WASH_QUALITY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WASH_QUALITY_ACK *pstIn = (PKT_CLIGS_WASH_QUALITY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PET_CLI_DATA(&pstIn->stPetData, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_WASH_PSYCHIC_CELL_CNT; i++)
	{
		if(-1 == EncodeDT_PET_WASHQUALITY_COST_ITEM_LIST(&pstIn->astCostItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwBagItemNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->dwBagItemNum)
			break;
		if(-1 == EncodeDT_GOODS_DATA_CLI(&pstIn->astBagItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_WASH_QUALITY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_WASH_QUALITY_ACK *pstOut = (PKT_CLIGS_WASH_QUALITY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PET_CLI_DATA(&pstOut->stPetData, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_PET_WASH_PSYCHIC_CELL_CNT; i++)
		{
			if(-1 == DecodeDT_PET_WASHQUALITY_COST_ITEM_LIST(&pstOut->astCostItemInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelDword(pstOut->dwBagItemNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->dwBagItemNum)
			break;
		if(-1 == DecodeDT_GOODS_DATA_CLI(&pstOut->astBagItemInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHANGE_PET_STATE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_PET_STATE_REQ *pstIn = (PKT_CLIGS_CHANGE_PET_STATE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPetId))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPetState))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHANGE_PET_STATE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_PET_STATE_REQ *pstOut = (PKT_CLIGS_CHANGE_PET_STATE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPetId))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPetState))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHANGE_PET_STATE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_PET_STATE_ACK *pstIn = (PKT_CLIGS_CHANGE_PET_STATE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PET_CLI_DATA(&pstIn->stPetData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHANGE_PET_STATE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHANGE_PET_STATE_ACK *pstOut = (PKT_CLIGS_CHANGE_PET_STATE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PET_CLI_DATA(&pstOut->stPetData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PET_AFTER_INHERIT_DATA(void *pHost, CNetData* poNetData)
{
	DT_PET_AFTER_INHERIT_DATA *pstIn = (DT_PET_AFTER_INHERIT_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPetId))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byStarLv))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLv))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_WASH_PSYCHIC_CELL_CNT; i++)
	{
		if(-1 == EncodeDT_PET_WASHQUALITY_DATA(&pstIn->astWashQualityData[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddDword(pstIn->dwCostGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PET_AFTER_INHERIT_DATA(void *pHost, CNetData* poNetData)
{
	DT_PET_AFTER_INHERIT_DATA *pstOut = (DT_PET_AFTER_INHERIT_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPetId))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byStarLv))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLv))
		return -1;

	INT32 i;
		for(i = 0; i < MAX_PET_WASH_PSYCHIC_CELL_CNT; i++)
		{
			if(-1 == DecodeDT_PET_WASHQUALITY_DATA(&pstOut->astWashQualityData[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelDword(pstOut->dwCostGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PET_INHERIT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_INHERIT_REQ *pstIn = (PKT_CLIGS_OPEN_PET_INHERIT_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPetId))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PET_INHERIT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_INHERIT_REQ *pstOut = (PKT_CLIGS_OPEN_PET_INHERIT_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPetId))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PET_INHERIT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_INHERIT_ACK *pstIn = (PKT_CLIGS_OPEN_PET_INHERIT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPetNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_NUM; i++)
	{
		if(i >= (INT32)pstIn->wPetNum)
			break;
		if(-1 == EncodeDT_PET_AFTER_INHERIT_DATA(&pstIn->astNormalAfterInheritData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_PET_NUM; i++)
	{
		if(i >= (INT32)pstIn->wPetNum)
			break;
		if(-1 == EncodeDT_PET_AFTER_INHERIT_DATA(&pstIn->astPerfectAfterInheritData[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostCoin))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PET_INHERIT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_INHERIT_ACK *pstOut = (PKT_CLIGS_OPEN_PET_INHERIT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPetNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_NUM; i++)
	{
		if(i >= (INT32)pstOut->wPetNum)
			break;
		if(-1 == DecodeDT_PET_AFTER_INHERIT_DATA(&pstOut->astNormalAfterInheritData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_PET_NUM; i++)
	{
		if(i >= (INT32)pstOut->wPetNum)
			break;
		if(-1 == DecodeDT_PET_AFTER_INHERIT_DATA(&pstOut->astPerfectAfterInheritData[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostCoin))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PET_INHERIT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PET_INHERIT_REQ *pstIn = (PKT_CLIGS_PET_INHERIT_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPetId))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wInheritedPetId))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsPerfectInherit))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PET_INHERIT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PET_INHERIT_REQ *pstOut = (PKT_CLIGS_PET_INHERIT_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPetId))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wInheritedPetId))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsPerfectInherit))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PET_INHERIT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PET_INHERIT_ACK *pstIn = (PKT_CLIGS_PET_INHERIT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PET_CLI_DATA(&pstIn->stPetData, poNetData))
		return -1;

	if(-1 == EncodeDT_PET_CLI_DATA(&pstIn->stInheritedPetData, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPetNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_NUM; i++)
	{
		if(i >= (INT32)pstIn->wPetNum)
			break;
		if(-1 == EncodeDT_PET_AFTER_INHERIT_DATA(&pstIn->astNormalAfterInheritData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_PET_NUM; i++)
	{
		if(i >= (INT32)pstIn->wPetNum)
			break;
		if(-1 == EncodeDT_PET_AFTER_INHERIT_DATA(&pstIn->astPerfectAfterInheritData[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_RSYNC_RES_ITEM_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PET_INHERIT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PET_INHERIT_ACK *pstOut = (PKT_CLIGS_PET_INHERIT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PET_CLI_DATA(&pstOut->stPetData, poNetData))
		return -1;

	if(-1 == DecodeDT_PET_CLI_DATA(&pstOut->stInheritedPetData, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPetNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_NUM; i++)
	{
		if(i >= (INT32)pstOut->wPetNum)
			break;
		if(-1 == DecodeDT_PET_AFTER_INHERIT_DATA(&pstOut->astNormalAfterInheritData[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_PET_NUM; i++)
	{
		if(i >= (INT32)pstOut->wPetNum)
			break;
		if(-1 == DecodeDT_PET_AFTER_INHERIT_DATA(&pstOut->astPerfectAfterInheritData[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_RSYNC_RES_ITEM_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PLAYERPET_PANEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLAYERPET_PANEL_REQ *pstIn = (PKT_CLIGS_OPEN_PLAYERPET_PANEL_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlaceholder))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PLAYERPET_PANEL_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLAYERPET_PANEL_REQ *pstOut = (PKT_CLIGS_OPEN_PLAYERPET_PANEL_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlaceholder))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PLAYERPET_PANEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLAYERPET_PANEL_ACK *pstIn = (PKT_CLIGS_OPEN_PLAYERPET_PANEL_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsHaveFightPet))
		return -1;

	if(-1 == EncodeDT_PET_CLI_DATA(&pstIn->stPetInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PLAYERPET_PANEL_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PLAYERPET_PANEL_ACK *pstOut = (PKT_CLIGS_OPEN_PLAYERPET_PANEL_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsHaveFightPet))
		return -1;

	if(-1 == DecodeDT_PET_CLI_DATA(&pstOut->stPetInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REQUEST_ALL_PET_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REQUEST_ALL_PET_INFO_REQ *pstIn = (PKT_CLIGS_REQUEST_ALL_PET_INFO_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPlaceholder))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REQUEST_ALL_PET_INFO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REQUEST_ALL_PET_INFO_REQ *pstOut = (PKT_CLIGS_REQUEST_ALL_PET_INFO_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPlaceholder))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_REQUEST_ALL_PET_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REQUEST_ALL_PET_INFO_ACK *pstIn = (PKT_CLIGS_REQUEST_ALL_PET_INFO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PET_CLI_DATA_LST(&pstIn->stAllPetInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_REQUEST_ALL_PET_INFO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_REQUEST_ALL_PET_INFO_ACK *pstOut = (PKT_CLIGS_REQUEST_ALL_PET_INFO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PET_CLI_DATA_LST(&pstOut->stAllPetInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_STRENGTHEN_ENCHANT_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_STRENGTHEN_ENCHANT_DATA_LST_CLI *pstIn = (DT_EQUIP_STRENGTHEN_ENCHANT_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_DATA_CLI_v410(&pstIn->astEquipInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstIn->astEquipStrengthenInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddWord(pstIn->wEnchantEquipNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEnchantEquipNum)
			break;
		if(-1 == EncodeDT_EQUIP_ENCHANT_DATA_CLI(&pstIn->astEquipEnchantInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == poNetData->AddByte(pstIn->abyEquipOpenLightFlagInfo[i]))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstIn->wEquipNum)
			break;
		if(-1 == poNetData->AddDword(pstIn->adwStrengthen10CoinInfo[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_STRENGTHEN_ENCHANT_DATA_LST_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_STRENGTHEN_ENCHANT_DATA_LST_CLI *pstOut = (DT_EQUIP_STRENGTHEN_ENCHANT_DATA_LST_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_DATA_CLI_v410(&pstOut->astEquipInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstOut->astEquipStrengthenInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelWord(pstOut->wEnchantEquipNum))
		return -1;

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEnchantEquipNum)
			break;
		if(-1 == DecodeDT_EQUIP_ENCHANT_DATA_CLI(&pstOut->astEquipEnchantInfo[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == poNetData->DelByte(pstOut->abyEquipOpenLightFlagInfo[i]))
			return -1;
	}

	for(i = 0; i < MAX_BAG_OPEN_NUM; i++)
	{
		if(i >= (INT32)pstOut->wEquipNum)
			break;
		if(-1 == poNetData->DelDword(pstOut->adwStrengthen10CoinInfo[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_HERO_ATTR_ADD_CLI_v410(void *pHost, CNetData* poNetData)
{
	DT_HERO_ATTR_ADD_CLI_v410 *pstIn = (DT_HERO_ATTR_ADD_CLI_v410*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwAddAttack))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddHP))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddTalent))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwDefense))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwAddDefense))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_HERO_ATTR_ADD_CLI_v410(void *pHost, CNetData* poNetData)
{
	DT_HERO_ATTR_ADD_CLI_v410 *pstOut = (DT_HERO_ATTR_ADD_CLI_v410*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwAddAttack))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddHP))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddTalent))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwDefense))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwAddDefense))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_RECRUIT_HERO_INFO(void *pHost, CNetData* poNetData)
{
	DT_RECRUIT_HERO_INFO *pstIn = (DT_RECRUIT_HERO_INFO*)pHost;

	if(-1 == EncodeDT_HERO_BASE_DATA_CLI(&pstIn->stHeroBaseInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_HERO_ATTR_ADD_CLI_v410(&pstIn->stHeroAttrAddInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_SKILL_DATA_CLI(&pstIn->stSkillInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RECRUIT_HERO_INFO(void *pHost, CNetData* poNetData)
{
	DT_RECRUIT_HERO_INFO *pstOut = (DT_RECRUIT_HERO_INFO*)pHost;

	if(-1 == DecodeDT_HERO_BASE_DATA_CLI(&pstOut->stHeroBaseInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_HERO_ATTR_ADD_CLI_v410(&pstOut->stHeroAttrAddInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_SKILL_DATA_CLI(&pstOut->stSkillInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MATERIAL(void *pHost, CNetData* poNetData)
{
	DT_MATERIAL *pstIn = (DT_MATERIAL*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byMaterialType))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMaterialID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRequiredNum))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stDropInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byGetFlag))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MATERIAL(void *pHost, CNetData* poNetData)
{
	DT_MATERIAL *pstOut = (DT_MATERIAL*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byMaterialType))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMaterialID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRequiredNum))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stDropInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byGetFlag))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_MATERIAL_LIST(void *pHost, CNetData* poNetData)
{
	DT_MATERIAL_LIST *pstIn = (DT_MATERIAL_LIST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byMaterialCnt))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_MATERIAL_NUM; i++)
	{
		if(i >= (INT32)pstIn->byMaterialCnt)
			break;
		if(-1 == EncodeDT_MATERIAL(&pstIn->astMaterialList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_MATERIAL_LIST(void *pHost, CNetData* poNetData)
{
	DT_MATERIAL_LIST *pstOut = (DT_MATERIAL_LIST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byMaterialCnt))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_MATERIAL_NUM; i++)
	{
		if(i >= (INT32)pstOut->byMaterialCnt)
			break;
		if(-1 == DecodeDT_MATERIAL(&pstOut->astMaterialList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_RECRUIT_HERO_DATA_v410(void *pHost, CNetData* poNetData)
{
	DT_RECRUIT_HERO_DATA_v410 *pstIn = (DT_RECRUIT_HERO_DATA_v410*)pHost;

	if(-1 == EncodeDT_RECRUIT_HERO_INFO(&pstIn->stHeroInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byNeedVisitNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCurVisitNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwVisitCoin))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVisitGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRecuitLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRequireJingjieLevel))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecuitUnLock))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byRecommend))
		return -1;

	if(-1 == EncodeDT_MATERIAL_LIST(&pstIn->stUpgradeMaterials, poNetData))
		return -1;

	if(-1 == EncodeDT_MATERIAL_LIST(&pstIn->stRecruitMaterials, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsFlyHero))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCanUpgrade))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byCanUpgrade)
			break;
		if(-1 == EncodeDT_RECRUIT_HERO_INFO(&pstIn->astUpgradeHeroInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_RECRUIT_HERO_DATA_v410(void *pHost, CNetData* poNetData)
{
	DT_RECRUIT_HERO_DATA_v410 *pstOut = (DT_RECRUIT_HERO_DATA_v410*)pHost;

	if(-1 == DecodeDT_RECRUIT_HERO_INFO(&pstOut->stHeroInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byNeedVisitNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCurVisitNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwVisitCoin))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVisitGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRecuitLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRequireJingjieLevel))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecuitUnLock))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byRecommend))
		return -1;

	if(-1 == DecodeDT_MATERIAL_LIST(&pstOut->stUpgradeMaterials, poNetData))
		return -1;

	if(-1 == DecodeDT_MATERIAL_LIST(&pstOut->stRecruitMaterials, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsFlyHero))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCanUpgrade))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byCanUpgrade)
			break;
		if(-1 == DecodeDT_RECRUIT_HERO_INFO(&pstOut->astUpgradeHeroInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_MAKE_BOOK(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_MAKE_BOOK *pstIn = (DT_EQUIP_MAKE_BOOK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wBookID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wBookCnt))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsMakable))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wEquipDressLvl))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byQuality))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEquipType))
		return -1;

	if(-1 == EncodeDT_MATERIAL_LIST(&pstIn->stMaterials, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyGold))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostCoin))
		return -1;

	if(-1 == EncodeDT_BATTLE_ATTRIBUTE2(&pstIn->stAttr, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_MAKE_BOOK(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_MAKE_BOOK *pstOut = (DT_EQUIP_MAKE_BOOK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wBookID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wBookCnt))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsMakable))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wEquipDressLvl))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byQuality))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEquipType))
		return -1;

	if(-1 == DecodeDT_MATERIAL_LIST(&pstOut->stMaterials, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyGold))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostCoin))
		return -1;

	if(-1 == DecodeDT_BATTLE_ATTRIBUTE2(&pstOut->stAttr, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_MAKE_BOOK_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_MAKE_BOOK_INFO_CLI *pstIn = (DT_EQUIP_MAKE_BOOK_INFO_CLI*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wBookID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBuyGold))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_MAKE_BOOK_INFO_CLI(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_MAKE_BOOK_INFO_CLI *pstOut = (DT_EQUIP_MAKE_BOOK_INFO_CLI*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wBookID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBuyGold))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_EQUIP_SERIES(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_SERIES *pstIn = (DT_EQUIP_SERIES*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSeriesID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wSeriesLevel))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszSeriesName, sizeof(pstIn->aszSeriesName)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byMakeCnt))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wMakeBookCnt))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_MAKE_BOOKS_NUM_OF_1_SERIES; i++)
	{
		if(i >= (INT32)pstIn->wMakeBookCnt)
			break;
		if(-1 == EncodeDT_EQUIP_MAKE_BOOK(&pstIn->astMakeBookList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_EQUIP_SERIES(void *pHost, CNetData* poNetData)
{
	DT_EQUIP_SERIES *pstOut = (DT_EQUIP_SERIES*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSeriesID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wSeriesLevel))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszSeriesName, sizeof(pstOut->aszSeriesName)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byMakeCnt))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wMakeBookCnt))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_MAKE_BOOKS_NUM_OF_1_SERIES; i++)
	{
		if(i >= (INT32)pstOut->wMakeBookCnt)
			break;
		if(-1 == DecodeDT_EQUIP_MAKE_BOOK(&pstOut->astMakeBookList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_FLY_COST(void *pHost, CNetData* poNetData)
{
	DT_FLY_COST *pstIn = (DT_FLY_COST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wRequiredNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FLY_COST(void *pHost, CNetData* poNetData)
{
	DT_FLY_COST *pstOut = (DT_FLY_COST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wRequiredNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FLY_GOAL(void *pHost, CNetData* poNetData)
{
	DT_FLY_GOAL *pstIn = (DT_FLY_GOAL*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszFlyGoalText, sizeof(pstIn->aszFlyGoalText)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsAchieveFlyGoal))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FLY_GOAL(void *pHost, CNetData* poNetData)
{
	DT_FLY_GOAL *pstOut = (DT_FLY_GOAL*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszFlyGoalText, sizeof(pstOut->aszFlyGoalText)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsAchieveFlyGoal))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_FLY_GOAL_LIST(void *pHost, CNetData* poNetData)
{
	DT_FLY_GOAL_LIST *pstIn = (DT_FLY_GOAL_LIST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byFlyGoalCnt))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FLY_GOAL_NUM; i++)
	{
		if(i >= (INT32)pstIn->byFlyGoalCnt)
			break;
		if(-1 == EncodeDT_FLY_GOAL(&pstIn->astFlyFoalList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_FLY_GOAL_LIST(void *pHost, CNetData* poNetData)
{
	DT_FLY_GOAL_LIST *pstOut = (DT_FLY_GOAL_LIST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byFlyGoalCnt))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FLY_GOAL_NUM; i++)
	{
		if(i >= (INT32)pstOut->byFlyGoalCnt)
			break;
		if(-1 == DecodeDT_FLY_GOAL(&pstOut->astFlyFoalList[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_ENCHANT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_ENCHANT_REQ *pstIn = (PKT_CLIGS_EQUIP_ENCHANT_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wIdx))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_ENCHANT_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_ENCHANT_REQ *pstOut = (PKT_CLIGS_EQUIP_ENCHANT_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wIdx))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_ENCHANT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_ENCHANT_ACK *pstIn = (PKT_CLIGS_EQUIP_ENCHANT_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_CLI_v410(&pstIn->stEquipInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EQUIP_ENCHANT_DATA_CLI(&pstIn->stEnchantInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstIn->stEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEnchantStoneNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_ENCHANT_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_ENCHANT_ACK *pstOut = (PKT_CLIGS_EQUIP_ENCHANT_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_CLI_v410(&pstOut->stEquipInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EQUIP_ENCHANT_DATA_CLI(&pstOut->stEnchantInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_EQUIP_DATA_STRENGTHEN_CLI(&pstOut->stEquipStrengthenInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEnchantStoneNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SMITHY_ACK_v410(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SMITHY_ACK_v410 *pstIn = (PKT_CLIGS_OPEN_SMITHY_ACK_v410*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStrengthenCountDown))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wStrengthenCD))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClrCDGold))
		return -1;

	INT32 i;
	for(i = 0; i < EQUIP_POS_NUM; i++)
	{
		if(-1 == EncodeDT_BUY_EQUIP_DATA(&pstIn->astByEquipInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddUint64(pstIn->qwBlueGas))
		return -1;

	if(-1 == EncodeDT_EQUIP_STRENGTHEN_ENCHANT_DATA_LST_CLI(&pstIn->stEquipList, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBuildID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SMITHY_ACK_v410(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SMITHY_ACK_v410 *pstOut = (PKT_CLIGS_OPEN_SMITHY_ACK_v410*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStrengthenCountDown))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wStrengthenCD))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClrCDGold))
		return -1;

	INT32 i;
		for(i = 0; i < EQUIP_POS_NUM; i++)
		{
			if(-1 == DecodeDT_BUY_EQUIP_DATA(&pstOut->astByEquipInfo[i], poNetData))
				return -1;
		}

	if(-1 == poNetData->DelUint64(pstOut->qwBlueGas))
		return -1;

	if(-1 == DecodeDT_EQUIP_STRENGTHEN_ENCHANT_DATA_LST_CLI(&pstOut->stEquipList, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBuildID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_RECRUIT_ACK_v410(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RECRUIT_ACK_v410 *pstIn = (PKT_CLIGS_OPEN_RECRUIT_ACK_v410*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJingJieLevel))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstIn->wHeroNum)
			break;
		if(-1 == EncodeDT_RECRUIT_HERO_DATA_v410(&pstIn->astHeroList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_RECRUIT_ACK_v410(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_RECRUIT_ACK_v410 *pstOut = (PKT_CLIGS_OPEN_RECRUIT_ACK_v410*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJingJieLevel))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_HERO_NUM; i++)
	{
		if(i >= (INT32)pstOut->wHeroNum)
			break;
		if(-1 == DecodeDT_RECRUIT_HERO_DATA_v410(&pstOut->astHeroList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_HERO_REQ *pstIn = (PKT_CLIGS_UPGRADE_HERO_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_HERO_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_HERO_REQ *pstOut = (PKT_CLIGS_UPGRADE_HERO_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPGRADE_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_HERO_ACK *pstIn = (PKT_CLIGS_UPGRADE_HERO_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == EncodeDT_RECRUIT_HERO_DATA_v410(&pstIn->stUpgradeHero, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerChange, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPGRADE_HERO_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPGRADE_HERO_ACK *pstOut = (PKT_CLIGS_UPGRADE_HERO_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == DecodeDT_RECRUIT_HERO_DATA_v410(&pstOut->stUpgradeHero, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerChange, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EQUIP_MAKE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_MAKE_REQ *pstIn = (PKT_CLIGS_OPEN_EQUIP_MAKE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wSeriesID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EQUIP_MAKE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_MAKE_REQ *pstOut = (PKT_CLIGS_OPEN_EQUIP_MAKE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wSeriesID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_EQUIP_MAKE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_MAKE_ACK *pstIn = (PKT_CLIGS_OPEN_EQUIP_MAKE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->bySeriesCnt))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SERIES_NUM; i++)
	{
		if(i >= (INT32)pstIn->bySeriesCnt)
			break;
		if(-1 == EncodeDT_EQUIP_SERIES(&pstIn->astSeriesList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byBuyMaterialVipLvl))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_EQUIP_MAKE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_EQUIP_MAKE_ACK *pstOut = (PKT_CLIGS_OPEN_EQUIP_MAKE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->bySeriesCnt))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SERIES_NUM; i++)
	{
		if(i >= (INT32)pstOut->bySeriesCnt)
			break;
		if(-1 == DecodeDT_EQUIP_SERIES(&pstOut->astSeriesList[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byBuyMaterialVipLvl))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_MAKE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_MAKE_REQ *pstIn = (PKT_CLIGS_EQUIP_MAKE_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wEquipBookID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCurBookNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsBuyMaterial))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_MAKE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_MAKE_REQ *pstOut = (PKT_CLIGS_EQUIP_MAKE_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wEquipBookID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCurBookNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsBuyMaterial))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_EQUIP_MAKE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_MAKE_ACK *pstIn = (PKT_CLIGS_EQUIP_MAKE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_EQUIP_MAKE_BOOK(&pstIn->stEquipBook, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wUpdateMakeBookCnt))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_MAKE_BOOKS_NUM_OF_1_SERIES; i++)
	{
		if(i >= (INT32)pstIn->wUpdateMakeBookCnt)
			break;
		if(-1 == EncodeDT_EQUIP_MAKE_BOOK_INFO_CLI(&pstIn->astUpdateMakeBookList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_EQUIP_MAKE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_EQUIP_MAKE_ACK *pstOut = (PKT_CLIGS_EQUIP_MAKE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_EQUIP_MAKE_BOOK(&pstOut->stEquipBook, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wUpdateMakeBookCnt))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_MAKE_BOOKS_NUM_OF_1_SERIES; i++)
	{
		if(i >= (INT32)pstOut->wUpdateMakeBookCnt)
			break;
		if(-1 == DecodeDT_EQUIP_MAKE_BOOK_INFO_CLI(&pstOut->astUpdateMakeBookList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FLY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FLY_REQ *pstIn = (PKT_CLIGS_OPEN_FLY_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FLY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FLY_REQ *pstOut = (PKT_CLIGS_OPEN_FLY_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_FLY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FLY_ACK *pstIn = (PKT_CLIGS_OPEN_FLY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byBasicAttrPromote))
		return -1;

	if(-1 == EncodeDT_FLY_GOAL_LIST(&pstIn->stFlyGoals, poNetData))
		return -1;

	INT32 i;
	for(i = 0; i < FLY_COST_MATERIAL_NUM; i++)
	{
		if(-1 == EncodeDT_FLY_COST(&pstIn->astFlyCostList[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_FLY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_FLY_ACK *pstOut = (PKT_CLIGS_OPEN_FLY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byBasicAttrPromote))
		return -1;

	if(-1 == DecodeDT_FLY_GOAL_LIST(&pstOut->stFlyGoals, poNetData))
		return -1;

	INT32 i;
		for(i = 0; i < FLY_COST_MATERIAL_NUM; i++)
		{
			if(-1 == DecodeDT_FLY_COST(&pstOut->astFlyCostList[i], poNetData))
				return -1;
		}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FLY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FLY_REQ *pstIn = (PKT_CLIGS_FLY_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwHeroID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FLY_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FLY_REQ *pstOut = (PKT_CLIGS_FLY_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwHeroID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_FLY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FLY_ACK *pstIn = (PKT_CLIGS_FLY_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wHeroLvl))
		return -1;

	if(-1 == EncodeDT_EXPERIENCE_DATA(&pstIn->stCoachHeroExpInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerChange, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_FLY_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_FLY_ACK *pstOut = (PKT_CLIGS_FLY_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wHeroLvl))
		return -1;

	if(-1 == DecodeDT_EXPERIENCE_DATA(&pstOut->stCoachHeroExpInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerChange, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BATTLE_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BATTLE_ACK5 *pstIn = (PKT_CLIGS_BATTLE_ACK5*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_ENCOURAGE_DATA(&pstIn->stBattleEncourage, poNetData))
		return -1;

	if(-1 == EncodeDT_DATA_AFTER_BATTLE_ENCOURAGE(&pstIn->stAfterBattleEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPassFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_DATA(&pstIn->astPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_DATA_AFTER_PASS_ENCOURAGE(&pstIn->astAfterPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_DATA(&pstIn->astPassEncourageBox[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_UNLOCK_DATA(&pstIn->astUnlockInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddByte(pstIn->byHaveNextInstance))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHaveNextInstance)
			break;
		if(-1 == EncodeDT_NEXT_INSTANCE_DATA(&pstIn->astNextInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_PHYSTRENGTH_DATA_CLI(&pstIn->stPhyStrengthInfo, poNetData))
		return -1;

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->AddByte(pstIn->abyGuide[i]))
			return -1;
	}

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszExtContext, sizeof(pstIn->aszExtContext)))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA5(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BATTLE_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BATTLE_ACK5 *pstOut = (PKT_CLIGS_BATTLE_ACK5*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_ENCOURAGE_DATA(&pstOut->stBattleEncourage, poNetData))
		return -1;

	if(-1 == DecodeDT_DATA_AFTER_BATTLE_ENCOURAGE(&pstOut->stAfterBattleEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPassFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_DATA(&pstOut->astPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_DATA_AFTER_PASS_ENCOURAGE(&pstOut->astAfterPassEncourage[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_DATA(&pstOut->astPassEncourageBox[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_UNLOCK_DATA(&pstOut->astUnlockInfo[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelByte(pstOut->byHaveNextInstance))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHaveNextInstance)
			break;
		if(-1 == DecodeDT_NEXT_INSTANCE_DATA(&pstOut->astNextInstanceInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_PHYSTRENGTH_DATA_CLI(&pstOut->stPhyStrengthInfo, poNetData))
		return -1;

	for(i = 0; i < MAX_GUIDE_NUM; i++)
	{
		if(-1 == poNetData->DelByte(pstOut->abyGuide[i]))
			return -1;
	}

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszExtContext, sizeof(pstOut->aszExtContext)))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA5(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHALLENGE_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_ACK5 *pstIn = (PKT_CLIGS_CHALLENGE_ACK5*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_CHALLENGE_PLAYER_DATA(&pstIn->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEnemyHeroNum)
			break;
		if(-1 == EncodeDT_ENEMY_HERO_DATA(&pstIn->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_RACE_CHALLENGE_ENCOURAGE_DATA(&pstIn->stChallengeEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA5(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHALLENGE_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_ACK5 *pstOut = (PKT_CLIGS_CHALLENGE_ACK5*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_CHALLENGE_PLAYER_DATA(&pstOut->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEnemyHeroNum)
			break;
		if(-1 == DecodeDT_ENEMY_HERO_DATA(&pstOut->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_RACE_CHALLENGE_ENCOURAGE_DATA(&pstOut->stChallengeEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA5(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLUNDER_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_ACK5 *pstIn = (PKT_CLIGS_PLUNDER_ACK5*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwEnemyID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCaptureID))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byUseItemFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byResistFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureGridIdx))
		return -1;

	if(-1 == EncodeDT_BECAPTURE_DATA(&pstIn->stBeCaptureInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_CHALLENGE_PLAYER_DATA(&pstIn->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstIn->byEnemyHeroNum)
			break;
		if(-1 == EncodeDT_ENEMY_HERO_DATA(&pstIn->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_PLUNDER_ENCOURAGE_DATA(&pstIn->stPlunderEncourage, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wVipExtNum))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wFreePlunderNum))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPlunderGold))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlunderItemNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byCaptureFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byCaptureFlag)
			break;
		if(-1 == EncodeDT_CAPTURE_DATA_CLI(&pstIn->astCaptureInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_TASK_DATA_LIST_CLI(&pstIn->stTaskInfoList, poNetData))
		return -1;

	if(-1 == EncodeDT_TASK_COND_RECORD_LIST(&pstIn->stTaskRecordList, poNetData))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA5(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLUNDER_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLUNDER_ACK5 *pstOut = (PKT_CLIGS_PLUNDER_ACK5*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwEnemyID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCaptureID))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byUseItemFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byResistFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureGridIdx))
		return -1;

	if(-1 == DecodeDT_BECAPTURE_DATA(&pstOut->stBeCaptureInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_CHALLENGE_PLAYER_DATA(&pstOut->stEnemyPlayerData, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byEnemyHeroNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_FORMATION_IDX_NUM; i++)
	{
		if(i >= (INT32)pstOut->byEnemyHeroNum)
			break;
		if(-1 == DecodeDT_ENEMY_HERO_DATA(&pstOut->astEnemyInfoList[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_PLUNDER_ENCOURAGE_DATA(&pstOut->stPlunderEncourage, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanPlunderNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wVipExtNum))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wFreePlunderNum))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPlunderGold))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlunderItemNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byCaptureFlag))
		return -1;

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byCaptureFlag)
			break;
		if(-1 == DecodeDT_CAPTURE_DATA_CLI(&pstOut->astCaptureInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_TASK_DATA_LIST_CLI(&pstOut->stTaskInfoList, poNetData))
		return -1;

	if(-1 == DecodeDT_TASK_COND_RECORD_LIST(&pstOut->stTaskRecordList, poNetData))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA5(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PKBATTLE_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PKBATTLE_ACK5 *pstIn = (PKT_CLIGS_PKBATTLE_ACK5*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA5(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PKBATTLE_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PKBATTLE_ACK5 *pstOut = (PKT_CLIGS_PKBATTLE_ACK5*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA5(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RDCHALLENGE_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RDCHALLENGE_ACK5 *pstIn = (PKT_CLIGS_RDCHALLENGE_ACK5*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_RDC_TAB_DATA(&pstIn->stTabInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_RDC_ENC_DATA(&pstIn->stEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurJingJie))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurPurpleGas))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wKindID))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA5(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RDCHALLENGE_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RDCHALLENGE_ACK5 *pstOut = (PKT_CLIGS_RDCHALLENGE_ACK5*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_RDC_TAB_DATA(&pstOut->stTabInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_RDC_ENC_DATA(&pstOut->stEncInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurJingJie))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurPurpleGas))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wKindID))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA5(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_CHALLENGE_MYSELF_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_MYSELF_ACK5 *pstIn = (PKT_CLIGS_CHALLENGE_MYSELF_ACK5*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA5(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_CHALLENGE_MYSELF_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_CHALLENGE_MYSELF_ACK5 *pstOut = (PKT_CLIGS_CHALLENGE_MYSELF_ACK5*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA5(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_HUNTING_BATTLE_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HUNTING_BATTLE_ACK5 *pstIn = (PKT_CLIGS_HUNTING_BATTLE_ACK5*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_REWARD_INFO(&pstIn->stBattleReward, poNetData))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO(&pstIn->stTaskScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwClosedMonsterNeedGold))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszBattleLostMsg, sizeof(pstIn->aszBattleLostMsg)))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwSyncDoorsTribute))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byScheduleChangeFlag))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHuntingLeftNum))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byIsGoldMode))
		return -1;

	if(-1 == EncodeDT_HUNTING_SCHEDULE_INFO2(&pstIn->stNewHuntingScheduleInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA5(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_HUNTING_BATTLE_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_HUNTING_BATTLE_ACK5 *pstOut = (PKT_CLIGS_HUNTING_BATTLE_ACK5*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_REWARD_INFO(&pstOut->stBattleReward, poNetData))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO(&pstOut->stTaskScheduleInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwClosedMonsterNeedGold))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszBattleLostMsg, sizeof(pstOut->aszBattleLostMsg)))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwSyncDoorsTribute))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byScheduleChangeFlag))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHuntingLeftNum))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byIsGoldMode))
		return -1;

	if(-1 == DecodeDT_HUNTING_SCHEDULE_INFO2(&pstOut->stNewHuntingScheduleInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA5(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_COURAGE_PLAYER_BATTLE_DATA5(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_PLAYER_BATTLE_DATA5 *pstIn = (DT_COURAGE_PLAYER_BATTLE_DATA5*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byBattleNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COURAGE_MEMBER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byBattleNum)
			break;
		if(-1 == EncodeDT_BATTLE_DATA5(&pstIn->astBattleInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_COURAGE_PLAYER_BATTLE_DATA5(void *pHost, CNetData* poNetData)
{
	DT_COURAGE_PLAYER_BATTLE_DATA5 *pstOut = (DT_COURAGE_PLAYER_BATTLE_DATA5*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byBattleNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_COURAGE_MEMBER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byBattleNum)
			break;
		if(-1 == DecodeDT_BATTLE_DATA5(&pstOut->astBattleInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_PLAYER_START_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_START_ACK5 *pstIn = (PKT_CLIGS_COURAGE_PLAYER_START_ACK5*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_MONSTER_DATA_LIST(&pstIn->stMonsterInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_COURAGE_GROUP_PLAYER_BATTLE_DATA(&pstIn->stGroupPlayerInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPassFlag))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	if(-1 == EncodeDT_COURAGE_JEWELRY_DATA_LST(&pstIn->stjewelryInfoLst, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHelpID))
		return -1;

	if(-1 == EncodeDT_COURAGE_PLAYER_BATTLE_DATA5(&pstIn->stBattleInfoCli, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_PLAYER_START_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_PLAYER_START_ACK5 *pstOut = (PKT_CLIGS_COURAGE_PLAYER_START_ACK5*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_MONSTER_DATA_LIST(&pstOut->stMonsterInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_COURAGE_GROUP_PLAYER_BATTLE_DATA(&pstOut->stGroupPlayerInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPassFlag))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	if(-1 == DecodeDT_COURAGE_JEWELRY_DATA_LST(&pstOut->stjewelryInfoLst, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHelpID))
		return -1;

	if(-1 == DecodeDT_COURAGE_PLAYER_BATTLE_DATA5(&pstOut->stBattleInfoCli, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_COURAGE_LEADER_START_NTF5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_LEADER_START_NTF5 *pstIn = (PKT_CLIGS_COURAGE_LEADER_START_NTF5*)pHost;

	if(-1 == EncodePKT_CLIGS_COURAGE_PLAYER_START_ACK5(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_COURAGE_LEADER_START_NTF5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_COURAGE_LEADER_START_NTF5 *pstOut = (PKT_CLIGS_COURAGE_LEADER_START_NTF5*)pHost;

	if(-1 == DecodePKT_CLIGS_COURAGE_PLAYER_START_ACK5(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_BEGIN_JIEBIAO_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_JIEBIAO_ACK5 *pstIn = (PKT_CLIGS_BEGIN_JIEBIAO_ACK5*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byYabiaoFlag))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurCoin))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwCurScience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwBeJiebiaoPlayerID))
		return -1;

	if(-1 == EncodeBIAO_OPERATE_INFO(&pstIn->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwJiebiaoPlayerID))
		return -1;

	if(-1 == EncodeBIAO_OPERATE_INFO(&pstIn->stJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wJiebiaoCD))
		return -1;

	if(-1 == EncodeDT_FUNC_PROMPT_DATA(&pstIn->stPromptInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA5(&pstIn->stBattleData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_BEGIN_JIEBIAO_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_BEGIN_JIEBIAO_ACK5 *pstOut = (PKT_CLIGS_BEGIN_JIEBIAO_ACK5*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byYabiaoFlag))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCoinEncourage))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwScienceEncourage))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurCoin))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwCurScience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwBeJiebiaoPlayerID))
		return -1;

	if(-1 == DecodeBIAO_OPERATE_INFO(&pstOut->stBeJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwJiebiaoPlayerID))
		return -1;

	if(-1 == DecodeBIAO_OPERATE_INFO(&pstOut->stJiebiaoInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wJiebiaoCD))
		return -1;

	if(-1 == DecodeDT_FUNC_PROMPT_DATA(&pstOut->stPromptInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA5(&pstOut->stBattleData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_BATTLE_RECORD_ACK5 *pstIn = (PKT_CLIGS_QUERY_BATTLE_RECORD_ACK5*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA5(&pstIn->stBattleData, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_QUERY_BATTLE_RECORD_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_QUERY_BATTLE_RECORD_ACK5 *pstOut = (PKT_CLIGS_QUERY_BATTLE_RECORD_ACK5*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA5(&pstOut->stBattleData, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPERATING_ACTIVITY_BATTLE_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPERATING_ACTIVITY_BATTLE_ACK5 *pstIn = (PKT_CLIGS_OPERATING_ACTIVITY_BATTLE_ACK5*)pHost;

	if(-1 == poNetData->AddTString(pstIn->aszErrInfo, sizeof(pstIn->aszErrInfo)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszBattleKey, sizeof(pstIn->aszBattleKey)))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPassFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_DATA(&pstIn->astPassEncourageBox[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byPassFlag)
			break;
		if(-1 == EncodeDT_DATA_AFTER_PASS_ENCOURAGE_BOX(&pstIn->astResSync[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_BATTLE_DATA5(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPERATING_ACTIVITY_BATTLE_ACK5(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPERATING_ACTIVITY_BATTLE_ACK5 *pstOut = (PKT_CLIGS_OPERATING_ACTIVITY_BATTLE_ACK5*)pHost;

	if(-1 == poNetData->DelTString(pstOut->aszErrInfo, sizeof(pstOut->aszErrInfo)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszBattleKey, sizeof(pstOut->aszBattleKey)))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPassFlag))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_DATA(&pstOut->astPassEncourageBox[i], poNetData))
			return -1;
	}

	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byPassFlag)
			break;
		if(-1 == DecodeDT_DATA_AFTER_PASS_ENCOURAGE_BOX(&pstOut->astResSync[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_BATTLE_DATA5(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PET_RULE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_RULE_REQ *pstIn = (PKT_CLIGS_OPEN_PET_RULE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PET_RULE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_RULE_REQ *pstOut = (PKT_CLIGS_OPEN_PET_RULE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PET_BOOK_DATA(void *pHost, CNetData* poNetData)
{
	DT_PET_BOOK_DATA *pstIn = (DT_PET_BOOK_DATA*)pHost;

	if(-1 == EncodeDT_PET_CLI_DATA(&pstIn->stPetInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byPetState))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PET_BOOK_DATA(void *pHost, CNetData* poNetData)
{
	DT_PET_BOOK_DATA *pstOut = (DT_PET_BOOK_DATA*)pHost;

	if(-1 == DecodeDT_PET_CLI_DATA(&pstOut->stPetInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byPetState))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PET_BOOK_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_PET_BOOK_DATA_LST *pstIn = (DT_PET_BOOK_DATA_LST*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPetNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_BOOK_NUM; i++)
	{
		if(i >= (INT32)pstIn->wPetNum)
			break;
		if(-1 == EncodeDT_PET_BOOK_DATA(&pstIn->astPetData[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->AddTString(pstIn->aszTitle, sizeof(pstIn->aszTitle)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PET_BOOK_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_PET_BOOK_DATA_LST *pstOut = (DT_PET_BOOK_DATA_LST*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPetNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_BOOK_NUM; i++)
	{
		if(i >= (INT32)pstOut->wPetNum)
			break;
		if(-1 == DecodeDT_PET_BOOK_DATA(&pstOut->astPetData[i], poNetData))
			return -1;
	}

	if(-1 == poNetData->DelTString(pstOut->aszTitle, sizeof(pstOut->aszTitle)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_PET_RULE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_RULE_ACK *pstIn = (PKT_CLIGS_OPEN_PET_RULE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PET_BOOK_DATA_LST(&pstIn->stLowPetInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_PET_BOOK_DATA_LST(&pstIn->stMiddlePetInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_PET_BOOK_DATA_LST(&pstIn->stHighPetInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_DATA_LIST_LESS_CLI3(&pstIn->stItemsInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszPetRule, sizeof(pstIn->aszPetRule)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszItemDesc, sizeof(pstIn->aszItemDesc)))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_PET_RULE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_PET_RULE_ACK *pstOut = (PKT_CLIGS_OPEN_PET_RULE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PET_BOOK_DATA_LST(&pstOut->stLowPetInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_PET_BOOK_DATA_LST(&pstOut->stMiddlePetInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_PET_BOOK_DATA_LST(&pstOut->stHighPetInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_DATA_LIST_LESS_CLI3(&pstOut->stItemsInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszPetRule, sizeof(pstOut->aszPetRule)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszItemDesc, sizeof(pstOut->aszItemDesc)))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_INFO_PET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_PET_REQ *pstIn = (PKT_CLIGS_PLAYER_INFO_PET_REQ*)pHost;

	if(-1 == poNetData->AddDword(pstIn->dwPlayerID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_INFO_PET_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_PET_REQ *pstOut = (PKT_CLIGS_PLAYER_INFO_PET_REQ*)pHost;

	if(-1 == poNetData->DelDword(pstOut->dwPlayerID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_PLAYER_INFO_PET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_PET_ACK *pstIn = (PKT_CLIGS_PLAYER_INFO_PET_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byHavePet))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstIn->byHavePet)
			break;
		if(-1 == EncodeDT_PET_CLI_DATA(&pstIn->astPetInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_PLAYER_INFO_PET_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_PLAYER_INFO_PET_ACK *pstOut = (PKT_CLIGS_PLAYER_INFO_PET_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byHavePet))
		return -1;

	INT32 i;
	for(i = 0; i < 1; i++)
	{
		if(i >= (INT32)pstOut->byHavePet)
			break;
		if(-1 == DecodeDT_PET_CLI_DATA(&pstOut->astPetInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_EXCHANGE_INFO(void *pHost, CNetData* poNetData)
{
	DT_ITEM_EXCHANGE_INFO *pstIn = (DT_ITEM_EXCHANGE_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_DISPALY_GOODS_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == EncodeDT_ITEM_DATA_CLI3(&pstIn->astItemList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_DISPALY_GOODS_NUM; i++)
	{
		if(i >= (INT32)pstIn->byItemNum)
			break;
		if(-1 == poNetData->AddWord(pstIn->awItemNeedNum[i]))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_EXCHANGE_INFO(void *pHost, CNetData* poNetData)
{
	DT_ITEM_EXCHANGE_INFO *pstOut = (DT_ITEM_EXCHANGE_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byItemNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_DISPALY_GOODS_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == DecodeDT_ITEM_DATA_CLI3(&pstOut->astItemList[i], poNetData))
			return -1;
	}

	for(i = 0; i < MAX_DISPALY_GOODS_NUM; i++)
	{
		if(i >= (INT32)pstOut->byItemNum)
			break;
		if(-1 == poNetData->DelWord(pstOut->awItemNeedNum[i]))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_POTENCY_ATTR_INFO(void *pHost, CNetData* poNetData)
{
	DT_POTENCY_ATTR_INFO *pstIn = (DT_POTENCY_ATTR_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPotencyID))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwPotencyValue))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_POTENCY_ATTR_INFO(void *pHost, CNetData* poNetData)
{
	DT_POTENCY_ATTR_INFO *pstOut = (DT_POTENCY_ATTR_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPotencyID))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwPotencyValue))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_POTENCY_ATTR_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_POTENCY_ATTR_LST_INFO *pstIn = (DT_POTENCY_ATTR_LST_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_POTENCY_ADD_ATTR_NUM; i++)
	{
		if(i >= (INT32)pstIn->byAttrNum)
			break;
		if(-1 == EncodeDT_POTENCY_ATTR_INFO(&pstIn->astAttrInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_POTENCY_ATTR_LST_INFO(void *pHost, CNetData* poNetData)
{
	DT_POTENCY_ATTR_LST_INFO *pstOut = (DT_POTENCY_ATTR_LST_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_POTENCY_ADD_ATTR_NUM; i++)
	{
		if(i >= (INT32)pstOut->byAttrNum)
			break;
		if(-1 == DecodeDT_POTENCY_ATTR_INFO(&pstOut->astAttrInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_POTENCY_ATTR_DATA(void *pHost, CNetData* poNetData)
{
	DT_POTENCY_ATTR_DATA *pstIn = (DT_POTENCY_ATTR_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_POTENCY_ATTR_NUM; i++)
	{
		if(i >= (INT32)pstIn->byAttrNum)
			break;
		if(-1 == EncodeDT_POTENCY_ATTR_INFO(&pstIn->astAttrInfo[i], poNetData))
			return -1;
	}

	if(-1 == EncodeDT_ITEM_EXCHANGE_INFO(&pstIn->stItemsInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNeedSoulLevel))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_POTENCY_ATTR_DATA(void *pHost, CNetData* poNetData)
{
	DT_POTENCY_ATTR_DATA *pstOut = (DT_POTENCY_ATTR_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byAttrNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_POTENCY_ATTR_NUM; i++)
	{
		if(i >= (INT32)pstOut->byAttrNum)
			break;
		if(-1 == DecodeDT_POTENCY_ATTR_INFO(&pstOut->astAttrInfo[i], poNetData))
			return -1;
	}

	if(-1 == DecodeDT_ITEM_EXCHANGE_INFO(&pstOut->stItemsInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNeedSoulLevel))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_POTENCY_ATTR_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_POTENCY_ATTR_DATA_LST *pstIn = (DT_POTENCY_ATTR_DATA_LST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_POTENCY_SUB_LEVEL; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_POTENCY_ATTR_DATA(&pstIn->astAttrValue[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_POTENCY_ATTR_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_POTENCY_ATTR_DATA_LST *pstOut = (DT_POTENCY_ATTR_DATA_LST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_POTENCY_SUB_LEVEL; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_POTENCY_ATTR_DATA(&pstOut->astAttrValue[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_POTENCY_DATA(void *pHost, CNetData* poNetData)
{
	DT_POTENCY_DATA *pstIn = (DT_POTENCY_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPotencyLevel))
		return -1;

	if(-1 == EncodeDT_POTENCY_ATTR_DATA_LST(&pstIn->stPotencyInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_POTENCY_DATA(void *pHost, CNetData* poNetData)
{
	DT_POTENCY_DATA *pstOut = (DT_POTENCY_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPotencyLevel))
		return -1;

	if(-1 == DecodeDT_POTENCY_ATTR_DATA_LST(&pstOut->stPotencyInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_POTENCY_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_POTENCY_DATA_LST *pstIn = (DT_POTENCY_DATA_LST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byPotencyNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_POTENCY_LEVEL; i++)
	{
		if(i >= (INT32)pstIn->byPotencyNum)
			break;
		if(-1 == EncodeDT_POTENCY_DATA(&pstIn->astPotencyLst[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_POTENCY_DATA_LST(void *pHost, CNetData* poNetData)
{
	DT_POTENCY_DATA_LST *pstOut = (DT_POTENCY_DATA_LST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byPotencyNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_SOUL_POTENCY_LEVEL; i++)
	{
		if(i >= (INT32)pstOut->byPotencyNum)
			break;
		if(-1 == DecodeDT_POTENCY_DATA(&pstOut->astPotencyLst[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_REQ *pstIn = (PKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_REQ*)pHost;

	if(-1 == EncodeDT_CLIGS_SOUL_MARK_DATA(&pstIn->stSoulMark, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_REQ *pstOut = (PKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_REQ*)pHost;

	if(-1 == DecodeDT_CLIGS_SOUL_MARK_DATA(&pstOut->stSoulMark, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_ACK *pstIn = (PKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SOUL_POTENCY_CLI(&pstIn->stPotencyInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POTENCY_DATA_LST(&pstIn->stAllPotency, poNetData))
		return -1;

	if(-1 == EncodeDT_POTENCY_ATTR_LST_INFO(&pstIn->stCountInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_ACK *pstOut = (PKT_CLIGS_OPEN_SOUL_UPDATE_TYPE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SOUL_POTENCY_CLI(&pstOut->stPotencyInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POTENCY_DATA_LST(&pstOut->stAllPotency, poNetData))
		return -1;

	if(-1 == DecodeDT_POTENCY_ATTR_LST_INFO(&pstOut->stCountInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SOUL_UPDATE_TYPE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SOUL_UPDATE_TYPE_REQ *pstIn = (PKT_CLIGS_SOUL_UPDATE_TYPE_REQ*)pHost;

	if(-1 == EncodeDT_CLIGS_SOUL_MARK_DATA(&pstIn->stSoulMark, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SOUL_UPDATE_TYPE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SOUL_UPDATE_TYPE_REQ *pstOut = (PKT_CLIGS_SOUL_UPDATE_TYPE_REQ*)pHost;

	if(-1 == DecodeDT_CLIGS_SOUL_MARK_DATA(&pstOut->stSoulMark, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SOUL_UPDATE_TYPE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SOUL_UPDATE_TYPE_ACK *pstIn = (PKT_CLIGS_SOUL_UPDATE_TYPE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SOUL_POTENCY_CLI(&pstIn->stPotencyInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POTENCY_ATTR_LST_INFO(&pstIn->stCountInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_ITEM_NUM_DATA_LIST_CLI(&pstIn->stItemsInfo, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerChangeInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SOUL_UPDATE_TYPE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SOUL_UPDATE_TYPE_ACK *pstOut = (PKT_CLIGS_SOUL_UPDATE_TYPE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SOUL_POTENCY_CLI(&pstOut->stPotencyInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POTENCY_ATTR_LST_INFO(&pstOut->stCountInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_ITEM_NUM_DATA_LIST_CLI(&pstOut->stItemsInfo, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerChangeInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_MARK_DATA(void *pHost, CNetData* poNetData)
{
	DT_ITEM_MARK_DATA *pstIn = (DT_ITEM_MARK_DATA*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wItemIdx))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_MARK_DATA(void *pHost, CNetData* poNetData)
{
	DT_ITEM_MARK_DATA *pstOut = (DT_ITEM_MARK_DATA*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wItemIdx))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_NEIDAN_BAG_MARK_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEIDAN_BAG_MARK_LST_DATA *pstIn = (DT_NEIDAN_BAG_MARK_LST_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEI_DAN_BAG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_ITEM_MARK_DATA(&pstIn->astNeiDanInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_NEIDAN_BAG_MARK_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEIDAN_BAG_MARK_LST_DATA *pstOut = (DT_NEIDAN_BAG_MARK_LST_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEI_DAN_BAG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_ITEM_MARK_DATA(&pstOut->astNeiDanInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_NEIDAN_PET_MARK_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEIDAN_PET_MARK_LST_DATA *pstIn = (DT_NEIDAN_PET_MARK_LST_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_NEIDAN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_ITEM_MARK_DATA(&pstIn->astNeiDanInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_NEIDAN_PET_MARK_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_NEIDAN_PET_MARK_LST_DATA *pstOut = (DT_NEIDAN_PET_MARK_LST_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_NEIDAN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_ITEM_MARK_DATA(&pstOut->astNeiDanInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRESS_NEIDAN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_NEIDAN_REQ *pstIn = (PKT_CLIGS_DRESS_NEIDAN_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byDressType))
		return -1;

	if(-1 == EncodeDT_ITEM_MARK_DATA(&pstIn->stNeiDan, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPetID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRESS_NEIDAN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_NEIDAN_REQ *pstOut = (PKT_CLIGS_DRESS_NEIDAN_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byDressType))
		return -1;

	if(-1 == DecodeDT_ITEM_MARK_DATA(&pstOut->stNeiDan, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPetID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_DRESS_NEIDAN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_NEIDAN_ACK *pstIn = (PKT_CLIGS_DRESS_NEIDAN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byDressType))
		return -1;

	if(-1 == EncodeDT_NEIDAN_PET_MARK_LST_DATA(&pstIn->stPetNeiDan, poNetData))
		return -1;

	if(-1 == EncodeDT_NEIDAN_BAG_MARK_LST_DATA(&pstIn->stBagNeiDan, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_DRESS_NEIDAN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_DRESS_NEIDAN_ACK *pstOut = (PKT_CLIGS_DRESS_NEIDAN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byDressType))
		return -1;

	if(-1 == DecodeDT_NEIDAN_PET_MARK_LST_DATA(&pstOut->stPetNeiDan, poNetData))
		return -1;

	if(-1 == DecodeDT_NEIDAN_BAG_MARK_LST_DATA(&pstOut->stBagNeiDan, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_NEIDAN_CLI(void *pHost, CNetData* poNetData)
{
	DT_NEIDAN_CLI *pstIn = (DT_NEIDAN_CLI*)pHost;

	if(-1 == EncodeDT_ITEM_MARK_DATA(&pstIn->stNeiDan, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wNeiDanLevel))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCurExperience))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwMaxExperience))
		return -1;

	if(-1 == poNetData->AddUint64(pstIn->qwBackExperience))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wDressReq))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwCostCoin))
		return -1;

	if(-1 == poNetData->AddDword(pstIn->dwLingLi))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_NEIDAN_CLI(void *pHost, CNetData* poNetData)
{
	DT_NEIDAN_CLI *pstOut = (DT_NEIDAN_CLI*)pHost;

	if(-1 == DecodeDT_ITEM_MARK_DATA(&pstOut->stNeiDan, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wNeiDanLevel))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCurExperience))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwMaxExperience))
		return -1;

	if(-1 == poNetData->DelUint64(pstOut->qwBackExperience))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wDressReq))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwCostCoin))
		return -1;

	if(-1 == poNetData->DelDword(pstOut->dwLingLi))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_PET_NEIDAN_CLI(void *pHost, CNetData* poNetData)
{
	DT_PET_NEIDAN_CLI *pstIn = (DT_PET_NEIDAN_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_NEIDAN_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_NEIDAN_CLI(&pstIn->astNeiDanInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_PET_NEIDAN_CLI(void *pHost, CNetData* poNetData)
{
	DT_PET_NEIDAN_CLI *pstOut = (DT_PET_NEIDAN_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_PET_NEIDAN_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_NEIDAN_CLI(&pstOut->astNeiDanInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_BAG_NEIDAN_CLI(void *pHost, CNetData* poNetData)
{
	DT_BAG_NEIDAN_CLI *pstIn = (DT_BAG_NEIDAN_CLI*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEI_DAN_BAG_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_NEIDAN_CLI(&pstIn->astNeiDanInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_BAG_NEIDAN_CLI(void *pHost, CNetData* poNetData)
{
	DT_BAG_NEIDAN_CLI *pstOut = (DT_BAG_NEIDAN_CLI*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEI_DAN_BAG_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_NEIDAN_CLI(&pstOut->astNeiDanInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_NEIDAN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_NEIDAN_REQ *pstIn = (PKT_CLIGS_OPEN_NEIDAN_REQ*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wPetID))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_NEIDAN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_NEIDAN_REQ *pstOut = (PKT_CLIGS_OPEN_NEIDAN_REQ*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wPetID))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_NEIDAN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_NEIDAN_ACK *pstIn = (PKT_CLIGS_OPEN_NEIDAN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszPetPic, sizeof(pstIn->aszPetPic)))
		return -1;

	if(-1 == EncodeDT_PET_NEIDAN_CLI(&pstIn->stPetNeiDan, poNetData))
		return -1;

	if(-1 == EncodeDT_BAG_NEIDAN_CLI(&pstIn->stBagNeiDan, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_NEIDAN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_NEIDAN_ACK *pstOut = (PKT_CLIGS_OPEN_NEIDAN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszPetPic, sizeof(pstOut->aszPetPic)))
		return -1;

	if(-1 == DecodeDT_PET_NEIDAN_CLI(&pstOut->stPetNeiDan, poNetData))
		return -1;

	if(-1 == DecodeDT_BAG_NEIDAN_CLI(&pstOut->stBagNeiDan, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPDATA_NEIDAN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATA_NEIDAN_REQ *pstIn = (PKT_CLIGS_UPDATA_NEIDAN_REQ*)pHost;

	if(-1 == EncodeDT_ITEM_MARK_DATA(&pstIn->stNeiDan, poNetData))
		return -1;

	if(-1 == EncodeDT_NEIDAN_BAG_MARK_LST_DATA(&pstIn->stDevorNeiDan, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPDATA_NEIDAN_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATA_NEIDAN_REQ *pstOut = (PKT_CLIGS_UPDATA_NEIDAN_REQ*)pHost;

	if(-1 == DecodeDT_ITEM_MARK_DATA(&pstOut->stNeiDan, poNetData))
		return -1;

	if(-1 == DecodeDT_NEIDAN_BAG_MARK_LST_DATA(&pstOut->stDevorNeiDan, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_UPDATA_NEIDAN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATA_NEIDAN_ACK *pstIn = (PKT_CLIGS_UPDATA_NEIDAN_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_NEIDAN_CLI(&pstIn->stNeiDan, poNetData))
		return -1;

	if(-1 == EncodeDT_NEIDAN_BAG_MARK_LST_DATA(&pstIn->stBagNeiDan, poNetData))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_DATA(&pstIn->stResSync, poNetData))
		return -1;

	if(-1 == EncodeDT_POWER_CHANGE_DATA(&pstIn->stPowerInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_UPDATA_NEIDAN_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_UPDATA_NEIDAN_ACK *pstOut = (PKT_CLIGS_UPDATA_NEIDAN_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_NEIDAN_CLI(&pstOut->stNeiDan, poNetData))
		return -1;

	if(-1 == DecodeDT_NEIDAN_BAG_MARK_LST_DATA(&pstOut->stBagNeiDan, poNetData))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_DATA(&pstOut->stResSync, poNetData))
		return -1;

	if(-1 == DecodeDT_POWER_CHANGE_DATA(&pstOut->stPowerInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_REQ *pstIn = (PKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_REQ *pstOut = (PKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_NAIDAN_INSTANCE_DATA(void *pHost, CNetData* poNetData)
{
	DT_NAIDAN_INSTANCE_DATA *pstIn = (DT_NAIDAN_INSTANCE_DATA*)pHost;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszInstanceName, sizeof(pstIn->aszInstanceName)))
		return -1;

	if(-1 == poNetData->AddTString(pstIn->aszItemDesc, sizeof(pstIn->aszItemDesc)))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wPlayerLevelReq))
		return -1;

	if(-1 == poNetData->AddByte(pstIn->byState))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_NAIDAN_INSTANCE_DATA(void *pHost, CNetData* poNetData)
{
	DT_NAIDAN_INSTANCE_DATA *pstOut = (DT_NAIDAN_INSTANCE_DATA*)pHost;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszInstanceName, sizeof(pstOut->aszInstanceName)))
		return -1;

	if(-1 == poNetData->DelTString(pstOut->aszItemDesc, sizeof(pstOut->aszItemDesc)))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wPlayerLevelReq))
		return -1;

	if(-1 == poNetData->DelByte(pstOut->byState))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_NAIDAN_INSTANCE_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_NAIDAN_INSTANCE_LST_DATA *pstIn = (DT_NAIDAN_INSTANCE_LST_DATA*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEIDAN_INSTANCE_NUM; i++)
	{
		if(i >= (INT32)pstIn->byInstanceNum)
			break;
		if(-1 == EncodeDT_NAIDAN_INSTANCE_DATA(&pstIn->astInstanceInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_NAIDAN_INSTANCE_LST_DATA(void *pHost, CNetData* poNetData)
{
	DT_NAIDAN_INSTANCE_LST_DATA *pstOut = (DT_NAIDAN_INSTANCE_LST_DATA*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byInstanceNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEIDAN_INSTANCE_NUM; i++)
	{
		if(i >= (INT32)pstOut->byInstanceNum)
			break;
		if(-1 == DecodeDT_NAIDAN_INSTANCE_DATA(&pstOut->astInstanceInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_ACK *pstIn = (PKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PLAYER_RES_LST_DATA(&pstIn->stResInfo, poNetData))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wCanBattleNum))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stSelectInstance, poNetData))
		return -1;

	if(-1 == EncodeDT_NAIDAN_INSTANCE_LST_DATA(&pstIn->stInstanceLst, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_ACK *pstOut = (PKT_CLIGS_OPEN_NEIDAN_ALL_INSTANCE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PLAYER_RES_LST_DATA(&pstOut->stResInfo, poNetData))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wCanBattleNum))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stSelectInstance, poNetData))
		return -1;

	if(-1 == DecodeDT_NAIDAN_INSTANCE_LST_DATA(&pstOut->stInstanceLst, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_NEIDAN_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_NEIDAN_BATTLE_REQ *pstIn = (PKT_CLIGS_NEIDAN_BATTLE_REQ*)pHost;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_NEIDAN_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_NEIDAN_BATTLE_REQ *pstOut = (PKT_CLIGS_NEIDAN_BATTLE_REQ*)pHost;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_NEIDAN_BATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_NEIDAN_BATTLE_ACK *pstIn = (PKT_CLIGS_NEIDAN_BATTLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_DATA(&pstIn->stPassEncourage, poNetData))
		return -1;

	if(-1 == EncodeDT_BATTLE_DATA5(&pstIn->stBattleInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_NEIDAN_BATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_NEIDAN_BATTLE_ACK *pstOut = (PKT_CLIGS_NEIDAN_BATTLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_DATA(&pstOut->stPassEncourage, poNetData))
		return -1;

	if(-1 == DecodeDT_BATTLE_DATA5(&pstOut->stBattleInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_NEIDAN_AWARD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_NEIDAN_AWARD_REQ *pstIn = (PKT_CLIGS_RECV_NEIDAN_AWARD_REQ*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byExt))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_NEIDAN_AWARD_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_NEIDAN_AWARD_REQ *pstOut = (PKT_CLIGS_RECV_NEIDAN_AWARD_REQ*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byExt))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_RECV_NEIDAN_AWARD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_NEIDAN_AWARD_ACK *pstIn = (PKT_CLIGS_RECV_NEIDAN_AWARD_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stNextInstance, poNetData))
		return -1;

	if(-1 == EncodeDT_PASS_ENCOURAGE_BOX_DATA(&pstIn->stPassEncourage, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_RECV_NEIDAN_AWARD_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_RECV_NEIDAN_AWARD_ACK *pstOut = (PKT_CLIGS_RECV_NEIDAN_AWARD_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stNextInstance, poNetData))
		return -1;

	if(-1 == DecodeDT_PASS_ENCOURAGE_BOX_DATA(&pstOut->stPassEncourage, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SKIP_NEIDAN_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SKIP_NEIDAN_BATTLE_REQ *pstIn = (PKT_CLIGS_SKIP_NEIDAN_BATTLE_REQ*)pHost;

	if(-1 == EncodeDT_INSTANCE_ID(&pstIn->stInstanceID, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SKIP_NEIDAN_BATTLE_REQ(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SKIP_NEIDAN_BATTLE_REQ *pstOut = (PKT_CLIGS_SKIP_NEIDAN_BATTLE_REQ*)pHost;

	if(-1 == DecodeDT_INSTANCE_ID(&pstOut->stInstanceID, poNetData))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_NUM_INFO(void *pHost, CNetData* poNetData)
{
	DT_ITEM_NUM_INFO *pstIn = (DT_ITEM_NUM_INFO*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wItemID))
		return -1;

	if(-1 == poNetData->AddWord(pstIn->wItemNum))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_NUM_INFO(void *pHost, CNetData* poNetData)
{
	DT_ITEM_NUM_INFO *pstOut = (DT_ITEM_NUM_INFO*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wItemID))
		return -1;

	if(-1 == poNetData->DelWord(pstOut->wItemNum))
		return -1;

	return sizeof(*pstOut);
}

INT32 EncodeDT_ITEM_NUM_INFO_LST(void *pHost, CNetData* poNetData)
{
	DT_ITEM_NUM_INFO_LST *pstIn = (DT_ITEM_NUM_INFO_LST*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GROUP_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstIn->byNum)
			break;
		if(-1 == EncodeDT_ITEM_NUM_INFO(&pstIn->astItemInfo[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_ITEM_NUM_INFO_LST(void *pHost, CNetData* poNetData)
{
	DT_ITEM_NUM_INFO_LST *pstOut = (DT_ITEM_NUM_INFO_LST*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_GROUP_ITEM_NUM; i++)
	{
		if(i >= (INT32)pstOut->byNum)
			break;
		if(-1 == DecodeDT_ITEM_NUM_INFO(&pstOut->astItemInfo[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodeDT_SKIP_NEIDAN_AWARD_ITEM_INFO(void *pHost, CNetData* poNetData)
{
	DT_SKIP_NEIDAN_AWARD_ITEM_INFO *pstIn = (DT_SKIP_NEIDAN_AWARD_ITEM_INFO*)pHost;

	if(-1 == poNetData->AddByte(pstIn->byMonsterNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEIDAN_MONSTER_NUM; i++)
	{
		if(i >= (INT32)pstIn->byMonsterNum)
			break;
		if(-1 == EncodeDT_ITEM_NUM_INFO_LST(&pstIn->astAwardItemInfoLst[i], poNetData))
			return -1;
	}

	return poNetData->GetDataLen();
}

INT32 DecodeDT_SKIP_NEIDAN_AWARD_ITEM_INFO(void *pHost, CNetData* poNetData)
{
	DT_SKIP_NEIDAN_AWARD_ITEM_INFO *pstOut = (DT_SKIP_NEIDAN_AWARD_ITEM_INFO*)pHost;

	if(-1 == poNetData->DelByte(pstOut->byMonsterNum))
		return -1;

	INT32 i;
	for(i = 0; i < MAX_NEIDAN_MONSTER_NUM; i++)
	{
		if(i >= (INT32)pstOut->byMonsterNum)
			break;
		if(-1 == DecodeDT_ITEM_NUM_INFO_LST(&pstOut->astAwardItemInfoLst[i], poNetData))
			return -1;
	}

	return sizeof(*pstOut);
}

INT32 EncodePKT_CLIGS_SKIP_NEIDAN_BATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SKIP_NEIDAN_BATTLE_ACK *pstIn = (PKT_CLIGS_SKIP_NEIDAN_BATTLE_ACK*)pHost;

	if(-1 == poNetData->AddWord(pstIn->wErrCode))
		return -1;

	if(-1 == EncodeDT_SKIP_NEIDAN_AWARD_ITEM_INFO(&pstIn->stAwardInfo, poNetData))
		return -1;

	return poNetData->GetDataLen();
}

INT32 DecodePKT_CLIGS_SKIP_NEIDAN_BATTLE_ACK(void *pHost, CNetData* poNetData)
{
	PKT_CLIGS_SKIP_NEIDAN_BATTLE_ACK *pstOut = (PKT_CLIGS_SKIP_NEIDAN_BATTLE_ACK*)pHost;

	if(-1 == poNetData->DelWord(pstOut->wErrCode))
		return -1;

	if(-1 == DecodeDT_SKIP_NEIDAN_AWARD_ITEM_INFO(&pstOut->stAwardInfo, poNetData))
		return -1;

	return sizeof(*pstOut);
}

