FILE_LIST_C		= $(shell find . -name "*.c")
FILE_LIST_CPP	= $(shell find . -name "*.cpp")

# patsubst = 替换字符串，如: $(patsubst %.cpp,%.o,"abc.cpp") = "abc.o"

COMM_OBJ        = $(patsubst %.cpp,%.o,${FILE_LIST_CPP}) $(patsubst %.c,%.o,${FILE_LIST_C}) $(patsubst %.cpp,%.o,$(OTHER_SRC_CPP:.cc=.o)) $(patsubst %.c,%.o,${OTHER_SRC_C})
ALL_OBJ			= $(notdir ${COMM_OBJ})

# ar = archive 是生成静态链接库的工具
A_LINK      = ar rv

# -shared = 生成动态连接库
# -fPIC = 编译为位置独立(地址无关)的代码
# -Wall = 开启所有警告（小部分警告不会开启）
# -Wno-unused = 屏蔽未初始化警告
# -w = 关闭警告
CPPFLAGS= -W -Wall -Wno-unused -Wno-reorder -m${long_bit} $(MACD) -pipe
COMPILE_STANDARD = -std=c++0x

ifdef EXEC_FILE
	OUT_DIR     = ${bin_dir}/${compile_type}/${MODULE}/
else
	OUT_DIR     = ${lib_dir}
endif

ifeq (${compile_type}, release)
	COMP   		= g++ -O2 ${CPPFLAGS} -fPIC -c ${COMPILE_STANDARD} 
	COMPC   	= gcc -O2 ${CPPFLAGS} -fPIC -c 
	SO_LINK     = g++ -O2 ${CPPFLAGS} -fPIC -shared ${COMPILE_STANDARD} -o 
	EXEC_LINK   = g++ -O2 ${CPPFLAGS} ${COMPILE_STANDARD} -o	
else
	COMP   		= g++ ${CPPFLAGS} -g -fPIC -c -D_DEBUG ${COMPILE_STANDARD}  		
	COMPC   	= gcc ${CPPFLAGS} -g -fPIC -c -D_DEBUG
	SO_LINK     = g++ ${CPPFLAGS} -g -fPIC -shared ${COMPILE_STANDARD} -o
	EXEC_LINK   = g++ ${CPPFLAGS} -g ${COMPILE_STANDARD} -o
endif

all : $(COMP_ONLY) $(LIBA_FILE) $(LIBSO_FILE) $(EXEC_FILE) 

clean : 
	rm -f *.o *.a *.so $(COMM_OBJ) $(LIBA_FILE) $(LIBSO_FILE) $(EXEC_FILE) $(PCH)

touch :
	touch *.h; touch *.c; touch *.cpp


install:$(LIBA_FILE) $(EXEC_FILE) $(LIBSO_FILE)

	mkdir -p ${OUT_DIR}; 

	if [ -n '$(LIBA_FILE)' ] ;  \
	then  \
    		cp -rf $(LIBA_FILE) $(OUT_DIR) ; \
	fi

	if [ -n '$(LIBSO_FILE)' ] ;  \
	then  \
    		cp -rf $(LIBSO_FILE) $(OUT_DIR) ; \
	fi

	if [ -n '$(EXEC_FILE)' ] ;  \
	then  \
    		cp -rf $(EXEC_FILE) $(OUT_DIR) ; \
	fi

print:
	echo base_dir = ${base_dir}
	echo lib_dir = ${lib_dir}
	echo OUT_DIR = ${OUT_DIR}
	echo OTHER_SRC_CPP = ${OTHER_SRC_CPP}
	echo ${compile_type}

$(COMP_ONLY): $(COMM_OBJ)	

$(LIBA_FILE) : $(COMM_OBJ)
	$(A_LINK) $@ $(COMM_OBJ)

${LIBSO_FILE} : ${COMM_OBJ}
	${SO_LINK} $@ ${COMM_OBJ} -L${LIB_DIR} ${INLIB_FILE} ${INLIB_DIR} ${INC_PATH}

${EXEC_FILE} : ${COMM_OBJ}
	${EXEC_LINK} $@ ${COMM_OBJ} -L${LIB_DIR} ${INLIB_FILE} ${INLIB_DIR} ${INC_PATH} 

${COMM_OBJ} : $(PCH)

# $@ = 目标文件的完整名称
# $< = 第一个依赖文件的名称

# Pre-compiled header
$(PCH): 
	$(COMP) $(INC_PATH) -g $(PCH_H)

.c.o:
	${COMPC} ${INC_PATH} -o $@ $<

.cpp.o:
	${COMP} ${INC_PATH} -include ${PCH_H} -o $@ $<

.cc.o:
	${COMP} ${INC_PATH} -include ${PCH_H} -o $@ $<
