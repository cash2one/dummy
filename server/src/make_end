FILE_LIST_C		= $(shell find . -name "*.c")
FILE_LIST_CPP	= $(shell find . -name "*.cpp")

ALL_HEADER = $(shell find . -name "*.h") 
# patsubst = 替换字符串，如: $(patsubst %.cpp,%.o,"abc.cpp") = "abc.o"
LOCAL_SRC = $(shell find . -name "*.cpp" -o -name "*.cc")

ALL_SRC  = $(LOCAL_SRC) ${OTHER_SRC}
ALL_OBJS = $(patsubst %.cc,%.o, $(patsubst %.cpp,%.o,${ALL_SRC}))
ALL_DEPS = $(patsubst %.o,%.d,$(patsubst %.cc,%.o, $(patsubst %.cpp,%.o,${LOCAL_SRC}))) 
TARGET = $(LIBA_FILE) $(EXEC_FILE) $(LIBSO_FILE)

MISSING_DEPS :=$(filter-out $(wildcard $(ALL_DEPS)),$(ALL_DEPS)) 

# start config options
ifdef EXEC_FILE
	OUT_DIR     = ${bin_dir}/${compile_type}/${MODULE}/
else
	OUT_DIR     = ${lib_dir}
endif

# -shared = 生成动态连接库
# -fPIC = 编译为位置独立(地址无关)的代码
# -Wall = 开启所有警告（小部分警告不会开启）
# -Wno-unused = 屏蔽未初始化警告
# -w = 关闭警告
CPPFLAGS = -W -Wall -Wno-unused -Wno-reorder -m${long_bit} $(MACD) -pipe -std=c++0x -MMD

# ar = archive 是生成静态链接库的工具
A_LINK      = ar rv

ifeq (${compile_type}, release)
	GCC   		= g++ -O2 ${CPPFLAGS} -fPIC -c -DNDEBUG
	SO_LINK     = g++ -O2 ${CPPFLAGS} -fPIC -shared -o 
	EXEC_LINK   = g++ -O2 ${CPPFLAGS} -o	
else
	GCC   		= g++ ${CPPFLAGS} -g -fPIC -c -D_DEBUG
	SO_LINK     = g++ ${CPPFLAGS} -g -fPIC -shared -o
	EXEC_LINK   = g++ ${CPPFLAGS} -g -o
endif

all : $(TARGET) 

clean : 
	rm -f *.o *.a *.so $(ALL_OBJS) $(ALL_DEPS) $(LIBA_FILE) $(LIBSO_FILE) $(EXEC_FILE) $(PCH)

touch :
	touch *.h; touch *.c; touch *.cpp

install:$(TARGET)
	@mkdir -p ${OUT_DIR}; 

	@if [ -n '$(TARGET)' ] ;  \
	then  \
    		cp -rfu $(TARGET) $(OUT_DIR) ; \
	fi

print:
	@echo ----------------------
	@echo base_dir = ${base_dir}
	@echo ----------------------
	@echo lib_dir = ${lib_dir}
	@echo ----------------------
	@echo OUT_DIR = ${OUT_DIR}
	@echo ----------------------
	@echo OTHER_SRC = ${OTHER_SRC}
	@echo ----------------------
	@echo ${compile_type}
	@echo ----------------------
	@echo ALL_SRC = ${ALL_SRC}
	@echo ----------------------
	@echo ALL_OBJS = ${ALL_OBJS}
	@echo ----------------------
	@echo ALL_DEPS = $(ALL_DEPS)
	@echo ----------------------
	@echo MISSING_DEPS = $(MISSING_DEPS)
	@echo ----------------------
	@echo PROJ_RELY = $(PROJ_RELY)

$(LIBA_FILE) : $(ALL_OBJS) ${PROJ_RELY}
	$(A_LINK) $@ $(ALL_OBJS)

${LIBSO_FILE} : ${ALL_OBJS} ${PROJ_RELY}
	${SO_LINK} $@ ${ALL_OBJS} ${INLIB_FILE} ${INLIB_DIR} ${INC_PATH}

${EXEC_FILE} : ${ALL_OBJS} ${PROJ_RELY}
	${EXEC_LINK} $@ ${ALL_OBJS} ${INLIB_FILE} ${INLIB_DIR} ${INC_PATH} 

${ALL_OBJS} : $(PCH)

# $@ = 目标文件的完整名称
# $< = 指所有依赖文件中的第一个文件

# Pre-compiled header

$(PCH): 
	$(GCC) $(INC_PATH) -g $(PCH_H)

%.o:%.cpp
	${GCC} ${INC_PATH} -include ${PCH_H} -o $@ $<

%.o:%.cc
	${GCC} ${INC_PATH} -include ${PCH_H} -o $@ $<

#%.o %.d: %.cpp
#	@set -e; rm -f $@; \
#	$(GCC) -MM ${INC_PATH} -include ${PCH_H} $< > $@.$$$$; \
#	sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' < $@.$$$$ > $@; \
#	rm -f $@.$$$$

-include $(ALL_DEPS)