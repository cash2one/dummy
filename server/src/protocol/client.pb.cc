// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: client.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "client.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* EncryptKeyNtf_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EncryptKeyNtf_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* LoginReq_LoginType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* EncryptKeyDef_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_client_2eproto() {
  protobuf_AddDesc_client_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "client.proto");
  GOOGLE_CHECK(file != NULL);
  EncryptKeyNtf_descriptor_ = file->message_type(0);
  static const int EncryptKeyNtf_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptKeyNtf, encryptkey_),
  };
  EncryptKeyNtf_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EncryptKeyNtf_descriptor_,
      EncryptKeyNtf::default_instance_,
      EncryptKeyNtf_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptKeyNtf, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EncryptKeyNtf, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EncryptKeyNtf));
  LoginReq_descriptor_ = file->message_type(1);
  static const int LoginReq_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, clientversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, notifyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, zoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, userid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, logintype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, authtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, authkey_),
  };
  LoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginReq_descriptor_,
      LoginReq::default_instance_,
      LoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginReq));
  LoginReq_LoginType_descriptor_ = LoginReq_descriptor_->enum_type(0);
  EncryptKeyDef_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_client_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EncryptKeyNtf_descriptor_, &EncryptKeyNtf::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginReq_descriptor_, &LoginReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_client_2eproto() {
  delete EncryptKeyNtf::default_instance_;
  delete EncryptKeyNtf_reflection_;
  delete LoginReq::default_instance_;
  delete LoginReq_reflection_;
}

void protobuf_AddDesc_client_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014client.proto\"#\n\rEncryptKeyNtf\022\022\n\nencry"
    "ptKey\030\001 \002(\t\"\210\002\n\010LoginReq\022\025\n\rclientVersio"
    "n\030\001 \002(\005\022\020\n\010deviceid\030\002 \002(\t\022\020\n\010notifyid\030\003 "
    "\002(\t\022\020\n\010username\030\004 \002(\t\022\016\n\006zoneid\030\005 \002(\005\022\016\n"
    "\006userid\030\006 \002(\005\022\020\n\010playerid\030\007 \002(\005\022\013\n\003job\030\010"
    " \002(\t\022&\n\tloginType\030\t \002(\0162\023.LoginReq.Login"
    "Type\022\020\n\010authType\030\n \002(\005\022\017\n\007authKey\030\013 \002(\t\""
    "%\n\tLoginType\022\013\n\007NewRole\020\000\022\013\n\007OldRole\020\001*J"
    "\n\rEncryptKeyDef\022\021\n\rEncryptKeyLen\020 \022\022\n\016En"
    "cryptHeadLen\020\002\022\022\n\016EncryptTailLen\020\004", 394);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "client.proto", &protobuf_RegisterTypes);
  EncryptKeyNtf::default_instance_ = new EncryptKeyNtf();
  LoginReq::default_instance_ = new LoginReq();
  EncryptKeyNtf::default_instance_->InitAsDefaultInstance();
  LoginReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_client_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_client_2eproto {
  StaticDescriptorInitializer_client_2eproto() {
    protobuf_AddDesc_client_2eproto();
  }
} static_descriptor_initializer_client_2eproto_;
const ::google::protobuf::EnumDescriptor* EncryptKeyDef_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncryptKeyDef_descriptor_;
}
bool EncryptKeyDef_IsValid(int value) {
  switch(value) {
    case 2:
    case 4:
    case 32:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int EncryptKeyNtf::kEncryptKeyFieldNumber;
#endif  // !_MSC_VER

EncryptKeyNtf::EncryptKeyNtf()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EncryptKeyNtf::InitAsDefaultInstance() {
}

EncryptKeyNtf::EncryptKeyNtf(const EncryptKeyNtf& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EncryptKeyNtf::SharedCtor() {
  _cached_size_ = 0;
  encryptkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EncryptKeyNtf::~EncryptKeyNtf() {
  SharedDtor();
}

void EncryptKeyNtf::SharedDtor() {
  if (encryptkey_ != &::google::protobuf::internal::kEmptyString) {
    delete encryptkey_;
  }
  if (this != default_instance_) {
  }
}

void EncryptKeyNtf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EncryptKeyNtf::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EncryptKeyNtf_descriptor_;
}

const EncryptKeyNtf& EncryptKeyNtf::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

EncryptKeyNtf* EncryptKeyNtf::default_instance_ = NULL;

EncryptKeyNtf* EncryptKeyNtf::New() const {
  return new EncryptKeyNtf;
}

void EncryptKeyNtf::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_encryptkey()) {
      if (encryptkey_ != &::google::protobuf::internal::kEmptyString) {
        encryptkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EncryptKeyNtf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string encryptKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_encryptkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->encryptkey().data(), this->encryptkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EncryptKeyNtf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string encryptKey = 1;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->encryptkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EncryptKeyNtf::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string encryptKey = 1;
  if (has_encryptkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->encryptkey().data(), this->encryptkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->encryptkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EncryptKeyNtf::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string encryptKey = 1;
    if (has_encryptkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->encryptkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EncryptKeyNtf::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EncryptKeyNtf* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EncryptKeyNtf*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EncryptKeyNtf::MergeFrom(const EncryptKeyNtf& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_encryptkey()) {
      set_encryptkey(from.encryptkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EncryptKeyNtf::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EncryptKeyNtf::CopyFrom(const EncryptKeyNtf& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EncryptKeyNtf::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void EncryptKeyNtf::Swap(EncryptKeyNtf* other) {
  if (other != this) {
    std::swap(encryptkey_, other->encryptkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EncryptKeyNtf::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EncryptKeyNtf_descriptor_;
  metadata.reflection = EncryptKeyNtf_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* LoginReq_LoginType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReq_LoginType_descriptor_;
}
bool LoginReq_LoginType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const LoginReq_LoginType LoginReq::NewRole;
const LoginReq_LoginType LoginReq::OldRole;
const LoginReq_LoginType LoginReq::LoginType_MIN;
const LoginReq_LoginType LoginReq::LoginType_MAX;
const int LoginReq::LoginType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int LoginReq::kClientVersionFieldNumber;
const int LoginReq::kDeviceidFieldNumber;
const int LoginReq::kNotifyidFieldNumber;
const int LoginReq::kUsernameFieldNumber;
const int LoginReq::kZoneidFieldNumber;
const int LoginReq::kUseridFieldNumber;
const int LoginReq::kPlayeridFieldNumber;
const int LoginReq::kJobFieldNumber;
const int LoginReq::kLoginTypeFieldNumber;
const int LoginReq::kAuthTypeFieldNumber;
const int LoginReq::kAuthKeyFieldNumber;
#endif  // !_MSC_VER

LoginReq::LoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LoginReq::InitAsDefaultInstance() {
}

LoginReq::LoginReq(const LoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LoginReq::SharedCtor() {
  _cached_size_ = 0;
  clientversion_ = 0;
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notifyid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  username_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoneid_ = 0;
  userid_ = 0;
  playerid_ = 0;
  job_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  logintype_ = 0;
  authtype_ = 0;
  authkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginReq::~LoginReq() {
  SharedDtor();
}

void LoginReq::SharedDtor() {
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (notifyid_ != &::google::protobuf::internal::kEmptyString) {
    delete notifyid_;
  }
  if (username_ != &::google::protobuf::internal::kEmptyString) {
    delete username_;
  }
  if (job_ != &::google::protobuf::internal::kEmptyString) {
    delete job_;
  }
  if (authkey_ != &::google::protobuf::internal::kEmptyString) {
    delete authkey_;
  }
  if (this != default_instance_) {
  }
}

void LoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginReq_descriptor_;
}

const LoginReq& LoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_client_2eproto();
  return *default_instance_;
}

LoginReq* LoginReq::default_instance_ = NULL;

LoginReq* LoginReq::New() const {
  return new LoginReq;
}

void LoginReq::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clientversion_ = 0;
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
    if (has_notifyid()) {
      if (notifyid_ != &::google::protobuf::internal::kEmptyString) {
        notifyid_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google::protobuf::internal::kEmptyString) {
        username_->clear();
      }
    }
    zoneid_ = 0;
    userid_ = 0;
    playerid_ = 0;
    if (has_job()) {
      if (job_ != &::google::protobuf::internal::kEmptyString) {
        job_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    logintype_ = 0;
    authtype_ = 0;
    if (has_authkey()) {
      if (authkey_ != &::google::protobuf::internal::kEmptyString) {
        authkey_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 clientVersion = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clientversion_)));
          set_has_clientversion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_deviceid;
        break;
      }

      // required string deviceid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_notifyid;
        break;
      }

      // required string notifyid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notifyid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notifyid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notifyid().data(), this->notifyid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_username;
        break;
      }

      // required string username = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_username:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zoneid;
        break;
      }

      // required int32 zoneid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_userid;
        break;
      }

      // required int32 userid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &userid_)));
          set_has_userid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_playerid;
        break;
      }

      // required int32 playerid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_job;
        break;
      }

      // required string job = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_job:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_job()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->job().data(), this->job().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_loginType;
        break;
      }

      // required .LoginReq.LoginType loginType = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LoginReq_LoginType_IsValid(value)) {
            set_logintype(static_cast< ::LoginReq_LoginType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(9, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_authType;
        break;
      }

      // required int32 authType = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_authType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &authtype_)));
          set_has_authtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_authKey;
        break;
      }

      // required string authKey = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_authKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_authkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->authkey().data(), this->authkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 clientVersion = 1;
  if (has_clientversion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clientversion(), output);
  }

  // required string deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->deviceid(), output);
  }

  // required string notifyid = 3;
  if (has_notifyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notifyid().data(), this->notifyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->notifyid(), output);
  }

  // required string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->username(), output);
  }

  // required int32 zoneid = 5;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->zoneid(), output);
  }

  // required int32 userid = 6;
  if (has_userid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->userid(), output);
  }

  // required int32 playerid = 7;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->playerid(), output);
  }

  // required string job = 8;
  if (has_job()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->job(), output);
  }

  // required .LoginReq.LoginType loginType = 9;
  if (has_logintype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->logintype(), output);
  }

  // required int32 authType = 10;
  if (has_authtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->authtype(), output);
  }

  // required string authKey = 11;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->authkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 clientVersion = 1;
  if (has_clientversion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clientversion(), target);
  }

  // required string deviceid = 2;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceid(), target);
  }

  // required string notifyid = 3;
  if (has_notifyid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notifyid().data(), this->notifyid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->notifyid(), target);
  }

  // required string username = 4;
  if (has_username()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // required int32 zoneid = 5;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->zoneid(), target);
  }

  // required int32 userid = 6;
  if (has_userid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->userid(), target);
  }

  // required int32 playerid = 7;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->playerid(), target);
  }

  // required string job = 8;
  if (has_job()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->job().data(), this->job().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->job(), target);
  }

  // required .LoginReq.LoginType loginType = 9;
  if (has_logintype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      9, this->logintype(), target);
  }

  // required int32 authType = 10;
  if (has_authtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->authtype(), target);
  }

  // required string authKey = 11;
  if (has_authkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->authkey().data(), this->authkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->authkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 clientVersion = 1;
    if (has_clientversion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clientversion());
    }

    // required string deviceid = 2;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

    // required string notifyid = 3;
    if (has_notifyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notifyid());
    }

    // required string username = 4;
    if (has_username()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required int32 zoneid = 5;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zoneid());
    }

    // required int32 userid = 6;
    if (has_userid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->userid());
    }

    // required int32 playerid = 7;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerid());
    }

    // required string job = 8;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->job());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .LoginReq.LoginType loginType = 9;
    if (has_logintype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->logintype());
    }

    // required int32 authType = 10;
    if (has_authtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->authtype());
    }

    // required string authKey = 11;
    if (has_authkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->authkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginReq::MergeFrom(const LoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clientversion()) {
      set_clientversion(from.clientversion());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
    if (from.has_notifyid()) {
      set_notifyid(from.notifyid());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
    if (from.has_userid()) {
      set_userid(from.userid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_logintype()) {
      set_logintype(from.logintype());
    }
    if (from.has_authtype()) {
      set_authtype(from.authtype());
    }
    if (from.has_authkey()) {
      set_authkey(from.authkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginReq::CopyFrom(const LoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void LoginReq::Swap(LoginReq* other) {
  if (other != this) {
    std::swap(clientversion_, other->clientversion_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(notifyid_, other->notifyid_);
    std::swap(username_, other->username_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(userid_, other->userid_);
    std::swap(playerid_, other->playerid_);
    std::swap(job_, other->job_);
    std::swap(logintype_, other->logintype_);
    std::swap(authtype_, other->authtype_);
    std::swap(authkey_, other->authkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginReq_descriptor_;
  metadata.reflection = LoginReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
